/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Agents Runagent", async () => {
  const testHttpClient = createTestHTTPClient("runagent");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.agents.runagent({
    runAgentRequest: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    messages: [
      {
        author: "USER",
        citations: [
          {
            sourceDocument: {
              metadata: {
                datasource: "datasource",
                objectType: "Feature Request",
                container: "container",
                parentId: "JIRA_EN-1337",
                mimeType: "mimeType",
                documentId: "documentId",
                createTime: new Date("2000-01-23T04:56:07.000Z"),
                updateTime: new Date("2000-01-23T04:56:07.000Z"),
                author: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                  relatedDocuments: [],
                  metadata: {
                    type: "FULL_TIME",
                    title: "Actor",
                    department: "Movies",
                    email: "george@example.com",
                    location: "Hollywood, CA",
                    phone: "6505551234",
                    photoUrl: "https://example.com/george.jpg",
                    startDate: new RFCDate("2000-01-23"),
                    datasourceProfile: [
                      {
                        datasource: "github",
                        handle: "<value>",
                      },
                    ],
                    querySuggestions: {
                      suggestions: [],
                    },
                    inviteInfo: {
                      invites: [],
                    },
                    customFields: [],
                    badges: [
                      {
                        key: "deployment_name_new_hire",
                        displayName: "New hire",
                        iconConfig: {
                          color: "#343CED",
                          key: "person_icon",
                          iconType: "GLYPH",
                          name: "user",
                        },
                      },
                    ],
                  },
                },
                owner: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                mentionedPeople: [],
                components: [
                  "Backend",
                  "Networking",
                ],
                status: "[\"Done\"]",
                pins: [],
                assignedTo: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                updatedBy: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                collections: [],
                interactions: {
                  reacts: [],
                  shares: [],
                },
                verification: {
                  state: "VERIFIED",
                  metadata: {
                    lastVerifier: {
                      name: "George Clooney",
                      obfuscatedId: "abc123",
                    },
                    reminders: [],
                    lastReminder: {
                      assignee: {
                        name: "George Clooney",
                        obfuscatedId: "abc123",
                      },
                      requestor: {
                        name: "George Clooney",
                        obfuscatedId: "abc123",
                      },
                      remindAt: 906369,
                    },
                    candidateVerifiers: [],
                  },
                },
                customData: {
                  "someCustomField": {},
                },
                contactPerson: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
              },
            },
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            sourcePerson: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            referenceRanges: [
              {
                textRange: {
                  startIndex: 540779,
                  document: {},
                },
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
        ],
        fragments: [
          {
            structuredResults: [
              {
                person: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                customer: {
                  id: "<id>",
                  company: {
                    name: "<value>",
                    location: "New York City",
                    industry: "Finances",
                    about:
                      "Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                  },
                  poc: [],
                  notes: "CIO is interested in trying out the product.",
                },
                team: {
                  id: "<id>",
                  name: "<value>",
                  members: [],
                  datasourceProfiles: [
                    {
                      datasource: "github",
                      handle: "<value>",
                    },
                  ],
                  status: "PROCESSED",
                  canBeDeleted: true,
                },
                customEntity: {
                  roles: [],
                },
                answer: {
                  id: 3,
                  docId: "ANSWERS_answer_3",
                  question: "Why is the sky blue?",
                  bodyText:
                    "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  addedRoles: [],
                  removedRoles: [],
                  combinedAnswerText: {
                    text:
                      "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    structuredList: [],
                  },
                  likes: {
                    likedBy: [],
                    likedByUser: false,
                    numLikes: 320829,
                  },
                  board: {
                    name: "<value>",
                    description: "transcend however notwithstanding",
                    audienceFilters: [
                      {
                        fieldName: "type",
                        values: [
                          {
                            value: "Spreadsheet",
                            relationType: "EQUALS",
                          },
                          {
                            value: "Presentation",
                            relationType: "EQUALS",
                          },
                        ],
                      },
                    ],
                    id: 992075,
                    creator: {
                      name: "George Clooney",
                      obfuscatedId: "abc123",
                    },
                  },
                },
                extractedQnA: {
                  questionResult: {
                    title: "title",
                    url: "https://example.com/foo/bar",
                    nativeAppUrl: "slack://foo/bar",
                    relatedResults: [],
                    allClusteredResults: [],
                    mustIncludeSuggestions: {},
                    querySuggestion: {
                      query: "app:github type:pull author:mortimer",
                      searchProviderInfo: {
                        name: "Google",
                        searchLinkUrlTemplate:
                          "https://www.google.com/search?q={query}&hl=en",
                      },
                      label: "Mortimer's PRs",
                      datasource: "github",
                      requestOptions: {
                        datasourceFilter: "JIRA",
                        datasourcesFilter: [
                          "JIRA",
                        ],
                        queryOverridesFacetFilters: true,
                        facetFilters: [
                          {
                            fieldName: "type",
                            values: [
                              {
                                value: "Spreadsheet",
                                relationType: "EQUALS",
                              },
                              {
                                value: "Presentation",
                                relationType: "EQUALS",
                              },
                            ],
                          },
                        ],
                        facetFilterSets: [
                          {
                            filters: [
                              {
                                fieldName: "type",
                                values: [
                                  {
                                    value: "Spreadsheet",
                                    relationType: "EQUALS",
                                  },
                                  {
                                    value: "Presentation",
                                    relationType: "EQUALS",
                                  },
                                ],
                              },
                            ],
                          },
                          {
                            filters: [
                              {
                                fieldName: "type",
                                values: [
                                  {
                                    value: "Spreadsheet",
                                    relationType: "EQUALS",
                                  },
                                  {
                                    value: "Presentation",
                                    relationType: "EQUALS",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                        facetBucketSize: 694801,
                        authTokens: [
                          {
                            accessToken: "123abc",
                            datasource: "gmail",
                            scope:
                              "email profile https://www.googleapis.com/auth/gmail.readonly",
                            tokenType: "Bearer",
                            authUser: "1",
                          },
                        ],
                      },
                      ranges: [],
                      inputDetails: {
                        hasCopyPaste: true,
                      },
                    },
                  },
                },
                meeting: {
                  attendees: {
                    people: [],
                  },
                },
                collection: {
                  name: "<value>",
                  description: "cauliflower pop so",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  id: 511700,
                  items: [],
                  children: [],
                },
                answerBoard: {
                  name: "<value>",
                  description: "sour loosely wherever commodity",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  id: 51997,
                },
                code: {
                  repoName: "scio",
                  fileName: "README.md",
                  lines: [],
                },
                relatedQuestion: {},
              },
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Gregg.Turner",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "ACTION",
                name: "<value>",
                displayName: "Bethel_Blick23",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
        ],
        messageType: "CONTENT",
      },
      {
        author: "USER",
        citations: [
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
        ],
        fragments: [
          {
            structuredResults: [
              {},
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Eloisa_Bode",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Brandy_Langworth",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
        ],
        messageType: "CONTENT",
      },
    ],
    backendTimeMillis: 1100,
  });
});

test("Agents Listagents", async () => {
  const testHttpClient = createTestHTTPClient("listagents");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.agents.listagents({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    agents: [
      {
        agent: {
          author: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [
                {
                  datasource: "github",
                  handle: "<value>",
                },
                {
                  datasource: "github",
                  handle: "<value>",
                },
                {
                  datasource: "github",
                  handle: "<value>",
                },
              ],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [
                {
                  key: "deployment_name_new_hire",
                  displayName: "New hire",
                  iconConfig: {
                    color: "#343CED",
                    key: "person_icon",
                    iconType: "GLYPH",
                    name: "user",
                  },
                },
              ],
            },
          },
          lastUpdatedBy: {
            name: "George Clooney",
            obfuscatedId: "abc123",
          },
        },
      },
      {
        agent: {},
      },
      {
        agent: {},
      },
    ],
  });
});

test("Agents Getagentinputs", async () => {
  const testHttpClient = createTestHTTPClient("getagentinputs");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.agents.getagentinputs({
    getAgentInputsRequest: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
