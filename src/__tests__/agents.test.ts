/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Agents Runagent", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step runagent.test referencing operation runagent not found in document`]",
  );
});

it.skip("Agents Listagents", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step listagents.test referencing operation listagents not found in document`]",
  );
});

it.skip("Agents Getagentinputs", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step getagentinputs.test referencing operation getagentinputs not found in document`]",
  );
});

test("Agents Get Agent", async () => {
  const testHttpClient = createTestHTTPClient("getAgent");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  const result = await glean.client.agents.retrieve("<id>");
  expect(result).toBeDefined();
});

test("Agents Get Agent Schemas", async () => {
  const testHttpClient = createTestHTTPClient("getAgentSchemas");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  const result = await glean.client.agents.retrieveSchemas("<id>");
  expect(result).toBeDefined();
});

test("Agents Search Agents", async () => {
  const testHttpClient = createTestHTTPClient("searchAgents");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  const result = await glean.client.agents.list({});
  expect(result).toBeDefined();
});

it.skip("Agents Create And Stream Run", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step createAndStreamRun.test referencing operation createAndStreamRun is not currently supported`]",
  );
});

test("Agents Create And Wait Run", async () => {
  const testHttpClient = createTestHTTPClient("createAndWaitRun");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  const result = await glean.client.agents.run({});
  expect(result).toBeDefined();
});
