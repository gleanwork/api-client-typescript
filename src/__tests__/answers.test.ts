/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Answers Createanswer", async () => {
  const testHttpClient = createTestHTTPClient("createanswer");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.answers.create({
    createAnswerRequest: {
      data: {
        question: "Why is the sky blue?",
        bodyText:
          "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
        audienceFilters: [
          {
            fieldName: "type",
            values: [
              {
                value: "Spreadsheet",
                relationType: "EQUALS",
              },
              {
                value: "Presentation",
                relationType: "EQUALS",
              },
            ],
          },
        ],
        addedRoles: [
          {
            person: {
              name: "George Clooney",
              obfuscatedId: "abc123",
              relatedDocuments: [],
              metadata: {
                type: "FULL_TIME",
                title: "Actor",
                department: "Movies",
                email: "george@example.com",
                location: "Hollywood, CA",
                managementChain: [],
                phone: "6505551234",
                photoUrl: "https://example.com/george.jpg",
                reports: [],
                startDate: new RFCDate("2000-01-23"),
                datasourceProfile: [],
                querySuggestions: {
                  suggestions: [],
                },
                inviteInfo: {
                  invites: [],
                },
                customFields: [],
                badges: [],
              },
            },
            role: "EDITOR",
          },
          {
            role: "EDITOR",
          },
        ],
        removedRoles: [
          {
            role: "EDITOR",
          },
          {
            role: "EDITOR",
          },
        ],
        roles: [
          {
            role: "ANSWER_MODERATOR",
          },
          {
            role: "ANSWER_MODERATOR",
          },
        ],
        combinedAnswerText: {
          text:
            "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
        },
      },
    },
  });
  expect(result).toBeDefined();
});

test("Answers Deleteanswer", async () => {
  const testHttpClient = createTestHTTPClient("deleteanswer");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.answers.delete({
    deleteAnswerRequest: {
      id: 3,
      docId: "ANSWERS_answer_3",
    },
  });
});

test("Answers Editanswer", async () => {
  const testHttpClient = createTestHTTPClient("editanswer");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.answers.edit({
    editAnswerRequest: {
      id: 3,
      docId: "ANSWERS_answer_3",
      question: "Why is the sky blue?",
      bodyText:
        "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
      audienceFilters: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
      addedRoles: [
        {
          person: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              managementChain: [],
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              reports: [],
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [],
            },
          },
          role: "EDITOR",
        },
      ],
      removedRoles: [
        {
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
      ],
      roles: [
        {
          role: "ANSWER_MODERATOR",
        },
        {
          role: "ANSWER_MODERATOR",
        },
        {
          role: "ANSWER_MODERATOR",
        },
      ],
      combinedAnswerText: {
        text:
          "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
      },
    },
  });
  expect(result).toBeDefined();
});

test("Answers Getanswer", async () => {
  const testHttpClient = createTestHTTPClient("getanswer");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.answers.get({
    getAnswerRequest: {
      id: 3,
      docId: "ANSWERS_answer_3",
    },
  });
  expect(result).toBeDefined();
});

test("Answers Listanswers", async () => {
  const testHttpClient = createTestHTTPClient("listanswers");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.answers.list({
    listAnswersRequest: {},
  });
  expect(result).toBeDefined();
});

it.skip("Answers Previewanswer", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step previewanswer.test referencing operation previewanswer not found in document`]",
  );
});

it.skip("Answers Previewanswerdraft", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step previewanswerdraft.test referencing operation previewanswerdraft not found in document`]",
  );
});

it.skip("Answers Updateanswerlikes", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step updateanswerlikes.test referencing operation updateanswerlikes not found in document`]",
  );
});

it.skip("Answers Createanswerboard", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step createanswerboard.test referencing operation createanswerboard not found in document`]",
  );
});

it.skip("Answers Deleteanswerboards", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step deleteanswerboards.test referencing operation deleteanswerboards not found in document`]",
  );
});

it.skip("Answers Editanswerboard", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step editanswerboard.test referencing operation editanswerboard not found in document`]",
  );
});

it.skip("Answers Getanswerboard", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step getanswerboard.test referencing operation getanswerboard not found in document`]",
  );
});

it.skip("Answers Listanswerboards", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step listanswerboards.test referencing operation listanswerboards not found in document`]",
  );
});
