/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Authentication Createanonymoustoken", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step createanonymoustoken.test referencing operation createanonymoustoken not found in document`]",
  );
});

test("Authentication Createauthtoken", async () => {
  const testHttpClient = createTestHTTPClient("createauthtoken");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.authentication.createToken({});
  expect(result).toBeDefined();
});

it.skip("Authentication Post /Rotatetoken", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/rotatetoken.test referencing operation post_/rotatetoken not found in document`]",
  );
});

test("Authentication Post /Api/index/v1 /Rotatetoken", async () => {
  const testHttpClient = createTestHTTPClient("post_/api/index/v1/rotatetoken");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.indexing.authentication.rotateToken();
  expect(result).toBeDefined();
});
