/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Chat Ask", async () => {
  const testHttpClient = createTestHTTPClient("ask");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.ask({
    askRequest: {
      detectOnly: true,
      askExperimentalMetadata: {
        queryHasMentions: true,
        queryIsLengthAppropriate: true,
        queryIsAnswerable: true,
      },
      searchRequest: {
        trackingToken: "trackingToken",
        pageSize: 10,
        query: "vacation policy",
        requestOptions: {
          facetFilters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "article",
                  relationType: "EQUALS",
                },
                {
                  value: "document",
                  relationType: "EQUALS",
                },
              ],
            },
            {
              fieldName: "department",
              values: [],
            },
          ],
          facetBucketSize: 250170,
        },
      },
      excludedDocumentSpecs: [
        {
          url: "string",
        },
      ],
      operators: "string",
      backend: "SEARCH",
      chatApplicationId: "string",
      inclusions: {
        containerSpecs: [
          {
            url: "string",
          },
        ],
        documentSpecs: [
          {
            url: "string",
          },
        ],
        datasourceInstances: [
          "string",
        ],
      },
      exclusions: {
        containerSpecs: [],
        documentSpecs: [],
        datasourceInstances: [
          "string",
        ],
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    isQuestion: true,
    question: "string",
    searchResponse: {
      trackingToken: "trackingToken",
      results: [
        {
          title: "title",
          url: "https://www.example.com/",
          snippets: [],
        },
        {
          title: "title",
          url: "https://www.example.com/",
        },
      ],
      errorInfo: {
        errorMessages: [
          {
            source: "gmail",
            errorMessage: "invalid token",
          },
          {
            source: "slack",
            errorMessage: "expired token",
          },
        ],
      },
      requestID:
        "5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100",
      facetResults: [
        {
          sourceName: "sourceName",
          operatorName: "operatorName",
          buckets: [
            {
              count: 1,
              percentage: 5,
              value: {
                stringValue: "stringValue",
                integerValue: 5,
              },
            },
            {
              count: 1,
              percentage: 5,
              value: {
                stringValue: "stringValue",
                integerValue: 5,
              },
            },
          ],
        },
        {
          sourceName: "sourceName",
          operatorName: "operatorName",
          buckets: [],
        },
      ],
      rewrittenFacetFilters: [
        {
          fieldName: "fieldName",
          values: [
            {},
            {},
          ],
        },
        {
          fieldName: "fieldName",
          values: [],
        },
      ],
      hasMoreResults: true,
    },
    chatResponse: {
      messages: [
        {
          agentConfig: {
            agent: "DEFAULT",
            mode: "DEFAULT",
          },
          author: "USER",
          citations: [
            {
              trackingToken: "string",
              sourceDocument: {
                id: "string",
                datasource: "string",
                connectorType: "API_CRAWL",
                docType: "string",
                content: {
                  fullTextList: [],
                },
                title: "string",
                url: "string",
                metadata: {
                  datasource: "datasource",
                  objectType: "Feature Request",
                  container: "container",
                  parentId: "JIRA_EN-1337",
                  mimeType: "mimeType",
                  documentId: "documentId",
                  createTime: new Date("2000-01-23T04:56:07.000Z"),
                  updateTime: new Date("2000-01-23T04:56:07.000Z"),
                  author: {
                    name: "name",
                    obfuscatedId: "<id>",
                  },
                  components: [
                    "Backend",
                    "Networking",
                  ],
                  status: "[\"Done\"]",
                  customData: {
                    "someCustomField": {},
                  },
                },
                sections: [
                  {},
                ],
              },
              sourceFile: {
                id: "FILE_1234",
                url: "www.google.com",
                name: "sample.pdf",
                metadata: {
                  status: "DELETED",
                  uploadTime: 291836,
                  processedSize: 865078,
                  failureReason: "FILE_METADATA_VALIDATION_FAIL",
                  mimeType: "<value>",
                },
              },
              sourcePerson: {
                name: "George Clooney",
                obfuscatedId: "abc123",
              },
              referenceRanges: [
                {
                  textRange: {
                    startIndex: 87873,
                    document: {},
                  },
                  snippets: [],
                },
              ],
            },
          ],
          uploadedFileIds: [
            "string",
          ],
          fragments: [
            {
              structuredResults: [
                {
                  person: {
                    name: "<value>",
                    obfuscatedId: "<id>",
                    relatedDocuments: [],
                    metadata: {
                      title: "Actor",
                      department: "Movies",
                      email: "george@example.com",
                      location: "Hollywood, CA",
                      phone: "6505551234",
                      photoUrl: "https://example.com/george.jpg",
                      startDate: new RFCDate("2000-01-23"),
                    },
                  },
                  customer: {
                    id: "<id>",
                    company: {
                      name: "<value>",
                      location: "New York City",
                      industry: "Finances",
                      about:
                        "Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                    },
                    poc: [],
                    notes: "CIO is interested in trying out the product.",
                  },
                  team: {
                    id: "<id>",
                    name: "<value>",
                    members: [],
                    datasourceProfiles: [
                      {
                        datasource: "github",
                        handle: "<value>",
                      },
                      {
                        datasource: "github",
                        handle: "<value>",
                      },
                      {
                        datasource: "github",
                        handle: "<value>",
                      },
                    ],
                    status: "PROCESSED",
                    canBeDeleted: true,
                  },
                  customEntity: {
                    roles: [],
                  },
                  answer: {
                    id: 3,
                    docId: "ANSWERS_answer_3",
                    question: "Why is the sky blue?",
                    bodyText:
                      "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    audienceFilters: [],
                    addedRoles: [],
                    removedRoles: [],
                    combinedAnswerText: {
                      text:
                        "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                      structuredList: [],
                    },
                    likes: {
                      likedBy: [],
                      likedByUser: true,
                      numLikes: 22508,
                    },
                    updatedBy: {
                      name: "George Clooney",
                      obfuscatedId: "abc123",
                    },
                    verification: {
                      state: "UNVERIFIED",
                      metadata: {
                        lastVerifier: {
                          name: "George Clooney",
                          obfuscatedId: "abc123",
                        },
                        reminders: [],
                        lastReminder: {
                          assignee: {
                            name: "George Clooney",
                            obfuscatedId: "abc123",
                          },
                          requestor: {
                            name: "George Clooney",
                            obfuscatedId: "abc123",
                          },
                          remindAt: 129663,
                        },
                        candidateVerifiers: [],
                      },
                    },
                    board: {
                      name: "<value>",
                      description: "over aha if unless fooey unbearably",
                      audienceFilters: [],
                      id: 342305,
                      creator: {
                        name: "George Clooney",
                        obfuscatedId: "abc123",
                      },
                    },
                    collections: [],
                  },
                  extractedQnA: {
                    questionResult: {
                      title: "title",
                      url: "https://example.com/foo/bar",
                      nativeAppUrl: "slack://foo/bar",
                    },
                  },
                  meeting: {
                    attendees: {
                      people: [],
                    },
                  },
                  app: {
                    datasource: "<value>",
                  },
                  collection: {
                    name: "<value>",
                    description: "because almighty an",
                    audienceFilters: [],
                    id: 822820,
                    items: [],
                  },
                  answerBoard: {
                    name: "<value>",
                    description:
                      "labourer row toward meanwhile instead mostly after along contravene filthy",
                    audienceFilters: [
                      {
                        fieldName: "type",
                        values: [],
                      },
                    ],
                    id: 609947,
                  },
                  code: {
                    lines: [],
                  },
                  shortcut: {
                    inputAlias: "<value>",
                    destinationUrl: "https://unhappy-devastation.info/",
                    createdBy: "<value>",
                  },
                  querySuggestions: {
                    suggestions: [],
                  },
                  relatedQuestion: {
                    ranges: [],
                  },
                  trackingToken: "<value>",
                  prominence: "PROMOTED",
                  source: "ENTITY_NLQ",
                },
              ],
              trackingToken: "string",
              text: "string",
              querySuggestion: {
                query: "app:github type:pull author:mortimer",
                label: "Mortimer's PRs",
                datasource: "github",
              },
              file: {
                id: "FILE_1234",
                url: "www.google.com",
                name: "sample.pdf",
                metadata: {
                  status: "FAILED",
                  uploadTime: 804394,
                  processedSize: 701036,
                  failureReason: "FILE_EXTENSION_UNSUPPORTED",
                  mimeType: "<value>",
                },
              },
              action: {
                metadata: {
                  type: "ACTION",
                  name: "<value>",
                  displayName: "Odessa.Ebert",
                  toolId: "<id>",
                  displayDescription: "<value>",
                  logoUrl: "https://every-courtroom.org/",
                  objectName: "<value>",
                  knowledgeType: "WORLD_KNOWLEDGE",
                  createdBy: {
                    name: "<value>",
                    obfuscatedId: "<id>",
                  },
                  lastUpdatedBy: {
                    name: "<value>",
                    obfuscatedId: "<id>",
                  },
                  createdAt: new Date("2025-06-16T02:53:03.622Z"),
                  lastUpdatedAt: new Date("2023-09-10T15:01:40.188Z"),
                  writeActionType: "REDIRECT",
                  authType: "NONE",
                  usageInstructions: "<value>",
                  isSetupFinished: false,
                },
                parameters: {
                  "property1": {},
                  "property2": {},
                },
              },
            },
          ],
          ts: "string",
          messageId: "string",
          messageTrackingToken: "string",
          messageType: "UPDATE",
          hasMoreFragments: true,
        },
      ],
      chatId: "string",
      followUpPrompts: [
        "string",
      ],
      backendTimeMillis: 1100,
      chatSessionTrackingToken: "string",
    },
  });
});

test("Chat Chat Default Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-defaultExample");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [
        {
          fragments: [
            {
              text: "What are the company holidays this year?",
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual(
    "{\"messages\":[{\"author\":\"GLEAN_AI\",\"messageType\":\"CONTENT\",\"hasMoreFragments\":false,\"agentConfig\":{\"agent\":\"DEFAULT\",\"mode\":\"DEFAULT\"},\"fragments\":[{\"text\":\"There are no holidays!\"}]}]}",
  );
});

test("Chat Chat Gpt Agent Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-gptAgentExample");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [
        {
          fragments: [
            {
              text: "Who was the first person to land on the moon?",
            },
          ],
        },
      ],
      agentConfig: {
        agent: "GPT",
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual("<value>");
});

test("Chat Chat Streaming Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-streamingExample");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [],
      timeoutMillis: 30000,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual(
    "{\"messages\":[{\"author\":\"GLEAN_AI\",\"messageType\":\"CONTENT\",\"agentConfig\":{\"agent\":\"DEFAULT\",\"mode\":\"DEFAULT\",\"hasMoreFragments\":true},\"fragments\":null},{\"author\":\"GLEAN_AI\",\"messageType\":\"CONTENT\",\"agentConfig\":{\"agent\":\"DEFAULT\",\"mode\":\"DEFAULT\",\"hasMoreFragments\":true},\"fragments\":null},{\"author\":\"GLEAN_AI\",\"messageType\":\"CONTENT\",\"agentConfig\":{\"agent\":\"DEFAULT\",\"mode\":\"DEFAULT\",\"hasMoreFragments\":true},\"fragments\":[{\"text\":\"e are\"}]},{\"author\":\"GLEAN_AI\",\"messageType\":\"CONTENT\",\"agentConfig\":{\"agent\":\"DEFAULT\",\"mode\":\"DEFAULT\",\"hasMoreFragments\":true},\"fragments\":[{\"text\":\"no hol\"}]},{\"author\":\"GLEAN_AI\",\"messageType\":\"CONTENT\",\"agentConfig\":{\"agent\":\"DEFAULT\",\"mode\":\"DEFAULT\",\"hasMoreFragments\":false},\"fragments\":[{\"text\":\"idays!\"}]}]}",
  );
});

test("Chat Chat Update Response", async () => {
  const testHttpClient = createTestHTTPClient("chat-updateResponse");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [],
      timeoutMillis: 30000,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual(
    "{\"messages\":[{\"author\":\"GLEAN_AI\",\"messageType\":\"UPDATE\",\"agentConfig\":{\"agent\":\"DEFAULT\",\"mode\":\"DEFAULT\"},\"fragments\":[{\"text\":\"**Reading:**\"},{\"structuredResults\":[{\"document\":{\"id\":\"123\",\"title\":\"Company Handbook\"}}]}]}]}",
  );
});

test("Chat Chat Citation Response", async () => {
  const testHttpClient = createTestHTTPClient("chat-citationResponse");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [],
      timeoutMillis: 30000,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual(
    "{\"messages\":[{\"author\":\"GLEAN_AI\",\"messageType\":\"CONTENT\",\"agentConfig\":{\"agent\":\"DEFAULT\",\"mode\":\"DEFAULT\"},\"citations\":[{\"sourceDocument\":{\"id\":\"123\",\"title\":\"Company Handbook\",\"referenceRanges\":[{\"textRange\":{\"startIndex\":0,\"endIndex\":12,\"type\":\"CITATION\"}}]}}]}]}",
  );
});

test("Chat Deleteallchats", async () => {
  const testHttpClient = createTestHTTPClient("deleteallchats");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.deleteAll({});
});

test("Chat Deletechats", async () => {
  const testHttpClient = createTestHTTPClient("deletechats");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.delete({
    deleteChatsRequest: {
      ids: [
        "<value>",
        "<value>",
      ],
    },
  });
});

test("Chat Listchats", async () => {
  const testHttpClient = createTestHTTPClient("listchats");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.list({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    chatResults: [
      {
        chat: {
          createdBy: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [
                {
                  datasource: "github",
                  handle: "<value>",
                },
                {
                  datasource: "github",
                  handle: "<value>",
                },
                {
                  datasource: "github",
                  handle: "<value>",
                },
              ],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [
                {
                  key: "deployment_name_new_hire",
                  displayName: "New hire",
                  iconConfig: {
                    color: "#343CED",
                    key: "person_icon",
                    iconType: "GLYPH",
                    name: "user",
                  },
                },
              ],
            },
          },
          icon: {
            color: "#343CED",
            key: "person_icon",
            iconType: "GLYPH",
            name: "user",
          },
        },
      },
      {
        chat: {
          icon: {
            color: "#343CED",
            key: "person_icon",
            iconType: "GLYPH",
            name: "user",
          },
        },
      },
      {
        chat: {
          icon: {
            color: "#343CED",
            key: "person_icon",
            iconType: "GLYPH",
            name: "user",
          },
        },
      },
    ],
  });
});

test("Chat Getchatapplication", async () => {
  const testHttpClient = createTestHTTPClient("getchatapplication");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.getApplication({
    getChatApplicationRequest: {
      id: "<id>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Chat Uploadchatfiles", async () => {
  const testHttpClient = createTestHTTPClient("uploadchatfiles");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.uploadFiles({
    uploadChatFilesRequest: {
      files: [],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    files: [
      {
        id: "FILE_1234",
        url: "www.google.com",
        name: "sample.pdf",
      },
    ],
  });
});

test("Chat Getchatfiles", async () => {
  const testHttpClient = createTestHTTPClient("getchatfiles");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.getFiles({
    getChatFilesRequest: {
      fileIds: [
        "<value>",
        "<value>",
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    files: {
      "key": {
        id: "FILE_1234",
        url: "www.google.com",
        name: "sample.pdf",
      },
      "key1": {
        id: "FILE_1234",
        url: "www.google.com",
        name: "sample.pdf",
      },
      "key2": {
        id: "FILE_1234",
        url: "www.google.com",
        name: "sample.pdf",
      },
    },
  });
});

test("Chat Deletechatfiles", async () => {
  const testHttpClient = createTestHTTPClient("deletechatfiles");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.deleteFiles({
    deleteChatFilesRequest: {
      fileIds: [
        "<value>",
      ],
    },
  });
});

it.skip("Chat Delete All Chats", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step deleteAllChats.test referencing operation deleteAllChats not found in document`]",
  );
});
