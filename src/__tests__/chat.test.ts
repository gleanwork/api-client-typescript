/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Chat Ask", async () => {
  const testHttpClient = createTestHTTPClient("ask");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.ask({
    askRequest: {
      detectOnly: true,
      askExperimentalMetadata: {
        queryHasMentions: true,
        queryIsLengthAppropriate: true,
        queryIsAnswerable: true,
      },
      searchRequest: {
        trackingToken: "trackingToken",
        pageSize: 10,
        query: "vacation policy",
        requestOptions: {
          facetFilters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "article",
                  relationType: "EQUALS",
                },
                {
                  value: "document",
                  relationType: "EQUALS",
                },
              ],
            },
            {
              fieldName: "department",
              values: [],
            },
          ],
          facetBucketSize: 250170,
        },
      },
      excludedDocumentSpecs: [
        {
          url: "string",
        },
      ],
      operators: "string",
      backend: "SEARCH",
      chatApplicationId: "string",
      inclusions: {
        containerSpecs: [
          {
            url: "string",
          },
        ],
        documentSpecs: [
          {
            url: "string",
          },
        ],
        datasourceInstances: [
          "string",
        ],
      },
      exclusions: {
        containerSpecs: [],
        documentSpecs: [],
        datasourceInstances: [
          "string",
        ],
      },
    },
  });
  expect(result).toBeDefined();
});

test("Chat Chat Default Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-defaultExample");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [
        {
          fragments: [
            {
              text: "What are the company holidays this year?",
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Chat Chat Gpt Agent Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-gptAgentExample");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [
        {
          fragments: [
            {
              text: "Who was the first person to land on the moon?",
            },
          ],
        },
      ],
      agentConfig: {
        agent: "GPT",
      },
    },
  });
  expect(result).toBeDefined();
});

test("Chat Chat Streaming Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-streamingExample");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [],
      timeoutMillis: 30000,
    },
  });
  expect(result).toBeDefined();
});

test("Chat Chat Update Response", async () => {
  const testHttpClient = createTestHTTPClient("chat-updateResponse");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [],
      timeoutMillis: 30000,
    },
  });
  expect(result).toBeDefined();
});

test("Chat Chat Citation Response", async () => {
  const testHttpClient = createTestHTTPClient("chat-citationResponse");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    chatRequest: {
      messages: [],
      timeoutMillis: 30000,
    },
  });
  expect(result).toBeDefined();
});

test("Chat Deleteallchats", async () => {
  const testHttpClient = createTestHTTPClient("deleteallchats");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.deleteAll({});
});

test("Chat Deletechats", async () => {
  const testHttpClient = createTestHTTPClient("deletechats");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.delete({
    deleteChatsRequest: {
      ids: [
        "<value>",
        "<value>",
      ],
    },
  });
});

test("Chat Listchats", async () => {
  const testHttpClient = createTestHTTPClient("listchats");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.list({});
  expect(result).toBeDefined();
});

test("Chat Getchatapplication", async () => {
  const testHttpClient = createTestHTTPClient("getchatapplication");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.getApplication({
    getChatApplicationRequest: {
      id: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Chat Uploadchatfiles", async () => {
  const testHttpClient = createTestHTTPClient("uploadchatfiles");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.uploadFiles({
    uploadChatFilesRequest: {
      files: [],
    },
  });
  expect(result).toBeDefined();
});

test("Chat Getchatfiles", async () => {
  const testHttpClient = createTestHTTPClient("getchatfiles");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.getFiles({
    getChatFilesRequest: {
      fileIds: [
        "<value>",
        "<value>",
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Chat Deletechatfiles", async () => {
  const testHttpClient = createTestHTTPClient("deletechatfiles");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.deleteFiles({
    deleteChatFilesRequest: {
      fileIds: [
        "<value>",
      ],
    },
  });
});

it.skip("Chat Delete All Chats", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step deleteAllChats.test referencing operation deleteAllChats not found in document`]",
  );
});
