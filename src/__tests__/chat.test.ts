/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Chat Chat Default Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-defaultExample");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    messages: [
      {
        fragments: [
          {
            text: "What are the company holidays this year?",
          },
        ],
      },
    ],
  });
  expect(result).toBeDefined();
});

test("Chat Chat Gpt Agent Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-gptAgentExample");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    messages: [
      {
        fragments: [
          {
            text: "Who was the first person to land on the moon?",
          },
        ],
      },
    ],
    agentConfig: {
      agent: "GPT",
    },
  });
  expect(result).toBeDefined();
});

test("Chat Chat Streaming Example", async () => {
  const testHttpClient = createTestHTTPClient("chat-streamingExample");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    messages: [],
    timeoutMillis: 30000,
  });
  expect(result).toBeDefined();
});

test("Chat Chat Update Response", async () => {
  const testHttpClient = createTestHTTPClient("chat-updateResponse");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    messages: [
      {
        citations: [
          {
            sourceDocument: {
              metadata: {
                datasource: "datasource",
                objectType: "Feature Request",
                container: "container",
                parentId: "JIRA_EN-1337",
                mimeType: "mimeType",
                documentId: "documentId",
                createTime: new Date("2000-01-23T04:56:07.000Z"),
                updateTime: new Date("2000-01-23T04:56:07.000Z"),
                author: {
                  name: "name",
                  obfuscatedId: "<id>",
                },
                components: [
                  "Backend",
                  "Networking",
                ],
                status: "[\"Done\"]",
                customData: {
                  "someCustomField": {},
                },
              },
            },
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            sourcePerson: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            referenceRanges: [
              {
                textRange: {
                  startIndex: 956313,
                  document: {},
                },
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
        ],
        fragments: [
          {
            structuredResults: [
              {
                person: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                customer: {
                  id: "<id>",
                  company: {
                    name: "<value>",
                    location: "New York City",
                    industry: "Finances",
                    about:
                      "Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                  },
                  poc: [],
                  notes: "CIO is interested in trying out the product.",
                },
                team: {
                  id: "<id>",
                  name: "<value>",
                  members: [],
                  datasourceProfiles: [
                    {
                      datasource: "github",
                      handle: "<value>",
                    },
                    {
                      datasource: "github",
                      handle: "<value>",
                    },
                    {
                      datasource: "github",
                      handle: "<value>",
                    },
                  ],
                },
                customEntity: {
                  roles: [],
                },
                answer: {
                  id: 3,
                  docId: "ANSWERS_answer_3",
                  question: "Why is the sky blue?",
                  bodyText:
                    "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  addedRoles: [],
                  removedRoles: [],
                  combinedAnswerText: {
                    text:
                      "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    structuredList: [],
                  },
                  likes: {
                    likedBy: [],
                    likedByUser: false,
                    numLikes: 798102,
                  },
                  updatedBy: {
                    name: "George Clooney",
                    obfuscatedId: "abc123",
                  },
                  verification: {
                    state: "VERIFIED",
                    metadata: {
                      lastVerifier: {
                        name: "George Clooney",
                        obfuscatedId: "abc123",
                      },
                      reminders: [],
                      lastReminder: {
                        assignee: {
                          name: "George Clooney",
                          obfuscatedId: "abc123",
                        },
                        requestor: {
                          name: "George Clooney",
                          obfuscatedId: "abc123",
                        },
                        remindAt: 961967,
                      },
                      candidateVerifiers: [],
                    },
                  },
                  board: {
                    name: "<value>",
                    description:
                      "not meh surprisingly too like embed dreamily verbally casement with",
                    audienceFilters: [
                      {
                        fieldName: "type",
                        values: [
                          {
                            value: "Spreadsheet",
                            relationType: "EQUALS",
                          },
                          {
                            value: "Presentation",
                            relationType: "EQUALS",
                          },
                        ],
                      },
                    ],
                    id: 756840,
                    creator: {
                      name: "George Clooney",
                      obfuscatedId: "abc123",
                    },
                  },
                  collections: [],
                },
                extractedQnA: {
                  questionResult: {
                    title: "title",
                    url: "https://example.com/foo/bar",
                    nativeAppUrl: "slack://foo/bar",
                  },
                },
                meeting: {
                  attendees: {
                    people: [],
                  },
                },
                collection: {
                  name: "<value>",
                  description: "daily forecast rapidly urgently slipper meh",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  id: 308354,
                  children: [],
                },
                answerBoard: {
                  name: "<value>",
                  description:
                    "frantically highlight thunderbolt defrag aside stitcher furthermore zealous",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  id: 87875,
                },
                code: {
                  repoName: "scio",
                  fileName: "README.md",
                },
                querySuggestions: {
                  suggestions: [],
                },
                relatedDocuments: [],
                relatedQuestion: {
                  ranges: [],
                },
              },
              {},
            ],
            querySuggestion: {
              query: "app:github type:pull author:mortimer",
              label: "Mortimer's PRs",
              datasource: "github",
            },
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Jarrell_Hudson65",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Bertha.Koepp",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "ACTION",
                name: "<value>",
                displayName: "Sheridan.Koss71",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
        ],
      },
      {
        citations: [
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
        ],
        fragments: [
          {
            structuredResults: [
              {},
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Zoe8",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "ACTION",
                name: "<value>",
                displayName: "Caterina70",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
        ],
      },
    ],
    timeoutMillis: 30000,
  });
  expect(result).toBeDefined();
});

test("Chat Chat Citation Response", async () => {
  const testHttpClient = createTestHTTPClient("chat-citationResponse");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.start({
    messages: [
      {
        citations: [
          {
            sourceDocument: {
              metadata: {
                datasource: "datasource",
                objectType: "Feature Request",
                container: "container",
                parentId: "JIRA_EN-1337",
                mimeType: "mimeType",
                documentId: "documentId",
                createTime: new Date("2000-01-23T04:56:07.000Z"),
                updateTime: new Date("2000-01-23T04:56:07.000Z"),
                author: {
                  name: "name",
                  obfuscatedId: "<id>",
                },
                components: [
                  "Backend",
                  "Networking",
                ],
                status: "[\"Done\"]",
                customData: {
                  "someCustomField": {},
                },
              },
            },
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            sourcePerson: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            referenceRanges: [
              {
                textRange: {
                  startIndex: 585176,
                  document: {},
                },
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
        ],
        fragments: [
          {
            structuredResults: [
              {
                person: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                customer: {
                  id: "<id>",
                  company: {
                    name: "<value>",
                    location: "New York City",
                    industry: "Finances",
                    about:
                      "Financial, software, data, and media company headquartered in Midtown Manhattan, New York City",
                  },
                  poc: [],
                  notes: "CIO is interested in trying out the product.",
                },
                team: {
                  id: "<id>",
                  name: "<value>",
                  members: [],
                  datasourceProfiles: [
                    {
                      datasource: "github",
                      handle: "<value>",
                    },
                    {
                      datasource: "github",
                      handle: "<value>",
                    },
                  ],
                },
                customEntity: {
                  roles: [],
                },
                answer: {
                  id: 3,
                  docId: "ANSWERS_answer_3",
                  question: "Why is the sky blue?",
                  bodyText:
                    "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  addedRoles: [],
                  removedRoles: [],
                  combinedAnswerText: {
                    text:
                      "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
                    structuredList: [],
                  },
                  likes: {
                    likedBy: [],
                    likedByUser: true,
                    numLikes: 294779,
                  },
                  updatedBy: {
                    name: "George Clooney",
                    obfuscatedId: "abc123",
                  },
                  verification: {
                    state: "DEPRECATED",
                    metadata: {
                      lastVerifier: {
                        name: "George Clooney",
                        obfuscatedId: "abc123",
                      },
                      reminders: [],
                      lastReminder: {
                        assignee: {
                          name: "George Clooney",
                          obfuscatedId: "abc123",
                        },
                        requestor: {
                          name: "George Clooney",
                          obfuscatedId: "abc123",
                        },
                        remindAt: 881610,
                      },
                      candidateVerifiers: [],
                    },
                  },
                  board: {
                    name: "<value>",
                    description: "slip receptor fork",
                    audienceFilters: [
                      {
                        fieldName: "type",
                        values: [
                          {
                            value: "Spreadsheet",
                            relationType: "EQUALS",
                          },
                          {
                            value: "Presentation",
                            relationType: "EQUALS",
                          },
                        ],
                      },
                    ],
                    id: 71022,
                    creator: {
                      name: "George Clooney",
                      obfuscatedId: "abc123",
                    },
                  },
                  collections: [],
                },
                extractedQnA: {
                  questionResult: {
                    title: "title",
                    url: "https://example.com/foo/bar",
                    nativeAppUrl: "slack://foo/bar",
                  },
                },
                meeting: {
                  attendees: {
                    people: [],
                  },
                },
                collection: {
                  name: "<value>",
                  description: "notarize equally hospitable",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  id: 889117,
                  children: [],
                },
                answerBoard: {
                  name: "<value>",
                  description:
                    "e-mail outstanding among voluntarily fooey badly beautifully",
                  audienceFilters: [
                    {
                      fieldName: "type",
                      values: [
                        {
                          value: "Spreadsheet",
                          relationType: "EQUALS",
                        },
                        {
                          value: "Presentation",
                          relationType: "EQUALS",
                        },
                      ],
                    },
                  ],
                  id: 900364,
                },
                code: {
                  repoName: "scio",
                  fileName: "README.md",
                },
                querySuggestions: {
                  suggestions: [],
                },
                relatedDocuments: [],
                relatedQuestion: {
                  ranges: [],
                },
              },
            ],
            querySuggestion: {
              query: "app:github type:pull author:mortimer",
              label: "Mortimer's PRs",
              datasource: "github",
            },
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "ACTION",
                name: "<value>",
                displayName: "Jamil_Koss",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Julien_Okuneva",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Eulalia31",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
        ],
      },
      {
        citations: [
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
          {
            sourceFile: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            referenceRanges: [
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
              {
                snippets: [
                  {
                    snippet: "snippet",
                    mimeType: "mimeType",
                  },
                ],
              },
            ],
          },
        ],
        fragments: [
          {
            structuredResults: [
              {},
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Eladio82",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "ACTION",
                name: "<value>",
                displayName: "Jeanne52",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
          {
            structuredResults: [
              {},
            ],
            file: {
              id: "FILE_1234",
              url: "www.google.com",
              name: "sample.pdf",
            },
            action: {
              metadata: {
                type: "RETRIEVAL",
                name: "<value>",
                displayName: "Naomie.Corkery",
                displayDescription: "<value>",
                objectName: "[\"HR ticket\",\"Email\",\"Chat message\"]",
              },
            },
          },
        ],
      },
    ],
    timeoutMillis: 30000,
  });
  expect(result).toBeDefined();
});

test("Chat Deleteallchats", async () => {
  const testHttpClient = createTestHTTPClient("deleteallchats");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.deleteAll();
});

test("Chat Deletechats", async () => {
  const testHttpClient = createTestHTTPClient("deletechats");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.delete({
    ids: [
      "<value>",
      "<value>",
    ],
  });
});

test("Chat Getchat", async () => {
  const testHttpClient = createTestHTTPClient("getchat");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.get({
    id: "<id>",
  });
  expect(result).toBeDefined();
});

test("Chat Listchats", async () => {
  const testHttpClient = createTestHTTPClient("listchats");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.list();
  expect(result).toBeDefined();
});

test("Chat Getchatapplication", async () => {
  const testHttpClient = createTestHTTPClient("getchatapplication");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.getApplication({
    id: "<id>",
  });
  expect(result).toBeDefined();
});

test("Chat Uploadchatfiles", async () => {
  const testHttpClient = createTestHTTPClient("uploadchatfiles");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.uploadFiles({
    files: [],
  });
  expect(result).toBeDefined();
});

test("Chat Getchatfiles", async () => {
  const testHttpClient = createTestHTTPClient("getchatfiles");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.chat.getFiles({
    fileIds: [
      "<value>",
      "<value>",
    ],
  });
  expect(result).toBeDefined();
});

test("Chat Deletechatfiles", async () => {
  const testHttpClient = createTestHTTPClient("deletechatfiles");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.chat.deleteFiles({
    fileIds: [
      "<value>",
    ],
  });
});
