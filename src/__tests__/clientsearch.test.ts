/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Client Search Feed", async () => {
  const testHttpClient = createTestHTTPClient("feed");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
  });

  const result = await glean.client.search.retrieveFeed({
    timeoutMillis: 5000,
  });
  expect(result).toBeDefined();
});

test("Client Search Recommendations", async () => {
  const testHttpClient = createTestHTTPClient("recommendations");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
  });

  const result = await glean.client.search.recommendations({
    sourceDocument: {
      metadata: {
        datasource: "datasource",
        objectType: "Feature Request",
        container: "container",
        parentId: "JIRA_EN-1337",
        mimeType: "mimeType",
        documentId: "documentId",
        createTime: new Date("2000-01-23T04:56:07.000Z"),
        updateTime: new Date("2000-01-23T04:56:07.000Z"),
        author: {
          name: "George Clooney",
          obfuscatedId: "abc123",
          relatedDocuments: [],
          metadata: {
            type: "FULL_TIME",
            title: "Actor",
            department: "Movies",
            email: "george@example.com",
            location: "Hollywood, CA",
            phone: "6505551234",
            photoUrl: "https://example.com/george.jpg",
            startDate: new RFCDate("2000-01-23"),
            datasourceProfile: [
              {
                datasource: "github",
                handle: "<value>",
              },
              {
                datasource: "github",
                handle: "<value>",
              },
            ],
            querySuggestions: {
              suggestions: [],
            },
            inviteInfo: {
              invites: [],
            },
            customFields: [],
            badges: [
              {
                key: "deployment_name_new_hire",
                displayName: "New hire",
                iconConfig: {
                  color: "#343CED",
                  key: "person_icon",
                  iconType: "GLYPH",
                  name: "user",
                },
              },
            ],
          },
        },
        owner: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
        mentionedPeople: [],
        components: [
          "Backend",
          "Networking",
        ],
        status: "[\"Done\"]",
        pins: [],
        assignedTo: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
        updatedBy: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
        collections: [],
        interactions: {
          reacts: [],
          shares: [],
        },
        verification: {
          state: "UNVERIFIED",
          metadata: {
            lastVerifier: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            reminders: [],
            lastReminder: {
              assignee: {
                name: "George Clooney",
                obfuscatedId: "abc123",
              },
              requestor: {
                name: "George Clooney",
                obfuscatedId: "abc123",
              },
              remindAt: 578719,
            },
            candidateVerifiers: [],
          },
        },
        shortcuts: [],
        customData: {
          "someCustomField": {},
        },
        contactPerson: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
      },
    },
    pageSize: 100,
    maxSnippetSize: 400,
    requestOptions: {
      facetFilterSets: [
        {
          filters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      ],
      context: {},
    },
  });
  expect(result).toBeDefined();
});

test("Client Search Search", async () => {
  const testHttpClient = createTestHTTPClient("search");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
  });

  const result = await glean.client.search.query({
    trackingToken: "trackingToken",
    sourceDocument: {
      metadata: {
        datasource: "datasource",
        objectType: "Feature Request",
        container: "container",
        parentId: "JIRA_EN-1337",
        mimeType: "mimeType",
        documentId: "documentId",
        createTime: new Date("2000-01-23T04:56:07.000Z"),
        updateTime: new Date("2000-01-23T04:56:07.000Z"),
        author: {
          name: "George Clooney",
          obfuscatedId: "abc123",
          relatedDocuments: [],
          metadata: {
            type: "FULL_TIME",
            title: "Actor",
            department: "Movies",
            email: "george@example.com",
            location: "Hollywood, CA",
            phone: "6505551234",
            photoUrl: "https://example.com/george.jpg",
            startDate: new RFCDate("2000-01-23"),
            datasourceProfile: [
              {
                datasource: "github",
                handle: "<value>",
              },
              {
                datasource: "github",
                handle: "<value>",
              },
            ],
            querySuggestions: {
              suggestions: [],
            },
            inviteInfo: {
              invites: [],
            },
            customFields: [],
            badges: [
              {
                key: "deployment_name_new_hire",
                displayName: "New hire",
                iconConfig: {
                  color: "#343CED",
                  key: "person_icon",
                  iconType: "GLYPH",
                  name: "user",
                },
              },
            ],
          },
        },
        owner: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
        mentionedPeople: [],
        components: [
          "Backend",
          "Networking",
        ],
        status: "[\"Done\"]",
        pins: [],
        assignedTo: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
        updatedBy: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
        collections: [],
        interactions: {
          reacts: [],
          shares: [],
        },
        verification: {
          state: "UNVERIFIED",
          metadata: {
            lastVerifier: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            reminders: [],
            lastReminder: {
              assignee: {
                name: "George Clooney",
                obfuscatedId: "abc123",
              },
              requestor: {
                name: "George Clooney",
                obfuscatedId: "abc123",
              },
              remindAt: 554738,
            },
            candidateVerifiers: [],
          },
        },
        shortcuts: [],
        customData: {
          "someCustomField": {},
        },
        contactPerson: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
      },
    },
    pageSize: 100,
    maxSnippetSize: 400,
    query: "vacation policy",
    inputDetails: {
      hasCopyPaste: true,
    },
    requestOptions: {
      datasourceFilter: "JIRA",
      datasourcesFilter: [
        "JIRA",
      ],
      queryOverridesFacetFilters: true,
      facetFilters: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
      facetFilterSets: [
        {
          filters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
        {
          filters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
        {
          filters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      ],
      facetBucketSize: 171751,
      authTokens: [
        {
          accessToken: "123abc",
          datasource: "gmail",
          scope: "email profile https://www.googleapis.com/auth/gmail.readonly",
          tokenType: "Bearer",
          authUser: "1",
        },
      ],
    },
    timeoutMillis: 5000,
    people: [
      {
        name: "George Clooney",
        obfuscatedId: "abc123",
      },
    ],
  });
  expect(result).toBeDefined();
});
