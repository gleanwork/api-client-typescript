/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Collections Addcollectionitems", async () => {
  const testHttpClient = createTestHTTPClient("addcollectionitems");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.collections.addItems({
    addCollectionItemsRequest: {
      collectionId: 6460.15,
    },
  });
  expect(result).toBeDefined();
});

test("Collections Createcollection", async () => {
  const testHttpClient = createTestHTTPClient("createcollection");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.collections.create({
    createCollectionRequest: {
      name: "<value>",
      addedRoles: [
        {
          person: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              managementChain: [],
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              reports: [],
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [],
            },
          },
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
      ],
      removedRoles: [
        {
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
      ],
      audienceFilters: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Collections Deletecollection", async () => {
  const testHttpClient = createTestHTTPClient("deletecollection");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.collections.delete({
    deleteCollectionRequest: {
      ids: [
        698486,
        386564,
      ],
    },
  });
});

test("Collections Deletecollectionitem", async () => {
  const testHttpClient = createTestHTTPClient("deletecollectionitem");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.collections.deleteItem({
    deleteCollectionItemRequest: {
      collectionId: 1357.59,
      itemId: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Collections Editcollection", async () => {
  const testHttpClient = createTestHTTPClient("editcollection");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.collections.update({
    editCollectionRequest: {
      name: "<value>",
      addedRoles: [
        {
          person: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              managementChain: [],
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              reports: [],
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [],
            },
          },
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
      ],
      removedRoles: [
        {
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
      ],
      audienceFilters: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
      id: 344620,
    },
  });
  expect(result).toBeDefined();
});

test("Collections Editcollectionitem", async () => {
  const testHttpClient = createTestHTTPClient("editcollectionitem");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.collections.editItem({
    editCollectionItemRequest: {
      collectionId: 795203,
      itemId: "<id>",
    },
  });
  expect(result).toBeDefined();
});

it.skip("Collections Editdocumentcollections", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step editdocumentcollections.test referencing operation editdocumentcollections not found in document`]",
  );
});

test("Collections Getcollection", async () => {
  const testHttpClient = createTestHTTPClient("getcollection");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.collections.get({
    getCollectionRequest: {
      id: 931981,
    },
  });
  expect(result).toBeDefined();
});

test("Collections Listcollections", async () => {
  const testHttpClient = createTestHTTPClient("listcollections");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.collections.list({
    listCollectionsRequest: {},
  });
  expect(result).toBeDefined();
});

it.skip("Collections Movecollectionitem", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step movecollectionitem.test referencing operation movecollectionitem not found in document`]",
  );
});

it.skip("Collections Pincollection", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step pincollection.test referencing operation pincollection not found in document`]",
  );
});

it.skip("Collections Pin Collection", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step pinCollection.test referencing operation pinCollection not found in document`]",
  );
});
