/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Datasources Post /Adddatasource", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/adddatasource.test referencing operation post_/adddatasource not found in document`]",
  );
});

it.skip("Datasources Post /Getdatasourceconfig", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/getdatasourceconfig.test referencing operation post_/getdatasourceconfig not found in document`]",
  );
});

test("Datasources Post /Api/index/v1 /Adddatasource", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/adddatasource",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.datasources.add({
    name: "<value>",
    urlRegex: "https://example-company.datasource.com/.*",
    quicklinks: [
      {
        iconConfig: {
          color: "#343CED",
          key: "person_icon",
          iconType: "GLYPH",
          name: "user",
        },
      },
    ],
  });
});

test("Datasources Post /Api/index/v1 /Getdatasourceconfig", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/getdatasourceconfig",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.indexing.datasources.getConfig({
    datasource: "<value>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    name: "<value>",
    datasourceCategory: "UNCATEGORIZED",
    urlRegex: "https://example-company.datasource.com/.*",
    quicklinks: [
      {
        iconConfig: {
          color: "#343CED",
          key: "person_icon",
          iconType: "GLYPH",
          name: "user",
        },
      },
      {
        iconConfig: {
          color: "#343CED",
          key: "person_icon",
          iconType: "GLYPH",
          name: "user",
        },
      },
    ],
    trustUrlRegexForViewActivity: true,
    stripFragmentInCanonicalUrl: true,
    isEntityDatasource: false,
    isTestDatasource: false,
  });
});
