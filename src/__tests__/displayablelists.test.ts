/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Displayablelists Createdisplayablelists", async () => {
  const testHttpClient = createTestHTTPClient("createdisplayablelists");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.displayableLists.create({
    createDisplayableListsRequest: {
      items: [
        {
          config: {
            audienceFilters: [
              {
                fieldName: "type",
                values: [
                  {
                    value: "Spreadsheet",
                    relationType: "EQUALS",
                  },
                  {
                    value: "Presentation",
                    relationType: "EQUALS",
                  },
                ],
              },
            ],
          },
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    items: [
      {
        config: {
          audienceFilters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      },
      {
        config: {
          audienceFilters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      },
    ],
  });
});

test("Displayablelists Deletedisplayablelists", async () => {
  const testHttpClient = createTestHTTPClient("deletedisplayablelists");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.displayableLists.delete({
    deleteDisplayableListsRequest: {
      ids: [
        698486,
        386564,
      ],
    },
  });
});

test("Displayablelists Getdisplayablelists", async () => {
  const testHttpClient = createTestHTTPClient("getdisplayablelists");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.displayableLists.get({
    getDisplayableListsRequest: {
      ids: [
        558834,
        544221,
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    items: [
      {
        config: {
          audienceFilters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      },
      {
        config: {
          audienceFilters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      },
    ],
  });
});

test("Displayablelists Updatedisplayablelists", async () => {
  const testHttpClient = createTestHTTPClient("updatedisplayablelists");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.displayableLists.update({
    updateDisplayableListsRequest: {
      items: [
        {
          config: {
            audienceFilters: [
              {
                fieldName: "type",
                values: [
                  {
                    value: "Spreadsheet",
                    relationType: "EQUALS",
                  },
                  {
                    value: "Presentation",
                    relationType: "EQUALS",
                  },
                ],
              },
            ],
          },
        },
        {
          config: {
            audienceFilters: [
              {
                fieldName: "type",
                values: [
                  {
                    value: "Spreadsheet",
                    relationType: "EQUALS",
                  },
                  {
                    value: "Presentation",
                    relationType: "EQUALS",
                  },
                ],
              },
            ],
          },
        },
        {
          config: {
            audienceFilters: [
              {
                fieldName: "type",
                values: [
                  {
                    value: "Spreadsheet",
                    relationType: "EQUALS",
                  },
                  {
                    value: "Presentation",
                    relationType: "EQUALS",
                  },
                ],
              },
            ],
          },
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    items: [
      {
        config: {
          audienceFilters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      },
      {
        config: {
          audienceFilters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      },
    ],
  });
});
