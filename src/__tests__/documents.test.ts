/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Documents Getdocpermissions", async () => {
  const testHttpClient = createTestHTTPClient("getdocpermissions");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.documents.getPermissions({
    getDocPermissionsRequest: {},
  });
  expect(result).toBeDefined();
});

test("Documents Getdocuments", async () => {
  const testHttpClient = createTestHTTPClient("getdocuments");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.documents.get({});
  expect(result).toBeDefined();
});

test("Documents Getdocumentsbyfacets", async () => {
  const testHttpClient = createTestHTTPClient("getdocumentsbyfacets");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.documents.getByFacets({
    getDocumentsByFacetsRequest: {
      filterSets: [
        {
          filters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
        {
          filters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Documents Getdocumentanalytics", async () => {
  const testHttpClient = createTestHTTPClient("getdocumentanalytics");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.documents.getAnalytics({});
  expect(result).toBeDefined();
});

it.skip("Documents Post /Indexdocument", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/indexdocument.test referencing operation post_/indexdocument not found in document`]",
  );
});

it.skip("Documents Post /Indexdocuments", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/indexdocuments.test referencing operation post_/indexdocuments not found in document`]",
  );
});

it.skip("Documents Post /Bulkindexdocuments", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexdocuments.test referencing operation post_/bulkindexdocuments not found in document`]",
  );
});

it.skip("Documents Post /Updatepermissions", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/updatepermissions.test referencing operation post_/updatepermissions not found in document`]",
  );
});

it.skip("Documents Post /Processalldocuments", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/processalldocuments.test referencing operation post_/processalldocuments not found in document`]",
  );
});

it.skip("Documents Post /Deletedocument", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/deletedocument.test referencing operation post_/deletedocument not found in document`]",
  );
});

test("Documents Post /Api/index/v1 /Indexdocument", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/indexdocument",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.addOrUpdate({
    document: {
      datasource: "<value>",
    },
  });
});

test("Documents Post /Api/index/v1 /Indexdocuments", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/indexdocuments",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.index({
    datasource: "<value>",
    documents: [
      {
        datasource: "<value>",
      },
    ],
  });
});

test("Documents Post /Api/index/v1 /Bulkindexdocuments", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/bulkindexdocuments",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.bulkIndex({
    uploadId: "<id>",
    datasource: "<value>",
    documents: [
      {
        datasource: "<value>",
      },
      {
        datasource: "<value>",
      },
      {
        datasource: "<value>",
      },
    ],
  });
});

test("Documents Post /Api/index/v1 /Updatepermissions", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/updatepermissions",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.updatePermissions({
    datasource: "<value>",
    permissions: {},
  });
});

test("Documents Post /Api/index/v1 /Processalldocuments", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/processalldocuments",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.processAll();
});

test("Documents Post /Api/index/v1 /Deletedocument", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/deletedocument",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.delete({
    datasource: "<value>",
    objectType: "<value>",
    id: "<id>",
  });
});
