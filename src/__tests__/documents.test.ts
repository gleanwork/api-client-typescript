/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Documents Getdocpermissions", async () => {
  const testHttpClient = createTestHTTPClient("getdocpermissions");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.documents.getPermissions({
    getDocPermissionsRequest: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Documents Getdocuments", async () => {
  const testHttpClient = createTestHTTPClient("getdocuments");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.documents.get({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    documents: {
      "key": {},
      "key1": {},
      "key2": {},
    },
  });
});

test("Documents Getdocumentsbyfacets", async () => {
  const testHttpClient = createTestHTTPClient("getdocumentsbyfacets");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.documents.getByFacets({
    getDocumentsByFacetsRequest: {
      filterSets: [
        {
          filters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
        {
          filters: [
            {
              fieldName: "type",
              values: [
                {
                  value: "Spreadsheet",
                  relationType: "EQUALS",
                },
                {
                  value: "Presentation",
                  relationType: "EQUALS",
                },
              ],
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    documents: [
      {
        metadata: {
          datasource: "datasource",
          objectType: "Feature Request",
          container: "container",
          parentId: "JIRA_EN-1337",
          mimeType: "mimeType",
          documentId: "documentId",
          createTime: new Date("2000-01-23T04:56:07.000Z"),
          updateTime: new Date("2000-01-23T04:56:07.000Z"),
          author: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              managementChain: [],
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              reports: [],
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [],
            },
          },
          owner: {
            name: "George Clooney",
            obfuscatedId: "abc123",
          },
          mentionedPeople: [],
          components: [
            "Backend",
            "Networking",
          ],
          status: "[\"Done\"]",
          pins: [],
          assignedTo: {
            name: "George Clooney",
            obfuscatedId: "abc123",
          },
          updatedBy: {
            name: "George Clooney",
            obfuscatedId: "abc123",
          },
          collections: [],
          interactions: {
            reacts: [],
            shares: [],
          },
          verification: {
            state: "UNVERIFIED",
            metadata: {
              lastVerifier: {
                name: "George Clooney",
                obfuscatedId: "abc123",
              },
              reminders: [],
              lastReminder: {
                assignee: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                requestor: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                remindAt: 129663,
              },
              candidateVerifiers: [],
            },
          },
          customData: {
            "someCustomField": {},
          },
          contactPerson: {
            name: "George Clooney",
            obfuscatedId: "abc123",
          },
        },
      },
    ],
  });
});

test("Documents Getdocumentanalytics", async () => {
  const testHttpClient = createTestHTTPClient("getdocumentanalytics");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.documents.getAnalytics({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    results: [
      {
        facetAnalytics: [],
      },
      {},
    ],
  });
});

it.skip("Documents Post /Indexdocument", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/indexdocument.test referencing operation post_/indexdocument not found in document`]",
  );
});

it.skip("Documents Post /Indexdocuments", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/indexdocuments.test referencing operation post_/indexdocuments not found in document`]",
  );
});

it.skip("Documents Post /Bulkindexdocuments", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexdocuments.test referencing operation post_/bulkindexdocuments not found in document`]",
  );
});

it.skip("Documents Post /Updatepermissions", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/updatepermissions.test referencing operation post_/updatepermissions not found in document`]",
  );
});

it.skip("Documents Post /Processalldocuments", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/processalldocuments.test referencing operation post_/processalldocuments not found in document`]",
  );
});

it.skip("Documents Post /Deletedocument", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/deletedocument.test referencing operation post_/deletedocument not found in document`]",
  );
});

test("Documents Post /Api/index/v1 /Indexdocument", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/indexdocument",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.addOrUpdate({
    document: {
      datasource: "<value>",
    },
  });
});

test("Documents Post /Api/index/v1 /Indexdocuments", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/indexdocuments",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.index({
    datasource: "<value>",
    documents: [
      {
        datasource: "<value>",
      },
    ],
  });
});

test("Documents Post /Api/index/v1 /Bulkindexdocuments", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/bulkindexdocuments",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.bulkIndex({
    uploadId: "<id>",
    datasource: "<value>",
    documents: [
      {
        datasource: "<value>",
      },
      {
        datasource: "<value>",
      },
      {
        datasource: "<value>",
      },
    ],
  });
});

test("Documents Post /Api/index/v1 /Updatepermissions", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/updatepermissions",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.updatePermissions({
    datasource: "<value>",
    permissions: {},
  });
});

test("Documents Post /Api/index/v1 /Processalldocuments", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/processalldocuments",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.processAll();
});

test("Documents Post /Api/index/v1 /Deletedocument", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/deletedocument",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.documents.delete({
    datasource: "<value>",
    objectType: "<value>",
    id: "<id>",
  });
});
