/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Entities Listentities", async () => {
  const testHttpClient = createTestHTTPClient("listentities");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.entities.list({
    listEntitiesRequest: {
      filter: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
      pageSize: 100,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    results: [
      {
        name: "George Clooney",
        obfuscatedId: "abc123",
      },
    ],
    teamResults: [
      {
        id: "<id>",
        name: "<value>",
        members: [],
        datasourceProfiles: [
          {
            datasource: "github",
            handle: "<value>",
          },
          {
            datasource: "github",
            handle: "<value>",
          },
          {
            datasource: "github",
            handle: "<value>",
          },
        ],
        status: "PROCESSED",
        canBeDeleted: true,
      },
      {
        id: "<id>",
        name: "<value>",
        datasourceProfiles: [
          {
            datasource: "github",
            handle: "<value>",
          },
          {
            datasource: "github",
            handle: "<value>",
          },
          {
            datasource: "github",
            handle: "<value>",
          },
        ],
        status: "PROCESSED",
        canBeDeleted: true,
      },
      {
        id: "<id>",
        name: "<value>",
        datasourceProfiles: [
          {
            datasource: "github",
            handle: "<value>",
          },
          {
            datasource: "github",
            handle: "<value>",
          },
          {
            datasource: "github",
            handle: "<value>",
          },
        ],
        status: "PROCESSED",
        canBeDeleted: true,
      },
    ],
    customEntityResults: [
      {
        roles: [],
      },
    ],
    facetResults: [
      {
        sourceName: "container_name",
        operatorName: "SelectMultiple",
        buckets: [
          {
            count: 1,
            datasource: "jira",
            percentage: 5,
            value: {
              stringValue: "engineering",
              integerValue: 5,
              displayLabel: "engineering",
              iconConfig: {
                color: "#343CED",
                key: "person_icon",
                iconType: "GLYPH",
                name: "user",
              },
            },
          },
        ],
        hasMoreBuckets: false,
        groupName: "Service Cloud",
      },
    ],
  });
});

test("Entities People", async () => {
  const testHttpClient = createTestHTTPClient("people");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.entities.readPeople({
    peopleRequest: {
      obfuscatedIds: [
        "abc123",
        "abc456",
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    results: [
      {
        name: "George Clooney",
        obfuscatedId: "abc123",
      },
    ],
    relatedDocuments: [
      {
        querySuggestion: {
          query: "app:github type:pull author:mortimer",
          searchProviderInfo: {
            name: "Google",
            searchLinkUrlTemplate:
              "https://www.google.com/search?q={query}&hl=en",
          },
          label: "Mortimer's PRs",
          datasource: "github",
          requestOptions: {
            datasourceFilter: "JIRA",
            datasourcesFilter: [
              "JIRA",
            ],
            queryOverridesFacetFilters: true,
            facetFilters: [
              {
                fieldName: "type",
                values: [
                  {
                    value: "Spreadsheet",
                    relationType: "EQUALS",
                  },
                  {
                    value: "Presentation",
                    relationType: "EQUALS",
                  },
                ],
              },
            ],
            facetFilterSets: [
              {
                filters: [
                  {
                    fieldName: "type",
                    values: [],
                  },
                ],
              },
            ],
            facetBucketSize: 796474,
            authTokens: [
              {
                accessToken: "123abc",
                datasource: "gmail",
                scope:
                  "email profile https://www.googleapis.com/auth/gmail.readonly",
                tokenType: "Bearer",
                authUser: "1",
              },
            ],
          },
          ranges: [],
          inputDetails: {
            hasCopyPaste: true,
          },
        },
        results: [],
      },
      {},
      {},
    ],
  });
});

test("Entities Teams", async () => {
  const testHttpClient = createTestHTTPClient("teams");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.entities.getTeams({
    teamsRequest: {
      ids: [
        "abc123",
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    results: [
      {
        id: "<id>",
        name: "<value>",
        members: [],
        datasourceProfiles: [
          {
            datasource: "github",
            handle: "<value>",
          },
        ],
        status: "PROCESSED",
        canBeDeleted: true,
      },
      {
        id: "<id>",
        name: "<value>",
        datasourceProfiles: [
          {
            datasource: "github",
            handle: "<value>",
          },
        ],
        status: "PROCESSED",
        canBeDeleted: true,
      },
    ],
  });
});
