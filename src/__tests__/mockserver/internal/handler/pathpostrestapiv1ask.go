// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Ask(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "ask[0]":
			dir.HandlerFunc("ask", testAskAsk0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testAskAsk0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.AskResponse{
		IsQuestion: true,
		Question:   types.String("string"),
		SearchResponse: &components.SearchResponse{
			TrackingToken: types.String("trackingToken"),
			Results: []components.SearchResult{
				components.SearchResult{
					Title:    types.String("title"),
					URL:      "https://www.example.com/",
					Snippets: []components.SearchResultSnippet{},
				},
				components.SearchResult{
					Title: types.String("title"),
					URL:   "https://www.example.com/",
				},
			},
			ErrorInfo: &components.ErrorInfo{
				ErrorMessages: []components.ErrorMessage{
					components.ErrorMessage{
						Source:       types.String("gmail"),
						ErrorMessage: types.String("invalid token"),
					},
					components.ErrorMessage{
						Source:       types.String("slack"),
						ErrorMessage: types.String("expired token"),
					},
				},
			},
			RequestID: types.String("5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100"),
			FacetResults: []components.FacetResult{
				components.FacetResult{
					SourceName:   types.String("sourceName"),
					OperatorName: types.String("operatorName"),
					Buckets: []components.FacetBucket{
						components.FacetBucket{
							Count:      types.Int64(1),
							Percentage: types.Int64(5),
							Value: &components.FacetValue{
								StringValue:  types.String("stringValue"),
								IntegerValue: types.Int64(5),
							},
						},
						components.FacetBucket{
							Count:      types.Int64(1),
							Percentage: types.Int64(5),
							Value: &components.FacetValue{
								StringValue:  types.String("stringValue"),
								IntegerValue: types.Int64(5),
							},
						},
					},
				},
				components.FacetResult{
					SourceName:   types.String("sourceName"),
					OperatorName: types.String("operatorName"),
					Buckets:      []components.FacetBucket{},
				},
			},
			RewrittenFacetFilters: []components.FacetFilter{
				components.FacetFilter{
					FieldName: types.String("fieldName"),
					Values: []components.FacetFilterValue{
						components.FacetFilterValue{},
						components.FacetFilterValue{},
					},
				},
				components.FacetFilter{
					FieldName: types.String("fieldName"),
					Values:    []components.FacetFilterValue{},
				},
			},
			HasMoreResults: types.Bool(true),
		},
		ChatResponse: &components.ChatResponse{
			Messages: []components.ChatMessage{
				components.ChatMessage{
					AgentConfig: &components.AgentConfig{
						Agent: components.AgentEnumDefault.ToPointer(),
						Mode:  components.ModeDefault.ToPointer(),
					},
					Author: components.AuthorUser.ToPointer(),
					Citations: []components.ChatMessageCitation{
						components.ChatMessageCitation{
							TrackingToken: types.String("string"),
							SourceDocument: &components.Document{
								ID:            types.String("string"),
								Datasource:    types.String("string"),
								ConnectorType: components.ConnectorTypeAPICrawl.ToPointer(),
								DocType:       types.String("string"),
								Content: &components.DocumentContent{
									FullTextList: []string{},
								},
								Title: types.String("string"),
								URL:   types.String("string"),
								Metadata: &components.DocumentMetadata{
									Datasource: types.String("datasource"),
									ObjectType: types.String("Feature Request"),
									Container:  types.String("container"),
									ParentID:   types.String("JIRA_EN-1337"),
									MimeType:   types.String("mimeType"),
									DocumentID: types.String("documentId"),
									CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
									UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
									Author: &components.Person{
										Name:         "name",
										ObfuscatedID: "<id>",
									},
									Components: []string{
										"Backend",
										"Networking",
									},
									Status: types.String("[\"Done\"]"),
									CustomData: map[string]components.CustomDataValue{
										"someCustomField": components.CustomDataValue{},
									},
								},
								Sections: []components.DocumentSection{
									components.DocumentSection{},
								},
							},
							SourceFile: &components.ChatFile{
								ID:   types.String("FILE_1234"),
								URL:  types.String("www.google.com"),
								Name: types.String("sample.pdf"),
								Metadata: &components.ChatFileMetadata{
									Status:        components.ChatFileStatusDeleted.ToPointer(),
									UploadTime:    types.Int64(291836),
									ProcessedSize: types.Int64(865078),
									FailureReason: components.ChatFileFailureReasonFileMetadataValidationFail.ToPointer(),
									MimeType:      types.String("<value>"),
								},
							},
							SourcePerson: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
							ReferenceRanges: []components.ReferenceRange{
								components.ReferenceRange{
									TextRange: &components.TextRange{
										StartIndex: 87873,
										Document:   &components.Document{},
									},
									Snippets: []components.SearchResultSnippet{},
								},
							},
						},
					},
					UploadedFileIds: []string{
						"string",
					},
					Fragments: []components.ChatMessageFragment{
						components.ChatMessageFragment{
							StructuredResults: []components.StructuredResult{
								components.StructuredResult{
									Person: &components.Person{
										Name:             "<value>",
										ObfuscatedID:     "<id>",
										RelatedDocuments: []components.RelatedDocuments{},
										Metadata: &components.PersonMetadata{
											Title:      types.String("Actor"),
											Department: types.String("Movies"),
											Email:      types.String("george@example.com"),
											Location:   types.String("Hollywood, CA"),
											Phone:      types.String("6505551234"),
											PhotoURL:   types.String("https://example.com/george.jpg"),
											StartDate:  types.MustNewDateFromString("2000-01-23"),
										},
									},
									Customer: &components.Customer{
										ID: "<id>",
										Company: components.Company{
											Name:     "<value>",
											Location: types.String("New York City"),
											Industry: types.String("Finances"),
											About:    types.String("Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"),
										},
										Poc:   []components.Person{},
										Notes: types.String("CIO is interested in trying out the product."),
									},
									Team: &components.Team{
										ID:      "<id>",
										Name:    "<value>",
										Members: []components.PersonToTeamRelationship{},
										DatasourceProfiles: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										Status:       components.TeamStatusProcessed.ToPointer(),
										CanBeDeleted: types.Bool(true),
									},
									CustomEntity: &components.CustomEntity{
										Roles: []components.UserRoleSpecification{},
									},
									Answer: &components.Answer{
										ID:              3,
										DocID:           types.String("ANSWERS_answer_3"),
										Question:        types.String("Why is the sky blue?"),
										BodyText:        types.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
										AudienceFilters: []components.FacetFilter{},
										AddedRoles:      []components.UserRoleSpecification{},
										RemovedRoles:    []components.UserRoleSpecification{},
										CombinedAnswerText: &components.StructuredText{
											Text:           "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
											StructuredList: []components.StructuredTextItem{},
										},
										Likes: &components.AnswerLikes{
											LikedBy:     []components.AnswerLike{},
											LikedByUser: true,
											NumLikes:    22508,
										},
										UpdatedBy: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										Verification: &components.Verification{
											State: components.StateUnverified,
											Metadata: &components.VerificationMetadata{
												LastVerifier: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												Reminders: []components.Reminder{},
												LastReminder: &components.Reminder{
													Assignee: components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
													},
													Requestor: &components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
													},
													RemindAt: 129663,
												},
												CandidateVerifiers: []components.Person{},
											},
										},
										Board: &components.AnswerBoard{
											Name:            "<value>",
											Description:     "over aha if unless fooey unbearably",
											AudienceFilters: []components.FacetFilter{},
											ID:              342305,
											Creator: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
											},
										},
										Collections: []components.Collection{},
									},
									ExtractedQnA: &components.ExtractedQnA{
										QuestionResult: &components.SearchResult{
											Title:        types.String("title"),
											URL:          "https://example.com/foo/bar",
											NativeAppURL: types.String("slack://foo/bar"),
										},
									},
									Meeting: &components.Meeting{
										Attendees: &components.CalendarAttendees{
											People: []components.CalendarAttendee{},
										},
									},
									App: &components.AppResult{
										Datasource: "<value>",
									},
									Collection: &components.Collection{
										Name:            "<value>",
										Description:     "because almighty an",
										AudienceFilters: []components.FacetFilter{},
										ID:              822820,
										Items:           []components.CollectionItem{},
									},
									AnswerBoard: &components.AnswerBoard{
										Name:        "<value>",
										Description: "labourer row toward meanwhile instead mostly after along contravene filthy",
										AudienceFilters: []components.FacetFilter{
											components.FacetFilter{
												FieldName: types.String("type"),
												Values:    []components.FacetFilterValue{},
											},
										},
										ID: 609947,
									},
									Code: &components.Code{
										Lines: []components.CodeLine{},
									},
									Shortcut: &components.Shortcut{
										InputAlias:     "<value>",
										DestinationURL: "https://unhappy-devastation.info/",
										CreatedBy:      "<value>",
									},
									QuerySuggestions: &components.QuerySuggestionList{
										Suggestions: []components.QuerySuggestion{},
									},
									RelatedQuestion: &components.RelatedQuestion{
										Ranges: []components.TextRange{},
									},
									TrackingToken: types.String("<value>"),
									Prominence:    components.ProminencePromoted.ToPointer(),
									Source:        components.StructuredResultSourceEntityNlq.ToPointer(),
								},
							},
							TrackingToken: types.String("string"),
							Text:          types.String("string"),
							QuerySuggestion: &components.QuerySuggestion{
								Query:      "app:github type:pull author:mortimer",
								Label:      types.String("Mortimer's PRs"),
								Datasource: types.String("github"),
							},
							File: &components.ChatFile{
								ID:   types.String("FILE_1234"),
								URL:  types.String("www.google.com"),
								Name: types.String("sample.pdf"),
								Metadata: &components.ChatFileMetadata{
									Status:        components.ChatFileStatusFailed.ToPointer(),
									UploadTime:    types.Int64(804394),
									ProcessedSize: types.Int64(701036),
									FailureReason: components.ChatFileFailureReasonFileExtensionUnsupported.ToPointer(),
									MimeType:      types.String("<value>"),
								},
							},
							Action: &components.ToolInfo{
								Metadata: &components.ToolMetadata{
									Type:               components.ToolMetadataTypeAction,
									Name:               "<value>",
									DisplayName:        "Odessa.Ebert",
									ToolID:             types.String("<id>"),
									DisplayDescription: "<value>",
									LogoURL:            types.String("https://every-courtroom.org/"),
									ObjectName:         types.String("<value>"),
									KnowledgeType:      components.KnowledgeTypeWorldKnowledge.ToPointer(),
									CreatedBy: &components.PersonObject{
										Name:         "<value>",
										ObfuscatedID: "<id>",
									},
									LastUpdatedBy: &components.PersonObject{
										Name:         "<value>",
										ObfuscatedID: "<id>",
									},
									CreatedAt:         types.MustNewTimeFromString("2025-06-16T02:53:03.622Z"),
									LastUpdatedAt:     types.MustNewTimeFromString("2023-09-10T15:01:40.188Z"),
									WriteActionType:   components.WriteActionTypeRedirect.ToPointer(),
									AuthType:          components.AuthTypeNone.ToPointer(),
									UsageInstructions: types.String("<value>"),
									IsSetupFinished:   types.Bool(false),
								},
								Parameters: map[string]components.WriteActionParameter{
									"property1": components.WriteActionParameter{},
									"property2": components.WriteActionParameter{},
								},
							},
						},
					},
					Ts:                   types.String("string"),
					MessageID:            types.String("string"),
					MessageTrackingToken: types.String("string"),
					MessageType:          components.MessageTypeUpdate.ToPointer(),
					HasMoreFragments:     types.Bool(true),
				},
			},
			ChatID: types.String("string"),
			FollowUpPrompts: []string{
				"string",
			},
			BackendTimeMillis:        types.Int64(1100),
			ChatSessionTrackingToken: types.String("string"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
