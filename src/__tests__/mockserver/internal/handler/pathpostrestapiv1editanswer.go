// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Editanswer(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "editanswer[0]":
			dir.HandlerFunc("editanswer", testEditanswerEditanswer0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testEditanswerEditanswer0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, ""); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.Answer{
		ID:       3,
		DocID:    types.String("ANSWERS_answer_3"),
		Question: types.String("Why is the sky blue?"),
		BodyText: types.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
		AudienceFilters: []components.FacetFilter{
			components.FacetFilter{
				FieldName: types.String("type"),
				Values: []components.FacetFilterValue{
					components.FacetFilterValue{
						Value:        types.String("Spreadsheet"),
						RelationType: components.RelationTypeEquals.ToPointer(),
					},
					components.FacetFilterValue{
						Value:        types.String("Presentation"),
						RelationType: components.RelationTypeEquals.ToPointer(),
					},
				},
			},
		},
		AddedRoles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Person: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					RelatedDocuments: []components.RelatedDocuments{
						components.RelatedDocuments{
							QuerySuggestion: &components.QuerySuggestion{
								Query: "app:github type:pull author:mortimer",
								SearchProviderInfo: &components.SearchProviderInfo{
									Name:                  types.String("Google"),
									SearchLinkURLTemplate: types.String("https://www.google.com/search?q={query}&hl=en"),
								},
								Label:      types.String("Mortimer's PRs"),
								Datasource: types.String("github"),
								RequestOptions: &components.SearchRequestOptions{
									DatasourceFilter: types.String("JIRA"),
									DatasourcesFilter: []string{
										"JIRA",
									},
									QueryOverridesFacetFilters: types.Bool(true),
									FacetFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: types.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        types.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        types.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									FacetFilterSets: []components.FacetFilterSet{
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: types.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        types.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        types.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
									},
									FacetBucketSize: 137093,
									AuthTokens: []components.AuthToken{
										components.AuthToken{
											AccessToken: "123abc",
											Datasource:  "gmail",
											Scope:       types.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
											TokenType:   types.String("Bearer"),
											AuthUser:    types.String("1"),
										},
									},
								},
								Ranges: []components.TextRange{
									components.TextRange{
										StartIndex: 260714,
										Document: &components.Document{
											Metadata: &components.DocumentMetadata{
												Datasource: types.String("datasource"),
												ObjectType: types.String("Feature Request"),
												Container:  types.String("container"),
												ParentID:   types.String("JIRA_EN-1337"),
												MimeType:   types.String("mimeType"),
												DocumentID: types.String("documentId"),
												CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
												UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
												Components: []string{
													"Backend",
													"Networking",
												},
												Status: types.String("[\"Done\"]"),
												Pins: []components.PinDocument{
													components.PinDocument{
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														DocumentID: "<id>",
													},
													components.PinDocument{
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														DocumentID: "<id>",
													},
												},
												Collections: []components.Collection{
													components.Collection{
														Name:        "<value>",
														Description: "habit onto worriedly revoke",
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														ID: 924554,
														Items: []components.CollectionItem{
															components.CollectionItem{
																CollectionID: 536597,
																Shortcut: &components.Shortcut{
																	InputAlias: "<value>",
																},
																ItemType: components.CollectionItemItemTypeCollection,
															},
															components.CollectionItem{
																CollectionID: 353996,
																Shortcut: &components.Shortcut{
																	InputAlias: "<value>",
																},
																ItemType: components.CollectionItemItemTypeCollection,
															},
															components.CollectionItem{
																CollectionID: 930718,
																Shortcut: &components.Shortcut{
																	InputAlias: "<value>",
																},
																ItemType: components.CollectionItemItemTypeURL,
															},
														},
													},
													components.Collection{
														Name:        "<value>",
														Description: "eggplant as precedent intent regular incidentally since phooey",
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														ID: 558101,
													},
													components.Collection{
														Name:        "<value>",
														Description: "forgather smuggle abseil fooey",
														AudienceFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														ID: 807999,
													},
												},
												Interactions: &components.DocumentInteractions{
													Reacts: []components.Reaction{
														components.Reaction{},
														components.Reaction{},
													},
													Shares: []components.Share{
														components.Share{
															NumDaysAgo: 319993,
														},
													},
												},
												Verification: &components.Verification{
													State: components.StateUnverified,
													Metadata: &components.VerificationMetadata{
														Reminders: []components.Reminder{
															components.Reminder{
																Assignee: components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																RemindAt: 607986,
															},
															components.Reminder{
																Assignee: components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																RemindAt: 734120,
															},
															components.Reminder{
																Assignee: components.Person{
																	Name:         "George Clooney",
																	ObfuscatedID: "abc123",
																},
																RemindAt: 545093,
															},
														},
														LastReminder: &components.Reminder{
															Assignee: components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
															RemindAt: 184060,
														},
													},
												},
												Shortcuts: []components.Shortcut{
													components.Shortcut{
														InputAlias: "<value>",
													},
													components.Shortcut{
														InputAlias: "<value>",
													},
												},
												CustomData: map[string]components.CustomDataValue{
													"someCustomField": components.CustomDataValue{},
												},
											},
										},
									},
									components.TextRange{
										StartIndex: 589669,
										Document: &components.Document{
											Metadata: &components.DocumentMetadata{
												Datasource: types.String("datasource"),
												ObjectType: types.String("Feature Request"),
												Container:  types.String("container"),
												ParentID:   types.String("JIRA_EN-1337"),
												MimeType:   types.String("mimeType"),
												DocumentID: types.String("documentId"),
												CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
												UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
												Components: []string{
													"Backend",
													"Networking",
												},
												Status:       types.String("[\"Done\"]"),
												Interactions: &components.DocumentInteractions{},
												Verification: &components.Verification{
													State: components.StateVerified,
													Metadata: &components.VerificationMetadata{
														LastReminder: &components.Reminder{
															Assignee: components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
															RemindAt: 335816,
														},
													},
												},
												CustomData: map[string]components.CustomDataValue{
													"someCustomField": components.CustomDataValue{},
												},
											},
										},
									},
									components.TextRange{
										StartIndex: 884569,
										Document: &components.Document{
											Metadata: &components.DocumentMetadata{
												Datasource: types.String("datasource"),
												ObjectType: types.String("Feature Request"),
												Container:  types.String("container"),
												ParentID:   types.String("JIRA_EN-1337"),
												MimeType:   types.String("mimeType"),
												DocumentID: types.String("documentId"),
												CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
												UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
												Components: []string{
													"Backend",
													"Networking",
												},
												Status:       types.String("[\"Done\"]"),
												Interactions: &components.DocumentInteractions{},
												Verification: &components.Verification{
													State: components.StateVerified,
													Metadata: &components.VerificationMetadata{
														LastReminder: &components.Reminder{
															Assignee: components.Person{
																Name:         "George Clooney",
																ObfuscatedID: "abc123",
															},
															RemindAt: 335427,
														},
													},
												},
												CustomData: map[string]components.CustomDataValue{
													"someCustomField": components.CustomDataValue{},
												},
											},
										},
									},
								},
								InputDetails: &components.SearchRequestInputDetails{
									HasCopyPaste: types.Bool(true),
								},
							},
							Results: []components.SearchResult{
								components.SearchResult{
									Title:        types.String("title"),
									URL:          "https://example.com/foo/bar",
									NativeAppURL: types.String("slack://foo/bar"),
									Snippets: []components.SearchResultSnippet{
										components.SearchResultSnippet{
											Snippet:  "snippet",
											MimeType: types.String("mimeType"),
										},
									},
								},
							},
						},
						components.RelatedDocuments{
							QuerySuggestion: &components.QuerySuggestion{
								Query: "app:github type:pull author:mortimer",
								SearchProviderInfo: &components.SearchProviderInfo{
									Name:                  types.String("Google"),
									SearchLinkURLTemplate: types.String("https://www.google.com/search?q={query}&hl=en"),
								},
								Label:      types.String("Mortimer's PRs"),
								Datasource: types.String("github"),
								RequestOptions: &components.SearchRequestOptions{
									DatasourceFilter: types.String("JIRA"),
									DatasourcesFilter: []string{
										"JIRA",
									},
									QueryOverridesFacetFilters: types.Bool(true),
									FacetFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: types.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        types.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        types.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									FacetFilterSets: []components.FacetFilterSet{
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: types.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        types.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        types.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
									},
									FacetBucketSize: 169786,
									AuthTokens: []components.AuthToken{
										components.AuthToken{
											AccessToken: "123abc",
											Datasource:  "gmail",
											Scope:       types.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
											TokenType:   types.String("Bearer"),
											AuthUser:    types.String("1"),
										},
									},
								},
								InputDetails: &components.SearchRequestInputDetails{
									HasCopyPaste: types.Bool(true),
								},
							},
						},
						components.RelatedDocuments{
							QuerySuggestion: &components.QuerySuggestion{
								Query: "app:github type:pull author:mortimer",
								SearchProviderInfo: &components.SearchProviderInfo{
									Name:                  types.String("Google"),
									SearchLinkURLTemplate: types.String("https://www.google.com/search?q={query}&hl=en"),
								},
								Label:      types.String("Mortimer's PRs"),
								Datasource: types.String("github"),
								RequestOptions: &components.SearchRequestOptions{
									DatasourceFilter: types.String("JIRA"),
									DatasourcesFilter: []string{
										"JIRA",
									},
									QueryOverridesFacetFilters: types.Bool(true),
									FacetFilters: []components.FacetFilter{
										components.FacetFilter{
											FieldName: types.String("type"),
											Values: []components.FacetFilterValue{
												components.FacetFilterValue{
													Value:        types.String("Spreadsheet"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
												components.FacetFilterValue{
													Value:        types.String("Presentation"),
													RelationType: components.RelationTypeEquals.ToPointer(),
												},
											},
										},
									},
									FacetFilterSets: []components.FacetFilterSet{
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: types.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        types.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        types.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
										components.FacetFilterSet{
											Filters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: types.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        types.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        types.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
										},
									},
									FacetBucketSize: 57147,
									AuthTokens: []components.AuthToken{
										components.AuthToken{
											AccessToken: "123abc",
											Datasource:  "gmail",
											Scope:       types.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
											TokenType:   types.String("Bearer"),
											AuthUser:    types.String("1"),
										},
									},
								},
								InputDetails: &components.SearchRequestInputDetails{
									HasCopyPaste: types.Bool(true),
								},
							},
						},
					},
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{
							Suggestions: []components.QuerySuggestion{
								components.QuerySuggestion{
									Query:      "app:github type:pull author:mortimer",
									Label:      types.String("Mortimer's PRs"),
									Datasource: types.String("github"),
								},
							},
						},
						InviteInfo: &components.InviteInfo{
							Invites: []components.ChannelInviteInfo{
								components.ChannelInviteInfo{},
								components.ChannelInviteInfo{},
							},
						},
						CustomFields: []components.CustomFieldData{
							components.CustomFieldData{
								Label:       "<value>",
								Values:      []components.CustomFieldValue{},
								Displayable: types.Bool(true),
							},
							components.CustomFieldData{
								Label:       "<value>",
								Values:      []components.CustomFieldValue{},
								Displayable: types.Bool(true),
							},
						},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
				Role: components.UserRoleAnswerModerator,
			},
		},
		CombinedAnswerText: &components.StructuredText{
			Text: "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
			StructuredList: []components.StructuredTextItem{
				components.StructuredTextItem{
					Link: types.String("https://en.wikipedia.org/wiki/Diffuse_sky_radiation"),
					Document: &components.Document{
						Metadata: &components.DocumentMetadata{
							Datasource: types.String("datasource"),
							ObjectType: types.String("Feature Request"),
							Container:  types.String("container"),
							ParentID:   types.String("JIRA_EN-1337"),
							MimeType:   types.String("mimeType"),
							DocumentID: types.String("documentId"),
							CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							Author: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Owner: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Components: []string{
								"Backend",
								"Networking",
							},
							Status: types.String("[\"Done\"]"),
							AssignedTo: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							UpdatedBy: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Interactions: &components.DocumentInteractions{},
							Verification: &components.Verification{
								State: components.StateVerified,
								Metadata: &components.VerificationMetadata{
									LastVerifier: &components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
										Metadata: &components.PersonMetadata{
											Type:       components.PersonMetadataTypeFullTime.ToPointer(),
											Title:      types.String("Actor"),
											Department: types.String("Movies"),
											Email:      types.String("george@example.com"),
											Location:   types.String("Hollywood, CA"),
											Phone:      types.String("6505551234"),
											PhotoURL:   types.String("https://example.com/george.jpg"),
											StartDate:  types.MustNewDateFromString("2000-01-23"),
											DatasourceProfile: []components.DatasourceProfile{
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
											},
											QuerySuggestions: &components.QuerySuggestionList{},
											InviteInfo:       &components.InviteInfo{},
											Badges: []components.Badge{
												components.Badge{
													Key:         types.String("deployment_name_new_hire"),
													DisplayName: types.String("New hire"),
													IconConfig: &components.IconConfig{
														Color:    types.String("#343CED"),
														Key:      types.String("person_icon"),
														IconType: components.IconTypeGlyph.ToPointer(),
														Name:     types.String("user"),
													},
												},
											},
										},
									},
									LastReminder: &components.Reminder{
										Assignee: components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Requestor: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										RemindAt: 777288,
									},
								},
							},
							CustomData: map[string]components.CustomDataValue{
								"someCustomField": components.CustomDataValue{},
							},
							ContactPerson: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
						},
					},
					Text: types.String("Because its wavelengths are shorter, blue light is more strongly scattered than the longer-wavelength lights, red or green. Hence the result that when looking at the sky away from the direct incident sunlight, the human eye perceives the sky to be blue."),
				},
			},
		},
		Likes: &components.AnswerLikes{
			LikedBy: []components.AnswerLike{
				components.AnswerLike{
					User: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      types.String("Actor"),
							Department: types.String("Movies"),
							Email:      types.String("george@example.com"),
							Location:   types.String("Hollywood, CA"),
							Phone:      types.String("6505551234"),
							PhotoURL:   types.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         types.String("deployment_name_new_hire"),
									DisplayName: types.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    types.String("#343CED"),
										Key:      types.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     types.String("user"),
									},
								},
							},
						},
					},
				},
			},
			LikedByUser: true,
			NumLikes:    982873,
		},
		Author: &components.Person{
			Name:         "George Clooney",
			ObfuscatedID: "abc123",
			Metadata: &components.PersonMetadata{
				Type:       components.PersonMetadataTypeFullTime.ToPointer(),
				Title:      types.String("Actor"),
				Department: types.String("Movies"),
				Email:      types.String("george@example.com"),
				Location:   types.String("Hollywood, CA"),
				Phone:      types.String("6505551234"),
				PhotoURL:   types.String("https://example.com/george.jpg"),
				StartDate:  types.MustNewDateFromString("2000-01-23"),
				DatasourceProfile: []components.DatasourceProfile{
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
				},
				QuerySuggestions: &components.QuerySuggestionList{},
				InviteInfo:       &components.InviteInfo{},
				Badges: []components.Badge{
					components.Badge{
						Key:         types.String("deployment_name_new_hire"),
						DisplayName: types.String("New hire"),
						IconConfig: &components.IconConfig{
							Color:    types.String("#343CED"),
							Key:      types.String("person_icon"),
							IconType: components.IconTypeGlyph.ToPointer(),
							Name:     types.String("user"),
						},
					},
				},
			},
		},
		UpdatedBy: &components.Person{
			Name:         "George Clooney",
			ObfuscatedID: "abc123",
			Metadata: &components.PersonMetadata{
				Type:       components.PersonMetadataTypeFullTime.ToPointer(),
				Title:      types.String("Actor"),
				Department: types.String("Movies"),
				Email:      types.String("george@example.com"),
				Location:   types.String("Hollywood, CA"),
				Phone:      types.String("6505551234"),
				PhotoURL:   types.String("https://example.com/george.jpg"),
				StartDate:  types.MustNewDateFromString("2000-01-23"),
				DatasourceProfile: []components.DatasourceProfile{
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
				},
				QuerySuggestions: &components.QuerySuggestionList{},
				InviteInfo:       &components.InviteInfo{},
				Badges: []components.Badge{
					components.Badge{
						Key:         types.String("deployment_name_new_hire"),
						DisplayName: types.String("New hire"),
						IconConfig: &components.IconConfig{
							Color:    types.String("#343CED"),
							Key:      types.String("person_icon"),
							IconType: components.IconTypeGlyph.ToPointer(),
							Name:     types.String("user"),
						},
					},
				},
			},
		},
		Verification: &components.Verification{
			State: components.StateUnverified,
			Metadata: &components.VerificationMetadata{
				LastVerifier: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
				Document: &components.Document{
					Metadata: &components.DocumentMetadata{
						Datasource: types.String("datasource"),
						ObjectType: types.String("Feature Request"),
						Container:  types.String("container"),
						ParentID:   types.String("JIRA_EN-1337"),
						MimeType:   types.String("mimeType"),
						DocumentID: types.String("documentId"),
						CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						Author: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Owner: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Components: []string{
							"Backend",
							"Networking",
						},
						Status: types.String("[\"Done\"]"),
						AssignedTo: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						UpdatedBy: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Interactions: &components.DocumentInteractions{},
						CustomData: map[string]components.CustomDataValue{
							"someCustomField": components.CustomDataValue{},
						},
						ContactPerson: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
					},
				},
				LastReminder: &components.Reminder{
					Assignee: components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      types.String("Actor"),
							Department: types.String("Movies"),
							Email:      types.String("george@example.com"),
							Location:   types.String("Hollywood, CA"),
							Phone:      types.String("6505551234"),
							PhotoURL:   types.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         types.String("deployment_name_new_hire"),
									DisplayName: types.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    types.String("#343CED"),
										Key:      types.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     types.String("user"),
									},
								},
							},
						},
					},
					Requestor: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      types.String("Actor"),
							Department: types.String("Movies"),
							Email:      types.String("george@example.com"),
							Location:   types.String("Hollywood, CA"),
							Phone:      types.String("6505551234"),
							PhotoURL:   types.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         types.String("deployment_name_new_hire"),
									DisplayName: types.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    types.String("#343CED"),
										Key:      types.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     types.String("user"),
									},
								},
							},
						},
					},
					RemindAt: 241217,
				},
			},
		},
		Board: &components.AnswerBoard{
			Name:        "<value>",
			Description: "obligation clearly slope",
			AudienceFilters: []components.FacetFilter{
				components.FacetFilter{
					FieldName: types.String("type"),
					Values: []components.FacetFilterValue{
						components.FacetFilterValue{
							Value:        types.String("Spreadsheet"),
							RelationType: components.RelationTypeEquals.ToPointer(),
						},
						components.FacetFilterValue{
							Value:        types.String("Presentation"),
							RelationType: components.RelationTypeEquals.ToPointer(),
						},
					},
				},
			},
			ID: 661551,
			Creator: &components.Person{
				Name:         "George Clooney",
				ObfuscatedID: "abc123",
				Metadata: &components.PersonMetadata{
					Type:       components.PersonMetadataTypeFullTime.ToPointer(),
					Title:      types.String("Actor"),
					Department: types.String("Movies"),
					Email:      types.String("george@example.com"),
					Location:   types.String("Hollywood, CA"),
					Phone:      types.String("6505551234"),
					PhotoURL:   types.String("https://example.com/george.jpg"),
					StartDate:  types.MustNewDateFromString("2000-01-23"),
					DatasourceProfile: []components.DatasourceProfile{
						components.DatasourceProfile{
							Datasource: "github",
							Handle:     "<value>",
						},
						components.DatasourceProfile{
							Datasource: "github",
							Handle:     "<value>",
						},
						components.DatasourceProfile{
							Datasource: "github",
							Handle:     "<value>",
						},
					},
					QuerySuggestions: &components.QuerySuggestionList{},
					InviteInfo:       &components.InviteInfo{},
					Badges: []components.Badge{
						components.Badge{
							Key:         types.String("deployment_name_new_hire"),
							DisplayName: types.String("New hire"),
							IconConfig: &components.IconConfig{
								Color:    types.String("#343CED"),
								Key:      types.String("person_icon"),
								IconType: components.IconTypeGlyph.ToPointer(),
								Name:     types.String("user"),
							},
						},
					},
				},
			},
			UpdatedBy: &components.Person{
				Name:         "George Clooney",
				ObfuscatedID: "abc123",
				Metadata: &components.PersonMetadata{
					Type:       components.PersonMetadataTypeFullTime.ToPointer(),
					Title:      types.String("Actor"),
					Department: types.String("Movies"),
					Email:      types.String("george@example.com"),
					Location:   types.String("Hollywood, CA"),
					Phone:      types.String("6505551234"),
					PhotoURL:   types.String("https://example.com/george.jpg"),
					StartDate:  types.MustNewDateFromString("2000-01-23"),
					DatasourceProfile: []components.DatasourceProfile{
						components.DatasourceProfile{
							Datasource: "github",
							Handle:     "<value>",
						},
					},
					QuerySuggestions: &components.QuerySuggestionList{},
					InviteInfo:       &components.InviteInfo{},
					Badges: []components.Badge{
						components.Badge{
							Key:         types.String("deployment_name_new_hire"),
							DisplayName: types.String("New hire"),
							IconConfig: &components.IconConfig{
								Color:    types.String("#343CED"),
								Key:      types.String("person_icon"),
								IconType: components.IconTypeGlyph.ToPointer(),
								Name:     types.String("user"),
							},
						},
					},
				},
			},
		},
		SourceDocument: &components.Document{
			Metadata: &components.DocumentMetadata{
				Datasource: types.String("datasource"),
				ObjectType: types.String("Feature Request"),
				Container:  types.String("container"),
				ParentID:   types.String("JIRA_EN-1337"),
				MimeType:   types.String("mimeType"),
				DocumentID: types.String("documentId"),
				CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
				UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
				Author: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
				Owner: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
				Components: []string{
					"Backend",
					"Networking",
				},
				Status: types.String("[\"Done\"]"),
				AssignedTo: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
				UpdatedBy: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
				Interactions: &components.DocumentInteractions{},
				Verification: &components.Verification{
					State: components.StateUnverified,
					Metadata: &components.VerificationMetadata{
						LastVerifier: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						LastReminder: &components.Reminder{
							Assignee: components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Requestor: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							RemindAt: 620946,
						},
					},
				},
				CustomData: map[string]components.CustomDataValue{
					"someCustomField": components.CustomDataValue{},
				},
				ContactPerson: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{},
						InviteInfo:       &components.InviteInfo{},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
