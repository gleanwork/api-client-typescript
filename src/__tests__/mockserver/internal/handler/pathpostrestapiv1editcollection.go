// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Editcollection(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "editcollection[0]":
			dir.HandlerFunc("editcollection", testEditcollectionEditcollection0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testEditcollectionEditcollection0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.EditCollectionResponse{
		Name:        "<value>",
		Description: "urgently voluntarily scale gut",
		AddedRoles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Person: &components.Person{
					Name:             "George Clooney",
					ObfuscatedID:     "abc123",
					RelatedDocuments: []components.RelatedDocuments{},
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{
							Suggestions: []components.QuerySuggestion{},
						},
						InviteInfo: &components.InviteInfo{
							Invites: []components.ChannelInviteInfo{},
						},
						CustomFields: []components.CustomFieldData{},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
				Role: components.UserRoleOwner,
			},
			components.UserRoleSpecification{
				Role: components.UserRoleViewer,
			},
			components.UserRoleSpecification{
				Role: components.UserRoleEditor,
			},
		},
		RemovedRoles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Role: components.UserRoleAnswerModerator,
			},
			components.UserRoleSpecification{
				Role: components.UserRoleEditor,
			},
			components.UserRoleSpecification{
				Role: components.UserRoleEditor,
			},
		},
		AudienceFilters: []components.FacetFilter{
			components.FacetFilter{
				FieldName: types.String("type"),
				Values: []components.FacetFilterValue{
					components.FacetFilterValue{
						Value:        types.String("Spreadsheet"),
						RelationType: components.RelationTypeEquals.ToPointer(),
					},
					components.FacetFilterValue{
						Value:        types.String("Presentation"),
						RelationType: components.RelationTypeEquals.ToPointer(),
					},
				},
			},
		},
		ID: 595467,
		Creator: &components.Person{
			Name:         "George Clooney",
			ObfuscatedID: "abc123",
		},
		UpdatedBy: &components.Person{
			Name:         "George Clooney",
			ObfuscatedID: "abc123",
		},
		Items: []components.CollectionItem{
			components.CollectionItem{
				CollectionID: 619716,
				CreatedBy: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
				},
				Document: &components.Document{
					Metadata: &components.DocumentMetadata{
						Datasource: types.String("datasource"),
						ObjectType: types.String("Feature Request"),
						Container:  types.String("container"),
						ParentID:   types.String("JIRA_EN-1337"),
						MimeType:   types.String("mimeType"),
						DocumentID: types.String("documentId"),
						CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						Author: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						Owner: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						Components: []string{
							"Backend",
							"Networking",
						},
						Status: types.String("[\"Done\"]"),
						AssignedTo: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						Interactions: &components.DocumentInteractions{},
						Verification: &components.Verification{
							State: components.StateVerified,
							Metadata: &components.VerificationMetadata{
								LastVerifier: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
								},
								LastReminder: &components.Reminder{
									Assignee: components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
									},
									Requestor: &components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
									},
									RemindAt: 22113,
								},
							},
						},
						CustomData: map[string]components.CustomDataValue{
							"someCustomField": components.CustomDataValue{},
						},
						ContactPerson: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
					},
				},
				Collection: &components.Collection{
					Name:        "<value>",
					Description: "queasily down worthy generously than narrate pish off",
					AudienceFilters: []components.FacetFilter{
						components.FacetFilter{
							FieldName: types.String("type"),
							Values: []components.FacetFilterValue{
								components.FacetFilterValue{
									Value:        types.String("Spreadsheet"),
									RelationType: components.RelationTypeEquals.ToPointer(),
								},
								components.FacetFilterValue{
									Value:        types.String("Presentation"),
									RelationType: components.RelationTypeEquals.ToPointer(),
								},
							},
						},
					},
					ID: 567572,
				},
				ItemType: components.CollectionItemItemTypeText,
			},
		},
		Children: []components.Collection{
			components.Collection{
				Name:        "<value>",
				Description: "since straight gadzooks pulp",
				AudienceFilters: []components.FacetFilter{
					components.FacetFilter{
						FieldName: types.String("type"),
						Values: []components.FacetFilterValue{
							components.FacetFilterValue{
								Value:        types.String("Spreadsheet"),
								RelationType: components.RelationTypeEquals.ToPointer(),
							},
							components.FacetFilterValue{
								Value:        types.String("Presentation"),
								RelationType: components.RelationTypeEquals.ToPointer(),
							},
						},
					},
				},
				ID: 89970,
			},
		},
		Roles: []components.UserRoleSpecification{
			components.UserRoleSpecification{
				Role: components.UserRoleOwner,
			},
			components.UserRoleSpecification{
				Role: components.UserRoleAnswerModerator,
			},
		},
		ErrorCode: components.EditCollectionResponseErrorCodeNameExists,
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
