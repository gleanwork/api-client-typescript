// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Feed(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "feed[0]":
			dir.HandlerFunc("feed", testFeedFeed0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testFeedFeed0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.FeedResponse{
		ServerTimestamp: 152670,
		Results: []components.FeedResult{
			components.FeedResult{
				Category: components.FeedResultCategoryZeroStateWorkflowFavorites,
				PrimaryEntry: components.FeedEntry{
					Title: "<value>",
					CreatedBy: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
					Document: &components.Document{
						Metadata: &components.DocumentMetadata{
							Datasource: types.String("datasource"),
							ObjectType: types.String("Feature Request"),
							Container:  types.String("container"),
							ParentID:   types.String("JIRA_EN-1337"),
							MimeType:   types.String("mimeType"),
							DocumentID: types.String("documentId"),
							CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							Author: &components.Person{
								Name:         "name",
								ObfuscatedID: "<id>",
							},
							Components: []string{
								"Backend",
								"Networking",
							},
							Status: types.String("[\"Done\"]"),
							CustomData: map[string]components.CustomDataValue{
								"someCustomField": components.CustomDataValue{},
							},
						},
					},
					Event: &components.CalendarEvent{
						ID:  "<id>",
						URL: "https://cultivated-longboat.com",
						Attendees: &components.CalendarAttendees{
							People: []components.CalendarAttendee{},
						},
						GeneratedAttachments: []components.GeneratedAttachment{
							components.GeneratedAttachment{
								Documents: []components.Document{
									components.Document{},
									components.Document{},
								},
								Person: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
								},
								Customer: &components.Customer{
									ID: "<id>",
									Company: components.Company{
										Name:     "<value>",
										Location: types.String("New York City"),
										Industry: types.String("Finances"),
										About:    types.String("Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"),
									},
									Poc:   []components.Person{},
									Notes: types.String("CIO is interested in trying out the product."),
								},
								ExternalLinks: []components.StructuredLink{
									components.StructuredLink{
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
									components.StructuredLink{
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
								Content: []components.GeneratedAttachmentContent{
									components.GeneratedAttachmentContent{
										DisplayHeader: types.String("Action Items"),
									},
								},
							},
						},
					},
					Announcement: &components.Announcement{
						DraftID: types.Int64(342),
					},
					Collection: &components.Collection{
						Name:         "<value>",
						Description:  "toward potentially zealous",
						AddedRoles:   []components.UserRoleSpecification{},
						RemovedRoles: []components.UserRoleSpecification{},
						AudienceFilters: []components.FacetFilter{
							components.FacetFilter{
								FieldName: types.String("type"),
								Values: []components.FacetFilterValue{
									components.FacetFilterValue{
										Value:        types.String("Spreadsheet"),
										RelationType: components.RelationTypeEquals.ToPointer(),
									},
									components.FacetFilterValue{
										Value:        types.String("Presentation"),
										RelationType: components.RelationTypeEquals.ToPointer(),
									},
								},
							},
						},
						ID: 455039,
						Creator: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						UpdatedBy: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						Items: []components.CollectionItem{},
						Roles: []components.UserRoleSpecification{},
					},
					CollectionItem: &components.CollectionItem{
						CollectionID: 250166,
						ItemType:     components.CollectionItemItemTypeDocument,
					},
					PromptTemplate: &components.PromptTemplateResult{
						PromptTemplate: &components.PromptTemplate{
							Template: "<value>",
							AddedRoles: []components.UserRoleSpecification{
								components.UserRoleSpecification{
									Role: components.UserRoleAnswerModerator,
								},
							},
							RemovedRoles: []components.UserRoleSpecification{
								components.UserRoleSpecification{
									Role: components.UserRoleAnswerModerator,
								},
								components.UserRoleSpecification{
									Role: components.UserRoleEditor,
								},
							},
							LastUpdatedBy: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
							Roles: []components.UserRoleSpecification{
								components.UserRoleSpecification{
									Role: components.UserRoleVerifier,
								},
								components.UserRoleSpecification{
									Role: components.UserRoleAnswerModerator,
								},
								components.UserRoleSpecification{
									Role: components.UserRoleEditor,
								},
							},
						},
					},
					Workflow: &components.WorkflowResult{
						Workflow: components.Workflow{},
					},
					Activities: []components.UserActivity{
						components.UserActivity{
							Actor: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
						},
						components.UserActivity{},
						components.UserActivity{},
					},
				},
				SecondaryEntries: []components.FeedEntry{
					components.FeedEntry{
						Title: "<value>",
						Event: &components.CalendarEvent{
							ID:  "<id>",
							URL: "https://partial-saw.com",
							GeneratedAttachments: []components.GeneratedAttachment{
								components.GeneratedAttachment{
									Documents: []components.Document{
										components.Document{},
										components.Document{},
										components.Document{},
									},
									ExternalLinks: []components.StructuredLink{
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
									Content: []components.GeneratedAttachmentContent{
										components.GeneratedAttachmentContent{
											DisplayHeader: types.String("Action Items"),
										},
									},
								},
								components.GeneratedAttachment{
									Documents: []components.Document{
										components.Document{},
										components.Document{},
										components.Document{},
									},
									ExternalLinks: []components.StructuredLink{
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
									Content: []components.GeneratedAttachmentContent{
										components.GeneratedAttachmentContent{
											DisplayHeader: types.String("Action Items"),
										},
									},
								},
							},
						},
						Announcement: &components.Announcement{
							DraftID: types.Int64(342),
						},
						PromptTemplate: &components.PromptTemplateResult{
							PromptTemplate: &components.PromptTemplate{
								Template: "<value>",
								AddedRoles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleEditor,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleVerifier,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleEditor,
									},
								},
								RemovedRoles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleViewer,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleVerifier,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
								},
								Roles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleEditor,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
								},
							},
						},
						Workflow: &components.WorkflowResult{
							Workflow: components.Workflow{},
						},
						Activities: []components.UserActivity{
							components.UserActivity{},
							components.UserActivity{},
							components.UserActivity{},
						},
					},
				},
			},
			components.FeedResult{
				Category: components.FeedResultCategoryDisplayableList,
				PrimaryEntry: components.FeedEntry{
					Title: "<value>",
					Event: &components.CalendarEvent{
						ID:  "<id>",
						URL: "https://qualified-plumber.info",
						GeneratedAttachments: []components.GeneratedAttachment{
							components.GeneratedAttachment{
								Documents: []components.Document{
									components.Document{},
								},
								ExternalLinks: []components.StructuredLink{
									components.StructuredLink{
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
									components.StructuredLink{
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
								Content: []components.GeneratedAttachmentContent{
									components.GeneratedAttachmentContent{
										DisplayHeader: types.String("Action Items"),
									},
								},
							},
						},
					},
					Announcement: &components.Announcement{
						DraftID: types.Int64(342),
					},
					PromptTemplate: &components.PromptTemplateResult{
						PromptTemplate: &components.PromptTemplate{
							Template: "<value>",
							AddedRoles: []components.UserRoleSpecification{
								components.UserRoleSpecification{
									Role: components.UserRoleOwner,
								},
							},
							RemovedRoles: []components.UserRoleSpecification{
								components.UserRoleSpecification{
									Role: components.UserRoleViewer,
								},
								components.UserRoleSpecification{
									Role: components.UserRoleVerifier,
								},
							},
							Roles: []components.UserRoleSpecification{
								components.UserRoleSpecification{
									Role: components.UserRoleEditor,
								},
								components.UserRoleSpecification{
									Role: components.UserRoleVerifier,
								},
								components.UserRoleSpecification{
									Role: components.UserRoleEditor,
								},
							},
						},
					},
					Workflow: &components.WorkflowResult{
						Workflow: components.Workflow{},
					},
					Activities: []components.UserActivity{
						components.UserActivity{},
						components.UserActivity{},
					},
				},
				SecondaryEntries: []components.FeedEntry{
					components.FeedEntry{
						Title: "<value>",
						Event: &components.CalendarEvent{
							ID:  "<id>",
							URL: "https://utter-populist.net",
							GeneratedAttachments: []components.GeneratedAttachment{
								components.GeneratedAttachment{
									Documents: []components.Document{
										components.Document{},
									},
									ExternalLinks: []components.StructuredLink{
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
									Content: []components.GeneratedAttachmentContent{
										components.GeneratedAttachmentContent{
											DisplayHeader: types.String("Action Items"),
										},
									},
								},
							},
						},
						Announcement: &components.Announcement{
							DraftID: types.Int64(342),
						},
						PromptTemplate: &components.PromptTemplateResult{
							PromptTemplate: &components.PromptTemplate{
								Template: "<value>",
								AddedRoles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleViewer,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleEditor,
									},
								},
								RemovedRoles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleOwner,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
								},
								Roles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleVerifier,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
								},
							},
						},
						Workflow: &components.WorkflowResult{
							Workflow: components.Workflow{},
						},
						Activities: []components.UserActivity{
							components.UserActivity{},
							components.UserActivity{},
							components.UserActivity{},
						},
					},
					components.FeedEntry{
						Title: "<value>",
						Event: &components.CalendarEvent{
							ID:  "<id>",
							URL: "https://babyish-quinoa.name/",
							GeneratedAttachments: []components.GeneratedAttachment{
								components.GeneratedAttachment{
									Documents: []components.Document{
										components.Document{},
										components.Document{},
										components.Document{},
									},
									ExternalLinks: []components.StructuredLink{
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
										components.StructuredLink{
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
									Content: []components.GeneratedAttachmentContent{
										components.GeneratedAttachmentContent{
											DisplayHeader: types.String("Action Items"),
										},
									},
								},
							},
						},
						Announcement: &components.Announcement{
							DraftID: types.Int64(342),
						},
						PromptTemplate: &components.PromptTemplateResult{
							PromptTemplate: &components.PromptTemplate{
								Template: "<value>",
								AddedRoles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleViewer,
									},
								},
								RemovedRoles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleVerifier,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleVerifier,
									},
									components.UserRoleSpecification{
										Role: components.UserRoleAnswerModerator,
									},
								},
								Roles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Role: components.UserRoleViewer,
									},
								},
							},
						},
						Workflow: &components.WorkflowResult{
							Workflow: components.Workflow{},
						},
						Activities: []components.UserActivity{
							components.UserActivity{},
							components.UserActivity{},
							components.UserActivity{},
						},
					},
				},
			},
		},
		FacetResults: map[string][]components.FacetResult{
			"key": []components.FacetResult{
				components.FacetResult{
					SourceName:   types.String("container_name"),
					OperatorName: types.String("SelectMultiple"),
					Buckets: []components.FacetBucket{
						components.FacetBucket{
							Count:      types.Int64(1),
							Datasource: types.String("jira"),
							Percentage: types.Int64(5),
							Value: &components.FacetValue{
								StringValue:  types.String("engineering"),
								IntegerValue: types.Int64(5),
								DisplayLabel: types.String("engineering"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
						components.FacetBucket{
							Count:      types.Int64(1),
							Datasource: types.String("jira"),
							Percentage: types.Int64(5),
							Value: &components.FacetValue{
								StringValue:  types.String("engineering"),
								IntegerValue: types.Int64(5),
								DisplayLabel: types.String("engineering"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
						components.FacetBucket{
							Count:      types.Int64(1),
							Datasource: types.String("jira"),
							Percentage: types.Int64(5),
							Value: &components.FacetValue{
								StringValue:  types.String("engineering"),
								IntegerValue: types.Int64(5),
								DisplayLabel: types.String("engineering"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
					HasMoreBuckets: types.Bool(false),
					GroupName:      types.String("Service Cloud"),
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
