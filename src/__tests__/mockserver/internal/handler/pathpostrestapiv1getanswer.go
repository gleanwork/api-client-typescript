// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Getanswer(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getanswer[0]":
			dir.HandlerFunc("getanswer", testGetanswerGetanswer0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetanswerGetanswer0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetAnswerResponse{
		AnswerResult: &components.AnswerResult{
			Answer: components.Answer{
				ID:              3,
				DocID:           types.String("ANSWERS_answer_3"),
				Question:        types.String("Why is the sky blue?"),
				BodyText:        types.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
				AudienceFilters: []components.FacetFilter{},
				AddedRoles:      []components.UserRoleSpecification{},
				RemovedRoles:    []components.UserRoleSpecification{},
				Roles:           []components.UserRoleSpecification{},
				CombinedAnswerText: &components.StructuredText{
					Text:           "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
					StructuredList: []components.StructuredTextItem{},
				},
				Likes: &components.AnswerLikes{
					LikedBy:     []components.AnswerLike{},
					LikedByUser: true,
					NumLikes:    22508,
				},
				Author: &components.Person{
					Name:             "George Clooney",
					ObfuscatedID:     "abc123",
					RelatedDocuments: []components.RelatedDocuments{},
					Metadata: &components.PersonMetadata{
						Type:              components.PersonMetadataTypeFullTime.ToPointer(),
						Title:             types.String("Actor"),
						Department:        types.String("Movies"),
						Email:             types.String("george@example.com"),
						Location:          types.String("Hollywood, CA"),
						ManagementChain:   []components.Person{},
						Phone:             types.String("6505551234"),
						PhotoURL:          types.String("https://example.com/george.jpg"),
						Reports:           []components.Person{},
						StartDate:         types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{},
						QuerySuggestions: &components.QuerySuggestionList{
							Suggestions: []components.QuerySuggestion{},
						},
						InviteInfo: &components.InviteInfo{
							Invites: []components.ChannelInviteInfo{},
						},
						CustomFields: []components.CustomFieldData{},
						Badges:       []components.Badge{},
					},
				},
				UpdatedBy: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
				},
				Verification: &components.Verification{
					State: components.StateUnverified,
					Metadata: &components.VerificationMetadata{
						LastVerifier: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						Reminders: []components.Reminder{},
						LastReminder: &components.Reminder{
							Assignee: components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
							Requestor: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
							RemindAt: 129663,
						},
						CandidateVerifiers: []components.Person{},
					},
				},
				Board: &components.AnswerBoard{
					Name:            "<value>",
					Description:     "over aha if unless fooey unbearably",
					AudienceFilters: []components.FacetFilter{},
					ID:              342305,
					Creator: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
				},
				Collections: []components.Collection{},
				SourceDocument: &components.Document{
					Metadata: &components.DocumentMetadata{
						Datasource: types.String("datasource"),
						ObjectType: types.String("Feature Request"),
						Container:  types.String("container"),
						ParentID:   types.String("JIRA_EN-1337"),
						MimeType:   types.String("mimeType"),
						DocumentID: types.String("documentId"),
						CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						Owner: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						MentionedPeople: []components.Person{},
						Components: []string{
							"Backend",
							"Networking",
						},
						Status: types.String("[\"Done\"]"),
						Pins:   []components.PinDocument{},
						AssignedTo: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						Interactions: &components.DocumentInteractions{
							Reacts: []components.Reaction{},
							Shares: []components.Share{},
						},
						CustomData: map[string]components.CustomDataValue{
							"someCustomField": components.CustomDataValue{},
						},
						ContactPerson: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
					},
				},
			},
		},
		Error: &components.GetAnswerError{
			AnswerAuthor: &components.Person{
				Name:         "George Clooney",
				ObfuscatedID: "abc123",
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
