// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Getchat(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getchat[0]":
			dir.HandlerFunc("getchat", testGetchatGetchat0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetchatGetchat0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetChatResponse{
		ChatResult: &components.ChatResult{
			Chat: &components.Chat{
				CreatedBy: &components.Person{
					Name:             "George Clooney",
					ObfuscatedID:     "abc123",
					RelatedDocuments: []components.RelatedDocuments{},
					Metadata: &components.PersonMetadata{
						Type:       components.PersonMetadataTypeFullTime.ToPointer(),
						Title:      types.String("Actor"),
						Department: types.String("Movies"),
						Email:      types.String("george@example.com"),
						Location:   types.String("Hollywood, CA"),
						Phone:      types.String("6505551234"),
						PhotoURL:   types.String("https://example.com/george.jpg"),
						StartDate:  types.MustNewDateFromString("2000-01-23"),
						DatasourceProfile: []components.DatasourceProfile{
							components.DatasourceProfile{
								Datasource: "github",
								Handle:     "<value>",
							},
						},
						QuerySuggestions: &components.QuerySuggestionList{
							Suggestions: []components.QuerySuggestion{},
						},
						InviteInfo: &components.InviteInfo{
							Invites: []components.ChannelInviteInfo{},
						},
						CustomFields: []components.CustomFieldData{},
						Badges: []components.Badge{
							components.Badge{
								Key:         types.String("deployment_name_new_hire"),
								DisplayName: types.String("New hire"),
								IconConfig: &components.IconConfig{
									Color:    types.String("#343CED"),
									Key:      types.String("person_icon"),
									IconType: components.IconTypeGlyph.ToPointer(),
									Name:     types.String("user"),
								},
							},
						},
					},
				},
				Icon: &components.IconConfig{
					Color:    types.String("#343CED"),
					Key:      types.String("person_icon"),
					IconType: components.IconTypeGlyph.ToPointer(),
					Name:     types.String("user"),
				},
				Messages: []components.ChatMessage{
					components.ChatMessage{
						Author: components.AuthorUser.ToPointer(),
						Citations: []components.ChatMessageCitation{
							components.ChatMessageCitation{
								SourceDocument: &components.Document{
									Metadata: &components.DocumentMetadata{
										Datasource: types.String("datasource"),
										ObjectType: types.String("Feature Request"),
										Container:  types.String("container"),
										ParentID:   types.String("JIRA_EN-1337"),
										MimeType:   types.String("mimeType"),
										DocumentID: types.String("documentId"),
										CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
										UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
										Author: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										Owner: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										Components: []string{
											"Backend",
											"Networking",
										},
										Status: types.String("[\"Done\"]"),
										AssignedTo: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										UpdatedBy: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										Interactions: &components.DocumentInteractions{},
										Verification: &components.Verification{
											State: components.StateVerified,
											Metadata: &components.VerificationMetadata{
												LastVerifier: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
												LastReminder: &components.Reminder{
													Assignee: components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
													},
													Requestor: &components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
													},
													RemindAt: 755817,
												},
											},
										},
										CustomData: map[string]components.CustomDataValue{
											"someCustomField": components.CustomDataValue{},
										},
										ContactPerson: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
									},
								},
								SourceFile: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
								},
								SourcePerson: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
								},
								ReferenceRanges: []components.ReferenceRange{
									components.ReferenceRange{
										TextRange: &components.TextRange{
											StartIndex: 811122,
											Document:   &components.Document{},
										},
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet:  "snippet",
												MimeType: types.String("mimeType"),
											},
										},
									},
									components.ReferenceRange{
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet:  "snippet",
												MimeType: types.String("mimeType"),
											},
										},
									},
								},
							},
							components.ChatMessageCitation{
								SourceFile: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
								},
								ReferenceRanges: []components.ReferenceRange{
									components.ReferenceRange{
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet:  "snippet",
												MimeType: types.String("mimeType"),
											},
										},
									},
									components.ReferenceRange{
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet:  "snippet",
												MimeType: types.String("mimeType"),
											},
										},
									},
								},
							},
							components.ChatMessageCitation{
								SourceFile: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
								},
								ReferenceRanges: []components.ReferenceRange{
									components.ReferenceRange{
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet:  "snippet",
												MimeType: types.String("mimeType"),
											},
										},
									},
									components.ReferenceRange{
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet:  "snippet",
												MimeType: types.String("mimeType"),
											},
										},
									},
								},
							},
						},
						Fragments: []components.ChatMessageFragment{
							components.ChatMessageFragment{
								StructuredResults: []components.StructuredResult{
									components.StructuredResult{
										Person: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										Customer: &components.Customer{
											ID: "<id>",
											Company: components.Company{
												Name:     "<value>",
												Location: types.String("New York City"),
												Industry: types.String("Finances"),
												About:    types.String("Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"),
											},
											Poc:   []components.Person{},
											Notes: types.String("CIO is interested in trying out the product."),
										},
										Team: &components.Team{
											ID:      "<id>",
											Name:    "<value>",
											Members: []components.PersonToTeamRelationship{},
											DatasourceProfiles: []components.DatasourceProfile{
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
											},
											Status:       components.TeamStatusProcessed.ToPointer(),
											CanBeDeleted: types.Bool(true),
										},
										CustomEntity: &components.CustomEntity{},
										Answer: &components.Answer{
											ID:       3,
											DocID:    types.String("ANSWERS_answer_3"),
											Question: types.String("Why is the sky blue?"),
											BodyText: types.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
											AudienceFilters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: types.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        types.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        types.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
											CombinedAnswerText: &components.StructuredText{
												Text:           "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
												StructuredList: []components.StructuredTextItem{},
											},
											Likes: &components.AnswerLikes{
												LikedBy:     []components.AnswerLike{},
												LikedByUser: false,
												NumLikes:    470039,
											},
											Board: &components.AnswerBoard{
												Name:        "<value>",
												Description: "a igloo verbally lender lack since shabby",
												AudienceFilters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
												ID: 541458,
												Creator: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
											},
										},
										ExtractedQnA: &components.ExtractedQnA{
											QuestionResult: &components.SearchResult{
												Title:                  types.String("title"),
												URL:                    "https://example.com/foo/bar",
												NativeAppURL:           types.String("slack://foo/bar"),
												RelatedResults:         []components.RelatedDocuments{},
												AllClusteredResults:    []components.ClusterGroup{},
												MustIncludeSuggestions: &components.QuerySuggestionList{},
												QuerySuggestion: &components.QuerySuggestion{
													Query: "app:github type:pull author:mortimer",
													SearchProviderInfo: &components.SearchProviderInfo{
														Name:                  types.String("Google"),
														SearchLinkURLTemplate: types.String("https://www.google.com/search?q={query}&hl=en"),
													},
													Label:      types.String("Mortimer's PRs"),
													Datasource: types.String("github"),
													RequestOptions: &components.SearchRequestOptions{
														DatasourceFilter: types.String("JIRA"),
														DatasourcesFilter: []string{
															"JIRA",
														},
														QueryOverridesFacetFilters: types.Bool(true),
														FacetFilters: []components.FacetFilter{
															components.FacetFilter{
																FieldName: types.String("type"),
																Values: []components.FacetFilterValue{
																	components.FacetFilterValue{
																		Value:        types.String("Spreadsheet"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																	components.FacetFilterValue{
																		Value:        types.String("Presentation"),
																		RelationType: components.RelationTypeEquals.ToPointer(),
																	},
																},
															},
														},
														FacetFilterSets: []components.FacetFilterSet{
															components.FacetFilterSet{
																Filters: []components.FacetFilter{
																	components.FacetFilter{
																		FieldName: types.String("type"),
																		Values: []components.FacetFilterValue{
																			components.FacetFilterValue{
																				Value:        types.String("Spreadsheet"),
																				RelationType: components.RelationTypeEquals.ToPointer(),
																			},
																			components.FacetFilterValue{
																				Value:        types.String("Presentation"),
																				RelationType: components.RelationTypeEquals.ToPointer(),
																			},
																		},
																	},
																},
															},
															components.FacetFilterSet{
																Filters: []components.FacetFilter{
																	components.FacetFilter{
																		FieldName: types.String("type"),
																		Values: []components.FacetFilterValue{
																			components.FacetFilterValue{
																				Value:        types.String("Spreadsheet"),
																				RelationType: components.RelationTypeEquals.ToPointer(),
																			},
																			components.FacetFilterValue{
																				Value:        types.String("Presentation"),
																				RelationType: components.RelationTypeEquals.ToPointer(),
																			},
																		},
																	},
																},
															},
														},
														FacetBucketSize: 851553,
														AuthTokens: []components.AuthToken{
															components.AuthToken{
																AccessToken: "123abc",
																Datasource:  "gmail",
																Scope:       types.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
																TokenType:   types.String("Bearer"),
																AuthUser:    types.String("1"),
															},
														},
													},
													InputDetails: &components.SearchRequestInputDetails{
														HasCopyPaste: types.Bool(true),
													},
												},
											},
										},
										Meeting: &components.Meeting{
											Attendees: &components.CalendarAttendees{
												People: []components.CalendarAttendee{},
											},
										},
										Collection: &components.Collection{
											Name:        "<value>",
											Description: "ruddy those tag",
											AudienceFilters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: types.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        types.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        types.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
											ID: 638117,
										},
										AnswerBoard: &components.AnswerBoard{
											Name:        "<value>",
											Description: "amongst outside whose dally meh traffic",
											AudienceFilters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: types.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        types.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        types.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
											ID: 620338,
										},
										Code: &components.Code{
											RepoName: types.String("scio"),
											FileName: types.String("README.md"),
											Lines:    []components.CodeLine{},
										},
										Shortcut: &components.Shortcut{
											InputAlias:          "<value>",
											DestinationDocument: &components.Document{},
										},
										RelatedQuestion: &components.RelatedQuestion{},
									},
								},
								File: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
								},
								Action: &components.ToolInfo{
									Metadata: &components.ToolMetadata{
										Type:               components.ToolMetadataTypeAction,
										Name:               "<value>",
										DisplayName:        "Brice_Runolfsson21",
										DisplayDescription: "<value>",
										ObjectName:         types.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
									},
								},
							},
							components.ChatMessageFragment{
								StructuredResults: []components.StructuredResult{
									components.StructuredResult{},
									components.StructuredResult{},
								},
								File: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
								},
								Action: &components.ToolInfo{
									Metadata: &components.ToolMetadata{
										Type:               components.ToolMetadataTypeRetrieval,
										Name:               "<value>",
										DisplayName:        "Hope_Torphy74",
										DisplayDescription: "<value>",
										ObjectName:         types.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
									},
								},
							},
						},
						MessageType: components.MessageTypeContent.ToPointer(),
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
