// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Getchat(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getchat[0]":
			dir.HandlerFunc("getchat", testGetchatGetchat0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetchatGetchat0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetChatResponse{
		ChatResult: &components.ChatResult{
			Chat: &components.Chat{
				ID:         types.String("string"),
				CreateTime: types.Int64(0),
				CreatedBy: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
				},
				UpdateTime:      types.Int64(0),
				Name:            types.String("string"),
				ApplicationID:   types.String("string"),
				ApplicationName: types.String("string"),
				Icon: &components.IconConfig{
					Color:    types.String("#343CED"),
					Key:      types.String("person_icon"),
					IconType: components.IconTypeGlyph.ToPointer(),
					Name:     types.String("user"),
				},
				Messages: []components.ChatMessage{
					components.ChatMessage{
						AgentConfig: &components.AgentConfig{
							Agent: components.AgentEnumDefault.ToPointer(),
							Mode:  components.ModeDefault.ToPointer(),
						},
						Author: components.AuthorUser.ToPointer(),
						Citations: []components.ChatMessageCitation{
							components.ChatMessageCitation{
								TrackingToken: types.String("string"),
								SourceDocument: &components.Document{
									ID:            types.String("string"),
									Datasource:    types.String("string"),
									ConnectorType: components.ConnectorTypeAPICrawl.ToPointer(),
									DocType:       types.String("string"),
									Content: &components.DocumentContent{
										FullTextList: []string{
											"<value>",
										},
									},
									Title: types.String("string"),
									URL:   types.String("string"),
									Metadata: &components.DocumentMetadata{
										Datasource: types.String("datasource"),
										ObjectType: types.String("Feature Request"),
										Container:  types.String("container"),
										ParentID:   types.String("JIRA_EN-1337"),
										MimeType:   types.String("mimeType"),
										DocumentID: types.String("documentId"),
										CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
										UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
										Author: &components.Person{
											Name:         "name",
											ObfuscatedID: "<id>",
										},
										Components: []string{
											"Backend",
											"Networking",
										},
										Status: types.String("[\"Done\"]"),
										CustomData: map[string]components.CustomDataValue{
											"someCustomField": components.CustomDataValue{},
										},
									},
									Sections: []components.DocumentSection{
										components.DocumentSection{
											Title: types.String("<value>"),
											URL:   types.String("https://usable-extension.biz/"),
										},
									},
								},
								SourceFile: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
									Metadata: &components.ChatFileMetadata{
										Status:        components.ChatFileStatusProcessing.ToPointer(),
										UploadTime:    types.Int64(0),
										ProcessedSize: types.Int64(0),
										FailureReason: components.ChatFileFailureReasonParseFailed.ToPointer(),
										MimeType:      types.String("string"),
									},
								},
								SourcePerson: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
								},
								ReferenceRanges: []components.ReferenceRange{
									components.ReferenceRange{
										TextRange: &components.TextRange{
											StartIndex: 90915,
											EndIndex:   types.Int64(535485),
											Type:       components.TextRangeTypeLink.ToPointer(),
											URL:        types.String("https://superficial-babushka.net/"),
											Document:   &components.Document{},
										},
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet: "<value>",
												Ranges:  []components.TextRange{},
											},
										},
									},
								},
							},
						},
						UploadedFileIds: []string{
							"string",
						},
						Fragments: []components.ChatMessageFragment{
							components.ChatMessageFragment{
								StructuredResults: []components.StructuredResult{
									components.StructuredResult{
										Person: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										Customer: &components.Customer{
											ID:      "<id>",
											Domains: []string{},
											Company: components.Company{
												Name:     "<value>",
												Location: types.String("New York City"),
												Industry: types.String("Finances"),
												About:    types.String("Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"),
											},
											DocumentCounts: map[string]int64{
												"key": 747213,
											},
											Poc:                   []components.Person{},
											MergedCustomers:       []components.Customer{},
											StartDate:             types.MustNewDateFromString("2025-08-31"),
											ContractAnnualRevenue: types.Float64(5401.83),
											Notes:                 types.String("<value>"),
										},
										Team: &components.Team{
											ID:                 "<id>",
											Name:               "<value>",
											Description:        types.String("ouch courteous following wetly"),
											BusinessUnit:       types.String("<value>"),
											Department:         types.String("<value>"),
											PhotoURL:           types.String("https://unsteady-toothpick.name/"),
											BannerURL:          types.String("https://regular-pantyhose.net"),
											ExternalLink:       types.String("https://competent-puppet.name/"),
											Members:            []components.PersonToTeamRelationship{},
											MemberCount:        types.Int64(540632),
											Emails:             []components.TeamEmail{},
											DatasourceProfiles: []components.DatasourceProfile{},
											Datasource:         types.String("<value>"),
											CreatedFrom:        types.String("<value>"),
											LastUpdatedAt:      types.MustNewTimeFromString("2025-01-24T21:14:12.285Z"),
											Status:             components.TeamStatusQueuedForCreation.ToPointer(),
											CanBeDeleted:       types.Bool(true),
											LoggingID:          types.String("<id>"),
										},
										CustomEntity: &components.CustomEntity{
											ID:         types.String("<id>"),
											Title:      types.String("<value>"),
											Datasource: types.String("<value>"),
											ObjectType: types.String("<value>"),
											Roles:      []components.UserRoleSpecification{},
										},
										Answer: &components.Answer{
											ID:                 804111,
											DocID:              types.String("<id>"),
											Question:           types.String("<value>"),
											QuestionVariations: []string{},
											BodyText:           types.String("<value>"),
											BoardID:            types.Int64(672311),
											AudienceFilters:    []components.FacetFilter{},
											AddedRoles:         []components.UserRoleSpecification{},
											RemovedRoles:       []components.UserRoleSpecification{},
											SourceDocumentSpec: types.Pointer(components.CreateDocumentSpecUnionDocumentSpec1(
												components.DocumentSpec1{},
											)),
											SourceType: components.AnswerSourceTypeDocument.ToPointer(),
											CombinedAnswerText: &components.StructuredText{
												Text:           "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
												StructuredList: []components.StructuredTextItem{},
											},
											Likes: &components.AnswerLikes{
												LikedBy:     []components.AnswerLike{},
												LikedByUser: true,
												NumLikes:    22508,
											},
											CreateTime: types.MustNewTimeFromString("2025-02-22T04:58:38.461Z"),
											UpdateTime: types.MustNewTimeFromString("2025-02-05T19:33:07.639Z"),
											UpdatedBy: &components.Person{
												Name:             "<value>",
												ObfuscatedID:     "<id>",
												RelatedDocuments: []components.RelatedDocuments{},
												Metadata: &components.PersonMetadata{
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
												},
											},
											Verification: &components.Verification{
												State: components.StateUnverified,
												Metadata: &components.VerificationMetadata{
													LastVerifier: &components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
													},
													Reminders: []components.Reminder{},
													LastReminder: &components.Reminder{
														Assignee: components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														Requestor: &components.Person{
															Name:         "George Clooney",
															ObfuscatedID: "abc123",
														},
														RemindAt: 129663,
													},
													CandidateVerifiers: []components.Person{},
												},
											},
											Board: &components.AnswerBoard{
												Name:            "<value>",
												Description:     "over aha if unless fooey unbearably",
												AudienceFilters: []components.FacetFilter{},
												ID:              342305,
												Creator: &components.Person{
													Name:         "George Clooney",
													ObfuscatedID: "abc123",
												},
											},
											Collections:      []components.Collection{},
											DocumentCategory: types.String("<value>"),
										},
										ExtractedQnA: &components.ExtractedQnA{
											Heading:  types.String("<value>"),
											Question: types.String("<value>"),
											QuestionResult: &components.SearchResult{
												URL:                 "https://needy-co-producer.net",
												RelatedResults:      []components.RelatedDocuments{},
												AllClusteredResults: []components.ClusterGroup{},
												MustIncludeSuggestions: &components.QuerySuggestionList{
													Suggestions: []components.QuerySuggestion{},
												},
												QuerySuggestion: &components.QuerySuggestion{
													Query:      "app:github type:pull author:mortimer",
													Label:      types.String("Mortimer's PRs"),
													Datasource: types.String("github"),
												},
												Pins: []components.PinDocument{},
											},
										},
										Meeting: &components.Meeting{
											ID:          types.String("<id>"),
											Title:       types.String("<value>"),
											Description: types.String("considering frequent brr crystallize tightly onto furthermore boyfriend"),
											StartTime:   types.MustNewTimeFromString("2025-11-28T06:04:49.964Z"),
											EndTime:     types.MustNewTimeFromString("2024-08-11T15:51:31.976Z"),
											Attendees: &components.CalendarAttendees{
												People: []components.CalendarAttendee{},
											},
										},
										App: &components.AppResult{
											Datasource: "<value>",
											DocType:    types.String("<value>"),
											MimeType:   types.String("<value>"),
											IconURL:    types.String("https://grizzled-graffiti.info"),
										},
										Collection: &components.Collection{
											Name:              "<value>",
											Description:       "for opposite question gray little plump",
											AudienceFilters:   []components.FacetFilter{},
											Icon:              types.String("<value>"),
											AdminLocked:       types.Bool(true),
											ParentID:          types.Int64(792696),
											AllowedDatasource: types.String("<value>"),
											ID:                111743,
											CreateTime:        types.MustNewTimeFromString("2023-11-25T02:09:48.536Z"),
											UpdateTime:        types.MustNewTimeFromString("2025-04-19T16:55:44.204Z"),
											ItemCount:         types.Int64(497740),
											ChildCount:        types.Int64(371949),
											Items:             []components.CollectionItem{},
											Shortcuts:         []string{},
											Children:          []components.Collection{},
										},
										AnswerBoard: &components.AnswerBoard{
											Name:            "<value>",
											Description:     "innocently shudder cop-out miserably",
											AudienceFilters: []components.FacetFilter{},
											ID:              495186,
											CreateTime:      types.MustNewTimeFromString("2025-10-17T14:54:40.617Z"),
											UpdateTime:      types.MustNewTimeFromString("2024-02-26T16:32:45.831Z"),
											ItemCount:       types.Int64(939903),
										},
										Code: &components.Code{
											RepoName: types.String("scio"),
											FileName: types.String("README.md"),
										},
										Shortcut: &components.Shortcut{
											InputAlias:     "<value>",
											Description:    types.String("amidst kowtow onto gust careless kindly suddenly before"),
											DestinationURL: "https://prudent-maintainer.net/",
											CreatedBy:      "<value>",
											CreateTime:     types.Int64(868672),
											UpdatedBy:      types.String("<value>"),
											UpdateTime:     types.Int64(861394),
											Unlisted:       types.Bool(false),
											URLTemplate:    types.String("<value>"),
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										RelatedQuestion: &components.RelatedQuestion{
											Question: types.String("<value>"),
											Answer:   types.String("<value>"),
										},
										Disambiguation: &components.Disambiguation{
											Name: types.String("<value>"),
											ID:   types.String("<id>"),
											Type: components.EntityTypeProject.ToPointer(),
										},
										TrackingToken: types.String("string"),
										Prominence:    components.ProminenceHero.ToPointer(),
										Source:        components.StructuredResultSourceExpertDetection.ToPointer(),
									},
								},
								TrackingToken: types.String("string"),
								Text:          types.String("string"),
								File: &components.ChatFile{
									ID:   types.String("FILE_1234"),
									URL:  types.String("www.google.com"),
									Name: types.String("sample.pdf"),
									Metadata: &components.ChatFileMetadata{
										Status:        components.ChatFileStatusProcessing.ToPointer(),
										UploadTime:    types.Int64(0),
										ProcessedSize: types.Int64(0),
										FailureReason: components.ChatFileFailureReasonParseFailed.ToPointer(),
										MimeType:      types.String("string"),
									},
								},
								Action: &components.ToolInfo{
									Metadata: &components.ToolMetadata{
										Type:               components.ToolMetadataTypeRetrieval,
										Name:               "string",
										DisplayName:        "string",
										ToolID:             types.String("string"),
										DisplayDescription: "string",
										LogoURL:            types.String("string"),
										ObjectName:         types.String("[\"HR ticket\",\"Email\",\"Chat message\"]"),
										KnowledgeType:      components.KnowledgeTypeNeutralKnowledge.ToPointer(),
										CreatedBy: &components.PersonObject{
											Name:         "<value>",
											ObfuscatedID: "<id>",
										},
										LastUpdatedBy: &components.PersonObject{
											Name:         "<value>",
											ObfuscatedID: "<id>",
										},
										CreatedAt:       types.MustNewTimeFromString("2019-08-24T14:15:22Z"),
										LastUpdatedAt:   types.MustNewTimeFromString("2019-08-24T14:15:22Z"),
										WriteActionType: components.WriteActionTypeRedirect.ToPointer(),
										AuthType:        components.AuthTypeNone.ToPointer(),
										Auth: &components.AuthConfig{
											IsOnPrem:         types.Bool(true),
											UsesCentralAuth:  types.Bool(true),
											Type:             components.AuthConfigTypeDwd.ToPointer(),
											GrantType:        components.GrantTypeClientCredentials.ToPointer(),
											Status:           components.AuthConfigStatusAwaitingAuth.ToPointer(),
											ClientURL:        types.String("https://political-blight.info/"),
											Scopes:           []string{},
											Audiences:        []string{},
											AuthorizationURL: types.String("https://prickly-celsius.name/"),
											LastAuthorizedAt: types.MustNewTimeFromString("2025-06-21T06:59:07.414Z"),
										},
										Permissions:       &components.ObjectPermissions{},
										UsageInstructions: types.String("string"),
										IsSetupFinished:   types.Bool(true),
									},
									Parameters: map[string]components.WriteActionParameter{
										"property1": components.WriteActionParameter{
											Type:           components.WriteActionParameterTypeString.ToPointer(),
											DisplayName:    types.String("Randy_Greenfelder"),
											Value:          types.String("<value>"),
											IsRequired:     types.Bool(true),
											Description:    types.String("brr detain known oof trash psst"),
											PossibleValues: []components.PossibleValue{},
										},
										"property2": components.WriteActionParameter{
											Type:           components.WriteActionParameterTypeInteger.ToPointer(),
											DisplayName:    types.String("Katelin_Ledner"),
											Value:          types.String("<value>"),
											IsRequired:     types.Bool(false),
											Description:    types.String("narrowcast tray likewise nautical minus"),
											PossibleValues: []components.PossibleValue{},
										},
									},
								},
							},
						},
						Ts:                   types.String("string"),
						MessageID:            types.String("string"),
						MessageTrackingToken: types.String("string"),
						MessageType:          components.MessageTypeUpdate.ToPointer(),
						HasMoreFragments:     types.Bool(true),
					},
				},
			},
			TrackingToken: types.String("string"),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
