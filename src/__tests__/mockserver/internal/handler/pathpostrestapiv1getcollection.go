// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Getcollection(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getcollection[0]":
			dir.HandlerFunc("getcollection", testGetcollectionGetcollection0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetcollectionGetcollection0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetCollectionResponse{
		Collection: &components.Collection{
			Name:            "<value>",
			Description:     "because almighty an",
			AddedRoles:      []components.UserRoleSpecification{},
			RemovedRoles:    []components.UserRoleSpecification{},
			AudienceFilters: []components.FacetFilter{},
			ID:              822820,
			Creator: &components.Person{
				Name:             "George Clooney",
				ObfuscatedID:     "abc123",
				RelatedDocuments: []components.RelatedDocuments{},
				Metadata: &components.PersonMetadata{
					Type:              components.PersonMetadataTypeFullTime.ToPointer(),
					Title:             types.String("Actor"),
					Department:        types.String("Movies"),
					Email:             types.String("george@example.com"),
					Location:          types.String("Hollywood, CA"),
					ManagementChain:   []components.Person{},
					Phone:             types.String("6505551234"),
					PhotoURL:          types.String("https://example.com/george.jpg"),
					Reports:           []components.Person{},
					StartDate:         types.MustNewDateFromString("2000-01-23"),
					DatasourceProfile: []components.DatasourceProfile{},
					QuerySuggestions: &components.QuerySuggestionList{
						Suggestions: []components.QuerySuggestion{},
					},
					InviteInfo: &components.InviteInfo{
						Invites: []components.ChannelInviteInfo{},
					},
					CustomFields: []components.CustomFieldData{},
					Badges:       []components.Badge{},
				},
			},
			UpdatedBy: &components.Person{
				Name:         "George Clooney",
				ObfuscatedID: "abc123",
			},
			Items: []components.CollectionItem{},
			Roles: []components.UserRoleSpecification{},
		},
		RootCollection: &components.Collection{
			Name:        "<value>",
			Description: "randomize excess once yahoo cannon pomelo gym",
			AudienceFilters: []components.FacetFilter{
				components.FacetFilter{
					FieldName: types.String("type"),
					Values: []components.FacetFilterValue{
						components.FacetFilterValue{
							Value:        types.String("Spreadsheet"),
							RelationType: components.RelationTypeEquals.ToPointer(),
						},
						components.FacetFilterValue{
							Value:        types.String("Presentation"),
							RelationType: components.RelationTypeEquals.ToPointer(),
						},
					},
				},
			},
			ID: 472597,
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
