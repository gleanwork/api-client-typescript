// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Getdocuments(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getdocuments[0]":
			dir.HandlerFunc("getdocuments", testGetdocumentsGetdocuments0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetdocumentsGetdocuments0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, ""); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.GetDocumentsResponse{
		Documents: map[string]components.DocumentOrErrorUnion{
			"key": components.CreateDocumentOrErrorUnionDocument(
				components.Document{},
			),
			"key1": components.CreateDocumentOrErrorUnionDocument(
				components.Document{
					Metadata: &components.DocumentMetadata{
						Datasource: types.String("datasource"),
						ObjectType: types.String("Feature Request"),
						Container:  types.String("container"),
						ParentID:   types.String("JIRA_EN-1337"),
						MimeType:   types.String("mimeType"),
						DocumentID: types.String("documentId"),
						CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						Author: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							RelatedDocuments: []components.RelatedDocuments{
								components.RelatedDocuments{
									QuerySuggestion: &components.QuerySuggestion{
										Query: "app:github type:pull author:mortimer",
										SearchProviderInfo: &components.SearchProviderInfo{
											Name:                  types.String("Google"),
											SearchLinkURLTemplate: types.String("https://www.google.com/search?q={query}&hl=en"),
										},
										Label:      types.String("Mortimer's PRs"),
										Datasource: types.String("github"),
										RequestOptions: &components.SearchRequestOptions{
											DatasourceFilter: types.String("JIRA"),
											DatasourcesFilter: []string{
												"JIRA",
											},
											QueryOverridesFacetFilters: types.Bool(true),
											FacetFilters: []components.FacetFilter{
												components.FacetFilter{
													FieldName: types.String("type"),
													Values: []components.FacetFilterValue{
														components.FacetFilterValue{
															Value:        types.String("Spreadsheet"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
														components.FacetFilterValue{
															Value:        types.String("Presentation"),
															RelationType: components.RelationTypeEquals.ToPointer(),
														},
													},
												},
											},
											FacetFilterSets: []components.FacetFilterSet{
												components.FacetFilterSet{
													Filters: []components.FacetFilter{
														components.FacetFilter{
															FieldName: types.String("type"),
															Values: []components.FacetFilterValue{
																components.FacetFilterValue{
																	Value:        types.String("Spreadsheet"),
																	RelationType: components.RelationTypeEquals.ToPointer(),
																},
																components.FacetFilterValue{
																	Value:        types.String("Presentation"),
																	RelationType: components.RelationTypeEquals.ToPointer(),
																},
															},
														},
													},
												},
											},
											FacetBucketSize: 535485,
											AuthTokens: []components.AuthToken{
												components.AuthToken{
													AccessToken: "123abc",
													Datasource:  "gmail",
													Scope:       types.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
													TokenType:   types.String("Bearer"),
													AuthUser:    types.String("1"),
												},
											},
										},
										Ranges: []components.TextRange{
											components.TextRange{
												StartIndex: 153092,
											},
											components.TextRange{
												StartIndex: 824606,
											},
											components.TextRange{
												StartIndex: 56142,
											},
										},
										InputDetails: &components.SearchRequestInputDetails{
											HasCopyPaste: types.Bool(true),
										},
									},
									Results: []components.SearchResult{
										components.SearchResult{
											Title:        types.String("title"),
											URL:          "https://example.com/foo/bar",
											NativeAppURL: types.String("slack://foo/bar"),
											Snippets: []components.SearchResultSnippet{
												components.SearchResultSnippet{
													Snippet:  "snippet",
													MimeType: types.String("mimeType"),
												},
											},
										},
									},
								},
							},
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{
									Suggestions: []components.QuerySuggestion{
										components.QuerySuggestion{
											Query:      "app:github type:pull author:mortimer",
											Label:      types.String("Mortimer's PRs"),
											Datasource: types.String("github"),
										},
									},
								},
								InviteInfo: &components.InviteInfo{
									Invites: []components.ChannelInviteInfo{
										components.ChannelInviteInfo{},
										components.ChannelInviteInfo{},
										components.ChannelInviteInfo{},
									},
								},
								CustomFields: []components.CustomFieldData{
									components.CustomFieldData{
										Label:       "<value>",
										Values:      []components.CustomFieldValue{},
										Displayable: types.Bool(true),
									},
								},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Owner: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						MentionedPeople: []components.Person{
							components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
						},
						Components: []string{
							"Backend",
							"Networking",
						},
						Status: types.String("[\"Done\"]"),
						Pins: []components.PinDocument{
							components.PinDocument{
								AudienceFilters: []components.FacetFilter{
									components.FacetFilter{
										FieldName: types.String("type"),
										Values: []components.FacetFilterValue{
											components.FacetFilterValue{
												Value:        types.String("Spreadsheet"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
											components.FacetFilterValue{
												Value:        types.String("Presentation"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
										},
									},
								},
								DocumentID: "<id>",
								Attribution: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								UpdatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
							},
							components.PinDocument{
								AudienceFilters: []components.FacetFilter{
									components.FacetFilter{
										FieldName: types.String("type"),
										Values: []components.FacetFilterValue{
											components.FacetFilterValue{
												Value:        types.String("Spreadsheet"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
											components.FacetFilterValue{
												Value:        types.String("Presentation"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
										},
									},
								},
								DocumentID: "<id>",
								Attribution: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								UpdatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
							},
						},
						AssignedTo: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						UpdatedBy: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Collections: []components.Collection{
							components.Collection{
								Name:        "<value>",
								Description: "informal stingy euphonium about regular aw culminate",
								AddedRoles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Person: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Role: components.UserRoleEditor,
									},
								},
								RemovedRoles: []components.UserRoleSpecification{
									components.UserRoleSpecification{
										Person: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Role: components.UserRoleOwner,
									},
									components.UserRoleSpecification{
										Person: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Role: components.UserRoleVerifier,
									},
									components.UserRoleSpecification{
										Person: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Role: components.UserRoleOwner,
									},
								},
								AudienceFilters: []components.FacetFilter{
									components.FacetFilter{
										FieldName: types.String("type"),
										Values: []components.FacetFilterValue{
											components.FacetFilterValue{
												Value:        types.String("Spreadsheet"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
											components.FacetFilterValue{
												Value:        types.String("Presentation"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
										},
									},
								},
								ID: 688273,
								Creator: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								UpdatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								Items: []components.CollectionItem{
									components.CollectionItem{
										CollectionID: 26529,
										CreatedBy: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Shortcut: &components.Shortcut{
											InputAlias: "<value>",
											CreatedBy: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
												Metadata: &components.PersonMetadata{
													Type:       components.PersonMetadataTypeFullTime.ToPointer(),
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
													DatasourceProfile: []components.DatasourceProfile{
														components.DatasourceProfile{
															Datasource: "github",
															Handle:     "<value>",
														},
													},
													QuerySuggestions: &components.QuerySuggestionList{},
													InviteInfo:       &components.InviteInfo{},
													Badges: []components.Badge{
														components.Badge{
															Key:         types.String("deployment_name_new_hire"),
															DisplayName: types.String("New hire"),
															IconConfig: &components.IconConfig{
																Color:    types.String("#343CED"),
																Key:      types.String("person_icon"),
																IconType: components.IconTypeGlyph.ToPointer(),
																Name:     types.String("user"),
															},
														},
													},
												},
											},
											UpdatedBy: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
												Metadata: &components.PersonMetadata{
													Type:       components.PersonMetadataTypeFullTime.ToPointer(),
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
													DatasourceProfile: []components.DatasourceProfile{
														components.DatasourceProfile{
															Datasource: "github",
															Handle:     "<value>",
														},
														components.DatasourceProfile{
															Datasource: "github",
															Handle:     "<value>",
														},
													},
													QuerySuggestions: &components.QuerySuggestionList{},
													InviteInfo:       &components.InviteInfo{},
													Badges: []components.Badge{
														components.Badge{
															Key:         types.String("deployment_name_new_hire"),
															DisplayName: types.String("New hire"),
															IconConfig: &components.IconConfig{
																Color:    types.String("#343CED"),
																Key:      types.String("person_icon"),
																IconType: components.IconTypeGlyph.ToPointer(),
																Name:     types.String("user"),
															},
														},
													},
												},
											},
											Roles: []components.UserRoleSpecification{
												components.UserRoleSpecification{
													Person: &components.Person{
														Name:         "George Clooney",
														ObfuscatedID: "abc123",
														Metadata: &components.PersonMetadata{
															Type:       components.PersonMetadataTypeFullTime.ToPointer(),
															Title:      types.String("Actor"),
															Department: types.String("Movies"),
															Email:      types.String("george@example.com"),
															Location:   types.String("Hollywood, CA"),
															Phone:      types.String("6505551234"),
															PhotoURL:   types.String("https://example.com/george.jpg"),
															StartDate:  types.MustNewDateFromString("2000-01-23"),
															DatasourceProfile: []components.DatasourceProfile{
																components.DatasourceProfile{
																	Datasource: "github",
																	Handle:     "<value>",
																},
																components.DatasourceProfile{
																	Datasource: "github",
																	Handle:     "<value>",
																},
																components.DatasourceProfile{
																	Datasource: "github",
																	Handle:     "<value>",
																},
															},
															QuerySuggestions: &components.QuerySuggestionList{},
															InviteInfo:       &components.InviteInfo{},
															Badges: []components.Badge{
																components.Badge{
																	Key:         types.String("deployment_name_new_hire"),
																	DisplayName: types.String("New hire"),
																	IconConfig: &components.IconConfig{
																		Color:    types.String("#343CED"),
																		Key:      types.String("person_icon"),
																		IconType: components.IconTypeGlyph.ToPointer(),
																		Name:     types.String("user"),
																	},
																},
															},
														},
													},
													Role: components.UserRoleViewer,
												},
											},
										},
										ItemType: components.CollectionItemItemTypeURL,
									},
									components.CollectionItem{
										CollectionID: 594987,
										CreatedBy: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Shortcut: &components.Shortcut{
											InputAlias: "<value>",
											CreatedBy: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
												Metadata: &components.PersonMetadata{
													Type:       components.PersonMetadataTypeFullTime.ToPointer(),
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
													DatasourceProfile: []components.DatasourceProfile{
														components.DatasourceProfile{
															Datasource: "github",
															Handle:     "<value>",
														},
													},
													QuerySuggestions: &components.QuerySuggestionList{},
													InviteInfo:       &components.InviteInfo{},
													Badges: []components.Badge{
														components.Badge{
															Key:         types.String("deployment_name_new_hire"),
															DisplayName: types.String("New hire"),
															IconConfig: &components.IconConfig{
																Color:    types.String("#343CED"),
																Key:      types.String("person_icon"),
																IconType: components.IconTypeGlyph.ToPointer(),
																Name:     types.String("user"),
															},
														},
													},
												},
											},
											UpdatedBy: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
												Metadata: &components.PersonMetadata{
													Type:       components.PersonMetadataTypeFullTime.ToPointer(),
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
													DatasourceProfile: []components.DatasourceProfile{
														components.DatasourceProfile{
															Datasource: "github",
															Handle:     "<value>",
														},
													},
													QuerySuggestions: &components.QuerySuggestionList{},
													InviteInfo:       &components.InviteInfo{},
													Badges: []components.Badge{
														components.Badge{
															Key:         types.String("deployment_name_new_hire"),
															DisplayName: types.String("New hire"),
															IconConfig: &components.IconConfig{
																Color:    types.String("#343CED"),
																Key:      types.String("person_icon"),
																IconType: components.IconTypeGlyph.ToPointer(),
																Name:     types.String("user"),
															},
														},
													},
												},
											},
										},
										ItemType: components.CollectionItemItemTypeURL,
									},
									components.CollectionItem{
										CollectionID: 56091,
										CreatedBy: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Shortcut: &components.Shortcut{
											InputAlias: "<value>",
											CreatedBy: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
												Metadata: &components.PersonMetadata{
													Type:       components.PersonMetadataTypeFullTime.ToPointer(),
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
													DatasourceProfile: []components.DatasourceProfile{
														components.DatasourceProfile{
															Datasource: "github",
															Handle:     "<value>",
														},
														components.DatasourceProfile{
															Datasource: "github",
															Handle:     "<value>",
														},
													},
													QuerySuggestions: &components.QuerySuggestionList{},
													InviteInfo:       &components.InviteInfo{},
													Badges: []components.Badge{
														components.Badge{
															Key:         types.String("deployment_name_new_hire"),
															DisplayName: types.String("New hire"),
															IconConfig: &components.IconConfig{
																Color:    types.String("#343CED"),
																Key:      types.String("person_icon"),
																IconType: components.IconTypeGlyph.ToPointer(),
																Name:     types.String("user"),
															},
														},
													},
												},
											},
											UpdatedBy: &components.Person{
												Name:         "George Clooney",
												ObfuscatedID: "abc123",
												Metadata: &components.PersonMetadata{
													Type:       components.PersonMetadataTypeFullTime.ToPointer(),
													Title:      types.String("Actor"),
													Department: types.String("Movies"),
													Email:      types.String("george@example.com"),
													Location:   types.String("Hollywood, CA"),
													Phone:      types.String("6505551234"),
													PhotoURL:   types.String("https://example.com/george.jpg"),
													StartDate:  types.MustNewDateFromString("2000-01-23"),
													DatasourceProfile: []components.DatasourceProfile{
														components.DatasourceProfile{
															Datasource: "github",
															Handle:     "<value>",
														},
													},
													QuerySuggestions: &components.QuerySuggestionList{},
													InviteInfo:       &components.InviteInfo{},
													Badges: []components.Badge{
														components.Badge{
															Key:         types.String("deployment_name_new_hire"),
															DisplayName: types.String("New hire"),
															IconConfig: &components.IconConfig{
																Color:    types.String("#343CED"),
																Key:      types.String("person_icon"),
																IconType: components.IconTypeGlyph.ToPointer(),
																Name:     types.String("user"),
															},
														},
													},
												},
											},
										},
										ItemType: components.CollectionItemItemTypeText,
									},
								},
							},
							components.Collection{
								Name:        "<value>",
								Description: "what gee yippee merrily provided serpentine bin favorable penalise",
								AudienceFilters: []components.FacetFilter{
									components.FacetFilter{
										FieldName: types.String("type"),
										Values: []components.FacetFilterValue{
											components.FacetFilterValue{
												Value:        types.String("Spreadsheet"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
											components.FacetFilterValue{
												Value:        types.String("Presentation"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
										},
									},
								},
								ID: 336445,
								Creator: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								UpdatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
							},
							components.Collection{
								Name:        "<value>",
								Description: "eek step-mother once reflecting youthful adumbrate blah quintessential amidst",
								AudienceFilters: []components.FacetFilter{
									components.FacetFilter{
										FieldName: types.String("type"),
										Values: []components.FacetFilterValue{
											components.FacetFilterValue{
												Value:        types.String("Spreadsheet"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
											components.FacetFilterValue{
												Value:        types.String("Presentation"),
												RelationType: components.RelationTypeEquals.ToPointer(),
											},
										},
									},
								},
								ID: 190100,
								Creator: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								UpdatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
							},
						},
						Interactions: &components.DocumentInteractions{
							Reacts: []components.Reaction{
								components.Reaction{
									Reactors: []components.Person{
										components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
									},
								},
								components.Reaction{},
								components.Reaction{},
							},
							Shares: []components.Share{
								components.Share{
									NumDaysAgo: 297779,
									Sharer: &components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
										Metadata: &components.PersonMetadata{
											Type:       components.PersonMetadataTypeFullTime.ToPointer(),
											Title:      types.String("Actor"),
											Department: types.String("Movies"),
											Email:      types.String("george@example.com"),
											Location:   types.String("Hollywood, CA"),
											Phone:      types.String("6505551234"),
											PhotoURL:   types.String("https://example.com/george.jpg"),
											StartDate:  types.MustNewDateFromString("2000-01-23"),
											DatasourceProfile: []components.DatasourceProfile{
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
											},
											QuerySuggestions: &components.QuerySuggestionList{},
											InviteInfo:       &components.InviteInfo{},
											Badges: []components.Badge{
												components.Badge{
													Key:         types.String("deployment_name_new_hire"),
													DisplayName: types.String("New hire"),
													IconConfig: &components.IconConfig{
														Color:    types.String("#343CED"),
														Key:      types.String("person_icon"),
														IconType: components.IconTypeGlyph.ToPointer(),
														Name:     types.String("user"),
													},
												},
											},
										},
									},
								},
							},
						},
						Verification: &components.Verification{
							State: components.StateVerified,
							Metadata: &components.VerificationMetadata{
								LastVerifier: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								Reminders: []components.Reminder{
									components.Reminder{
										Assignee: components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Requestor: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										RemindAt: 221056,
									},
									components.Reminder{
										Assignee: components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										Requestor: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
											Metadata: &components.PersonMetadata{
												Type:       components.PersonMetadataTypeFullTime.ToPointer(),
												Title:      types.String("Actor"),
												Department: types.String("Movies"),
												Email:      types.String("george@example.com"),
												Location:   types.String("Hollywood, CA"),
												Phone:      types.String("6505551234"),
												PhotoURL:   types.String("https://example.com/george.jpg"),
												StartDate:  types.MustNewDateFromString("2000-01-23"),
												DatasourceProfile: []components.DatasourceProfile{
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
													components.DatasourceProfile{
														Datasource: "github",
														Handle:     "<value>",
													},
												},
												QuerySuggestions: &components.QuerySuggestionList{},
												InviteInfo:       &components.InviteInfo{},
												Badges: []components.Badge{
													components.Badge{
														Key:         types.String("deployment_name_new_hire"),
														DisplayName: types.String("New hire"),
														IconConfig: &components.IconConfig{
															Color:    types.String("#343CED"),
															Key:      types.String("person_icon"),
															IconType: components.IconTypeGlyph.ToPointer(),
															Name:     types.String("user"),
														},
													},
												},
											},
										},
										RemindAt: 46441,
									},
								},
								LastReminder: &components.Reminder{
									Assignee: components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
										Metadata: &components.PersonMetadata{
											Type:       components.PersonMetadataTypeFullTime.ToPointer(),
											Title:      types.String("Actor"),
											Department: types.String("Movies"),
											Email:      types.String("george@example.com"),
											Location:   types.String("Hollywood, CA"),
											Phone:      types.String("6505551234"),
											PhotoURL:   types.String("https://example.com/george.jpg"),
											StartDate:  types.MustNewDateFromString("2000-01-23"),
											DatasourceProfile: []components.DatasourceProfile{
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
											},
											QuerySuggestions: &components.QuerySuggestionList{},
											InviteInfo:       &components.InviteInfo{},
											Badges: []components.Badge{
												components.Badge{
													Key:         types.String("deployment_name_new_hire"),
													DisplayName: types.String("New hire"),
													IconConfig: &components.IconConfig{
														Color:    types.String("#343CED"),
														Key:      types.String("person_icon"),
														IconType: components.IconTypeGlyph.ToPointer(),
														Name:     types.String("user"),
													},
												},
											},
										},
									},
									Requestor: &components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
										Metadata: &components.PersonMetadata{
											Type:       components.PersonMetadataTypeFullTime.ToPointer(),
											Title:      types.String("Actor"),
											Department: types.String("Movies"),
											Email:      types.String("george@example.com"),
											Location:   types.String("Hollywood, CA"),
											Phone:      types.String("6505551234"),
											PhotoURL:   types.String("https://example.com/george.jpg"),
											StartDate:  types.MustNewDateFromString("2000-01-23"),
											DatasourceProfile: []components.DatasourceProfile{
												components.DatasourceProfile{
													Datasource: "github",
													Handle:     "<value>",
												},
											},
											QuerySuggestions: &components.QuerySuggestionList{},
											InviteInfo:       &components.InviteInfo{},
											Badges: []components.Badge{
												components.Badge{
													Key:         types.String("deployment_name_new_hire"),
													DisplayName: types.String("New hire"),
													IconConfig: &components.IconConfig{
														Color:    types.String("#343CED"),
														Key:      types.String("person_icon"),
														IconType: components.IconTypeGlyph.ToPointer(),
														Name:     types.String("user"),
													},
												},
											},
										},
									},
									RemindAt: 86409,
								},
								CandidateVerifiers: []components.Person{
									components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
									},
								},
							},
						},
						Shortcuts: []components.Shortcut{
							components.Shortcut{
								InputAlias: "<value>",
								CreatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								UpdatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
							},
							components.Shortcut{
								InputAlias: "<value>",
								CreatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								UpdatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
							},
							components.Shortcut{
								InputAlias: "<value>",
								CreatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
								UpdatedBy: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
									Metadata: &components.PersonMetadata{
										Type:       components.PersonMetadataTypeFullTime.ToPointer(),
										Title:      types.String("Actor"),
										Department: types.String("Movies"),
										Email:      types.String("george@example.com"),
										Location:   types.String("Hollywood, CA"),
										Phone:      types.String("6505551234"),
										PhotoURL:   types.String("https://example.com/george.jpg"),
										StartDate:  types.MustNewDateFromString("2000-01-23"),
										DatasourceProfile: []components.DatasourceProfile{
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
											components.DatasourceProfile{
												Datasource: "github",
												Handle:     "<value>",
											},
										},
										QuerySuggestions: &components.QuerySuggestionList{},
										InviteInfo:       &components.InviteInfo{},
										Badges: []components.Badge{
											components.Badge{
												Key:         types.String("deployment_name_new_hire"),
												DisplayName: types.String("New hire"),
												IconConfig: &components.IconConfig{
													Color:    types.String("#343CED"),
													Key:      types.String("person_icon"),
													IconType: components.IconTypeGlyph.ToPointer(),
													Name:     types.String("user"),
												},
											},
										},
									},
								},
							},
						},
						CustomData: map[string]components.CustomDataValue{
							"someCustomField": components.CustomDataValue{},
						},
						ContactPerson: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
					},
				},
			),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
