// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Insights(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "insights[0]":
			dir.HandlerFunc("insights", testInsightsInsights0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testInsightsInsights0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.InsightsResponse{
		Users: &components.UserInsightsResponse{
			ActivityInsights: []components.UserActivityInsight{
				components.UserActivityInsight{
					User: components.Person{
						Name:             "George Clooney",
						ObfuscatedID:     "abc123",
						RelatedDocuments: []components.RelatedDocuments{},
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      types.String("Actor"),
							Department: types.String("Movies"),
							Email:      types.String("george@example.com"),
							Location:   types.String("Hollywood, CA"),
							Phone:      types.String("6505551234"),
							PhotoURL:   types.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{
								Suggestions: []components.QuerySuggestion{},
							},
							InviteInfo: &components.InviteInfo{
								Invites: []components.ChannelInviteInfo{},
							},
							CustomFields: []components.CustomFieldData{},
							Badges: []components.Badge{
								components.Badge{
									Key:         types.String("deployment_name_new_hire"),
									DisplayName: types.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    types.String("#343CED"),
										Key:      types.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     types.String("user"),
									},
								},
							},
						},
					},
					Activity: components.ActivityEnumAll,
				},
				components.UserActivityInsight{
					User: components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
					Activity: components.ActivityEnumAll,
				},
			},
			InactiveInsights: []components.UserActivityInsight{
				components.UserActivityInsight{
					User: components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
					Activity: components.ActivityEnumSearch,
				},
			},
		},
		Content: &components.ContentInsightsResponse{
			DocumentInsights: []components.DocumentInsight{
				components.DocumentInsight{
					Document: components.Document{
						Metadata: &components.DocumentMetadata{
							Datasource: types.String("datasource"),
							ObjectType: types.String("Feature Request"),
							Container:  types.String("container"),
							ParentID:   types.String("JIRA_EN-1337"),
							MimeType:   types.String("mimeType"),
							DocumentID: types.String("documentId"),
							CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							Author: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
							Owner: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
							MentionedPeople: []components.Person{},
							Components: []string{
								"Backend",
								"Networking",
							},
							Status: types.String("[\"Done\"]"),
							Pins:   []components.PinDocument{},
							AssignedTo: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
							UpdatedBy: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
							Collections: []components.Collection{},
							Interactions: &components.DocumentInteractions{
								Reacts: []components.Reaction{},
								Shares: []components.Share{},
							},
							Verification: &components.Verification{
								State: components.StateUnverified,
								Metadata: &components.VerificationMetadata{
									LastVerifier: &components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
									},
									Reminders: []components.Reminder{},
									LastReminder: &components.Reminder{
										Assignee: components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										Requestor: &components.Person{
											Name:         "George Clooney",
											ObfuscatedID: "abc123",
										},
										RemindAt: 129663,
									},
									CandidateVerifiers: []components.Person{},
								},
							},
							CustomData: map[string]components.CustomDataValue{
								"someCustomField": components.CustomDataValue{},
							},
							ContactPerson: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
							},
						},
					},
				},
				components.DocumentInsight{
					Document: components.Document{},
				},
			},
		},
		Collections: &components.ContentInsightsResponse{
			DocumentInsights: []components.DocumentInsight{},
		},
		CollectionsV2: &components.ContentInsightsResponse{
			DocumentInsights: []components.DocumentInsight{},
		},
		Announcements: &components.ContentInsightsResponse{
			DocumentInsights: []components.DocumentInsight{},
		},
		Answers: &components.ContentInsightsResponse{
			DocumentInsights: []components.DocumentInsight{},
		},
		Ai: &components.AiInsightsResponse{
			AssistantInsights: []components.UserActivityInsight{
				components.UserActivityInsight{
					User: components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
					Activity: components.ActivityEnumAll,
				},
				components.UserActivityInsight{
					User: components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
					Activity: components.ActivityEnumAll,
				},
				components.UserActivityInsight{
					User: components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
					Activity: components.ActivityEnumAll,
				},
			},
		},
		AiApps: &components.AiAppsInsightsResponse{
			AiAppInsights: []components.UserActivityInsight{
				components.UserActivityInsight{
					User: components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
					Activity: components.ActivityEnumAll,
				},
			},
		},
		GleanAssist: &components.GleanAssistInsightsResponse{
			ActivityInsights: []components.UserActivityInsight{},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
