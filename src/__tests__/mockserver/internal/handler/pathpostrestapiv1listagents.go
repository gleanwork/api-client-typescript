// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Listagents(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listagents[0]":
			dir.HandlerFunc("listagents", testListagentsListagents0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListagentsListagents0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.ListAgentsResponse{
		Agents: []components.AgentResult{
			components.AgentResult{
				Agent: components.Agent{
					Author: &components.Person{
						Name:             "George Clooney",
						ObfuscatedID:     "abc123",
						RelatedDocuments: []components.RelatedDocuments{},
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      types.String("Actor"),
							Department: types.String("Movies"),
							Email:      types.String("george@example.com"),
							Location:   types.String("Hollywood, CA"),
							Phone:      types.String("6505551234"),
							PhotoURL:   types.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{
								Suggestions: []components.QuerySuggestion{},
							},
							InviteInfo: &components.InviteInfo{
								Invites: []components.ChannelInviteInfo{},
							},
							CustomFields: []components.CustomFieldData{},
							Badges: []components.Badge{
								components.Badge{
									Key:         types.String("deployment_name_new_hire"),
									DisplayName: types.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    types.String("#343CED"),
										Key:      types.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     types.String("user"),
									},
								},
							},
						},
					},
					LastUpdatedBy: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
					},
				},
			},
			components.AgentResult{
				Agent: components.Agent{},
			},
			components.AgentResult{
				Agent: components.Agent{},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
