// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Listentities(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listentities[0]":
			dir.HandlerFunc("listentities", testListentitiesListentities0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListentitiesListentities0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.ListEntitiesResponse{
		Results: []components.Person{
			components.Person{
				Name:         "George Clooney",
				ObfuscatedID: "abc123",
			},
		},
		TeamResults: []components.Team{
			components.Team{
				ID:      "<id>",
				Name:    "<value>",
				Members: []components.PersonToTeamRelationship{},
				DatasourceProfiles: []components.DatasourceProfile{
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
				},
				Status:       components.TeamStatusProcessed.ToPointer(),
				CanBeDeleted: types.Bool(true),
			},
			components.Team{
				ID:   "<id>",
				Name: "<value>",
				DatasourceProfiles: []components.DatasourceProfile{
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
				},
				Status:       components.TeamStatusProcessed.ToPointer(),
				CanBeDeleted: types.Bool(true),
			},
			components.Team{
				ID:   "<id>",
				Name: "<value>",
				DatasourceProfiles: []components.DatasourceProfile{
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
					components.DatasourceProfile{
						Datasource: "github",
						Handle:     "<value>",
					},
				},
				Status:       components.TeamStatusProcessed.ToPointer(),
				CanBeDeleted: types.Bool(true),
			},
		},
		CustomEntityResults: []components.CustomEntity{
			components.CustomEntity{},
			components.CustomEntity{},
		},
		FacetResults: []components.FacetResult{
			components.FacetResult{
				SourceName:   types.String("container_name"),
				OperatorName: types.String("SelectMultiple"),
				Buckets: []components.FacetBucket{
					components.FacetBucket{
						Count:      types.Int64(1),
						Datasource: types.String("jira"),
						Percentage: types.Int64(5),
						Value: &components.FacetValue{
							StringValue:  types.String("engineering"),
							IntegerValue: types.Int64(5),
							DisplayLabel: types.String("engineering"),
							IconConfig: &components.IconConfig{
								Color:    types.String("#343CED"),
								Key:      types.String("person_icon"),
								IconType: components.IconTypeGlyph.ToPointer(),
								Name:     types.String("user"),
							},
						},
					},
				},
				HasMoreBuckets: types.Bool(false),
				GroupName:      types.String("Service Cloud"),
			},
			components.FacetResult{
				SourceName:   types.String("container_name"),
				OperatorName: types.String("SelectMultiple"),
				Buckets: []components.FacetBucket{
					components.FacetBucket{
						Count:      types.Int64(1),
						Datasource: types.String("jira"),
						Percentage: types.Int64(5),
						Value: &components.FacetValue{
							StringValue:  types.String("engineering"),
							IntegerValue: types.Int64(5),
							DisplayLabel: types.String("engineering"),
							IconConfig: &components.IconConfig{
								Color:    types.String("#343CED"),
								Key:      types.String("person_icon"),
								IconType: components.IconTypeGlyph.ToPointer(),
								Name:     types.String("user"),
							},
						},
					},
					components.FacetBucket{
						Count:      types.Int64(1),
						Datasource: types.String("jira"),
						Percentage: types.Int64(5),
						Value: &components.FacetValue{
							StringValue:  types.String("engineering"),
							IntegerValue: types.Int64(5),
							DisplayLabel: types.String("engineering"),
							IconConfig: &components.IconConfig{
								Color:    types.String("#343CED"),
								Key:      types.String("person_icon"),
								IconType: components.IconTypeGlyph.ToPointer(),
								Name:     types.String("user"),
							},
						},
					},
					components.FacetBucket{
						Count:      types.Int64(1),
						Datasource: types.String("jira"),
						Percentage: types.Int64(5),
						Value: &components.FacetValue{
							StringValue:  types.String("engineering"),
							IntegerValue: types.Int64(5),
							DisplayLabel: types.String("engineering"),
							IconConfig: &components.IconConfig{
								Color:    types.String("#343CED"),
								Key:      types.String("person_icon"),
								IconType: components.IconTypeGlyph.ToPointer(),
								Name:     types.String("user"),
							},
						},
					},
				},
				HasMoreBuckets: types.Bool(false),
				GroupName:      types.String("Service Cloud"),
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
