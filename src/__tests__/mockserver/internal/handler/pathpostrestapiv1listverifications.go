// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Listverifications(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "listverifications[0]":
			dir.HandlerFunc("listverifications", testListverificationsListverifications0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testListverificationsListverifications0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, ""); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.VerificationFeed{
		Documents: []components.Verification{
			components.Verification{
				State: components.StateVerified,
				Metadata: &components.VerificationMetadata{
					LastVerifier: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						RelatedDocuments: []components.RelatedDocuments{
							components.RelatedDocuments{
								QuerySuggestion: &components.QuerySuggestion{
									Query: "app:github type:pull author:mortimer",
									SearchProviderInfo: &components.SearchProviderInfo{
										Name:                  types.String("Google"),
										SearchLinkURLTemplate: types.String("https://www.google.com/search?q={query}&hl=en"),
									},
									Label:      types.String("Mortimer's PRs"),
									Datasource: types.String("github"),
									RequestOptions: &components.SearchRequestOptions{
										DatasourceFilter: types.String("JIRA"),
										DatasourcesFilter: []string{
											"JIRA",
										},
										QueryOverridesFacetFilters: types.Bool(true),
										FacetFilters: []components.FacetFilter{
											components.FacetFilter{
												FieldName: types.String("type"),
												Values: []components.FacetFilterValue{
													components.FacetFilterValue{
														Value:        types.String("Spreadsheet"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
													components.FacetFilterValue{
														Value:        types.String("Presentation"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
												},
											},
										},
										FacetFilterSets: []components.FacetFilterSet{
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
										},
										FacetBucketSize: 229716,
										AuthTokens: []components.AuthToken{
											components.AuthToken{
												AccessToken: "123abc",
												Datasource:  "gmail",
												Scope:       types.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
												TokenType:   types.String("Bearer"),
												AuthUser:    types.String("1"),
											},
										},
									},
									Ranges: []components.TextRange{
										components.TextRange{
											StartIndex: 635532,
											Document: &components.Document{
												Metadata: &components.DocumentMetadata{
													Datasource: types.String("datasource"),
													ObjectType: types.String("Feature Request"),
													Container:  types.String("container"),
													ParentID:   types.String("JIRA_EN-1337"),
													MimeType:   types.String("mimeType"),
													DocumentID: types.String("documentId"),
													CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
													UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
													Components: []string{
														"Backend",
														"Networking",
													},
													Status: types.String("[\"Done\"]"),
													Pins: []components.PinDocument{
														components.PinDocument{
															AudienceFilters: []components.FacetFilter{
																components.FacetFilter{
																	FieldName: types.String("type"),
																	Values: []components.FacetFilterValue{
																		components.FacetFilterValue{
																			Value:        types.String("Spreadsheet"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																		components.FacetFilterValue{
																			Value:        types.String("Presentation"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																	},
																},
															},
															DocumentID: "<id>",
														},
														components.PinDocument{
															AudienceFilters: []components.FacetFilter{
																components.FacetFilter{
																	FieldName: types.String("type"),
																	Values: []components.FacetFilterValue{
																		components.FacetFilterValue{
																			Value:        types.String("Spreadsheet"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																		components.FacetFilterValue{
																			Value:        types.String("Presentation"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																	},
																},
															},
															DocumentID: "<id>",
														},
													},
													Collections: []components.Collection{
														components.Collection{
															Name:        "<value>",
															Description: "avalanche jungle unto meanwhile beside tromp worth reluctantly",
															AddedRoles: []components.UserRoleSpecification{
																components.UserRoleSpecification{
																	Role: components.UserRoleEditor,
																},
															},
															RemovedRoles: []components.UserRoleSpecification{
																components.UserRoleSpecification{
																	Role: components.UserRoleOwner,
																},
																components.UserRoleSpecification{
																	Role: components.UserRoleOwner,
																},
															},
															AudienceFilters: []components.FacetFilter{
																components.FacetFilter{
																	FieldName: types.String("type"),
																	Values: []components.FacetFilterValue{
																		components.FacetFilterValue{
																			Value:        types.String("Spreadsheet"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																		components.FacetFilterValue{
																			Value:        types.String("Presentation"),
																			RelationType: components.RelationTypeEquals.ToPointer(),
																		},
																	},
																},
															},
															ID: 294083,
															Items: []components.CollectionItem{
																components.CollectionItem{
																	CollectionID: 747562,
																	Shortcut: &components.Shortcut{
																		InputAlias: "<value>",
																		Roles: []components.UserRoleSpecification{
																			components.UserRoleSpecification{
																				Role: components.UserRoleViewer,
																			},
																		},
																	},
																	ItemType: components.CollectionItemItemTypeDocument,
																},
																components.CollectionItem{
																	CollectionID: 678179,
																	Shortcut: &components.Shortcut{
																		InputAlias: "<value>",
																	},
																	ItemType: components.CollectionItemItemTypeText,
																},
																components.CollectionItem{
																	CollectionID: 5229,
																	Shortcut: &components.Shortcut{
																		InputAlias: "<value>",
																	},
																	ItemType: components.CollectionItemItemTypeCollection,
																},
															},
														},
													},
													Interactions: &components.DocumentInteractions{
														Reacts: []components.Reaction{
															components.Reaction{},
															components.Reaction{},
															components.Reaction{},
														},
														Shares: []components.Share{
															components.Share{
																NumDaysAgo: 948614,
															},
															components.Share{
																NumDaysAgo: 900109,
															},
														},
													},
													Shortcuts: []components.Shortcut{
														components.Shortcut{
															InputAlias: "<value>",
														},
													},
													CustomData: map[string]components.CustomDataValue{
														"someCustomField": components.CustomDataValue{},
													},
												},
											},
										},
									},
									InputDetails: &components.SearchRequestInputDetails{
										HasCopyPaste: types.Bool(true),
									},
								},
								Results: []components.SearchResult{
									components.SearchResult{
										Title:        types.String("title"),
										URL:          "https://example.com/foo/bar",
										NativeAppURL: types.String("slack://foo/bar"),
										Snippets: []components.SearchResultSnippet{
											components.SearchResultSnippet{
												Snippet:  "snippet",
												MimeType: types.String("mimeType"),
											},
										},
									},
								},
							},
							components.RelatedDocuments{
								QuerySuggestion: &components.QuerySuggestion{
									Query: "app:github type:pull author:mortimer",
									SearchProviderInfo: &components.SearchProviderInfo{
										Name:                  types.String("Google"),
										SearchLinkURLTemplate: types.String("https://www.google.com/search?q={query}&hl=en"),
									},
									Label:      types.String("Mortimer's PRs"),
									Datasource: types.String("github"),
									RequestOptions: &components.SearchRequestOptions{
										DatasourceFilter: types.String("JIRA"),
										DatasourcesFilter: []string{
											"JIRA",
										},
										QueryOverridesFacetFilters: types.Bool(true),
										FacetFilters: []components.FacetFilter{
											components.FacetFilter{
												FieldName: types.String("type"),
												Values: []components.FacetFilterValue{
													components.FacetFilterValue{
														Value:        types.String("Spreadsheet"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
													components.FacetFilterValue{
														Value:        types.String("Presentation"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
												},
											},
										},
										FacetFilterSets: []components.FacetFilterSet{
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
										},
										FacetBucketSize: 726700,
										AuthTokens: []components.AuthToken{
											components.AuthToken{
												AccessToken: "123abc",
												Datasource:  "gmail",
												Scope:       types.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
												TokenType:   types.String("Bearer"),
												AuthUser:    types.String("1"),
											},
										},
									},
									InputDetails: &components.SearchRequestInputDetails{
										HasCopyPaste: types.Bool(true),
									},
								},
							},
							components.RelatedDocuments{
								QuerySuggestion: &components.QuerySuggestion{
									Query: "app:github type:pull author:mortimer",
									SearchProviderInfo: &components.SearchProviderInfo{
										Name:                  types.String("Google"),
										SearchLinkURLTemplate: types.String("https://www.google.com/search?q={query}&hl=en"),
									},
									Label:      types.String("Mortimer's PRs"),
									Datasource: types.String("github"),
									RequestOptions: &components.SearchRequestOptions{
										DatasourceFilter: types.String("JIRA"),
										DatasourcesFilter: []string{
											"JIRA",
										},
										QueryOverridesFacetFilters: types.Bool(true),
										FacetFilters: []components.FacetFilter{
											components.FacetFilter{
												FieldName: types.String("type"),
												Values: []components.FacetFilterValue{
													components.FacetFilterValue{
														Value:        types.String("Spreadsheet"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
													components.FacetFilterValue{
														Value:        types.String("Presentation"),
														RelationType: components.RelationTypeEquals.ToPointer(),
													},
												},
											},
										},
										FacetFilterSets: []components.FacetFilterSet{
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
											components.FacetFilterSet{
												Filters: []components.FacetFilter{
													components.FacetFilter{
														FieldName: types.String("type"),
														Values: []components.FacetFilterValue{
															components.FacetFilterValue{
																Value:        types.String("Spreadsheet"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
															components.FacetFilterValue{
																Value:        types.String("Presentation"),
																RelationType: components.RelationTypeEquals.ToPointer(),
															},
														},
													},
												},
											},
										},
										FacetBucketSize: 406555,
										AuthTokens: []components.AuthToken{
											components.AuthToken{
												AccessToken: "123abc",
												Datasource:  "gmail",
												Scope:       types.String("email profile https://www.googleapis.com/auth/gmail.readonly"),
												TokenType:   types.String("Bearer"),
												AuthUser:    types.String("1"),
											},
										},
									},
									InputDetails: &components.SearchRequestInputDetails{
										HasCopyPaste: types.Bool(true),
									},
								},
							},
						},
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      types.String("Actor"),
							Department: types.String("Movies"),
							Email:      types.String("george@example.com"),
							Location:   types.String("Hollywood, CA"),
							Phone:      types.String("6505551234"),
							PhotoURL:   types.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{
								Suggestions: []components.QuerySuggestion{
									components.QuerySuggestion{
										Query:      "app:github type:pull author:mortimer",
										Label:      types.String("Mortimer's PRs"),
										Datasource: types.String("github"),
									},
								},
							},
							InviteInfo: &components.InviteInfo{
								Invites: []components.ChannelInviteInfo{
									components.ChannelInviteInfo{},
									components.ChannelInviteInfo{},
								},
							},
							CustomFields: []components.CustomFieldData{
								components.CustomFieldData{
									Label: "<value>",
									Values: []components.CustomFieldValue{
										components.CreateCustomFieldValueCustomFieldValueStr(
											components.CustomFieldValueStr{},
										),
										components.CreateCustomFieldValueCustomFieldValueStr(
											components.CustomFieldValueStr{},
										),
									},
									Displayable: types.Bool(true),
								},
								components.CustomFieldData{
									Label:       "<value>",
									Values:      []components.CustomFieldValue{},
									Displayable: types.Bool(true),
								},
								components.CustomFieldData{
									Label:       "<value>",
									Values:      []components.CustomFieldValue{},
									Displayable: types.Bool(true),
								},
							},
							Badges: []components.Badge{
								components.Badge{
									Key:         types.String("deployment_name_new_hire"),
									DisplayName: types.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    types.String("#343CED"),
										Key:      types.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     types.String("user"),
									},
								},
							},
						},
					},
					Document: &components.Document{
						Metadata: &components.DocumentMetadata{
							Datasource: types.String("datasource"),
							ObjectType: types.String("Feature Request"),
							Container:  types.String("container"),
							ParentID:   types.String("JIRA_EN-1337"),
							MimeType:   types.String("mimeType"),
							DocumentID: types.String("documentId"),
							CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							Author: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Owner: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Components: []string{
								"Backend",
								"Networking",
							},
							Status: types.String("[\"Done\"]"),
							AssignedTo: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							UpdatedBy: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Interactions: &components.DocumentInteractions{},
							CustomData: map[string]components.CustomDataValue{
								"someCustomField": components.CustomDataValue{},
							},
							ContactPerson: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
						},
					},
					Reminders: []components.Reminder{
						components.Reminder{
							Assignee: components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Requestor: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							RemindAt: 370293,
						},
						components.Reminder{
							Assignee: components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Requestor: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							RemindAt: 900911,
						},
						components.Reminder{
							Assignee: components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Requestor: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							RemindAt: 424586,
						},
					},
					LastReminder: &components.Reminder{
						Assignee: components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Requestor: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						RemindAt: 221489,
					},
					CandidateVerifiers: []components.Person{
						components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
					},
				},
			},
			components.Verification{
				State: components.StateUnverified,
				Metadata: &components.VerificationMetadata{
					LastVerifier: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      types.String("Actor"),
							Department: types.String("Movies"),
							Email:      types.String("george@example.com"),
							Location:   types.String("Hollywood, CA"),
							Phone:      types.String("6505551234"),
							PhotoURL:   types.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         types.String("deployment_name_new_hire"),
									DisplayName: types.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    types.String("#343CED"),
										Key:      types.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     types.String("user"),
									},
								},
							},
						},
					},
					Document: &components.Document{
						Metadata: &components.DocumentMetadata{
							Datasource: types.String("datasource"),
							ObjectType: types.String("Feature Request"),
							Container:  types.String("container"),
							ParentID:   types.String("JIRA_EN-1337"),
							MimeType:   types.String("mimeType"),
							DocumentID: types.String("documentId"),
							CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							Author: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Owner: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Components: []string{
								"Backend",
								"Networking",
							},
							Status: types.String("[\"Done\"]"),
							AssignedTo: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							UpdatedBy: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Interactions: &components.DocumentInteractions{},
							CustomData: map[string]components.CustomDataValue{
								"someCustomField": components.CustomDataValue{},
							},
							ContactPerson: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
						},
					},
					LastReminder: &components.Reminder{
						Assignee: components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Requestor: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						RemindAt: 277523,
					},
				},
			},
			components.Verification{
				State: components.StateVerified,
				Metadata: &components.VerificationMetadata{
					LastVerifier: &components.Person{
						Name:         "George Clooney",
						ObfuscatedID: "abc123",
						Metadata: &components.PersonMetadata{
							Type:       components.PersonMetadataTypeFullTime.ToPointer(),
							Title:      types.String("Actor"),
							Department: types.String("Movies"),
							Email:      types.String("george@example.com"),
							Location:   types.String("Hollywood, CA"),
							Phone:      types.String("6505551234"),
							PhotoURL:   types.String("https://example.com/george.jpg"),
							StartDate:  types.MustNewDateFromString("2000-01-23"),
							DatasourceProfile: []components.DatasourceProfile{
								components.DatasourceProfile{
									Datasource: "github",
									Handle:     "<value>",
								},
							},
							QuerySuggestions: &components.QuerySuggestionList{},
							InviteInfo:       &components.InviteInfo{},
							Badges: []components.Badge{
								components.Badge{
									Key:         types.String("deployment_name_new_hire"),
									DisplayName: types.String("New hire"),
									IconConfig: &components.IconConfig{
										Color:    types.String("#343CED"),
										Key:      types.String("person_icon"),
										IconType: components.IconTypeGlyph.ToPointer(),
										Name:     types.String("user"),
									},
								},
							},
						},
					},
					Document: &components.Document{
						Metadata: &components.DocumentMetadata{
							Datasource: types.String("datasource"),
							ObjectType: types.String("Feature Request"),
							Container:  types.String("container"),
							ParentID:   types.String("JIRA_EN-1337"),
							MimeType:   types.String("mimeType"),
							DocumentID: types.String("documentId"),
							CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
							Author: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Owner: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Components: []string{
								"Backend",
								"Networking",
							},
							Status: types.String("[\"Done\"]"),
							AssignedTo: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							UpdatedBy: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
							Interactions: &components.DocumentInteractions{},
							CustomData: map[string]components.CustomDataValue{
								"someCustomField": components.CustomDataValue{},
							},
							ContactPerson: &components.Person{
								Name:         "George Clooney",
								ObfuscatedID: "abc123",
								Metadata: &components.PersonMetadata{
									Type:       components.PersonMetadataTypeFullTime.ToPointer(),
									Title:      types.String("Actor"),
									Department: types.String("Movies"),
									Email:      types.String("george@example.com"),
									Location:   types.String("Hollywood, CA"),
									Phone:      types.String("6505551234"),
									PhotoURL:   types.String("https://example.com/george.jpg"),
									StartDate:  types.MustNewDateFromString("2000-01-23"),
									DatasourceProfile: []components.DatasourceProfile{
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
										components.DatasourceProfile{
											Datasource: "github",
											Handle:     "<value>",
										},
									},
									QuerySuggestions: &components.QuerySuggestionList{},
									InviteInfo:       &components.InviteInfo{},
									Badges: []components.Badge{
										components.Badge{
											Key:         types.String("deployment_name_new_hire"),
											DisplayName: types.String("New hire"),
											IconConfig: &components.IconConfig{
												Color:    types.String("#343CED"),
												Key:      types.String("person_icon"),
												IconType: components.IconTypeGlyph.ToPointer(),
												Name:     types.String("user"),
											},
										},
									},
								},
							},
						},
					},
					LastReminder: &components.Reminder{
						Assignee: components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Requestor: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{},
								InviteInfo:       &components.InviteInfo{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						RemindAt: 749833,
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
