// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Recommendations(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "recommendations[0]":
			dir.HandlerFunc("recommendations", testRecommendationsRecommendations0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testRecommendationsRecommendations0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.ResultsResponse{
		Results: []components.SearchResult{
			components.SearchResult{
				Title:        types.String("title"),
				URL:          "https://example.com/foo/bar",
				NativeAppURL: types.String("slack://foo/bar"),
				Snippets:     []components.SearchResultSnippet{},
			},
		},
		StructuredResults: []components.StructuredResult{
			components.StructuredResult{
				Document: &components.Document{
					Metadata: &components.DocumentMetadata{
						Datasource: types.String("datasource"),
						ObjectType: types.String("Feature Request"),
						Container:  types.String("container"),
						ParentID:   types.String("JIRA_EN-1337"),
						MimeType:   types.String("mimeType"),
						DocumentID: types.String("documentId"),
						CreateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						UpdateTime: types.MustNewTimeFromString("2000-01-23T04:56:07.000Z"),
						Author: &components.Person{
							Name:             "George Clooney",
							ObfuscatedID:     "abc123",
							RelatedDocuments: []components.RelatedDocuments{},
							Metadata: &components.PersonMetadata{
								Type:       components.PersonMetadataTypeFullTime.ToPointer(),
								Title:      types.String("Actor"),
								Department: types.String("Movies"),
								Email:      types.String("george@example.com"),
								Location:   types.String("Hollywood, CA"),
								Phone:      types.String("6505551234"),
								PhotoURL:   types.String("https://example.com/george.jpg"),
								StartDate:  types.MustNewDateFromString("2000-01-23"),
								DatasourceProfile: []components.DatasourceProfile{
									components.DatasourceProfile{
										Datasource: "github",
										Handle:     "<value>",
									},
								},
								QuerySuggestions: &components.QuerySuggestionList{
									Suggestions: []components.QuerySuggestion{},
								},
								InviteInfo: &components.InviteInfo{
									Invites: []components.ChannelInviteInfo{},
								},
								CustomFields: []components.CustomFieldData{},
								Badges: []components.Badge{
									components.Badge{
										Key:         types.String("deployment_name_new_hire"),
										DisplayName: types.String("New hire"),
										IconConfig: &components.IconConfig{
											Color:    types.String("#343CED"),
											Key:      types.String("person_icon"),
											IconType: components.IconTypeGlyph.ToPointer(),
											Name:     types.String("user"),
										},
									},
								},
							},
						},
						Owner: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						MentionedPeople: []components.Person{},
						Components: []string{
							"Backend",
							"Networking",
						},
						Status: types.String("[\"Done\"]"),
						Pins:   []components.PinDocument{},
						AssignedTo: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						UpdatedBy: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
						Collections: []components.Collection{},
						Interactions: &components.DocumentInteractions{
							Reacts: []components.Reaction{},
							Shares: []components.Share{},
						},
						Verification: &components.Verification{
							State: components.StateUnverified,
							Metadata: &components.VerificationMetadata{
								LastVerifier: &components.Person{
									Name:         "George Clooney",
									ObfuscatedID: "abc123",
								},
								Reminders: []components.Reminder{},
								LastReminder: &components.Reminder{
									Assignee: components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
									},
									Requestor: &components.Person{
										Name:         "George Clooney",
										ObfuscatedID: "abc123",
									},
									RemindAt: 129663,
								},
								CandidateVerifiers: []components.Person{},
							},
						},
						CustomData: map[string]components.CustomDataValue{
							"someCustomField": components.CustomDataValue{},
						},
						ContactPerson: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
					},
				},
				Person: &components.Person{
					Name:         "George Clooney",
					ObfuscatedID: "abc123",
				},
				Customer: &components.Customer{
					ID: "<id>",
					Company: components.Company{
						Name:     "<value>",
						Location: types.String("New York City"),
						Industry: types.String("Finances"),
						About:    types.String("Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"),
					},
					Poc:   []components.Person{},
					Notes: types.String("CIO is interested in trying out the product."),
				},
				Team: &components.Team{
					ID:      "<id>",
					Name:    "<value>",
					Members: []components.PersonToTeamRelationship{},
					DatasourceProfiles: []components.DatasourceProfile{
						components.DatasourceProfile{
							Datasource: "github",
							Handle:     "<value>",
						},
						components.DatasourceProfile{
							Datasource: "github",
							Handle:     "<value>",
						},
						components.DatasourceProfile{
							Datasource: "github",
							Handle:     "<value>",
						},
					},
					Status:       components.TeamStatusProcessed.ToPointer(),
					CanBeDeleted: types.Bool(true),
				},
				CustomEntity: &components.CustomEntity{
					Roles: []components.UserRoleSpecification{},
				},
				Answer: &components.Answer{
					ID:              3,
					DocID:           types.String("ANSWERS_answer_3"),
					Question:        types.String("Why is the sky blue?"),
					BodyText:        types.String("From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."),
					AudienceFilters: []components.FacetFilter{},
					AddedRoles:      []components.UserRoleSpecification{},
					RemovedRoles:    []components.UserRoleSpecification{},
					CombinedAnswerText: &components.StructuredText{
						Text:           "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.",
						StructuredList: []components.StructuredTextItem{},
					},
					Likes: &components.AnswerLikes{
						LikedBy:     []components.AnswerLike{},
						LikedByUser: true,
						NumLikes:    22508,
					},
					Board: &components.AnswerBoard{
						Name:            "<value>",
						Description:     "over aha if unless fooey unbearably",
						AudienceFilters: []components.FacetFilter{},
						ID:              342305,
						Creator: &components.Person{
							Name:         "George Clooney",
							ObfuscatedID: "abc123",
						},
					},
					SourceDocument: &components.Document{},
				},
				ExtractedQnA: &components.ExtractedQnA{
					QuestionResult: &components.SearchResult{
						Title:        types.String("title"),
						URL:          "https://example.com/foo/bar",
						NativeAppURL: types.String("slack://foo/bar"),
					},
				},
				Meeting: &components.Meeting{
					Attendees: &components.CalendarAttendees{
						People: []components.CalendarAttendee{},
					},
				},
				Collection: &components.Collection{
					Name:            "<value>",
					Description:     "because almighty an",
					AudienceFilters: []components.FacetFilter{},
					ID:              822820,
					Items:           []components.CollectionItem{},
				},
				AnswerBoard: &components.AnswerBoard{
					Name:        "<value>",
					Description: "labourer row toward meanwhile instead mostly after along contravene filthy",
					AudienceFilters: []components.FacetFilter{
						components.FacetFilter{
							FieldName: types.String("type"),
							Values:    []components.FacetFilterValue{},
						},
					},
					ID: 609947,
				},
				Code: &components.Code{
					RepoName: types.String("scio"),
					FileName: types.String("README.md"),
					Lines:    []components.CodeLine{},
				},
				RelatedQuestion: &components.RelatedQuestion{
					Ranges: []components.TextRange{},
				},
			},
			components.StructuredResult{},
		},
		GeneratedQnaResult: &components.GeneratedQna{
			Ranges: []components.TextRange{
				components.TextRange{
					StartIndex: 86,
				},
				components.TextRange{
					StartIndex: 86,
				},
				components.TextRange{
					StartIndex: 86,
				},
			},
		},
		BackendTimeMillis: types.Int64(1100),
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
