// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAPIV1Search(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "search[0]":
			dir.HandlerFunc("search", testSearchSearch0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testSearchSearch0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, false, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &components.SearchResponse{
		TrackingToken: types.String("trackingToken"),
		Results: []components.SearchResult{
			components.SearchResult{
				Title:    types.String("title"),
				URL:      "https://www.example.com/",
				Snippets: []components.SearchResultSnippet{},
			},
			components.SearchResult{
				Title: types.String("title"),
				URL:   "https://www.example.com/",
			},
		},
		ErrorInfo: &components.ErrorInfo{
			ErrorMessages: []components.ErrorMessage{
				components.ErrorMessage{
					Source:       types.String("gmail"),
					ErrorMessage: types.String("invalid token"),
				},
				components.ErrorMessage{
					Source:       types.String("slack"),
					ErrorMessage: types.String("expired token"),
				},
			},
		},
		RequestID: types.String("5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100"),
		FacetResults: []components.FacetResult{
			components.FacetResult{
				SourceName:   types.String("sourceName"),
				OperatorName: types.String("operatorName"),
				Buckets: []components.FacetBucket{
					components.FacetBucket{
						Count:      types.Int64(1),
						Percentage: types.Int64(5),
						Value: &components.FacetValue{
							StringValue:  types.String("stringValue"),
							IntegerValue: types.Int64(5),
						},
					},
					components.FacetBucket{
						Count:      types.Int64(1),
						Percentage: types.Int64(5),
						Value: &components.FacetValue{
							StringValue:  types.String("stringValue"),
							IntegerValue: types.Int64(5),
						},
					},
				},
			},
			components.FacetResult{
				SourceName:   types.String("sourceName"),
				OperatorName: types.String("operatorName"),
				Buckets:      []components.FacetBucket{},
			},
		},
		RewrittenFacetFilters: []components.FacetFilter{
			components.FacetFilter{
				FieldName: types.String("fieldName"),
				Values: []components.FacetFilterValue{
					components.FacetFilterValue{},
					components.FacetFilterValue{},
				},
			},
			components.FacetFilter{
				FieldName: types.String("fieldName"),
				Values:    []components.FacetFilterValue{},
			},
		},
		HasMoreResults: types.Bool(true),
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
