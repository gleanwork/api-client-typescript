// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// ActivityEventAction - The type of activity this represents.
type ActivityEventAction string

const (
	ActivityEventActionView             ActivityEventAction = "VIEW"
	ActivityEventActionEdit             ActivityEventAction = "EDIT"
	ActivityEventActionSearch           ActivityEventAction = "SEARCH"
	ActivityEventActionComment          ActivityEventAction = "COMMENT"
	ActivityEventActionCrawl            ActivityEventAction = "CRAWL"
	ActivityEventActionHistoricalSearch ActivityEventAction = "HISTORICAL_SEARCH"
	ActivityEventActionHistoricalView   ActivityEventAction = "HISTORICAL_VIEW"
)

func (e ActivityEventAction) ToPointer() *ActivityEventAction {
	return &e
}
func (e *ActivityEventAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VIEW":
		fallthrough
	case "EDIT":
		fallthrough
	case "SEARCH":
		fallthrough
	case "COMMENT":
		fallthrough
	case "CRAWL":
		fallthrough
	case "HISTORICAL_SEARCH":
		fallthrough
	case "HISTORICAL_VIEW":
		*e = ActivityEventAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityEventAction: %v", v)
	}
}

type ActivityEvent struct {
	// Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
	ID *string `json:"id,omitempty"`
	// The type of activity this represents.
	Action ActivityEventAction  `json:"action"`
	Params *ActivityEventParams `json:"params,omitempty"`
	// The ISO 8601 timestamp when the activity began.
	Timestamp time.Time `json:"timestamp"`
	// The URL of the activity.
	URL string `json:"url"`
}

func (a ActivityEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ActivityEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ActivityEvent) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ActivityEvent) GetAction() ActivityEventAction {
	if o == nil {
		return ActivityEventAction("")
	}
	return o.Action
}

func (o *ActivityEvent) GetParams() *ActivityEventParams {
	if o == nil {
		return nil
	}
	return o.Params
}

func (o *ActivityEvent) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ActivityEvent) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}
