// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// AgentEnum - Name of the agent.
type AgentEnum string

const (
	AgentEnumDefault AgentEnum = "DEFAULT"
	AgentEnumGpt     AgentEnum = "GPT"
)

func (e AgentEnum) ToPointer() *AgentEnum {
	return &e
}
func (e *AgentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT":
		fallthrough
	case "GPT":
		*e = AgentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AgentEnum: %v", v)
	}
}

// Mode - Top level modes to run GleanChat in.
type Mode string

const (
	ModeDefault Mode = "DEFAULT"
	ModeQuick   Mode = "QUICK"
)

func (e Mode) ToPointer() *Mode {
	return &e
}
func (e *Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT":
		fallthrough
	case "QUICK":
		*e = Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Mode: %v", v)
	}
}

// AgentConfig - Describes the agent that executes the request.
type AgentConfig struct {
	// Name of the agent.
	Agent *AgentEnum `json:"agent,omitempty"`
	// Top level modes to run GleanChat in.
	Mode *Mode `json:"mode,omitempty"`
}

func (o *AgentConfig) GetAgent() *AgentEnum {
	if o == nil {
		return nil
	}
	return o.Agent
}

func (o *AgentConfig) GetMode() *Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}
