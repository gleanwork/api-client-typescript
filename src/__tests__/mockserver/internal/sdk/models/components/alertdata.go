// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// BannerType - Banner type to display for this alert
type BannerType string

const (
	BannerTypeActionRequired BannerType = "ACTION_REQUIRED"
	BannerTypeReviewRequired BannerType = "REVIEW_REQUIRED"
)

func (e BannerType) ToPointer() *BannerType {
	return &e
}
func (e *BannerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTION_REQUIRED":
		fallthrough
	case "REVIEW_REQUIRED":
		*e = BannerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BannerType: %v", v)
	}
}

// AlertData - Admin alert related information that is used to construct the admin alert email
type AlertData struct {
	// Banner type to display for this alert
	BannerType *BannerType `json:"bannerType,omitempty"`
	// Text to display for the alert banner
	BannerText *string `json:"bannerText,omitempty"`
	// Text for what happened section of an admin alert.
	AlertDescription *string `json:"alertDescription,omitempty"`
	// Text for why this matters section of an admin alert.
	RelevanceDescription *string `json:"relevanceDescription,omitempty"`
	// Text for to do section before actual steps.
	ResolutionStepsDescription *string `json:"resolutionStepsDescription,omitempty"`
	// Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)
	ResolutionSteps []ResolutionStep `json:"resolutionSteps,omitempty"`
	// Help link for the alert that the admin can reference
	HelpLink *string `json:"helpLink,omitempty"`
	// The name of the admin alert
	Name *string `json:"name,omitempty"`
	// The time that the alert was triggered
	TriggeredTime *time.Time `json:"triggeredTime,omitempty"`
	// Human readable name of the project instance
	ProjectName *string `json:"projectName,omitempty"`
	// Datasource that the alert is related to (possibly null)
	Datasource *string `json:"datasource,omitempty"`
	// datasource instance's user set display name
	InstanceDisplayName *string `json:"instanceDisplayName,omitempty"`
	// datasource instance's name e.g. confluence_0a0odwv
	InstanceName *string `json:"instanceName,omitempty"`
	// custom text in subject line
	EmailSubjectDescription *string `json:"emailSubjectDescription,omitempty"`
}

func (a AlertData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AlertData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AlertData) GetBannerType() *BannerType {
	if o == nil {
		return nil
	}
	return o.BannerType
}

func (o *AlertData) GetBannerText() *string {
	if o == nil {
		return nil
	}
	return o.BannerText
}

func (o *AlertData) GetAlertDescription() *string {
	if o == nil {
		return nil
	}
	return o.AlertDescription
}

func (o *AlertData) GetRelevanceDescription() *string {
	if o == nil {
		return nil
	}
	return o.RelevanceDescription
}

func (o *AlertData) GetResolutionStepsDescription() *string {
	if o == nil {
		return nil
	}
	return o.ResolutionStepsDescription
}

func (o *AlertData) GetResolutionSteps() []ResolutionStep {
	if o == nil {
		return nil
	}
	return o.ResolutionSteps
}

func (o *AlertData) GetHelpLink() *string {
	if o == nil {
		return nil
	}
	return o.HelpLink
}

func (o *AlertData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AlertData) GetTriggeredTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.TriggeredTime
}

func (o *AlertData) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *AlertData) GetDatasource() *string {
	if o == nil {
		return nil
	}
	return o.Datasource
}

func (o *AlertData) GetInstanceDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceDisplayName
}

func (o *AlertData) GetInstanceName() *string {
	if o == nil {
		return nil
	}
	return o.InstanceName
}

func (o *AlertData) GetEmailSubjectDescription() *string {
	if o == nil {
		return nil
	}
	return o.EmailSubjectDescription
}
