// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// AnnouncementChannel1 - This determines whether this is a Social Feed post or a regular announcement.
type AnnouncementChannel1 string

const (
	AnnouncementChannel1Main       AnnouncementChannel1 = "MAIN"
	AnnouncementChannel1SocialFeed AnnouncementChannel1 = "SOCIAL_FEED"
)

func (e AnnouncementChannel1) ToPointer() *AnnouncementChannel1 {
	return &e
}
func (e *AnnouncementChannel1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAIN":
		fallthrough
	case "SOCIAL_FEED":
		*e = AnnouncementChannel1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnnouncementChannel1: %v", v)
	}
}

// AnnouncementPostType - This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
type AnnouncementPostType string

const (
	AnnouncementPostTypeText AnnouncementPostType = "TEXT"
	AnnouncementPostTypeLink AnnouncementPostType = "LINK"
)

func (e AnnouncementPostType) ToPointer() *AnnouncementPostType {
	return &e
}
func (e *AnnouncementPostType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		fallthrough
	case "LINK":
		*e = AnnouncementPostType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnnouncementPostType: %v", v)
	}
}

type AnnouncementViewerInfo struct {
	// Whether the viewer has dismissed the announcement.
	IsDismissed *bool `json:"isDismissed,omitempty"`
	// Whether the viewer has read the announcement.
	IsRead *bool `json:"isRead,omitempty"`
}

func (o *AnnouncementViewerInfo) GetIsDismissed() *bool {
	if o == nil {
		return nil
	}
	return o.IsDismissed
}

func (o *AnnouncementViewerInfo) GetIsRead() *bool {
	if o == nil {
		return nil
	}
	return o.IsRead
}

type Announcement struct {
	// The date and time at which the announcement becomes active.
	StartTime *time.Time `json:"startTime,omitempty"`
	// The date and time at which the announcement expires.
	EndTime *time.Time `json:"endTime,omitempty"`
	// The headline of the announcement.
	Title *string         `json:"title,omitempty"`
	Body  *StructuredText `json:"body,omitempty"`
	// An emoji used to indicate the nature of the announcement.
	Emoji     *string    `json:"emoji,omitempty"`
	Thumbnail *Thumbnail `json:"thumbnail,omitempty"`
	Banner    *Thumbnail `json:"banner,omitempty"`
	// Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
	SourceDocumentID *string `json:"sourceDocumentId,omitempty"`
	// Whether or not to hide an author attribution.
	HideAttribution *bool `json:"hideAttribution,omitempty"`
	// This determines whether this is a Social Feed post or a regular announcement.
	Channel *AnnouncementChannel1 `json:"channel,omitempty"`
	// This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
	PostType *AnnouncementPostType `json:"postType,omitempty"`
	// Used by the Social Feed to pin posts to the front of the feed.
	IsPrioritized *bool `json:"isPrioritized,omitempty"`
	// URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
	ViewURL *string `json:"viewUrl,omitempty"`
	// The opaque id of the associated draft.
	DraftID     *int64             `json:"draftId,omitempty"`
	Permissions *ObjectPermissions `json:"permissions,omitempty"`
	// The opaque id of the announcement.
	ID     *int64  `json:"id,omitempty"`
	Author *Person `json:"author,omitempty"`
	// Server Unix timestamp of the creation time (in seconds since epoch UTC).
	CreateTimestamp *int64 `json:"createTimestamp,omitempty"`
	// Server Unix timestamp of the last update time (in seconds since epoch UTC).
	LastUpdateTimestamp *int64                  `json:"lastUpdateTimestamp,omitempty"`
	UpdatedBy           *Person                 `json:"updatedBy,omitempty"`
	ViewerInfo          *AnnouncementViewerInfo `json:"viewerInfo,omitempty"`
	SourceDocument      *Document               `json:"sourceDocument,omitempty"`
	// Whether or not the announcement is published.
	IsPublished *bool `json:"isPublished,omitempty"`
}

func (a Announcement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Announcement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Announcement) GetStartTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *Announcement) GetEndTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndTime
}

func (o *Announcement) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Announcement) GetBody() *StructuredText {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *Announcement) GetEmoji() *string {
	if o == nil {
		return nil
	}
	return o.Emoji
}

func (o *Announcement) GetThumbnail() *Thumbnail {
	if o == nil {
		return nil
	}
	return o.Thumbnail
}

func (o *Announcement) GetBanner() *Thumbnail {
	if o == nil {
		return nil
	}
	return o.Banner
}

func (o *Announcement) GetAudienceFilters() []FacetFilter {
	if o == nil {
		return nil
	}
	return o.AudienceFilters
}

func (o *Announcement) GetSourceDocumentID() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentID
}

func (o *Announcement) GetHideAttribution() *bool {
	if o == nil {
		return nil
	}
	return o.HideAttribution
}

func (o *Announcement) GetChannel() *AnnouncementChannel1 {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *Announcement) GetPostType() *AnnouncementPostType {
	if o == nil {
		return nil
	}
	return o.PostType
}

func (o *Announcement) GetIsPrioritized() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrioritized
}

func (o *Announcement) GetViewURL() *string {
	if o == nil {
		return nil
	}
	return o.ViewURL
}

func (o *Announcement) GetDraftID() *int64 {
	if o == nil {
		return nil
	}
	return o.DraftID
}

func (o *Announcement) GetPermissions() *ObjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *Announcement) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Announcement) GetAuthor() *Person {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *Announcement) GetCreateTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.CreateTimestamp
}

func (o *Announcement) GetLastUpdateTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.LastUpdateTimestamp
}

func (o *Announcement) GetUpdatedBy() *Person {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Announcement) GetViewerInfo() *AnnouncementViewerInfo {
	if o == nil {
		return nil
	}
	return o.ViewerInfo
}

func (o *Announcement) GetSourceDocument() *Document {
	if o == nil {
		return nil
	}
	return o.SourceDocument
}

func (o *Announcement) GetIsPublished() *bool {
	if o == nil {
		return nil
	}
	return o.IsPublished
}
