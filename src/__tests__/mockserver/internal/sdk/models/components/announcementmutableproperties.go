// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// AnnouncementMutablePropertiesChannel - This determines whether this is a Social Feed post or a regular announcement.
type AnnouncementMutablePropertiesChannel string

const (
	AnnouncementMutablePropertiesChannelMain       AnnouncementMutablePropertiesChannel = "MAIN"
	AnnouncementMutablePropertiesChannelSocialFeed AnnouncementMutablePropertiesChannel = "SOCIAL_FEED"
)

func (e AnnouncementMutablePropertiesChannel) ToPointer() *AnnouncementMutablePropertiesChannel {
	return &e
}
func (e *AnnouncementMutablePropertiesChannel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MAIN":
		fallthrough
	case "SOCIAL_FEED":
		*e = AnnouncementMutablePropertiesChannel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnnouncementMutablePropertiesChannel: %v", v)
	}
}

// AnnouncementMutablePropertiesPostType - This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
type AnnouncementMutablePropertiesPostType string

const (
	AnnouncementMutablePropertiesPostTypeText AnnouncementMutablePropertiesPostType = "TEXT"
	AnnouncementMutablePropertiesPostTypeLink AnnouncementMutablePropertiesPostType = "LINK"
)

func (e AnnouncementMutablePropertiesPostType) ToPointer() *AnnouncementMutablePropertiesPostType {
	return &e
}
func (e *AnnouncementMutablePropertiesPostType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		fallthrough
	case "LINK":
		*e = AnnouncementMutablePropertiesPostType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnnouncementMutablePropertiesPostType: %v", v)
	}
}

type AnnouncementMutableProperties struct {
	// The date and time at which the announcement becomes active.
	StartTime *time.Time `json:"startTime,omitempty"`
	// The date and time at which the announcement expires.
	EndTime *time.Time `json:"endTime,omitempty"`
	// The headline of the announcement.
	Title *string         `json:"title,omitempty"`
	Body  *StructuredText `json:"body,omitempty"`
	// An emoji used to indicate the nature of the announcement.
	Emoji     *string    `json:"emoji,omitempty"`
	Thumbnail *Thumbnail `json:"thumbnail,omitempty"`
	Banner    *Thumbnail `json:"banner,omitempty"`
	// Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
	SourceDocumentID *string `json:"sourceDocumentId,omitempty"`
	// Whether or not to hide an author attribution.
	HideAttribution *bool `json:"hideAttribution,omitempty"`
	// This determines whether this is a Social Feed post or a regular announcement.
	Channel *AnnouncementMutablePropertiesChannel `json:"channel,omitempty"`
	// This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
	PostType *AnnouncementMutablePropertiesPostType `json:"postType,omitempty"`
	// Used by the Social Feed to pin posts to the front of the feed.
	IsPrioritized *bool `json:"isPrioritized,omitempty"`
	// URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
	ViewURL *string `json:"viewUrl,omitempty"`
}

func (a AnnouncementMutableProperties) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AnnouncementMutableProperties) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AnnouncementMutableProperties) GetStartTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *AnnouncementMutableProperties) GetEndTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndTime
}

func (o *AnnouncementMutableProperties) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *AnnouncementMutableProperties) GetBody() *StructuredText {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *AnnouncementMutableProperties) GetEmoji() *string {
	if o == nil {
		return nil
	}
	return o.Emoji
}

func (o *AnnouncementMutableProperties) GetThumbnail() *Thumbnail {
	if o == nil {
		return nil
	}
	return o.Thumbnail
}

func (o *AnnouncementMutableProperties) GetBanner() *Thumbnail {
	if o == nil {
		return nil
	}
	return o.Banner
}

func (o *AnnouncementMutableProperties) GetAudienceFilters() []FacetFilter {
	if o == nil {
		return nil
	}
	return o.AudienceFilters
}

func (o *AnnouncementMutableProperties) GetSourceDocumentID() *string {
	if o == nil {
		return nil
	}
	return o.SourceDocumentID
}

func (o *AnnouncementMutableProperties) GetHideAttribution() *bool {
	if o == nil {
		return nil
	}
	return o.HideAttribution
}

func (o *AnnouncementMutableProperties) GetChannel() *AnnouncementMutablePropertiesChannel {
	if o == nil {
		return nil
	}
	return o.Channel
}

func (o *AnnouncementMutableProperties) GetPostType() *AnnouncementMutablePropertiesPostType {
	if o == nil {
		return nil
	}
	return o.PostType
}

func (o *AnnouncementMutableProperties) GetIsPrioritized() *bool {
	if o == nil {
		return nil
	}
	return o.IsPrioritized
}

func (o *AnnouncementMutableProperties) GetViewURL() *string {
	if o == nil {
		return nil
	}
	return o.ViewURL
}
