// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

type AnswerSourceType string

const (
	AnswerSourceTypeDocument  AnswerSourceType = "DOCUMENT"
	AnswerSourceTypeAssistant AnswerSourceType = "ASSISTANT"
)

func (e AnswerSourceType) ToPointer() *AnswerSourceType {
	return &e
}
func (e *AnswerSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "ASSISTANT":
		*e = AnswerSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnswerSourceType: %v", v)
	}
}

type Answer struct {
	// The opaque ID of the Answer.
	ID int64 `json:"id"`
	// Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
	DocID    *string `json:"docId,omitempty"`
	Question *string `json:"question,omitempty"`
	// Additional ways of phrasing this question.
	QuestionVariations []string `json:"questionVariations,omitempty"`
	// The plain text answer to the question.
	BodyText *string `json:"bodyText,omitempty"`
	// The parent board ID of this Answer, or 0 if it's a floating Answer.
	BoardID *int64 `json:"boardId,omitempty"`
	// Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// A list of user roles for the answer added by the owner.
	AddedRoles []UserRoleSpecification `json:"addedRoles,omitempty"`
	// A list of user roles for the answer removed by the owner.
	RemovedRoles []UserRoleSpecification `json:"removedRoles,omitempty"`
	// A list of roles for this answer explicitly granted by an owner, editor, or admin.
	Roles              []UserRoleSpecification `json:"roles,omitempty"`
	SourceDocumentSpec *DocumentSpecUnion      `json:"sourceDocumentSpec,omitempty"`
	SourceType         *AnswerSourceType       `json:"sourceType,omitempty"`
	Permissions        *ObjectPermissions      `json:"permissions,omitempty"`
	CombinedAnswerText *StructuredText         `json:"combinedAnswerText,omitempty"`
	Likes              *AnswerLikes            `json:"likes,omitempty"`
	Author             *Person                 `json:"author,omitempty"`
	// The time the answer was created in ISO format (ISO 8601).
	CreateTime *time.Time `json:"createTime,omitempty"`
	// The time the answer was last updated in ISO format (ISO 8601).
	UpdateTime   *time.Time    `json:"updateTime,omitempty"`
	UpdatedBy    *Person       `json:"updatedBy,omitempty"`
	Verification *Verification `json:"verification,omitempty"`
	Board        *AnswerBoard  `json:"board,omitempty"`
	// The collections to which the answer belongs.
	Collections []Collection `json:"collections,omitempty"`
	// The document's document_category(.proto).
	DocumentCategory *string   `json:"documentCategory,omitempty"`
	SourceDocument   *Document `json:"sourceDocument,omitempty"`
}

func (a Answer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Answer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Answer) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Answer) GetDocID() *string {
	if o == nil {
		return nil
	}
	return o.DocID
}

func (o *Answer) GetQuestion() *string {
	if o == nil {
		return nil
	}
	return o.Question
}

func (o *Answer) GetQuestionVariations() []string {
	if o == nil {
		return nil
	}
	return o.QuestionVariations
}

func (o *Answer) GetBodyText() *string {
	if o == nil {
		return nil
	}
	return o.BodyText
}

func (o *Answer) GetBoardID() *int64 {
	if o == nil {
		return nil
	}
	return o.BoardID
}

func (o *Answer) GetAudienceFilters() []FacetFilter {
	if o == nil {
		return nil
	}
	return o.AudienceFilters
}

func (o *Answer) GetAddedRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.AddedRoles
}

func (o *Answer) GetRemovedRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.RemovedRoles
}

func (o *Answer) GetRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *Answer) GetSourceDocumentSpec() *DocumentSpecUnion {
	if o == nil {
		return nil
	}
	return o.SourceDocumentSpec
}

func (o *Answer) GetSourceType() *AnswerSourceType {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *Answer) GetPermissions() *ObjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *Answer) GetCombinedAnswerText() *StructuredText {
	if o == nil {
		return nil
	}
	return o.CombinedAnswerText
}

func (o *Answer) GetLikes() *AnswerLikes {
	if o == nil {
		return nil
	}
	return o.Likes
}

func (o *Answer) GetAuthor() *Person {
	if o == nil {
		return nil
	}
	return o.Author
}

func (o *Answer) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *Answer) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

func (o *Answer) GetUpdatedBy() *Person {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Answer) GetVerification() *Verification {
	if o == nil {
		return nil
	}
	return o.Verification
}

func (o *Answer) GetBoard() *AnswerBoard {
	if o == nil {
		return nil
	}
	return o.Board
}

func (o *Answer) GetCollections() []Collection {
	if o == nil {
		return nil
	}
	return o.Collections
}

func (o *Answer) GetDocumentCategory() *string {
	if o == nil {
		return nil
	}
	return o.DocumentCategory
}

func (o *Answer) GetSourceDocument() *Document {
	if o == nil {
		return nil
	}
	return o.SourceDocument
}
