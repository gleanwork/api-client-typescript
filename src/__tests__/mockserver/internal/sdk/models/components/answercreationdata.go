// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type AnswerCreationDataSourceType string

const (
	AnswerCreationDataSourceTypeDocument  AnswerCreationDataSourceType = "DOCUMENT"
	AnswerCreationDataSourceTypeAssistant AnswerCreationDataSourceType = "ASSISTANT"
)

func (e AnswerCreationDataSourceType) ToPointer() *AnswerCreationDataSourceType {
	return &e
}
func (e *AnswerCreationDataSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "ASSISTANT":
		*e = AnswerCreationDataSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnswerCreationDataSourceType: %v", v)
	}
}

type AnswerCreationData struct {
	Question *string `json:"question,omitempty"`
	// Additional ways of phrasing this question.
	QuestionVariations []string `json:"questionVariations,omitempty"`
	// The plain text answer to the question.
	BodyText *string `json:"bodyText,omitempty"`
	// The parent board ID of this Answer, or 0 if it's a floating Answer.
	BoardID *int64 `json:"boardId,omitempty"`
	// Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// A list of user roles for the answer added by the owner.
	AddedRoles []UserRoleSpecification `json:"addedRoles,omitempty"`
	// A list of user roles for the answer removed by the owner.
	RemovedRoles []UserRoleSpecification `json:"removedRoles,omitempty"`
	// A list of roles for this answer explicitly granted by an owner, editor, or admin.
	Roles              []UserRoleSpecification       `json:"roles,omitempty"`
	SourceDocumentSpec *DocumentSpecUnion            `json:"sourceDocumentSpec,omitempty"`
	SourceType         *AnswerCreationDataSourceType `json:"sourceType,omitempty"`
	// IDs of Collections to which a document is added.
	AddedCollections   []int64                          `json:"addedCollections,omitempty"`
	CombinedAnswerText *StructuredTextMutableProperties `json:"combinedAnswerText,omitempty"`
}

func (o *AnswerCreationData) GetQuestion() *string {
	if o == nil {
		return nil
	}
	return o.Question
}

func (o *AnswerCreationData) GetQuestionVariations() []string {
	if o == nil {
		return nil
	}
	return o.QuestionVariations
}

func (o *AnswerCreationData) GetBodyText() *string {
	if o == nil {
		return nil
	}
	return o.BodyText
}

func (o *AnswerCreationData) GetBoardID() *int64 {
	if o == nil {
		return nil
	}
	return o.BoardID
}

func (o *AnswerCreationData) GetAudienceFilters() []FacetFilter {
	if o == nil {
		return nil
	}
	return o.AudienceFilters
}

func (o *AnswerCreationData) GetAddedRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.AddedRoles
}

func (o *AnswerCreationData) GetRemovedRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.RemovedRoles
}

func (o *AnswerCreationData) GetRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *AnswerCreationData) GetSourceDocumentSpec() *DocumentSpecUnion {
	if o == nil {
		return nil
	}
	return o.SourceDocumentSpec
}

func (o *AnswerCreationData) GetSourceType() *AnswerCreationDataSourceType {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *AnswerCreationData) GetAddedCollections() []int64 {
	if o == nil {
		return nil
	}
	return o.AddedCollections
}

func (o *AnswerCreationData) GetCombinedAnswerText() *StructuredTextMutableProperties {
	if o == nil {
		return nil
	}
	return o.CombinedAnswerText
}
