// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Backend - Which backend to use to fulfill the requests.
type Backend string

const (
	BackendSearch Backend = "SEARCH"
	BackendChat   Backend = "CHAT"
)

func (e Backend) ToPointer() *Backend {
	return &e
}
func (e *Backend) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SEARCH":
		fallthrough
	case "CHAT":
		*e = Backend(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Backend: %v", v)
	}
}

type AskRequest struct {
	// Whether to apply only question detection and not answering.
	DetectOnly              *bool                    `json:"detectOnly,omitempty"`
	AskExperimentalMetadata *AskExperimentalMetadata `json:"AskExperimentalMetadata,omitempty"`
	SearchRequest           SearchRequest            `json:"searchRequest"`
	// A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ExcludedDocumentSpecs []DocumentSpecUnion `json:"excludedDocumentSpecs,omitempty"`
	// Search operators to append to the query
	Operators *string `json:"operators,omitempty"`
	// Which backend to use to fulfill the requests.
	Backend *Backend `json:"backend,omitempty"`
	// The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
	ChatApplicationID *string                 `json:"chatApplicationId,omitempty"`
	Inclusions        *ChatRestrictionFilters `json:"inclusions,omitempty"`
	Exclusions        *ChatRestrictionFilters `json:"exclusions,omitempty"`
}

func (o *AskRequest) GetDetectOnly() *bool {
	if o == nil {
		return nil
	}
	return o.DetectOnly
}

func (o *AskRequest) GetAskExperimentalMetadata() *AskExperimentalMetadata {
	if o == nil {
		return nil
	}
	return o.AskExperimentalMetadata
}

func (o *AskRequest) GetSearchRequest() SearchRequest {
	if o == nil {
		return SearchRequest{}
	}
	return o.SearchRequest
}

func (o *AskRequest) GetExcludedDocumentSpecs() []DocumentSpecUnion {
	if o == nil {
		return nil
	}
	return o.ExcludedDocumentSpecs
}

func (o *AskRequest) GetOperators() *string {
	if o == nil {
		return nil
	}
	return o.Operators
}

func (o *AskRequest) GetBackend() *Backend {
	if o == nil {
		return nil
	}
	return o.Backend
}

func (o *AskRequest) GetChatApplicationID() *string {
	if o == nil {
		return nil
	}
	return o.ChatApplicationID
}

func (o *AskRequest) GetInclusions() *ChatRestrictionFilters {
	if o == nil {
		return nil
	}
	return o.Inclusions
}

func (o *AskRequest) GetExclusions() *ChatRestrictionFilters {
	if o == nil {
		return nil
	}
	return o.Exclusions
}
