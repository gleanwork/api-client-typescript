// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

// AssistantConfig - Configuration settings specific to Assistant features
type AssistantConfig struct {
	// Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with "\n" between each line.
	ChatBannerText *string `json:"chatBannerText,omitempty"`
	// Disclaimer message to be displayed below the chat box. This could be in markdown format.
	ChatBoxDisclaimer *string `json:"chatBoxDisclaimer,omitempty"`
	// The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
	ChatLinkURLTemplate *string `json:"chatLinkUrlTemplate,omitempty"`
	// Label for the chat header during initial state.
	ChatStarterHeader *string `json:"chatStarterHeader,omitempty"`
	// Label for the chat subheader during initial state.
	ChatStarterSubheader *string             `json:"chatStarterSubheader,omitempty"`
	AgentClientConfigs   []AgentClientConfig `json:"agentClientConfigs,omitempty"`
	// A list of datasources that are disabled in Chat
	RedlistedDatasources []string `json:"redlistedDatasources,omitempty"`
	// A list of datasources that are always visible in Chat
	GreenlistedDatasourceInstances []string `json:"greenlistedDatasourceInstances,omitempty"`
	// Whether the GPT agent (general mode) for Chat is enabled
	GptAgentEnabled *bool `json:"gptAgentEnabled,omitempty"`
	// Configuration settings for the chat file upload feature
	FileUpload *FileUploadConfig `json:"fileUpload,omitempty"`
	// Whether the chat history for Chat is enabled for the deployment
	ChatHistoryEnabled *bool `json:"chatHistoryEnabled,omitempty"`
	// Redirect URL for "Chat guide" in the default chat starter subheader
	ChatGuideURL *string `json:"chatGuideUrl,omitempty"`
	// Whether prompt templates feature are enabled for the deployment.
	PromptsEnabled *bool `json:"promptsEnabled,omitempty"`
	// Whether a default user can share prompts to the prompt library.
	DefaultUserCanSharePrompts *bool `json:"defaultUserCanSharePrompts,omitempty"`
	// Whether a default user can share agents to the agent library.
	DefaultUserCanShareAgents *bool `json:"defaultUserCanShareAgents,omitempty"`
	// Whether file upload for Chat is enabled for the deployment
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	FileUploadEnabled *bool `json:"fileUploadEnabled,omitempty"`
	// Configuration settings related to web search
	WebSearch *WebSearchConfig `json:"webSearch,omitempty"`
	// Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers.
	ChatBarV3Enabled *bool `json:"chatBarV3Enabled,omitempty"`
	// Placeholder text for the chat bar
	ChatBarPlaceholderText *string                 `json:"chatBarPlaceholderText,omitempty"`
	AgentMigrationStatuses *AgentMigrationStatuses `json:"agentMigrationStatuses,omitempty"`
	// The prompt deprecation time shown on the prompt library warning.
	PromptDeprecationTimestamp *int64 `json:"promptDeprecationTimestamp,omitempty"`
	// Configuration settings for triggers.
	Triggers *TriggersClientConfig `json:"triggers,omitempty"`
}

func (o *AssistantConfig) GetChatBannerText() *string {
	if o == nil {
		return nil
	}
	return o.ChatBannerText
}

func (o *AssistantConfig) GetChatBoxDisclaimer() *string {
	if o == nil {
		return nil
	}
	return o.ChatBoxDisclaimer
}

func (o *AssistantConfig) GetChatLinkURLTemplate() *string {
	if o == nil {
		return nil
	}
	return o.ChatLinkURLTemplate
}

func (o *AssistantConfig) GetChatStarterHeader() *string {
	if o == nil {
		return nil
	}
	return o.ChatStarterHeader
}

func (o *AssistantConfig) GetChatStarterSubheader() *string {
	if o == nil {
		return nil
	}
	return o.ChatStarterSubheader
}

func (o *AssistantConfig) GetAgentClientConfigs() []AgentClientConfig {
	if o == nil {
		return nil
	}
	return o.AgentClientConfigs
}

func (o *AssistantConfig) GetRedlistedDatasources() []string {
	if o == nil {
		return nil
	}
	return o.RedlistedDatasources
}

func (o *AssistantConfig) GetGreenlistedDatasourceInstances() []string {
	if o == nil {
		return nil
	}
	return o.GreenlistedDatasourceInstances
}

func (o *AssistantConfig) GetGptAgentEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.GptAgentEnabled
}

func (o *AssistantConfig) GetFileUpload() *FileUploadConfig {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *AssistantConfig) GetChatHistoryEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ChatHistoryEnabled
}

func (o *AssistantConfig) GetChatGuideURL() *string {
	if o == nil {
		return nil
	}
	return o.ChatGuideURL
}

func (o *AssistantConfig) GetPromptsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PromptsEnabled
}

func (o *AssistantConfig) GetDefaultUserCanSharePrompts() *bool {
	if o == nil {
		return nil
	}
	return o.DefaultUserCanSharePrompts
}

func (o *AssistantConfig) GetDefaultUserCanShareAgents() *bool {
	if o == nil {
		return nil
	}
	return o.DefaultUserCanShareAgents
}

func (o *AssistantConfig) GetFileUploadEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FileUploadEnabled
}

func (o *AssistantConfig) GetWebSearch() *WebSearchConfig {
	if o == nil {
		return nil
	}
	return o.WebSearch
}

func (o *AssistantConfig) GetChatBarV3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.ChatBarV3Enabled
}

func (o *AssistantConfig) GetChatBarPlaceholderText() *string {
	if o == nil {
		return nil
	}
	return o.ChatBarPlaceholderText
}

func (o *AssistantConfig) GetAgentMigrationStatuses() *AgentMigrationStatuses {
	if o == nil {
		return nil
	}
	return o.AgentMigrationStatuses
}

func (o *AssistantConfig) GetPromptDeprecationTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.PromptDeprecationTimestamp
}

func (o *AssistantConfig) GetTriggers() *TriggersClientConfig {
	if o == nil {
		return nil
	}
	return o.Triggers
}
