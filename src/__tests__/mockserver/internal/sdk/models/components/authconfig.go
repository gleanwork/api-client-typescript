// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// AuthConfigType - The type of authentication being used.
// Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
// 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
// 'OAUTH_USER' uses individual user tokens for external API calls.
// 'DWD' refers to domain wide delegation.
type AuthConfigType string

const (
	AuthConfigTypeNone       AuthConfigType = "NONE"
	AuthConfigTypeOauthUser  AuthConfigType = "OAUTH_USER"
	AuthConfigTypeOauthAdmin AuthConfigType = "OAUTH_ADMIN"
	AuthConfigTypeAPIKey     AuthConfigType = "API_KEY"
	AuthConfigTypeBasicAuth  AuthConfigType = "BASIC_AUTH"
	AuthConfigTypeDwd        AuthConfigType = "DWD"
)

func (e AuthConfigType) ToPointer() *AuthConfigType {
	return &e
}
func (e *AuthConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "OAUTH_USER":
		fallthrough
	case "OAUTH_ADMIN":
		fallthrough
	case "API_KEY":
		fallthrough
	case "BASIC_AUTH":
		fallthrough
	case "DWD":
		*e = AuthConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthConfigType: %v", v)
	}
}

// GrantType - The type of grant type being used.
type GrantType string

const (
	GrantTypeAuthCode          GrantType = "AUTH_CODE"
	GrantTypeClientCredentials GrantType = "CLIENT_CREDENTIALS"
)

func (e GrantType) ToPointer() *GrantType {
	return &e
}
func (e *GrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTH_CODE":
		fallthrough
	case "CLIENT_CREDENTIALS":
		*e = GrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrantType: %v", v)
	}
}

// AuthConfigStatus - Auth status of the tool.
type AuthConfigStatus string

const (
	AuthConfigStatusAwaitingAuth AuthConfigStatus = "AWAITING_AUTH"
	AuthConfigStatusAuthorized   AuthConfigStatus = "AUTHORIZED"
)

func (e AuthConfigStatus) ToPointer() *AuthConfigStatus {
	return &e
}
func (e *AuthConfigStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWAITING_AUTH":
		fallthrough
	case "AUTHORIZED":
		*e = AuthConfigStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthConfigStatus: %v", v)
	}
}

// AuthConfig - Config for tool's authentication method.
type AuthConfig struct {
	// Whether or not this tool is hosted on-premise.
	IsOnPrem *bool `json:"isOnPrem,omitempty"`
	// Whether or not this uses central auth.
	UsesCentralAuth *bool `json:"usesCentralAuth,omitempty"`
	// The type of authentication being used.
	// Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
	// 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
	// 'OAUTH_USER' uses individual user tokens for external API calls.
	// 'DWD' refers to domain wide delegation.
	//
	Type *AuthConfigType `json:"type,omitempty"`
	// The type of grant type being used.
	GrantType *GrantType `json:"grantType,omitempty"`
	// Auth status of the tool.
	Status *AuthConfigStatus `json:"status,omitempty"`
	// The URL where users will be directed to start the OAuth flow.
	ClientURL *string `json:"client_url,omitempty"`
	// A list of strings denoting the different scopes or access levels required by the tool.
	Scopes []string `json:"scopes,omitempty"`
	// A list of strings denoting the different audience which can access the tool.
	Audiences []string `json:"audiences,omitempty"`
	// The OAuth provider's endpoint, where access tokens are requested.
	AuthorizationURL *string `json:"authorization_url,omitempty"`
	// The time the tool was last authorized in ISO format (ISO 8601).
	LastAuthorizedAt *time.Time `json:"lastAuthorizedAt,omitempty"`
}

func (a AuthConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AuthConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AuthConfig) GetIsOnPrem() *bool {
	if o == nil {
		return nil
	}
	return o.IsOnPrem
}

func (o *AuthConfig) GetUsesCentralAuth() *bool {
	if o == nil {
		return nil
	}
	return o.UsesCentralAuth
}

func (o *AuthConfig) GetType() *AuthConfigType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AuthConfig) GetGrantType() *GrantType {
	if o == nil {
		return nil
	}
	return o.GrantType
}

func (o *AuthConfig) GetStatus() *AuthConfigStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *AuthConfig) GetClientURL() *string {
	if o == nil {
		return nil
	}
	return o.ClientURL
}

func (o *AuthConfig) GetScopes() []string {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *AuthConfig) GetAudiences() []string {
	if o == nil {
		return nil
	}
	return o.Audiences
}

func (o *AuthConfig) GetAuthorizationURL() *string {
	if o == nil {
		return nil
	}
	return o.AuthorizationURL
}

func (o *AuthConfig) GetLastAuthorizedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastAuthorizedAt
}
