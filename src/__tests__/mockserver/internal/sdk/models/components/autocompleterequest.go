// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type AutocompleteRequestResultType string

const (
	AutocompleteRequestResultTypeAdditionalDocument AutocompleteRequestResultType = "ADDITIONAL_DOCUMENT"
	AutocompleteRequestResultTypeApp                AutocompleteRequestResultType = "APP"
	AutocompleteRequestResultTypeBrowserHistory     AutocompleteRequestResultType = "BROWSER_HISTORY"
	AutocompleteRequestResultTypeDatasource         AutocompleteRequestResultType = "DATASOURCE"
	AutocompleteRequestResultTypeDocument           AutocompleteRequestResultType = "DOCUMENT"
	AutocompleteRequestResultTypeEntity             AutocompleteRequestResultType = "ENTITY"
	AutocompleteRequestResultTypeGolink             AutocompleteRequestResultType = "GOLINK"
	AutocompleteRequestResultTypeHistory            AutocompleteRequestResultType = "HISTORY"
	AutocompleteRequestResultTypeNewChat            AutocompleteRequestResultType = "NEW_CHAT"
	AutocompleteRequestResultTypeOperator           AutocompleteRequestResultType = "OPERATOR"
	AutocompleteRequestResultTypeOperatorValue      AutocompleteRequestResultType = "OPERATOR_VALUE"
	AutocompleteRequestResultTypeQuicklink          AutocompleteRequestResultType = "QUICKLINK"
	AutocompleteRequestResultTypeSuggestion         AutocompleteRequestResultType = "SUGGESTION"
)

func (e AutocompleteRequestResultType) ToPointer() *AutocompleteRequestResultType {
	return &e
}
func (e *AutocompleteRequestResultType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADDITIONAL_DOCUMENT":
		fallthrough
	case "APP":
		fallthrough
	case "BROWSER_HISTORY":
		fallthrough
	case "DATASOURCE":
		fallthrough
	case "DOCUMENT":
		fallthrough
	case "ENTITY":
		fallthrough
	case "GOLINK":
		fallthrough
	case "HISTORY":
		fallthrough
	case "NEW_CHAT":
		fallthrough
	case "OPERATOR":
		fallthrough
	case "OPERATOR_VALUE":
		fallthrough
	case "QUICKLINK":
		fallthrough
	case "SUGGESTION":
		*e = AutocompleteRequestResultType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutocompleteRequestResultType: %v", v)
	}
}

type AutocompleteRequest struct {
	TrackingToken *string      `json:"trackingToken,omitempty"`
	SessionInfo   *SessionInfo `json:"sessionInfo,omitempty"`
	// Partially typed query.
	Query *string `json:"query,omitempty"`
	// Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
	DatasourcesFilter []string `json:"datasourcesFilter,omitempty"`
	// Filter to only return results relevant to the given datasource.
	Datasource *string `json:"datasource,omitempty"`
	// Filter to only return results of the given type(s). All types may be returned if omitted.
	ResultTypes []AutocompleteRequestResultType `json:"resultTypes,omitempty"`
	// Maximum number of results to be returned. If no value is provided, the backend will cap at 200.
	//
	ResultSize *int64 `json:"resultSize,omitempty"`
	// Auth tokens which may be used for federated results.
	AuthTokens []AuthToken `json:"authTokens,omitempty"`
}

func (o *AutocompleteRequest) GetTrackingToken() *string {
	if o == nil {
		return nil
	}
	return o.TrackingToken
}

func (o *AutocompleteRequest) GetSessionInfo() *SessionInfo {
	if o == nil {
		return nil
	}
	return o.SessionInfo
}

func (o *AutocompleteRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *AutocompleteRequest) GetDatasourcesFilter() []string {
	if o == nil {
		return nil
	}
	return o.DatasourcesFilter
}

func (o *AutocompleteRequest) GetDatasource() *string {
	if o == nil {
		return nil
	}
	return o.Datasource
}

func (o *AutocompleteRequest) GetResultTypes() []AutocompleteRequestResultType {
	if o == nil {
		return nil
	}
	return o.ResultTypes
}

func (o *AutocompleteRequest) GetResultSize() *int64 {
	if o == nil {
		return nil
	}
	return o.ResultSize
}

func (o *AutocompleteRequest) GetAuthTokens() []AuthToken {
	if o == nil {
		return nil
	}
	return o.AuthTokens
}
