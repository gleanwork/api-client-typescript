// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// BulkUploadHistoryEventStatus - The status of the upload, an enum of ACTIVE, SUCCESSFUL
type BulkUploadHistoryEventStatus string

const (
	BulkUploadHistoryEventStatusActive     BulkUploadHistoryEventStatus = "ACTIVE"
	BulkUploadHistoryEventStatusSuccessful BulkUploadHistoryEventStatus = "SUCCESSFUL"
)

func (e BulkUploadHistoryEventStatus) ToPointer() *BulkUploadHistoryEventStatus {
	return &e
}
func (e *BulkUploadHistoryEventStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "SUCCESSFUL":
		*e = BulkUploadHistoryEventStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BulkUploadHistoryEventStatus: %v", v)
	}
}

// ProcessingState - The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
type ProcessingState string

const (
	ProcessingStateUnavailable       ProcessingState = "UNAVAILABLE"
	ProcessingStateUploadStarted     ProcessingState = "UPLOAD STARTED"
	ProcessingStateUploadInProgress  ProcessingState = "UPLOAD IN PROGRESS"
	ProcessingStateUploadCompleted   ProcessingState = "UPLOAD COMPLETED"
	ProcessingStateDeletionPaused    ProcessingState = "DELETION PAUSED"
	ProcessingStateIndexingCompleted ProcessingState = "INDEXING COMPLETED"
)

func (e ProcessingState) ToPointer() *ProcessingState {
	return &e
}
func (e *ProcessingState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNAVAILABLE":
		fallthrough
	case "UPLOAD STARTED":
		fallthrough
	case "UPLOAD IN PROGRESS":
		fallthrough
	case "UPLOAD COMPLETED":
		fallthrough
	case "DELETION PAUSED":
		fallthrough
	case "INDEXING COMPLETED":
		*e = ProcessingState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProcessingState: %v", v)
	}
}

// BulkUploadHistoryEvent - Information about a successful bulk upload
type BulkUploadHistoryEvent struct {
	// The unique ID of the upload
	UploadID *string `json:"uploadId,omitempty"`
	// The start time of the upload in ISO 8601 format
	StartTime *string `json:"startTime,omitempty"`
	// The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
	EndTime *string `json:"endTime,omitempty"`
	// The status of the upload, an enum of ACTIVE, SUCCESSFUL
	Status *BulkUploadHistoryEventStatus `json:"status,omitempty"`
	// The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
	ProcessingState *ProcessingState `json:"processingState,omitempty"`
}

func (o *BulkUploadHistoryEvent) GetUploadID() *string {
	if o == nil {
		return nil
	}
	return o.UploadID
}

func (o *BulkUploadHistoryEvent) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}

func (o *BulkUploadHistoryEvent) GetEndTime() *string {
	if o == nil {
		return nil
	}
	return o.EndTime
}

func (o *BulkUploadHistoryEvent) GetStatus() *BulkUploadHistoryEventStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *BulkUploadHistoryEvent) GetProcessingState() *ProcessingState {
	if o == nil {
		return nil
	}
	return o.ProcessingState
}
