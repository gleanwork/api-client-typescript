// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ResponseStatus string

const (
	ResponseStatusAccepted   ResponseStatus = "ACCEPTED"
	ResponseStatusDeclined   ResponseStatus = "DECLINED"
	ResponseStatusNoResponse ResponseStatus = "NO_RESPONSE"
	ResponseStatusTentative  ResponseStatus = "TENTATIVE"
)

func (e ResponseStatus) ToPointer() *ResponseStatus {
	return &e
}
func (e *ResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCEPTED":
		fallthrough
	case "DECLINED":
		fallthrough
	case "NO_RESPONSE":
		fallthrough
	case "TENTATIVE":
		*e = ResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ResponseStatus: %v", v)
	}
}

type CalendarAttendee struct {
	// Whether or not this attendee is an organizer.
	IsOrganizer *bool `json:"isOrganizer,omitempty"`
	// Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
	IsInGroup *bool  `json:"isInGroup,omitempty"`
	Person    Person `json:"person"`
	// If this attendee is a group, represents the list of individual attendees in the group.
	GroupAttendees []CalendarAttendee `json:"groupAttendees,omitempty"`
	ResponseStatus *ResponseStatus    `json:"responseStatus,omitempty"`
}

func (o *CalendarAttendee) GetIsOrganizer() *bool {
	if o == nil {
		return nil
	}
	return o.IsOrganizer
}

func (o *CalendarAttendee) GetIsInGroup() *bool {
	if o == nil {
		return nil
	}
	return o.IsInGroup
}

func (o *CalendarAttendee) GetPerson() Person {
	if o == nil {
		return Person{}
	}
	return o.Person
}

func (o *CalendarAttendee) GetGroupAttendees() []CalendarAttendee {
	if o == nil {
		return nil
	}
	return o.GroupAttendees
}

func (o *CalendarAttendee) GetResponseStatus() *ResponseStatus {
	if o == nil {
		return nil
	}
	return o.ResponseStatus
}
