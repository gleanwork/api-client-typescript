// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// CalendarEventEventType - The nature of the event, for example "out of office".
type CalendarEventEventType string

const (
	CalendarEventEventTypeDefault     CalendarEventEventType = "DEFAULT"
	CalendarEventEventTypeOutOfOffice CalendarEventEventType = "OUT_OF_OFFICE"
)

func (e CalendarEventEventType) ToPointer() *CalendarEventEventType {
	return &e
}
func (e *CalendarEventEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT":
		fallthrough
	case "OUT_OF_OFFICE":
		*e = CalendarEventEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CalendarEventEventType: %v", v)
	}
}

// CalendarEvent - A generic, light-weight calendar event.
type CalendarEvent struct {
	Time *TimeInterval `json:"time,omitempty"`
	// The nature of the event, for example "out of office".
	EventType *CalendarEventEventType `json:"eventType,omitempty"`
	// The calendar event id
	ID string `json:"id"`
	// A permalink for this calendar event
	URL       string             `json:"url"`
	Attendees *CalendarAttendees `json:"attendees,omitempty"`
	// The location that this event is taking place at.
	Location       *string         `json:"location,omitempty"`
	ConferenceData *ConferenceData `json:"conferenceData,omitempty"`
	// The HTML description of the event.
	Description *string `json:"description,omitempty"`
	// The app or other repository type from which the event was extracted
	Datasource *string `json:"datasource,omitempty"`
	// The event has a transcript associated with it enabling features like summarization
	HasTranscript        *bool                 `json:"hasTranscript,omitempty"`
	Classifications      []EventClassification `json:"classifications,omitempty"`
	GeneratedAttachments []GeneratedAttachment `json:"generatedAttachments,omitempty"`
}

func (o *CalendarEvent) GetTime() *TimeInterval {
	if o == nil {
		return nil
	}
	return o.Time
}

func (o *CalendarEvent) GetEventType() *CalendarEventEventType {
	if o == nil {
		return nil
	}
	return o.EventType
}

func (o *CalendarEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CalendarEvent) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CalendarEvent) GetAttendees() *CalendarAttendees {
	if o == nil {
		return nil
	}
	return o.Attendees
}

func (o *CalendarEvent) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *CalendarEvent) GetConferenceData() *ConferenceData {
	if o == nil {
		return nil
	}
	return o.ConferenceData
}

func (o *CalendarEvent) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CalendarEvent) GetDatasource() *string {
	if o == nil {
		return nil
	}
	return o.Datasource
}

func (o *CalendarEvent) GetHasTranscript() *bool {
	if o == nil {
		return nil
	}
	return o.HasTranscript
}

func (o *CalendarEvent) GetClassifications() []EventClassification {
	if o == nil {
		return nil
	}
	return o.Classifications
}

func (o *CalendarEvent) GetGeneratedAttachments() []GeneratedAttachment {
	if o == nil {
		return nil
	}
	return o.GeneratedAttachments
}
