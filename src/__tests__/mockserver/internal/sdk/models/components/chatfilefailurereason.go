// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ChatFileFailureReason - Reason for failed status.
type ChatFileFailureReason string

const (
	ChatFileFailureReasonParseFailed                ChatFileFailureReason = "PARSE_FAILED"
	ChatFileFailureReasonAvScanFailed               ChatFileFailureReason = "AV_SCAN_FAILED"
	ChatFileFailureReasonFileTooSmall               ChatFileFailureReason = "FILE_TOO_SMALL"
	ChatFileFailureReasonFileTooLarge               ChatFileFailureReason = "FILE_TOO_LARGE"
	ChatFileFailureReasonFileExtensionUnsupported   ChatFileFailureReason = "FILE_EXTENSION_UNSUPPORTED"
	ChatFileFailureReasonFileMetadataValidationFail ChatFileFailureReason = "FILE_METADATA_VALIDATION_FAIL"
	ChatFileFailureReasonFileProcessingTimedOut     ChatFileFailureReason = "FILE_PROCESSING_TIMED_OUT"
)

func (e ChatFileFailureReason) ToPointer() *ChatFileFailureReason {
	return &e
}
func (e *ChatFileFailureReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PARSE_FAILED":
		fallthrough
	case "AV_SCAN_FAILED":
		fallthrough
	case "FILE_TOO_SMALL":
		fallthrough
	case "FILE_TOO_LARGE":
		fallthrough
	case "FILE_EXTENSION_UNSUPPORTED":
		fallthrough
	case "FILE_METADATA_VALIDATION_FAIL":
		fallthrough
	case "FILE_PROCESSING_TIMED_OUT":
		*e = ChatFileFailureReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ChatFileFailureReason: %v", v)
	}
}
