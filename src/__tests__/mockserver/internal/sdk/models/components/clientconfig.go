// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Brandings - Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
type Brandings struct {
	// A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
	Light *Branding `json:"light,omitempty"`
	// A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
	Dark *Branding `json:"dark,omitempty"`
	// Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
	ProductTerms *ProductTerms `json:"productTerms,omitempty"`
}

func (o *Brandings) GetLight() *Branding {
	if o == nil {
		return nil
	}
	return o.Light
}

func (o *Brandings) GetDark() *Branding {
	if o == nil {
		return nil
	}
	return o.Dark
}

func (o *Brandings) GetProductTerms() *ProductTerms {
	if o == nil {
		return nil
	}
	return o.ProductTerms
}

// SsoCompanyProvider - SSO provider used by the company
type SsoCompanyProvider string

const (
	SsoCompanyProviderGsuite       SsoCompanyProvider = "gsuite"
	SsoCompanyProviderIap          SsoCompanyProvider = "iap"
	SsoCompanyProviderOkta         SsoCompanyProvider = "okta"
	SsoCompanyProviderOktaSaml     SsoCompanyProvider = "okta_saml"
	SsoCompanyProviderPing         SsoCompanyProvider = "ping"
	SsoCompanyProviderAzure        SsoCompanyProvider = "azure"
	SsoCompanyProviderOnelogin     SsoCompanyProvider = "onelogin"
	SsoCompanyProviderOneloginSaml SsoCompanyProvider = "onelogin_saml"
)

func (e SsoCompanyProvider) ToPointer() *SsoCompanyProvider {
	return &e
}
func (e *SsoCompanyProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gsuite":
		fallthrough
	case "iap":
		fallthrough
	case "okta":
		fallthrough
	case "okta_saml":
		fallthrough
	case "ping":
		fallthrough
	case "azure":
		fallthrough
	case "onelogin":
		fallthrough
	case "onelogin_saml":
		*e = SsoCompanyProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SsoCompanyProvider: %v", v)
	}
}

// ClientConfig - Configuration settings for a specific client deployment that are not related to any particular datasource
type ClientConfig struct {
	// Configuration settings specific to Assistant features
	Assistant *AssistantConfig `json:"assistant,omitempty"`
	// Configuration settings related to Tools.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Tools *ToolsConfig `json:"tools,omitempty"`
	// Configuration settings related to Shortcuts
	Shortcuts *ShortcutsConfig `json:"shortcuts,omitempty"`
	// Configuration settings related to Search
	Search *SearchClientConfig `json:"search,omitempty"`
	// Whether people celebrations is enabled or not for the instance
	FeedPeopleCelebrationsEnabled *bool `json:"feedPeopleCelebrationsEnabled,omitempty"`
	// Whether the suggested feed is enabled
	FeedSuggestedEnabled *bool `json:"feedSuggestedEnabled,omitempty"`
	// Whether the trending feed is enabled
	FeedTrendingEnabled *bool `json:"feedTrendingEnabled,omitempty"`
	// Whether the recents feed is enabled
	FeedRecentsEnabled *bool `json:"feedRecentsEnabled,omitempty"`
	// Whether the mentions feed is enabled
	FeedMentionsEnabled *bool `json:"feedMentionsEnabled,omitempty"`
	// Whether the GPT agent for Chat is enabled
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	GptAgentEnabled *bool `json:"gptAgentEnabled,omitempty"`
	// Whether the chat history for Chat is enabled
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ChatHistoryEnabled *bool `json:"chatHistoryEnabled,omitempty"`
	// A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.
	BoolValues map[string]bool `json:"boolValues,omitempty"`
	// A map of {string, integer} pairs for client consumption.
	IntegerValues map[string]int64 `json:"integerValues,omitempty"`
	// The user-facing name of the company owning the deployment
	CompanyDisplayName *string `json:"companyDisplayName,omitempty"`
	// A markdown string to be displayed on the search results page. Useful for outlinks to help pages.
	CustomSerpMarkdown *string `json:"customSerpMarkdown,omitempty"`
	// A demonstrative query to show during new user onboarding
	OnboardingQuery *string `json:"onboardingQuery,omitempty"`
	// Determines whether the org chart link in the Directory panel is visible to all users.
	IsOrgChartLinkVisible *bool `json:"isOrgChartLinkVisible,omitempty"`
	// Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible.
	IsOrgChartAccessible *bool `json:"isOrgChartAccessible,omitempty"`
	// Whether or not people data has been set up.
	IsPeopleSetup *bool `json:"isPeopleSetup,omitempty"`
	// Whether or not the deployment is in pilot mode.
	IsPilotMode *bool `json:"isPilotMode,omitempty"`
	// URL the company uses to access the web app
	WebAppURL    *string             `json:"webAppUrl,omitempty"`
	UserOutreach *UserOutreachConfig `json:"userOutreach,omitempty"`
	// The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s.
	SearchLinkURLTemplate *string `json:"searchLinkUrlTemplate,omitempty"`
	// The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ChatLinkURLTemplate *string `json:"chatLinkUrlTemplate,omitempty"`
	// A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
	Themes *Themes `json:"themes,omitempty"`
	// Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
	Brandings *Brandings `json:"brandings,omitempty"`
	// Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name
	GreetingFormat *string `json:"greetingFormat,omitempty"`
	// Label for the external link at the end of the Task card in order to guide user to the source.
	TaskSeeAllLabel *string `json:"taskSeeAllLabel,omitempty"`
	// Link used in conjunction with taskSeeAllLabel to redirect user to the task's source.
	TaskSeeAllLink *string `json:"taskSeeAllLink,omitempty"`
	// Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	SearchPlaceholder *string `json:"searchPlaceholder,omitempty"`
	// Company-wide custom prefix for Go Links.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ShortcutsPrefix *string `json:"shortcutsPrefix,omitempty"`
	// SSO provider used by the company
	SsoCompanyProvider *SsoCompanyProvider `json:"ssoCompanyProvider,omitempty"`
	// whether to show the running ML pipelines banner
	ShowPipelinesSetupBanner *bool                   `json:"showPipelinesSetupBanner,omitempty"`
	FeedbackCustomizations   *FeedbackCustomizations `json:"feedbackCustomizations,omitempty"`
}

func (o *ClientConfig) GetAssistant() *AssistantConfig {
	if o == nil {
		return nil
	}
	return o.Assistant
}

func (o *ClientConfig) GetTools() *ToolsConfig {
	if o == nil {
		return nil
	}
	return o.Tools
}

func (o *ClientConfig) GetShortcuts() *ShortcutsConfig {
	if o == nil {
		return nil
	}
	return o.Shortcuts
}

func (o *ClientConfig) GetSearch() *SearchClientConfig {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *ClientConfig) GetFeedPeopleCelebrationsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FeedPeopleCelebrationsEnabled
}

func (o *ClientConfig) GetFeedSuggestedEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FeedSuggestedEnabled
}

func (o *ClientConfig) GetFeedTrendingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FeedTrendingEnabled
}

func (o *ClientConfig) GetFeedRecentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FeedRecentsEnabled
}

func (o *ClientConfig) GetFeedMentionsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FeedMentionsEnabled
}

func (o *ClientConfig) GetGptAgentEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.GptAgentEnabled
}

func (o *ClientConfig) GetChatHistoryEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ChatHistoryEnabled
}

func (o *ClientConfig) GetBoolValues() map[string]bool {
	if o == nil {
		return nil
	}
	return o.BoolValues
}

func (o *ClientConfig) GetIntegerValues() map[string]int64 {
	if o == nil {
		return nil
	}
	return o.IntegerValues
}

func (o *ClientConfig) GetCompanyDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyDisplayName
}

func (o *ClientConfig) GetCustomSerpMarkdown() *string {
	if o == nil {
		return nil
	}
	return o.CustomSerpMarkdown
}

func (o *ClientConfig) GetOnboardingQuery() *string {
	if o == nil {
		return nil
	}
	return o.OnboardingQuery
}

func (o *ClientConfig) GetIsOrgChartLinkVisible() *bool {
	if o == nil {
		return nil
	}
	return o.IsOrgChartLinkVisible
}

func (o *ClientConfig) GetIsOrgChartAccessible() *bool {
	if o == nil {
		return nil
	}
	return o.IsOrgChartAccessible
}

func (o *ClientConfig) GetIsPeopleSetup() *bool {
	if o == nil {
		return nil
	}
	return o.IsPeopleSetup
}

func (o *ClientConfig) GetIsPilotMode() *bool {
	if o == nil {
		return nil
	}
	return o.IsPilotMode
}

func (o *ClientConfig) GetWebAppURL() *string {
	if o == nil {
		return nil
	}
	return o.WebAppURL
}

func (o *ClientConfig) GetUserOutreach() *UserOutreachConfig {
	if o == nil {
		return nil
	}
	return o.UserOutreach
}

func (o *ClientConfig) GetSearchLinkURLTemplate() *string {
	if o == nil {
		return nil
	}
	return o.SearchLinkURLTemplate
}

func (o *ClientConfig) GetChatLinkURLTemplate() *string {
	if o == nil {
		return nil
	}
	return o.ChatLinkURLTemplate
}

func (o *ClientConfig) GetThemes() *Themes {
	if o == nil {
		return nil
	}
	return o.Themes
}

func (o *ClientConfig) GetBrandings() *Brandings {
	if o == nil {
		return nil
	}
	return o.Brandings
}

func (o *ClientConfig) GetGreetingFormat() *string {
	if o == nil {
		return nil
	}
	return o.GreetingFormat
}

func (o *ClientConfig) GetTaskSeeAllLabel() *string {
	if o == nil {
		return nil
	}
	return o.TaskSeeAllLabel
}

func (o *ClientConfig) GetTaskSeeAllLink() *string {
	if o == nil {
		return nil
	}
	return o.TaskSeeAllLink
}

func (o *ClientConfig) GetSearchPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.SearchPlaceholder
}

func (o *ClientConfig) GetShortcutsPrefix() *string {
	if o == nil {
		return nil
	}
	return o.ShortcutsPrefix
}

func (o *ClientConfig) GetSsoCompanyProvider() *SsoCompanyProvider {
	if o == nil {
		return nil
	}
	return o.SsoCompanyProvider
}

func (o *ClientConfig) GetShowPipelinesSetupBanner() *bool {
	if o == nil {
		return nil
	}
	return o.ShowPipelinesSetupBanner
}

func (o *ClientConfig) GetFeedbackCustomizations() *FeedbackCustomizations {
	if o == nil {
		return nil
	}
	return o.FeedbackCustomizations
}
