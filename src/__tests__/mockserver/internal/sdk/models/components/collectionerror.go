// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type CollectionErrorErrorCode string

const (
	CollectionErrorErrorCodeNameExists              CollectionErrorErrorCode = "NAME_EXISTS"
	CollectionErrorErrorCodeNotFound                CollectionErrorErrorCode = "NOT_FOUND"
	CollectionErrorErrorCodeCollectionPinned        CollectionErrorErrorCode = "COLLECTION_PINNED"
	CollectionErrorErrorCodeConcurrentHierarchyEdit CollectionErrorErrorCode = "CONCURRENT_HIERARCHY_EDIT"
	CollectionErrorErrorCodeHeightViolation         CollectionErrorErrorCode = "HEIGHT_VIOLATION"
	CollectionErrorErrorCodeWidthViolation          CollectionErrorErrorCode = "WIDTH_VIOLATION"
	CollectionErrorErrorCodeNoPermissions           CollectionErrorErrorCode = "NO_PERMISSIONS"
)

func (e CollectionErrorErrorCode) ToPointer() *CollectionErrorErrorCode {
	return &e
}
func (e *CollectionErrorErrorCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME_EXISTS":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "COLLECTION_PINNED":
		fallthrough
	case "CONCURRENT_HIERARCHY_EDIT":
		fallthrough
	case "HEIGHT_VIOLATION":
		fallthrough
	case "WIDTH_VIOLATION":
		fallthrough
	case "NO_PERMISSIONS":
		*e = CollectionErrorErrorCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CollectionErrorErrorCode: %v", v)
	}
}

type CollectionError struct {
	ErrorCode CollectionErrorErrorCode `json:"errorCode"`
}

func (o *CollectionError) GetErrorCode() CollectionErrorErrorCode {
	if o == nil {
		return CollectionErrorErrorCode("")
	}
	return o.ErrorCode
}
