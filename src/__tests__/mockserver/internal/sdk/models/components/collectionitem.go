// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

type CollectionItemItemType string

const (
	CollectionItemItemTypeDocument   CollectionItemItemType = "DOCUMENT"
	CollectionItemItemTypeText       CollectionItemItemType = "TEXT"
	CollectionItemItemTypeURL        CollectionItemItemType = "URL"
	CollectionItemItemTypeCollection CollectionItemItemType = "COLLECTION"
)

func (e CollectionItemItemType) ToPointer() *CollectionItemItemType {
	return &e
}
func (e *CollectionItemItemType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "TEXT":
		fallthrough
	case "URL":
		fallthrough
	case "COLLECTION":
		*e = CollectionItemItemType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CollectionItemItemType: %v", v)
	}
}

type CollectionItem struct {
	// The optional name of the Collection item.
	Name *string `json:"name,omitempty"`
	// A helpful description of why this CollectionItem is in the Collection that it's in.
	Description *string `json:"description,omitempty"`
	// The emoji icon for this CollectionItem. Only used for Text type items.
	Icon *string `json:"icon,omitempty"`
	// The Collection ID of the Collection that this CollectionItem belongs in.
	CollectionID int64 `json:"collectionId"`
	// If this CollectionItem is indexed, the Glean Document ID of that document.
	DocumentID *string `json:"documentId,omitempty"`
	// The URL of this CollectionItem.
	URL *string `json:"url,omitempty"`
	// Unique identifier for the item within the Collection it belongs to.
	ItemID    *string `json:"itemId,omitempty"`
	CreatedBy *Person `json:"createdBy,omitempty"`
	// Unix timestamp for when the item was first added (in seconds since epoch UTC).
	CreatedAt  *time.Time             `json:"createdAt,omitempty"`
	Document   *Document              `json:"document,omitempty"`
	Shortcut   *Shortcut              `json:"shortcut,omitempty"`
	Collection *Collection            `json:"collection,omitempty"`
	ItemType   CollectionItemItemType `json:"itemType"`
}

func (c CollectionItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CollectionItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CollectionItem) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CollectionItem) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CollectionItem) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *CollectionItem) GetCollectionID() int64 {
	if o == nil {
		return 0
	}
	return o.CollectionID
}

func (o *CollectionItem) GetDocumentID() *string {
	if o == nil {
		return nil
	}
	return o.DocumentID
}

func (o *CollectionItem) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *CollectionItem) GetItemID() *string {
	if o == nil {
		return nil
	}
	return o.ItemID
}

func (o *CollectionItem) GetCreatedBy() *Person {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CollectionItem) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CollectionItem) GetDocument() *Document {
	if o == nil {
		return nil
	}
	return o.Document
}

func (o *CollectionItem) GetShortcut() *Shortcut {
	if o == nil {
		return nil
	}
	return o.Shortcut
}

func (o *CollectionItem) GetCollection() *Collection {
	if o == nil {
		return nil
	}
	return o.Collection
}

func (o *CollectionItem) GetItemType() CollectionItemItemType {
	if o == nil {
		return CollectionItemItemType("")
	}
	return o.ItemType
}
