// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Provider string

const (
	ProviderZoom     Provider = "ZOOM"
	ProviderHangouts Provider = "HANGOUTS"
)

func (e Provider) ToPointer() *Provider {
	return &e
}
func (e *Provider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ZOOM":
		fallthrough
	case "HANGOUTS":
		*e = Provider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Provider: %v", v)
	}
}

type ConferenceDataSource string

const (
	ConferenceDataSourceNativeConference ConferenceDataSource = "NATIVE_CONFERENCE"
	ConferenceDataSourceLocation         ConferenceDataSource = "LOCATION"
	ConferenceDataSourceDescription      ConferenceDataSource = "DESCRIPTION"
)

func (e ConferenceDataSource) ToPointer() *ConferenceDataSource {
	return &e
}
func (e *ConferenceDataSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NATIVE_CONFERENCE":
		fallthrough
	case "LOCATION":
		fallthrough
	case "DESCRIPTION":
		*e = ConferenceDataSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceDataSource: %v", v)
	}
}

type ConferenceData struct {
	Provider Provider `json:"provider"`
	// A permalink for the conference.
	URI    string                `json:"uri"`
	Source *ConferenceDataSource `json:"source,omitempty"`
}

func (o *ConferenceData) GetProvider() Provider {
	if o == nil {
		return Provider("")
	}
	return o.Provider
}

func (o *ConferenceData) GetURI() string {
	if o == nil {
		return ""
	}
	return o.URI
}

func (o *ConferenceData) GetSource() *ConferenceDataSource {
	if o == nil {
		return nil
	}
	return o.Source
}
