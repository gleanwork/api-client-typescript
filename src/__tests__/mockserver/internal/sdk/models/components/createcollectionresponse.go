// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

type CreateCollectionResponseErrorCode string

const (
	CreateCollectionResponseErrorCodeNameExists              CreateCollectionResponseErrorCode = "NAME_EXISTS"
	CreateCollectionResponseErrorCodeNotFound                CreateCollectionResponseErrorCode = "NOT_FOUND"
	CreateCollectionResponseErrorCodeCollectionPinned        CreateCollectionResponseErrorCode = "COLLECTION_PINNED"
	CreateCollectionResponseErrorCodeConcurrentHierarchyEdit CreateCollectionResponseErrorCode = "CONCURRENT_HIERARCHY_EDIT"
	CreateCollectionResponseErrorCodeHeightViolation         CreateCollectionResponseErrorCode = "HEIGHT_VIOLATION"
	CreateCollectionResponseErrorCodeWidthViolation          CreateCollectionResponseErrorCode = "WIDTH_VIOLATION"
	CreateCollectionResponseErrorCodeNoPermissions           CreateCollectionResponseErrorCode = "NO_PERMISSIONS"
)

func (e CreateCollectionResponseErrorCode) ToPointer() *CreateCollectionResponseErrorCode {
	return &e
}
func (e *CreateCollectionResponseErrorCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NAME_EXISTS":
		fallthrough
	case "NOT_FOUND":
		fallthrough
	case "COLLECTION_PINNED":
		fallthrough
	case "CONCURRENT_HIERARCHY_EDIT":
		fallthrough
	case "HEIGHT_VIOLATION":
		fallthrough
	case "WIDTH_VIOLATION":
		fallthrough
	case "NO_PERMISSIONS":
		*e = CreateCollectionResponseErrorCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCollectionResponseErrorCode: %v", v)
	}
}

type CreateCollectionResponse struct {
	// The unique name of the Collection.
	Name string `json:"name"`
	// A brief summary of the Collection's contents.
	Description string `json:"description"`
	// A list of added user roles for the Collection.
	AddedRoles []UserRoleSpecification `json:"addedRoles,omitempty"`
	// A list of removed user roles for the Collection.
	RemovedRoles []UserRoleSpecification `json:"removedRoles,omitempty"`
	// Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// The emoji icon of this Collection.
	Icon *string `json:"icon,omitempty"`
	// Indicates whether edits are allowed for everyone or only admins.
	AdminLocked *bool `json:"adminLocked,omitempty"`
	// The parent of this Collection, or 0 if it's a top-level Collection.
	ParentID  *int64     `json:"parentId,omitempty"`
	Thumbnail *Thumbnail `json:"thumbnail,omitempty"`
	// The datasource type this Collection can hold.
	AllowedDatasource *string            `json:"allowedDatasource,omitempty"`
	Permissions       *ObjectPermissions `json:"permissions,omitempty"`
	// The unique ID of the Collection.
	ID         int64      `json:"id"`
	CreateTime *time.Time `json:"createTime,omitempty"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	Creator    *Person    `json:"creator,omitempty"`
	UpdatedBy  *Person    `json:"updatedBy,omitempty"`
	// The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
	ItemCount *int64 `json:"itemCount,omitempty"`
	// The number of children Collections. Separated from the actual children so we can grab the count without children.
	ChildCount *int64 `json:"childCount,omitempty"`
	// The items in this Collection.
	Items       []CollectionItem          `json:"items,omitempty"`
	PinMetadata *CollectionPinnedMetadata `json:"pinMetadata,omitempty"`
	// The names of the shortcuts (Go Links) that point to this Collection.
	Shortcuts []string `json:"shortcuts,omitempty"`
	// The children Collections of this Collection.
	Children []Collection `json:"children,omitempty"`
	// A list of user roles for the Collection.
	Roles      []UserRoleSpecification           `json:"roles,omitempty"`
	ErrorCode  CreateCollectionResponseErrorCode `json:"errorCode"`
	Collection *Collection                       `json:"collection,omitempty"`
	Error      *CollectionError                  `json:"error,omitempty"`
}

func (c CreateCollectionResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateCollectionResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateCollectionResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateCollectionResponse) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreateCollectionResponse) GetAddedRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.AddedRoles
}

func (o *CreateCollectionResponse) GetRemovedRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.RemovedRoles
}

func (o *CreateCollectionResponse) GetAudienceFilters() []FacetFilter {
	if o == nil {
		return nil
	}
	return o.AudienceFilters
}

func (o *CreateCollectionResponse) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *CreateCollectionResponse) GetAdminLocked() *bool {
	if o == nil {
		return nil
	}
	return o.AdminLocked
}

func (o *CreateCollectionResponse) GetParentID() *int64 {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *CreateCollectionResponse) GetThumbnail() *Thumbnail {
	if o == nil {
		return nil
	}
	return o.Thumbnail
}

func (o *CreateCollectionResponse) GetAllowedDatasource() *string {
	if o == nil {
		return nil
	}
	return o.AllowedDatasource
}

func (o *CreateCollectionResponse) GetPermissions() *ObjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateCollectionResponse) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *CreateCollectionResponse) GetCreateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreateTime
}

func (o *CreateCollectionResponse) GetUpdateTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdateTime
}

func (o *CreateCollectionResponse) GetCreator() *Person {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *CreateCollectionResponse) GetUpdatedBy() *Person {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreateCollectionResponse) GetItemCount() *int64 {
	if o == nil {
		return nil
	}
	return o.ItemCount
}

func (o *CreateCollectionResponse) GetChildCount() *int64 {
	if o == nil {
		return nil
	}
	return o.ChildCount
}

func (o *CreateCollectionResponse) GetItems() []CollectionItem {
	if o == nil {
		return nil
	}
	return o.Items
}

func (o *CreateCollectionResponse) GetPinMetadata() *CollectionPinnedMetadata {
	if o == nil {
		return nil
	}
	return o.PinMetadata
}

func (o *CreateCollectionResponse) GetShortcuts() []string {
	if o == nil {
		return nil
	}
	return o.Shortcuts
}

func (o *CreateCollectionResponse) GetChildren() []Collection {
	if o == nil {
		return nil
	}
	return o.Children
}

func (o *CreateCollectionResponse) GetRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *CreateCollectionResponse) GetErrorCode() CreateCollectionResponseErrorCode {
	if o == nil {
		return CreateCollectionResponseErrorCode("")
	}
	return o.ErrorCode
}

func (o *CreateCollectionResponse) GetCollection() *Collection {
	if o == nil {
		return nil
	}
	return o.Collection
}

func (o *CreateCollectionResponse) GetError() *CollectionError {
	if o == nil {
		return nil
	}
	return o.Error
}
