// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// DatasourceCategory - The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
type DatasourceCategory string

const (
	DatasourceCategoryUncategorized        DatasourceCategory = "UNCATEGORIZED"
	DatasourceCategoryTickets              DatasourceCategory = "TICKETS"
	DatasourceCategoryCrm                  DatasourceCategory = "CRM"
	DatasourceCategoryPublishedContent     DatasourceCategory = "PUBLISHED_CONTENT"
	DatasourceCategoryCollaborativeContent DatasourceCategory = "COLLABORATIVE_CONTENT"
	DatasourceCategoryQuestionAnswer       DatasourceCategory = "QUESTION_ANSWER"
	DatasourceCategoryMessaging            DatasourceCategory = "MESSAGING"
	DatasourceCategoryCodeRepository       DatasourceCategory = "CODE_REPOSITORY"
	DatasourceCategoryChangeManagement     DatasourceCategory = "CHANGE_MANAGEMENT"
	DatasourceCategoryPeople               DatasourceCategory = "PEOPLE"
	DatasourceCategoryEmail                DatasourceCategory = "EMAIL"
	DatasourceCategorySso                  DatasourceCategory = "SSO"
	DatasourceCategoryAts                  DatasourceCategory = "ATS"
	DatasourceCategoryKnowledgeHub         DatasourceCategory = "KNOWLEDGE_HUB"
	DatasourceCategoryExternalShortcut     DatasourceCategory = "EXTERNAL_SHORTCUT"
	DatasourceCategoryEntity               DatasourceCategory = "ENTITY"
	DatasourceCategoryCalendar             DatasourceCategory = "CALENDAR"
)

func (e DatasourceCategory) ToPointer() *DatasourceCategory {
	return &e
}
func (e *DatasourceCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNCATEGORIZED":
		fallthrough
	case "TICKETS":
		fallthrough
	case "CRM":
		fallthrough
	case "PUBLISHED_CONTENT":
		fallthrough
	case "COLLABORATIVE_CONTENT":
		fallthrough
	case "QUESTION_ANSWER":
		fallthrough
	case "MESSAGING":
		fallthrough
	case "CODE_REPOSITORY":
		fallthrough
	case "CHANGE_MANAGEMENT":
		fallthrough
	case "PEOPLE":
		fallthrough
	case "EMAIL":
		fallthrough
	case "SSO":
		fallthrough
	case "ATS":
		fallthrough
	case "KNOWLEDGE_HUB":
		fallthrough
	case "EXTERNAL_SHORTCUT":
		fallthrough
	case "ENTITY":
		fallthrough
	case "CALENDAR":
		*e = DatasourceCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatasourceCategory: %v", v)
	}
}

type HideBuiltInFacet string

const (
	HideBuiltInFacetType   HideBuiltInFacet = "TYPE"
	HideBuiltInFacetTag    HideBuiltInFacet = "TAG"
	HideBuiltInFacetAuthor HideBuiltInFacet = "AUTHOR"
	HideBuiltInFacetOwner  HideBuiltInFacet = "OWNER"
)

func (e HideBuiltInFacet) ToPointer() *HideBuiltInFacet {
	return &e
}
func (e *HideBuiltInFacet) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE":
		fallthrough
	case "TAG":
		fallthrough
	case "AUTHOR":
		fallthrough
	case "OWNER":
		*e = HideBuiltInFacet(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HideBuiltInFacet: %v", v)
	}
}

// CustomDatasourceConfigConnectorType - The source from which document content was pulled, e.g. an API crawl or browser history
type CustomDatasourceConfigConnectorType string

const (
	CustomDatasourceConfigConnectorTypeAPICrawl        CustomDatasourceConfigConnectorType = "API_CRAWL"
	CustomDatasourceConfigConnectorTypeBrowserCrawl    CustomDatasourceConfigConnectorType = "BROWSER_CRAWL"
	CustomDatasourceConfigConnectorTypeBrowserHistory  CustomDatasourceConfigConnectorType = "BROWSER_HISTORY"
	CustomDatasourceConfigConnectorTypeBuiltin         CustomDatasourceConfigConnectorType = "BUILTIN"
	CustomDatasourceConfigConnectorTypeFederatedSearch CustomDatasourceConfigConnectorType = "FEDERATED_SEARCH"
	CustomDatasourceConfigConnectorTypePushAPI         CustomDatasourceConfigConnectorType = "PUSH_API"
	CustomDatasourceConfigConnectorTypeWebCrawl        CustomDatasourceConfigConnectorType = "WEB_CRAWL"
	CustomDatasourceConfigConnectorTypeNativeHistory   CustomDatasourceConfigConnectorType = "NATIVE_HISTORY"
)

func (e CustomDatasourceConfigConnectorType) ToPointer() *CustomDatasourceConfigConnectorType {
	return &e
}
func (e *CustomDatasourceConfigConnectorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "API_CRAWL":
		fallthrough
	case "BROWSER_CRAWL":
		fallthrough
	case "BROWSER_HISTORY":
		fallthrough
	case "BUILTIN":
		fallthrough
	case "FEDERATED_SEARCH":
		fallthrough
	case "PUSH_API":
		fallthrough
	case "WEB_CRAWL":
		fallthrough
	case "NATIVE_HISTORY":
		*e = CustomDatasourceConfigConnectorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomDatasourceConfigConnectorType: %v", v)
	}
}

// CustomDatasourceConfig - Structure describing config properties of a custom datasource
type CustomDatasourceConfig struct {
	// Unique identifier of datasource instance to which this config applies.
	Name string `json:"name"`
	// The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
	DisplayName *string `json:"displayName,omitempty"`
	// The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
	DatasourceCategory *DatasourceCategory `default:"UNCATEGORIZED" json:"datasourceCategory"`
	// Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
	URLRegex *string `json:"urlRegex,omitempty"`
	// The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	IconURL *string `json:"iconUrl,omitempty"`
	// The list of top-level `objectType`s for the datasource.
	ObjectDefinitions []ObjectDefinition `json:"objectDefinitions,omitempty"`
	// Example text for what to search for in this datasource
	SuggestionText *string `json:"suggestionText,omitempty"`
	// The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
	HomeURL *string `json:"homeUrl,omitempty"`
	// This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
	CrawlerSeedUrls []string `json:"crawlerSeedUrls,omitempty"`
	// The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	IconDarkURL *string `json:"iconDarkUrl,omitempty"`
	// List of built-in facet types that should be hidden for the datasource.
	HideBuiltInFacets []HideBuiltInFacet `json:"hideBuiltInFacets,omitempty"`
	// A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
	CanonicalizingURLRegex []CanonicalizingRegexType `json:"canonicalizingURLRegex,omitempty"`
	// A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
	CanonicalizingTitleRegex []CanonicalizingRegexType `json:"canonicalizingTitleRegex,omitempty"`
	// A regex that identifies titles that should not be indexed
	RedlistTitleRegex *string                              `json:"redlistTitleRegex,omitempty"`
	ConnectorType     *CustomDatasourceConfigConnectorType `json:"connectorType,omitempty"`
	// List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
	Quicklinks []Quicklink `json:"quicklinks,omitempty"`
	// The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
	RenderConfigPreset *string `json:"renderConfigPreset,omitempty"`
	// Aliases that can be used as `app` operator-values.
	Aliases []string `json:"aliases,omitempty"`
	// Whether or not this datasource is hosted on-premise.
	IsOnPrem *bool `json:"isOnPrem,omitempty"`
	// True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
	TrustURLRegexForViewActivity *bool `default:"true" json:"trustUrlRegexForViewActivity"`
	// If true, a utm_source query param will be added to outbound links to this datasource within Glean.
	IncludeUtmSource *bool `json:"includeUtmSource,omitempty"`
	// If true, the fragment part of the URL will be stripped when converting to a canonical url.
	StripFragmentInCanonicalURL *bool `default:"true" json:"stripFragmentInCanonicalUrl"`
	// If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
	IdentityDatasourceName *string `json:"identityDatasourceName,omitempty"`
	// If the datasource uses a specific product access group, then the name of that group.
	ProductAccessGroup *string `json:"productAccessGroup,omitempty"`
	// whether email is used to reference users in document ACLs and in group memberships.
	IsUserReferencedByEmail *bool `json:"isUserReferencedByEmail,omitempty"`
	// True if this datasource is used to push custom entities.
	IsEntityDatasource *bool `default:"false" json:"isEntityDatasource"`
	// True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
	IsTestDatasource *bool `default:"false" json:"isTestDatasource"`
}

func (c CustomDatasourceConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CustomDatasourceConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CustomDatasourceConfig) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CustomDatasourceConfig) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *CustomDatasourceConfig) GetDatasourceCategory() *DatasourceCategory {
	if o == nil {
		return nil
	}
	return o.DatasourceCategory
}

func (o *CustomDatasourceConfig) GetURLRegex() *string {
	if o == nil {
		return nil
	}
	return o.URLRegex
}

func (o *CustomDatasourceConfig) GetIconURL() *string {
	if o == nil {
		return nil
	}
	return o.IconURL
}

func (o *CustomDatasourceConfig) GetObjectDefinitions() []ObjectDefinition {
	if o == nil {
		return nil
	}
	return o.ObjectDefinitions
}

func (o *CustomDatasourceConfig) GetSuggestionText() *string {
	if o == nil {
		return nil
	}
	return o.SuggestionText
}

func (o *CustomDatasourceConfig) GetHomeURL() *string {
	if o == nil {
		return nil
	}
	return o.HomeURL
}

func (o *CustomDatasourceConfig) GetCrawlerSeedUrls() []string {
	if o == nil {
		return nil
	}
	return o.CrawlerSeedUrls
}

func (o *CustomDatasourceConfig) GetIconDarkURL() *string {
	if o == nil {
		return nil
	}
	return o.IconDarkURL
}

func (o *CustomDatasourceConfig) GetHideBuiltInFacets() []HideBuiltInFacet {
	if o == nil {
		return nil
	}
	return o.HideBuiltInFacets
}

func (o *CustomDatasourceConfig) GetCanonicalizingURLRegex() []CanonicalizingRegexType {
	if o == nil {
		return nil
	}
	return o.CanonicalizingURLRegex
}

func (o *CustomDatasourceConfig) GetCanonicalizingTitleRegex() []CanonicalizingRegexType {
	if o == nil {
		return nil
	}
	return o.CanonicalizingTitleRegex
}

func (o *CustomDatasourceConfig) GetRedlistTitleRegex() *string {
	if o == nil {
		return nil
	}
	return o.RedlistTitleRegex
}

func (o *CustomDatasourceConfig) GetConnectorType() *CustomDatasourceConfigConnectorType {
	if o == nil {
		return nil
	}
	return o.ConnectorType
}

func (o *CustomDatasourceConfig) GetQuicklinks() []Quicklink {
	if o == nil {
		return nil
	}
	return o.Quicklinks
}

func (o *CustomDatasourceConfig) GetRenderConfigPreset() *string {
	if o == nil {
		return nil
	}
	return o.RenderConfigPreset
}

func (o *CustomDatasourceConfig) GetAliases() []string {
	if o == nil {
		return nil
	}
	return o.Aliases
}

func (o *CustomDatasourceConfig) GetIsOnPrem() *bool {
	if o == nil {
		return nil
	}
	return o.IsOnPrem
}

func (o *CustomDatasourceConfig) GetTrustURLRegexForViewActivity() *bool {
	if o == nil {
		return nil
	}
	return o.TrustURLRegexForViewActivity
}

func (o *CustomDatasourceConfig) GetIncludeUtmSource() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeUtmSource
}

func (o *CustomDatasourceConfig) GetStripFragmentInCanonicalURL() *bool {
	if o == nil {
		return nil
	}
	return o.StripFragmentInCanonicalURL
}

func (o *CustomDatasourceConfig) GetIdentityDatasourceName() *string {
	if o == nil {
		return nil
	}
	return o.IdentityDatasourceName
}

func (o *CustomDatasourceConfig) GetProductAccessGroup() *string {
	if o == nil {
		return nil
	}
	return o.ProductAccessGroup
}

func (o *CustomDatasourceConfig) GetIsUserReferencedByEmail() *bool {
	if o == nil {
		return nil
	}
	return o.IsUserReferencedByEmail
}

func (o *CustomDatasourceConfig) GetIsEntityDatasource() *bool {
	if o == nil {
		return nil
	}
	return o.IsEntityDatasource
}

func (o *CustomDatasourceConfig) GetIsTestDatasource() *bool {
	if o == nil {
		return nil
	}
	return o.IsTestDatasource
}
