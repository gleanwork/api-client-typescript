// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type DebugDatasourceStatusResponseCounts struct {
	// A list of object types and corresponding upload counts
	Uploaded []DatasourceObjectTypeDocumentCountEntry `json:"uploaded,omitempty"`
	// The number of documents indexed, grouped by objectType
	Indexed []DatasourceObjectTypeDocumentCountEntry `json:"indexed,omitempty"`
}

func (o *DebugDatasourceStatusResponseCounts) GetUploaded() []DatasourceObjectTypeDocumentCountEntry {
	if o == nil {
		return nil
	}
	return o.Uploaded
}

func (o *DebugDatasourceStatusResponseCounts) GetIndexed() []DatasourceObjectTypeDocumentCountEntry {
	if o == nil {
		return nil
	}
	return o.Indexed
}

type Documents struct {
	// Information about active and recent successful uploads for the datasource
	BulkUploadHistory []BulkUploadHistoryEvent             `json:"bulkUploadHistory,omitempty"`
	Counts            *DebugDatasourceStatusResponseCounts `json:"counts,omitempty"`
	// Information about processing history for the datasource
	ProcessingHistory []ProcessingHistoryEvent `json:"processingHistory,omitempty"`
}

func (o *Documents) GetBulkUploadHistory() []BulkUploadHistoryEvent {
	if o == nil {
		return nil
	}
	return o.BulkUploadHistory
}

func (o *Documents) GetCounts() *DebugDatasourceStatusResponseCounts {
	if o == nil {
		return nil
	}
	return o.Counts
}

func (o *Documents) GetProcessingHistory() []ProcessingHistoryEvent {
	if o == nil {
		return nil
	}
	return o.ProcessingHistory
}

type Identity struct {
	// Information about processing history for the datasource
	ProcessingHistory []ProcessingHistoryEvent                        `json:"processingHistory,omitempty"`
	Users             *DebugDatasourceStatusIdentityResponseComponent `json:"users,omitempty"`
	Groups            *DebugDatasourceStatusIdentityResponseComponent `json:"groups,omitempty"`
	Memberships       *DebugDatasourceStatusIdentityResponseComponent `json:"memberships,omitempty"`
}

func (o *Identity) GetProcessingHistory() []ProcessingHistoryEvent {
	if o == nil {
		return nil
	}
	return o.ProcessingHistory
}

func (o *Identity) GetUsers() *DebugDatasourceStatusIdentityResponseComponent {
	if o == nil {
		return nil
	}
	return o.Users
}

func (o *Identity) GetGroups() *DebugDatasourceStatusIdentityResponseComponent {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *Identity) GetMemberships() *DebugDatasourceStatusIdentityResponseComponent {
	if o == nil {
		return nil
	}
	return o.Memberships
}

// DatasourceVisibility - The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
type DatasourceVisibility string

const (
	DatasourceVisibilityEnabledForAll       DatasourceVisibility = "ENABLED_FOR_ALL"
	DatasourceVisibilityEnabledForTestGroup DatasourceVisibility = "ENABLED_FOR_TEST_GROUP"
	DatasourceVisibilityNotEnabled          DatasourceVisibility = "NOT_ENABLED"
)

func (e DatasourceVisibility) ToPointer() *DatasourceVisibility {
	return &e
}
func (e *DatasourceVisibility) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED_FOR_ALL":
		fallthrough
	case "ENABLED_FOR_TEST_GROUP":
		fallthrough
	case "NOT_ENABLED":
		*e = DatasourceVisibility(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatasourceVisibility: %v", v)
	}
}

// DebugDatasourceStatusResponse - Describes the response body of the /debug/{datasource}/status API call
type DebugDatasourceStatusResponse struct {
	Documents *Documents `json:"documents,omitempty"`
	Identity  *Identity  `json:"identity,omitempty"`
	// The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
	DatasourceVisibility *DatasourceVisibility `json:"datasourceVisibility,omitempty"`
}

func (o *DebugDatasourceStatusResponse) GetDocuments() *Documents {
	if o == nil {
		return nil
	}
	return o.Documents
}

func (o *DebugDatasourceStatusResponse) GetIdentity() *Identity {
	if o == nil {
		return nil
	}
	return o.Identity
}

func (o *DebugDatasourceStatusResponse) GetDatasourceVisibility() *DatasourceVisibility {
	if o == nil {
		return nil
	}
	return o.DatasourceVisibility
}
