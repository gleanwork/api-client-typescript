// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DisplayableListSource - The type of data that backs this displayable list
type DisplayableListSource string

const (
	DisplayableListSourceSavedSearch DisplayableListSource = "SAVED_SEARCH"
	DisplayableListSourceCollection  DisplayableListSource = "COLLECTION"
)

func (e DisplayableListSource) ToPointer() *DisplayableListSource {
	return &e
}
func (e *DisplayableListSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SAVED_SEARCH":
		fallthrough
	case "COLLECTION":
		*e = DisplayableListSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisplayableListSource: %v", v)
	}
}

// DisplayableList - All configurations for a list that can be displayed.
type DisplayableList struct {
	// The type of data that backs this displayable list
	Source *DisplayableListSource `json:"source,omitempty"`
	// Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC.
	ID *int64 `json:"id,omitempty"`
	// Unstructured identifier for the source to render (ID, URL, query).
	SourceID *string `json:"sourceId,omitempty"`
	// UI specific configurations for a displayable list
	Config *DisplayableListConfig `json:"config,omitempty"`
}

func (o *DisplayableList) GetSource() *DisplayableListSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *DisplayableList) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DisplayableList) GetSourceID() *string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *DisplayableList) GetConfig() *DisplayableListConfig {
	if o == nil {
		return nil
	}
	return o.Config
}
