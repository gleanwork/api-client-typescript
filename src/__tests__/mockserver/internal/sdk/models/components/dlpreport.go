// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type LastScanStatus string

const (
	LastScanStatusPending    LastScanStatus = "PENDING"
	LastScanStatusSuccess    LastScanStatus = "SUCCESS"
	LastScanStatusFailure    LastScanStatus = "FAILURE"
	LastScanStatusCancelled  LastScanStatus = "CANCELLED"
	LastScanStatusCancelling LastScanStatus = "CANCELLING"
	LastScanStatusActive     LastScanStatus = "ACTIVE"
)

func (e LastScanStatus) ToPointer() *LastScanStatus {
	return &e
}
func (e *LastScanStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "SUCCESS":
		fallthrough
	case "FAILURE":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "CANCELLING":
		fallthrough
	case "ACTIVE":
		*e = LastScanStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LastScanStatus: %v", v)
	}
}

// DlpReport - Full policy information that will be used for scans.
type DlpReport struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	// Detailed configuration of what documents and sensitive content will be scanned.
	Config *DlpConfig `json:"config,omitempty"`
	// Interval between scans. DAILY is deprecated.
	Frequency *DlpFrequency `json:"frequency,omitempty"`
	// The status of the policy/report. Only ACTIVE status will be picked for scans.
	Status *DlpReportStatus `json:"status,omitempty"`
	// Details about the person who created this report/policy.
	CreatedBy *DlpPerson `json:"createdBy,omitempty"`
	// Timestamp at which the policy was created.
	CreatedAt *string `json:"createdAt,omitempty"`
	// Timestamp at which the policy was last updated.
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	// Auto hide documents with findings in the policy.
	AutoHideDocs   *bool           `json:"autoHideDocs,omitempty"`
	LastScanStatus *LastScanStatus `json:"lastScanStatus,omitempty"`
	// The timestamp at which the report's last run/scan began.
	LastScanStartTime *string `json:"lastScanStartTime,omitempty"`
	// Details about the person who created this report/policy.
	UpdatedBy *DlpPerson `json:"updatedBy,omitempty"`
}

func (o *DlpReport) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *DlpReport) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *DlpReport) GetConfig() *DlpConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *DlpReport) GetFrequency() *DlpFrequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *DlpReport) GetStatus() *DlpReportStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *DlpReport) GetCreatedBy() *DlpPerson {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *DlpReport) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *DlpReport) GetLastUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.LastUpdatedAt
}

func (o *DlpReport) GetAutoHideDocs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoHideDocs
}

func (o *DlpReport) GetLastScanStatus() *LastScanStatus {
	if o == nil {
		return nil
	}
	return o.LastScanStatus
}

func (o *DlpReport) GetLastScanStartTime() *string {
	if o == nil {
		return nil
	}
	return o.LastScanStartTime
}

func (o *DlpReport) GetUpdatedBy() *DlpPerson {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}
