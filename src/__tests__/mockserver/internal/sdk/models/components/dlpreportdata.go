// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// Frequency - The frequency of the report
type Frequency string

const (
	FrequencyWeekly Frequency = "WEEKLY"
	FrequencyOnce   Frequency = "ONCE"
)

func (e Frequency) ToPointer() *Frequency {
	return &e
}
func (e *Frequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WEEKLY":
		fallthrough
	case "ONCE":
		*e = Frequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Frequency: %v", v)
	}
}

// DlpReportData - Dlp report metadata which is used to construct report email
type DlpReportData struct {
	// The frequency of the report
	Frequency *Frequency `json:"frequency,omitempty"`
	// The time the report was requested, applicable only for one time reports
	RequestTime *time.Time       `json:"requestTime,omitempty"`
	ReportName  *string          `json:"reportName,omitempty"`
	Status      *DlpSimpleResult `json:"status,omitempty"`
}

func (d DlpReportData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DlpReportData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DlpReportData) GetFrequency() *Frequency {
	if o == nil {
		return nil
	}
	return o.Frequency
}

func (o *DlpReportData) GetRequestTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.RequestTime
}

func (o *DlpReportData) GetReportName() *string {
	if o == nil {
		return nil
	}
	return o.ReportName
}

func (o *DlpReportData) GetStatus() *DlpSimpleResult {
	if o == nil {
		return nil
	}
	return o.Status
}
