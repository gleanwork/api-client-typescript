// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

// DocumentSpecUgcType - The type of the user generated content (UGC datasource).
type DocumentSpecUgcType string

const (
	DocumentSpecUgcTypeAnnouncements DocumentSpecUgcType = "ANNOUNCEMENTS"
	DocumentSpecUgcTypeAnswers       DocumentSpecUgcType = "ANSWERS"
	DocumentSpecUgcTypeCollections   DocumentSpecUgcType = "COLLECTIONS"
	DocumentSpecUgcTypeShortcuts     DocumentSpecUgcType = "SHORTCUTS"
)

func (e DocumentSpecUgcType) ToPointer() *DocumentSpecUgcType {
	return &e
}
func (e *DocumentSpecUgcType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANNOUNCEMENTS":
		fallthrough
	case "ANSWERS":
		fallthrough
	case "COLLECTIONS":
		fallthrough
	case "SHORTCUTS":
		*e = DocumentSpecUgcType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentSpecUgcType: %v", v)
	}
}

type DocumentSpec3 struct {
	// The type of the user generated content (UGC datasource).
	UgcType *DocumentSpecUgcType `json:"ugcType,omitempty"`
	// The id for user generated content.
	ContentID *int64 `json:"contentId,omitempty"`
	// The specific type of the user generated content type.
	DocType *string `json:"docType,omitempty"`
}

func (o *DocumentSpec3) GetUgcType() *DocumentSpecUgcType {
	if o == nil {
		return nil
	}
	return o.UgcType
}

func (o *DocumentSpec3) GetContentID() *int64 {
	if o == nil {
		return nil
	}
	return o.ContentID
}

func (o *DocumentSpec3) GetDocType() *string {
	if o == nil {
		return nil
	}
	return o.DocType
}

type DocumentSpec2 struct {
	// The ID of the document.
	ID *string `json:"id,omitempty"`
}

func (o *DocumentSpec2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type DocumentSpec1 struct {
	// The URL of the document.
	URL *string `json:"url,omitempty"`
}

func (o *DocumentSpec1) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

type DocumentSpecUnionType string

const (
	DocumentSpecUnionTypeDocumentSpec1 DocumentSpecUnionType = "DocumentSpec_1"
	DocumentSpecUnionTypeDocumentSpec2 DocumentSpecUnionType = "DocumentSpec_2"
	DocumentSpecUnionTypeDocumentSpec3 DocumentSpecUnionType = "DocumentSpec_3"
)

type DocumentSpecUnion struct {
	DocumentSpec1 *DocumentSpec1
	DocumentSpec2 *DocumentSpec2
	DocumentSpec3 *DocumentSpec3

	Type DocumentSpecUnionType
}

func CreateDocumentSpecUnionDocumentSpec1(documentSpec1 DocumentSpec1) DocumentSpecUnion {
	typ := DocumentSpecUnionTypeDocumentSpec1

	return DocumentSpecUnion{
		DocumentSpec1: &documentSpec1,
		Type:          typ,
	}
}

func CreateDocumentSpecUnionDocumentSpec2(documentSpec2 DocumentSpec2) DocumentSpecUnion {
	typ := DocumentSpecUnionTypeDocumentSpec2

	return DocumentSpecUnion{
		DocumentSpec2: &documentSpec2,
		Type:          typ,
	}
}

func CreateDocumentSpecUnionDocumentSpec3(documentSpec3 DocumentSpec3) DocumentSpecUnion {
	typ := DocumentSpecUnionTypeDocumentSpec3

	return DocumentSpecUnion{
		DocumentSpec3: &documentSpec3,
		Type:          typ,
	}
}

func (u *DocumentSpecUnion) UnmarshalJSON(data []byte) error {

	var documentSpec1 DocumentSpec1 = DocumentSpec1{}
	if err := utils.UnmarshalJSON(data, &documentSpec1, "", true, true); err == nil {
		u.DocumentSpec1 = &documentSpec1
		u.Type = DocumentSpecUnionTypeDocumentSpec1
		return nil
	}

	var documentSpec2 DocumentSpec2 = DocumentSpec2{}
	if err := utils.UnmarshalJSON(data, &documentSpec2, "", true, true); err == nil {
		u.DocumentSpec2 = &documentSpec2
		u.Type = DocumentSpecUnionTypeDocumentSpec2
		return nil
	}

	var documentSpec3 DocumentSpec3 = DocumentSpec3{}
	if err := utils.UnmarshalJSON(data, &documentSpec3, "", true, true); err == nil {
		u.DocumentSpec3 = &documentSpec3
		u.Type = DocumentSpecUnionTypeDocumentSpec3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DocumentSpecUnion", string(data))
}

func (u DocumentSpecUnion) MarshalJSON() ([]byte, error) {
	if u.DocumentSpec1 != nil {
		return utils.MarshalJSON(u.DocumentSpec1, "", true)
	}

	if u.DocumentSpec2 != nil {
		return utils.MarshalJSON(u.DocumentSpec2, "", true)
	}

	if u.DocumentSpec3 != nil {
		return utils.MarshalJSON(u.DocumentSpec3, "", true)
	}

	return nil, errors.New("could not marshal union type DocumentSpecUnion: all fields are null")
}
