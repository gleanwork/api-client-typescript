// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type EditAnswerRequestSourceType string

const (
	EditAnswerRequestSourceTypeDocument  EditAnswerRequestSourceType = "DOCUMENT"
	EditAnswerRequestSourceTypeAssistant EditAnswerRequestSourceType = "ASSISTANT"
)

func (e EditAnswerRequestSourceType) ToPointer() *EditAnswerRequestSourceType {
	return &e
}
func (e *EditAnswerRequestSourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DOCUMENT":
		fallthrough
	case "ASSISTANT":
		*e = EditAnswerRequestSourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditAnswerRequestSourceType: %v", v)
	}
}

type EditAnswerRequest struct {
	// The opaque ID of the Answer.
	ID int64 `json:"id"`
	// Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
	DocID    *string `json:"docId,omitempty"`
	Question *string `json:"question,omitempty"`
	// Additional ways of phrasing this question.
	QuestionVariations []string `json:"questionVariations,omitempty"`
	// The plain text answer to the question.
	BodyText *string `json:"bodyText,omitempty"`
	// The parent board ID of this Answer, or 0 if it's a floating Answer.
	BoardID *int64 `json:"boardId,omitempty"`
	// Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// A list of user roles for the answer added by the owner.
	AddedRoles []UserRoleSpecification `json:"addedRoles,omitempty"`
	// A list of user roles for the answer removed by the owner.
	RemovedRoles []UserRoleSpecification `json:"removedRoles,omitempty"`
	// A list of roles for this answer explicitly granted by an owner, editor, or admin.
	Roles              []UserRoleSpecification      `json:"roles,omitempty"`
	SourceDocumentSpec *DocumentSpecUnion           `json:"sourceDocumentSpec,omitempty"`
	SourceType         *EditAnswerRequestSourceType `json:"sourceType,omitempty"`
	// IDs of Collections to which a document is added.
	AddedCollections []int64 `json:"addedCollections,omitempty"`
	// IDs of Collections from which a document is removed.
	RemovedCollections []int64                          `json:"removedCollections,omitempty"`
	CombinedAnswerText *StructuredTextMutableProperties `json:"combinedAnswerText,omitempty"`
}

func (o *EditAnswerRequest) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *EditAnswerRequest) GetDocID() *string {
	if o == nil {
		return nil
	}
	return o.DocID
}

func (o *EditAnswerRequest) GetQuestion() *string {
	if o == nil {
		return nil
	}
	return o.Question
}

func (o *EditAnswerRequest) GetQuestionVariations() []string {
	if o == nil {
		return nil
	}
	return o.QuestionVariations
}

func (o *EditAnswerRequest) GetBodyText() *string {
	if o == nil {
		return nil
	}
	return o.BodyText
}

func (o *EditAnswerRequest) GetBoardID() *int64 {
	if o == nil {
		return nil
	}
	return o.BoardID
}

func (o *EditAnswerRequest) GetAudienceFilters() []FacetFilter {
	if o == nil {
		return nil
	}
	return o.AudienceFilters
}

func (o *EditAnswerRequest) GetAddedRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.AddedRoles
}

func (o *EditAnswerRequest) GetRemovedRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.RemovedRoles
}

func (o *EditAnswerRequest) GetRoles() []UserRoleSpecification {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *EditAnswerRequest) GetSourceDocumentSpec() *DocumentSpecUnion {
	if o == nil {
		return nil
	}
	return o.SourceDocumentSpec
}

func (o *EditAnswerRequest) GetSourceType() *EditAnswerRequestSourceType {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *EditAnswerRequest) GetAddedCollections() []int64 {
	if o == nil {
		return nil
	}
	return o.AddedCollections
}

func (o *EditAnswerRequest) GetRemovedCollections() []int64 {
	if o == nil {
		return nil
	}
	return o.RemovedCollections
}

func (o *EditAnswerRequest) GetCombinedAnswerText() *StructuredTextMutableProperties {
	if o == nil {
		return nil
	}
	return o.CombinedAnswerText
}
