// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type Block struct {
}

// FeedbackPayload - Optional payload for feedback reporting.
type FeedbackPayload struct {
	// Additional freeform comments provided by the reporter.
	Comments *string `json:"comments,omitempty"`
	// Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.
	CustomJSON *string `json:"customJson,omitempty"`
	// Images uploaded by the user when submitting feedback
	ImageUrls []string `json:"imageUrls,omitempty"`
	// The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	IssueType *string `json:"issueType,omitempty"`
	// The type(s) of issue being reported.
	Issues []string `json:"issues,omitempty"`
	// The query the reporter tried when feedback was sent.
	Query *string `json:"query,omitempty"`
	// The tracking token of the feedback that admins can provide Glean Support to debug
	TrackingToken *string `json:"trackingToken,omitempty"`
	// The URL the reporter was on when feedback was sent.
	URL *string `json:"url,omitempty"`
	// The label of the rating that was selected when feedback was sent.
	RatingKey *string `json:"ratingKey,omitempty"`
}

func (o *FeedbackPayload) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *FeedbackPayload) GetCustomJSON() *string {
	if o == nil {
		return nil
	}
	return o.CustomJSON
}

func (o *FeedbackPayload) GetImageUrls() []string {
	if o == nil {
		return nil
	}
	return o.ImageUrls
}

func (o *FeedbackPayload) GetIssueType() *string {
	if o == nil {
		return nil
	}
	return o.IssueType
}

func (o *FeedbackPayload) GetIssues() []string {
	if o == nil {
		return nil
	}
	return o.Issues
}

func (o *FeedbackPayload) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}

func (o *FeedbackPayload) GetTrackingToken() *string {
	if o == nil {
		return nil
	}
	return o.TrackingToken
}

func (o *FeedbackPayload) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *FeedbackPayload) GetRatingKey() *string {
	if o == nil {
		return nil
	}
	return o.RatingKey
}

// ChatFeedbackPayload - Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
type ChatFeedbackPayload struct {
	// Rating given to the conversation (currently either "upvoted" or "downvoted").
	Rating *string `json:"rating,omitempty"`
	// The type(s) of issue being reported.
	Issues []string `json:"issues,omitempty"`
	// Additional freeform comments provided by the reporter.
	Comments *string `json:"comments,omitempty"`
	// Previous messages in this conversation.
	PreviousMessages []string               `json:"previousMessages,omitempty"`
	ChatTranscript   []FeedbackChatExchange `json:"chatTranscript,omitempty"`
}

func (o *ChatFeedbackPayload) GetRating() *string {
	if o == nil {
		return nil
	}
	return o.Rating
}

func (o *ChatFeedbackPayload) GetIssues() []string {
	if o == nil {
		return nil
	}
	return o.Issues
}

func (o *ChatFeedbackPayload) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *ChatFeedbackPayload) GetPreviousMessages() []string {
	if o == nil {
		return nil
	}
	return o.PreviousMessages
}

func (o *ChatFeedbackPayload) GetChatTranscript() []FeedbackChatExchange {
	if o == nil {
		return nil
	}
	return o.ChatTranscript
}

// EmailRequest - A request to send email[s] to the specified users
type EmailRequest struct {
	// The type of email to send
	EmailTemplate CommunicationTemplate `json:"emailTemplate"`
	// Admin alert related information that is used to construct the admin alert email
	AlertData *AlertData `json:"alertData,omitempty"`
	// The people to send emails to
	Recipients []Person `json:"recipients,omitempty"`
	// The people to CC for each email
	CcRecipients     []Person       `json:"ccRecipients,omitempty"`
	RecipientFilters *PeopleFilters `json:"recipientFilters,omitempty"`
	// Name of the company.
	CompanyName *string `json:"companyName,omitempty"`
	// The instance ID of the datasource (if any)
	DatasourceInstance *string `json:"datasourceInstance,omitempty"`
	// The people who triggered this email
	Senders []Person `json:"senders,omitempty"`
	// The URL of the client triggering the request, as received in the ClientConfig
	WebAppURL *string `json:"webAppUrl,omitempty"`
	// The URL of the QE instance the email request is processed by.
	ServerURL *string `json:"serverUrl,omitempty"`
	// The URL to unsubscribe from emails.
	UnsubscribeURL *string `json:"unsubscribeUrl,omitempty"`
	// The documents this email request refers to
	Documents []Document `json:"documents,omitempty"`
	// Reasons this email request was sent. Will be shown directly to end user.
	Reasons []string `json:"reasons,omitempty"`
	// For building complex email UIs, we use a block structure that dictates what we create in the UI
	Blocks map[string][]Block `json:"blocks,omitempty"`
	// Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to {{"{{"}}subject}}
	Subjects map[string]string `json:"subjects,omitempty"`
	// Optional payload for feedback reporting.
	FeedbackPayload *FeedbackPayload `json:"feedbackPayload,omitempty"`
	// Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
	ChatFeedbackPayload *ChatFeedbackPayload `json:"chatFeedbackPayload,omitempty"`
	// Dlp report metadata which is used to construct report email
	DlpReportData             *DlpReportData             `json:"dlpReportData,omitempty"`
	OnboardingAdminInviteData *OnboardingAdminInviteData `json:"onboardingAdminInviteData,omitempty"`
}

func (o *EmailRequest) GetEmailTemplate() CommunicationTemplate {
	if o == nil {
		return CommunicationTemplate("")
	}
	return o.EmailTemplate
}

func (o *EmailRequest) GetAlertData() *AlertData {
	if o == nil {
		return nil
	}
	return o.AlertData
}

func (o *EmailRequest) GetRecipients() []Person {
	if o == nil {
		return nil
	}
	return o.Recipients
}

func (o *EmailRequest) GetCcRecipients() []Person {
	if o == nil {
		return nil
	}
	return o.CcRecipients
}

func (o *EmailRequest) GetRecipientFilters() *PeopleFilters {
	if o == nil {
		return nil
	}
	return o.RecipientFilters
}

func (o *EmailRequest) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *EmailRequest) GetDatasourceInstance() *string {
	if o == nil {
		return nil
	}
	return o.DatasourceInstance
}

func (o *EmailRequest) GetSenders() []Person {
	if o == nil {
		return nil
	}
	return o.Senders
}

func (o *EmailRequest) GetWebAppURL() *string {
	if o == nil {
		return nil
	}
	return o.WebAppURL
}

func (o *EmailRequest) GetServerURL() *string {
	if o == nil {
		return nil
	}
	return o.ServerURL
}

func (o *EmailRequest) GetUnsubscribeURL() *string {
	if o == nil {
		return nil
	}
	return o.UnsubscribeURL
}

func (o *EmailRequest) GetDocuments() []Document {
	if o == nil {
		return nil
	}
	return o.Documents
}

func (o *EmailRequest) GetReasons() []string {
	if o == nil {
		return nil
	}
	return o.Reasons
}

func (o *EmailRequest) GetBlocks() map[string][]Block {
	if o == nil {
		return nil
	}
	return o.Blocks
}

func (o *EmailRequest) GetSubjects() map[string]string {
	if o == nil {
		return nil
	}
	return o.Subjects
}

func (o *EmailRequest) GetFeedbackPayload() *FeedbackPayload {
	if o == nil {
		return nil
	}
	return o.FeedbackPayload
}

func (o *EmailRequest) GetChatFeedbackPayload() *ChatFeedbackPayload {
	if o == nil {
		return nil
	}
	return o.ChatFeedbackPayload
}

func (o *EmailRequest) GetDlpReportData() *DlpReportData {
	if o == nil {
		return nil
	}
	return o.DlpReportData
}

func (o *EmailRequest) GetOnboardingAdminInviteData() *OnboardingAdminInviteData {
	if o == nil {
		return nil
	}
	return o.OnboardingAdminInviteData
}
