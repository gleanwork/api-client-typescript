// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
)

// EmployeeInfoDefinition - Describes employee info
type EmployeeInfoDefinition struct {
	// The employee's email
	Email string `json:"email"`
	// The first name of the employee. **Note**: The value cannot be empty
	//
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the employee. **Note**: The value cannot be empty
	//
	LastName *string `json:"lastName,omitempty"`
	// The preferred name or nickname of the employee
	PreferredName *string `json:"preferredName,omitempty"`
	// **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
	//
	ID *string `json:"id,omitempty"`
	// The employee's phone number.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// The employee's location (city/office name etc).
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Location *string `json:"location,omitempty"`
	// Detailed location with information about country, state, city etc.
	StructuredLocation *StructuredLocation `json:"structuredLocation,omitempty"`
	// The employee's role title.
	Title *string `json:"title,omitempty"`
	// The employee's profile pic
	PhotoURL *string `json:"photoUrl,omitempty"`
	// Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
	BusinessUnit *string `json:"businessUnit,omitempty"`
	// An organizational unit where everyone has a similar task, e.g. `Engineering`.
	Department string `json:"department"`
	// The datasource profiles of the employee, e.g. `Slack`,`Github`.
	DatasourceProfiles []DatasourceProfile `json:"datasourceProfiles,omitempty"`
	// Info about the employee's team(s)
	Teams []EmployeeTeamInfo `json:"teams,omitempty"`
	// The date when the employee started
	StartDate *types.Date `json:"startDate,omitempty"`
	// If a former employee, the last date of employment.
	EndDate *types.Date `json:"endDate,omitempty"`
	// Short biography or mission statement of the employee.
	Bio *string `json:"bio,omitempty"`
	// She/her, He/his or other pronoun.
	Pronoun *string `json:"pronoun,omitempty"`
	// Other names associated with the employee.
	AlsoKnownAs []string `json:"alsoKnownAs,omitempty"`
	// Link to internal company person profile.
	ProfileURL *string `json:"profileUrl,omitempty"`
	// List of social network profiles.
	SocialNetworks []SocialNetworkDefinition `json:"socialNetworks,omitempty"`
	// The email of the employee's manager
	ManagerEmail *string `json:"managerEmail,omitempty"`
	// **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
	//
	ManagerID *string `json:"managerId,omitempty"`
	// The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
	Type *string `default:"FULL_TIME" json:"type"`
	// List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
	Status *string `default:"CURRENT" json:"status"`
	// List of additional fields with more information about the employee.
	AdditionalFields []AdditionalFieldDefinition `json:"additionalFields,omitempty"`
}

func (e EmployeeInfoDefinition) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EmployeeInfoDefinition) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EmployeeInfoDefinition) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *EmployeeInfoDefinition) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *EmployeeInfoDefinition) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *EmployeeInfoDefinition) GetPreferredName() *string {
	if o == nil {
		return nil
	}
	return o.PreferredName
}

func (o *EmployeeInfoDefinition) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EmployeeInfoDefinition) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *EmployeeInfoDefinition) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *EmployeeInfoDefinition) GetStructuredLocation() *StructuredLocation {
	if o == nil {
		return nil
	}
	return o.StructuredLocation
}

func (o *EmployeeInfoDefinition) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *EmployeeInfoDefinition) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *EmployeeInfoDefinition) GetBusinessUnit() *string {
	if o == nil {
		return nil
	}
	return o.BusinessUnit
}

func (o *EmployeeInfoDefinition) GetDepartment() string {
	if o == nil {
		return ""
	}
	return o.Department
}

func (o *EmployeeInfoDefinition) GetDatasourceProfiles() []DatasourceProfile {
	if o == nil {
		return nil
	}
	return o.DatasourceProfiles
}

func (o *EmployeeInfoDefinition) GetTeams() []EmployeeTeamInfo {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *EmployeeInfoDefinition) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *EmployeeInfoDefinition) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *EmployeeInfoDefinition) GetBio() *string {
	if o == nil {
		return nil
	}
	return o.Bio
}

func (o *EmployeeInfoDefinition) GetPronoun() *string {
	if o == nil {
		return nil
	}
	return o.Pronoun
}

func (o *EmployeeInfoDefinition) GetAlsoKnownAs() []string {
	if o == nil {
		return nil
	}
	return o.AlsoKnownAs
}

func (o *EmployeeInfoDefinition) GetProfileURL() *string {
	if o == nil {
		return nil
	}
	return o.ProfileURL
}

func (o *EmployeeInfoDefinition) GetSocialNetworks() []SocialNetworkDefinition {
	if o == nil {
		return nil
	}
	return o.SocialNetworks
}

func (o *EmployeeInfoDefinition) GetManagerEmail() *string {
	if o == nil {
		return nil
	}
	return o.ManagerEmail
}

func (o *EmployeeInfoDefinition) GetManagerID() *string {
	if o == nil {
		return nil
	}
	return o.ManagerID
}

func (o *EmployeeInfoDefinition) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EmployeeInfoDefinition) GetRelationships() []EntityRelationship {
	if o == nil {
		return nil
	}
	return o.Relationships
}

func (o *EmployeeInfoDefinition) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *EmployeeInfoDefinition) GetAdditionalFields() []AdditionalFieldDefinition {
	if o == nil {
		return nil
	}
	return o.AdditionalFields
}
