// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type RelationType string

const (
	RelationTypeEquals   RelationType = "EQUALS"
	RelationTypeIDEquals RelationType = "ID_EQUALS"
	RelationTypeLt       RelationType = "LT"
	RelationTypeGt       RelationType = "GT"
)

func (e RelationType) ToPointer() *RelationType {
	return &e
}
func (e *RelationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EQUALS":
		fallthrough
	case "ID_EQUALS":
		fallthrough
	case "LT":
		fallthrough
	case "GT":
		*e = RelationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationType: %v", v)
	}
}

type FacetFilterValue struct {
	Value        *string       `json:"value,omitempty"`
	RelationType *RelationType `json:"relationType,omitempty"`
	// DEPRECATED - please use relationType instead
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	IsNegated *bool `json:"isNegated,omitempty"`
}

func (o *FacetFilterValue) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FacetFilterValue) GetRelationType() *RelationType {
	if o == nil {
		return nil
	}
	return o.RelationType
}

func (o *FacetFilterValue) GetIsNegated() *bool {
	if o == nil {
		return nil
	}
	return o.IsNegated
}
