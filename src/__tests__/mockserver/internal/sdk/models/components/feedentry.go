// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Format - defines how to render this particular displayable list card
type Format string

const (
	FormatList Format = "LIST"
)

func (e Format) ToPointer() *Format {
	return &e
}
func (e *Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIST":
		*e = Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Format: %v", v)
	}
}

type UIConfig struct {
	// defines how to render this particular displayable list card
	Format *Format `json:"format,omitempty"`
	// UI configurations for each item of the list
	AdditionalFlags *DisplayableListItemUIConfig `json:"additionalFlags,omitempty"`
}

func (o *UIConfig) GetFormat() *Format {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *UIConfig) GetAdditionalFlags() *DisplayableListItemUIConfig {
	if o == nil {
		return nil
	}
	return o.AdditionalFlags
}

// JustificationType - Type of the justification.
type JustificationType string

const (
	JustificationTypeFrequentlyAccessed                JustificationType = "FREQUENTLY_ACCESSED"
	JustificationTypeRecentlyAccessed                  JustificationType = "RECENTLY_ACCESSED"
	JustificationTypeTrendingDocument                  JustificationType = "TRENDING_DOCUMENT"
	JustificationTypeVerificationReminder              JustificationType = "VERIFICATION_REMINDER"
	JustificationTypeSuggestedDocument                 JustificationType = "SUGGESTED_DOCUMENT"
	JustificationTypeEmptyStateSuggestion              JustificationType = "EMPTY_STATE_SUGGESTION"
	JustificationTypeFrecencyScored                    JustificationType = "FRECENCY_SCORED"
	JustificationTypeServerGenerated                   JustificationType = "SERVER_GENERATED"
	JustificationTypeUseCase                           JustificationType = "USE_CASE"
	JustificationTypeUpdateSinceLastView               JustificationType = "UPDATE_SINCE_LAST_VIEW"
	JustificationTypeRecentlyStarted                   JustificationType = "RECENTLY_STARTED"
	JustificationTypeEvent                             JustificationType = "EVENT"
	JustificationTypeUserMention                       JustificationType = "USER_MENTION"
	JustificationTypeAnnouncement                      JustificationType = "ANNOUNCEMENT"
	JustificationTypeExternalAnnouncement              JustificationType = "EXTERNAL_ANNOUNCEMENT"
	JustificationTypePopularityBasedTrending           JustificationType = "POPULARITY_BASED_TRENDING"
	JustificationTypeCompanyResource                   JustificationType = "COMPANY_RESOURCE"
	JustificationTypeEventDocumentFromContent          JustificationType = "EVENT_DOCUMENT_FROM_CONTENT"
	JustificationTypeEventDocumentFromSearch           JustificationType = "EVENT_DOCUMENT_FROM_SEARCH"
	JustificationTypeVisitAffinityScored               JustificationType = "VISIT_AFFINITY_SCORED"
	JustificationTypeSuggestedApp                      JustificationType = "SUGGESTED_APP"
	JustificationTypeSuggestedPerson                   JustificationType = "SUGGESTED_PERSON"
	JustificationTypeActivityHighlight                 JustificationType = "ACTIVITY_HIGHLIGHT"
	JustificationTypeSavedSearch                       JustificationType = "SAVED_SEARCH"
	JustificationTypeSuggestedChannel                  JustificationType = "SUGGESTED_CHANNEL"
	JustificationTypePeopleCelebrations                JustificationType = "PEOPLE_CELEBRATIONS"
	JustificationTypeSocialLink                        JustificationType = "SOCIAL_LINK"
	JustificationTypeZeroStateChatSuggestion           JustificationType = "ZERO_STATE_CHAT_SUGGESTION"
	JustificationTypeZeroStateChatToolSuggestion       JustificationType = "ZERO_STATE_CHAT_TOOL_SUGGESTION"
	JustificationTypeZeroStatePromptTemplateSuggestion JustificationType = "ZERO_STATE_PROMPT_TEMPLATE_SUGGESTION"
	JustificationTypeZeroStateStaticWorkflowSuggestion JustificationType = "ZERO_STATE_STATIC_WORKFLOW_SUGGESTION"
	JustificationTypeZeroStateAgentSuggestion          JustificationType = "ZERO_STATE_AGENT_SUGGESTION"
)

func (e JustificationType) ToPointer() *JustificationType {
	return &e
}
func (e *JustificationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FREQUENTLY_ACCESSED":
		fallthrough
	case "RECENTLY_ACCESSED":
		fallthrough
	case "TRENDING_DOCUMENT":
		fallthrough
	case "VERIFICATION_REMINDER":
		fallthrough
	case "SUGGESTED_DOCUMENT":
		fallthrough
	case "EMPTY_STATE_SUGGESTION":
		fallthrough
	case "FRECENCY_SCORED":
		fallthrough
	case "SERVER_GENERATED":
		fallthrough
	case "USE_CASE":
		fallthrough
	case "UPDATE_SINCE_LAST_VIEW":
		fallthrough
	case "RECENTLY_STARTED":
		fallthrough
	case "EVENT":
		fallthrough
	case "USER_MENTION":
		fallthrough
	case "ANNOUNCEMENT":
		fallthrough
	case "EXTERNAL_ANNOUNCEMENT":
		fallthrough
	case "POPULARITY_BASED_TRENDING":
		fallthrough
	case "COMPANY_RESOURCE":
		fallthrough
	case "EVENT_DOCUMENT_FROM_CONTENT":
		fallthrough
	case "EVENT_DOCUMENT_FROM_SEARCH":
		fallthrough
	case "VISIT_AFFINITY_SCORED":
		fallthrough
	case "SUGGESTED_APP":
		fallthrough
	case "SUGGESTED_PERSON":
		fallthrough
	case "ACTIVITY_HIGHLIGHT":
		fallthrough
	case "SAVED_SEARCH":
		fallthrough
	case "SUGGESTED_CHANNEL":
		fallthrough
	case "PEOPLE_CELEBRATIONS":
		fallthrough
	case "SOCIAL_LINK":
		fallthrough
	case "ZERO_STATE_CHAT_SUGGESTION":
		fallthrough
	case "ZERO_STATE_CHAT_TOOL_SUGGESTION":
		fallthrough
	case "ZERO_STATE_PROMPT_TEMPLATE_SUGGESTION":
		fallthrough
	case "ZERO_STATE_STATIC_WORKFLOW_SUGGESTION":
		fallthrough
	case "ZERO_STATE_AGENT_SUGGESTION":
		*e = JustificationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JustificationType: %v", v)
	}
}

type FeedEntry struct {
	// optional ID associated with a single feed entry (displayable_list_id)
	EntryID *string `json:"entryId,omitempty"`
	// Title for the result. Can be document title, event title and so on.
	Title     string     `json:"title"`
	Thumbnail *Thumbnail `json:"thumbnail,omitempty"`
	CreatedBy *Person    `json:"createdBy,omitempty"`
	UIConfig  *UIConfig  `json:"uiConfig,omitempty"`
	// Type of the justification.
	JustificationType *JustificationType `json:"justificationType,omitempty"`
	// Server side generated justification string if server provides one.
	Justification *string `json:"justification,omitempty"`
	// An opaque token that represents this particular feed entry in this particular response. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
	// View URL for the entry if based on links that are not documents in Glean.
	ViewURL        *string               `json:"viewUrl,omitempty"`
	Document       *Document             `json:"document,omitempty"`
	Event          *CalendarEvent        `json:"event,omitempty"`
	Announcement   *Announcement         `json:"announcement,omitempty"`
	Collection     *Collection           `json:"collection,omitempty"`
	CollectionItem *CollectionItem       `json:"collectionItem,omitempty"`
	Person         *Person               `json:"person,omitempty"`
	App            *AppResult            `json:"app,omitempty"`
	PromptTemplate *PromptTemplateResult `json:"promptTemplate,omitempty"`
	Workflow       *WorkflowResult       `json:"workflow,omitempty"`
	// List of activity where each activity has user, action, timestamp.
	Activities           []UserActivity `json:"activities,omitempty"`
	DocumentVisitorCount *CountInfo     `json:"documentVisitorCount,omitempty"`
}

func (o *FeedEntry) GetEntryID() *string {
	if o == nil {
		return nil
	}
	return o.EntryID
}

func (o *FeedEntry) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *FeedEntry) GetThumbnail() *Thumbnail {
	if o == nil {
		return nil
	}
	return o.Thumbnail
}

func (o *FeedEntry) GetCreatedBy() *Person {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FeedEntry) GetUIConfig() *UIConfig {
	if o == nil {
		return nil
	}
	return o.UIConfig
}

func (o *FeedEntry) GetJustificationType() *JustificationType {
	if o == nil {
		return nil
	}
	return o.JustificationType
}

func (o *FeedEntry) GetJustification() *string {
	if o == nil {
		return nil
	}
	return o.Justification
}

func (o *FeedEntry) GetTrackingToken() *string {
	if o == nil {
		return nil
	}
	return o.TrackingToken
}

func (o *FeedEntry) GetViewURL() *string {
	if o == nil {
		return nil
	}
	return o.ViewURL
}

func (o *FeedEntry) GetDocument() *Document {
	if o == nil {
		return nil
	}
	return o.Document
}

func (o *FeedEntry) GetEvent() *CalendarEvent {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *FeedEntry) GetAnnouncement() *Announcement {
	if o == nil {
		return nil
	}
	return o.Announcement
}

func (o *FeedEntry) GetCollection() *Collection {
	if o == nil {
		return nil
	}
	return o.Collection
}

func (o *FeedEntry) GetCollectionItem() *CollectionItem {
	if o == nil {
		return nil
	}
	return o.CollectionItem
}

func (o *FeedEntry) GetPerson() *Person {
	if o == nil {
		return nil
	}
	return o.Person
}

func (o *FeedEntry) GetApp() *AppResult {
	if o == nil {
		return nil
	}
	return o.App
}

func (o *FeedEntry) GetPromptTemplate() *PromptTemplateResult {
	if o == nil {
		return nil
	}
	return o.PromptTemplate
}

func (o *FeedEntry) GetWorkflow() *WorkflowResult {
	if o == nil {
		return nil
	}
	return o.Workflow
}

func (o *FeedEntry) GetActivities() []UserActivity {
	if o == nil {
		return nil
	}
	return o.Activities
}

func (o *FeedEntry) GetDocumentVisitorCount() *CountInfo {
	if o == nil {
		return nil
	}
	return o.DocumentVisitorCount
}
