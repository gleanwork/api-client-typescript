// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// GeneratedQnaStatus - Status of backend generating the answer
type GeneratedQnaStatus string

const (
	GeneratedQnaStatusComputing GeneratedQnaStatus = "COMPUTING"
	GeneratedQnaStatusDisabled  GeneratedQnaStatus = "DISABLED"
	GeneratedQnaStatusFailed    GeneratedQnaStatus = "FAILED"
	GeneratedQnaStatusNoAnswer  GeneratedQnaStatus = "NO_ANSWER"
	GeneratedQnaStatusSkipped   GeneratedQnaStatus = "SKIPPED"
	GeneratedQnaStatusStreaming GeneratedQnaStatus = "STREAMING"
	GeneratedQnaStatusSucceeded GeneratedQnaStatus = "SUCCEEDED"
	GeneratedQnaStatusTimeout   GeneratedQnaStatus = "TIMEOUT"
)

func (e GeneratedQnaStatus) ToPointer() *GeneratedQnaStatus {
	return &e
}
func (e *GeneratedQnaStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPUTING":
		fallthrough
	case "DISABLED":
		fallthrough
	case "FAILED":
		fallthrough
	case "NO_ANSWER":
		fallthrough
	case "SKIPPED":
		fallthrough
	case "STREAMING":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "TIMEOUT":
		*e = GeneratedQnaStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GeneratedQnaStatus: %v", v)
	}
}

type GeneratedQna struct {
	// Search query rephrased into a question.
	Question *string `json:"question,omitempty"`
	// Answer generated for the given query or the generated question.
	Answer *string `json:"answer,omitempty"`
	// List of all follow-up prompts generated for the given query or the generated question.
	FollowUpPrompts []string `json:"followUpPrompts,omitempty"`
	// List of follow-up actions generated for the given query or the generated question.
	FollowupActions []FollowupAction `json:"followupActions,omitempty"`
	// Answer subsections to mark with special formatting (citations, bolding etc)
	Ranges []TextRange `json:"ranges,omitempty"`
	// Status of backend generating the answer
	Status *GeneratedQnaStatus `json:"status,omitempty"`
	// An opaque cursor representing the search request
	Cursor *string `json:"cursor,omitempty"`
	// An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
}

func (o *GeneratedQna) GetQuestion() *string {
	if o == nil {
		return nil
	}
	return o.Question
}

func (o *GeneratedQna) GetAnswer() *string {
	if o == nil {
		return nil
	}
	return o.Answer
}

func (o *GeneratedQna) GetFollowUpPrompts() []string {
	if o == nil {
		return nil
	}
	return o.FollowUpPrompts
}

func (o *GeneratedQna) GetFollowupActions() []FollowupAction {
	if o == nil {
		return nil
	}
	return o.FollowupActions
}

func (o *GeneratedQna) GetRanges() []TextRange {
	if o == nil {
		return nil
	}
	return o.Ranges
}

func (o *GeneratedQna) GetStatus() *GeneratedQnaStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GeneratedQna) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *GeneratedQna) GetTrackingToken() *string {
	if o == nil {
		return nil
	}
	return o.TrackingToken
}
