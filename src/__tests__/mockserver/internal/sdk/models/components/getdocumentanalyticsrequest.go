// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type GetDocumentAnalyticsRequest struct {
	// The specification for the documents for which analytics will be retrieved.
	DocumentSpecs []DocumentSpecUnion `json:"documentSpecs"`
	DayRange      Period              `json:"dayRange"`
	// Whether response should include click information or not. Default is to not include click information.
	WithClickerCounts *bool `json:"withClickerCounts,omitempty"`
	// Whether response should include impression information or not. Default is to not include impression information.
	WithImpressionCounts *bool `json:"withImpressionCounts,omitempty"`
	// Whether the results will include aggregate counts/info for facets like location, department, etc.
	WithFacetAggregations *bool `json:"withFacetAggregations,omitempty"`
	// Whether response should include visit counts or not. Default is to return only visitor counts.
	WithVisitCounts *bool `json:"withVisitCounts,omitempty"`
}

func (o *GetDocumentAnalyticsRequest) GetDocumentSpecs() []DocumentSpecUnion {
	if o == nil {
		return []DocumentSpecUnion{}
	}
	return o.DocumentSpecs
}

func (o *GetDocumentAnalyticsRequest) GetDayRange() Period {
	if o == nil {
		return Period{}
	}
	return o.DayRange
}

func (o *GetDocumentAnalyticsRequest) GetWithClickerCounts() *bool {
	if o == nil {
		return nil
	}
	return o.WithClickerCounts
}

func (o *GetDocumentAnalyticsRequest) GetWithImpressionCounts() *bool {
	if o == nil {
		return nil
	}
	return o.WithImpressionCounts
}

func (o *GetDocumentAnalyticsRequest) GetWithFacetAggregations() *bool {
	if o == nil {
		return nil
	}
	return o.WithFacetAggregations
}

func (o *GetDocumentAnalyticsRequest) GetWithVisitCounts() *bool {
	if o == nil {
		return nil
	}
	return o.WithVisitCounts
}
