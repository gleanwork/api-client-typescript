// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type IconType string

const (
	IconTypeCollection          IconType = "COLLECTION"
	IconTypeCustom              IconType = "CUSTOM"
	IconTypeDatasource          IconType = "DATASOURCE"
	IconTypeDatasourceInstance  IconType = "DATASOURCE_INSTANCE"
	IconTypeFavicon             IconType = "FAVICON"
	IconTypeFileType            IconType = "FILE_TYPE"
	IconTypeGeneratedBackground IconType = "GENERATED_BACKGROUND"
	IconTypeGlyph               IconType = "GLYPH"
	IconTypeMimeType            IconType = "MIME_TYPE"
	IconTypeNoIcon              IconType = "NO_ICON"
	IconTypePerson              IconType = "PERSON"
	IconTypeReactions           IconType = "REACTIONS"
	IconTypeURL                 IconType = "URL"
)

func (e IconType) ToPointer() *IconType {
	return &e
}
func (e *IconType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COLLECTION":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "DATASOURCE":
		fallthrough
	case "DATASOURCE_INSTANCE":
		fallthrough
	case "FAVICON":
		fallthrough
	case "FILE_TYPE":
		fallthrough
	case "GENERATED_BACKGROUND":
		fallthrough
	case "GLYPH":
		fallthrough
	case "MIME_TYPE":
		fallthrough
	case "NO_ICON":
		fallthrough
	case "PERSON":
		fallthrough
	case "REACTIONS":
		fallthrough
	case "URL":
		*e = IconType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IconType: %v", v)
	}
}

// IconConfig - Defines how to render an icon
type IconConfig struct {
	GeneratedBackgroundColorKey *string   `json:"generatedBackgroundColorKey,omitempty"`
	BackgroundColor             *string   `json:"backgroundColor,omitempty"`
	Color                       *string   `json:"color,omitempty"`
	Key                         *string   `json:"key,omitempty"`
	IconType                    *IconType `json:"iconType,omitempty"`
	// Whether the icon should be masked based on current theme.
	Masked *bool `json:"masked,omitempty"`
	// The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
	Name *string `json:"name,omitempty"`
	// The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
	URL *string `json:"url,omitempty"`
}

func (o *IconConfig) GetGeneratedBackgroundColorKey() *string {
	if o == nil {
		return nil
	}
	return o.GeneratedBackgroundColorKey
}

func (o *IconConfig) GetBackgroundColor() *string {
	if o == nil {
		return nil
	}
	return o.BackgroundColor
}

func (o *IconConfig) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *IconConfig) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *IconConfig) GetIconType() *IconType {
	if o == nil {
		return nil
	}
	return o.IconType
}

func (o *IconConfig) GetMasked() *bool {
	if o == nil {
		return nil
	}
	return o.Masked
}

func (o *IconConfig) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *IconConfig) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}
