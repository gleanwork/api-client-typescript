// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DatasourcesType - The types of datasource for which to run the report/policy.
type DatasourcesType string

const (
	DatasourcesTypeAll    DatasourcesType = "ALL"
	DatasourcesTypeCustom DatasourcesType = "CUSTOM"
)

func (e DatasourcesType) ToPointer() *DatasourcesType {
	return &e
}
func (e *DatasourcesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "CUSTOM":
		*e = DatasourcesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatasourcesType: %v", v)
	}
}

// TimePeriodType - Type of time period for which to run the report/policy. PAST_DAY is deprecated.
type TimePeriodType string

const (
	TimePeriodTypeAllTime  TimePeriodType = "ALL_TIME"
	TimePeriodTypePastYear TimePeriodType = "PAST_YEAR"
	TimePeriodTypePastDay  TimePeriodType = "PAST_DAY"
	TimePeriodTypeCustom   TimePeriodType = "CUSTOM"
)

func (e TimePeriodType) ToPointer() *TimePeriodType {
	return &e
}
func (e *TimePeriodType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL_TIME":
		fallthrough
	case "PAST_YEAR":
		fallthrough
	case "PAST_DAY":
		fallthrough
	case "CUSTOM":
		*e = TimePeriodType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimePeriodType: %v", v)
	}
}

// InputOptions - Controls which data-sources and what time-range to include in scans.
type InputOptions struct {
	// list of url regex matching documents excluded from report
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	URLGreenlist []string `json:"urlGreenlist,omitempty"`
	// The types of datasource for which to run the report/policy.
	DatasourcesType *DatasourcesType `json:"datasourcesType,omitempty"`
	// List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Datasources []string `json:"datasources,omitempty"`
	// List of datasource instances to consider for report/policy.
	DatasourceInstances []string `json:"datasourceInstances,omitempty"`
	// Type of time period for which to run the report/policy. PAST_DAY is deprecated.
	TimePeriodType  *TimePeriodType `json:"timePeriodType,omitempty"`
	CustomTimeRange *TimeRange      `json:"customTimeRange,omitempty"`
}

func (o *InputOptions) GetURLGreenlist() []string {
	if o == nil {
		return nil
	}
	return o.URLGreenlist
}

func (o *InputOptions) GetDatasourcesType() *DatasourcesType {
	if o == nil {
		return nil
	}
	return o.DatasourcesType
}

func (o *InputOptions) GetDatasources() []string {
	if o == nil {
		return nil
	}
	return o.Datasources
}

func (o *InputOptions) GetDatasourceInstances() []string {
	if o == nil {
		return nil
	}
	return o.DatasourceInstances
}

func (o *InputOptions) GetTimePeriodType() *TimePeriodType {
	if o == nil {
		return nil
	}
	return o.TimePeriodType
}

func (o *InputOptions) GetCustomTimeRange() *TimeRange {
	if o == nil {
		return nil
	}
	return o.CustomTimeRange
}
