// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type InsightsRequestCategory string

const (
	InsightsRequestCategoryAgents        InsightsRequestCategory = "AGENTS"
	InsightsRequestCategoryAi            InsightsRequestCategory = "AI"
	InsightsRequestCategoryAiApps        InsightsRequestCategory = "AI_APPS"
	InsightsRequestCategoryAnnouncements InsightsRequestCategory = "ANNOUNCEMENTS"
	InsightsRequestCategoryAnswers       InsightsRequestCategory = "ANSWERS"
	InsightsRequestCategoryCollections   InsightsRequestCategory = "COLLECTIONS"
	InsightsRequestCategoryContent       InsightsRequestCategory = "CONTENT"
	InsightsRequestCategoryGleanAssist   InsightsRequestCategory = "GLEAN_ASSIST"
	InsightsRequestCategoryQueries       InsightsRequestCategory = "QUERIES"
	InsightsRequestCategoryShortcuts     InsightsRequestCategory = "SHORTCUTS"
	InsightsRequestCategoryUsers         InsightsRequestCategory = "USERS"
)

func (e InsightsRequestCategory) ToPointer() *InsightsRequestCategory {
	return &e
}
func (e *InsightsRequestCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AGENTS":
		fallthrough
	case "AI":
		fallthrough
	case "AI_APPS":
		fallthrough
	case "ANNOUNCEMENTS":
		fallthrough
	case "ANSWERS":
		fallthrough
	case "COLLECTIONS":
		fallthrough
	case "CONTENT":
		fallthrough
	case "GLEAN_ASSIST":
		fallthrough
	case "QUERIES":
		fallthrough
	case "SHORTCUTS":
		fallthrough
	case "USERS":
		*e = InsightsRequestCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InsightsRequestCategory: %v", v)
	}
}

type AssistantActivityType string

const (
	AssistantActivityTypeGleanChat        AssistantActivityType = "GLEAN_CHAT"
	AssistantActivityTypeAiSummary        AssistantActivityType = "AI_SUMMARY"
	AssistantActivityTypeAiAnswer         AssistantActivityType = "AI_ANSWER"
	AssistantActivityTypeGleanbotResponse AssistantActivityType = "GLEANBOT_RESPONSE"
)

func (e AssistantActivityType) ToPointer() *AssistantActivityType {
	return &e
}
func (e *AssistantActivityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GLEAN_CHAT":
		fallthrough
	case "AI_SUMMARY":
		fallthrough
	case "AI_ANSWER":
		fallthrough
	case "GLEANBOT_RESPONSE":
		*e = AssistantActivityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssistantActivityType: %v", v)
	}
}

type InsightsRequest struct {
	// Categories of data requested. Request can include single or multiple types.
	Categories []InsightsRequestCategory `json:"categories"`
	// Departments that the data is requested for. If this is empty, corresponds to whole company.
	Departments          []string                      `json:"departments,omitempty"`
	DayRange             *Period                       `json:"dayRange,omitempty"`
	AiAppRequestOptions  *InsightsAiAppRequestOptions  `json:"aiAppRequestOptions,omitempty"`
	AgentsRequestOptions *InsightsAgentsRequestOptions `json:"agentsRequestOptions,omitempty"`
	// Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
	AssistantActivityTypes []AssistantActivityType `json:"assistantActivityTypes,omitempty"`
	// If true, suppresses the generation of per-user Insights in the response. Default is false.
	DisablePerUserInsights *bool `json:"disablePerUserInsights,omitempty"`
}

func (o *InsightsRequest) GetCategories() []InsightsRequestCategory {
	if o == nil {
		return []InsightsRequestCategory{}
	}
	return o.Categories
}

func (o *InsightsRequest) GetDepartments() []string {
	if o == nil {
		return nil
	}
	return o.Departments
}

func (o *InsightsRequest) GetDayRange() *Period {
	if o == nil {
		return nil
	}
	return o.DayRange
}

func (o *InsightsRequest) GetAiAppRequestOptions() *InsightsAiAppRequestOptions {
	if o == nil {
		return nil
	}
	return o.AiAppRequestOptions
}

func (o *InsightsRequest) GetAgentsRequestOptions() *InsightsAgentsRequestOptions {
	if o == nil {
		return nil
	}
	return o.AgentsRequestOptions
}

func (o *InsightsRequest) GetAssistantActivityTypes() []AssistantActivityType {
	if o == nil {
		return nil
	}
	return o.AssistantActivityTypes
}

func (o *InsightsRequest) GetDisablePerUserInsights() *bool {
	if o == nil {
		return nil
	}
	return o.DisablePerUserInsights
}
