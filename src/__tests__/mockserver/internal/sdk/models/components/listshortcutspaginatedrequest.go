// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ListShortcutsPaginatedRequestIncludeField string

const (
	ListShortcutsPaginatedRequestIncludeFieldFacets        ListShortcutsPaginatedRequestIncludeField = "FACETS"
	ListShortcutsPaginatedRequestIncludeFieldPeopleDetails ListShortcutsPaginatedRequestIncludeField = "PEOPLE_DETAILS"
)

func (e ListShortcutsPaginatedRequestIncludeField) ToPointer() *ListShortcutsPaginatedRequestIncludeField {
	return &e
}
func (e *ListShortcutsPaginatedRequestIncludeField) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FACETS":
		fallthrough
	case "PEOPLE_DETAILS":
		*e = ListShortcutsPaginatedRequestIncludeField(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListShortcutsPaginatedRequestIncludeField: %v", v)
	}
}

type ListShortcutsPaginatedRequest struct {
	// Array of fields/data to be included in response that are not included by default
	IncludeFields []ListShortcutsPaginatedRequestIncludeField `json:"includeFields,omitempty"`
	PageSize      int64                                       `json:"pageSize"`
	// A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
	Cursor *string `json:"cursor,omitempty"`
	// A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
	Filters []FacetFilter `json:"filters,omitempty"`
	Sort    *SortOptions  `json:"sort,omitempty"`
	// Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
	Query *string `json:"query,omitempty"`
}

func (o *ListShortcutsPaginatedRequest) GetIncludeFields() []ListShortcutsPaginatedRequestIncludeField {
	if o == nil {
		return nil
	}
	return o.IncludeFields
}

func (o *ListShortcutsPaginatedRequest) GetPageSize() int64 {
	if o == nil {
		return 0
	}
	return o.PageSize
}

func (o *ListShortcutsPaginatedRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *ListShortcutsPaginatedRequest) GetFilters() []FacetFilter {
	if o == nil {
		return nil
	}
	return o.Filters
}

func (o *ListShortcutsPaginatedRequest) GetSort() *SortOptions {
	if o == nil {
		return nil
	}
	return o.Sort
}

func (o *ListShortcutsPaginatedRequest) GetQuery() *string {
	if o == nil {
		return nil
	}
	return o.Query
}
