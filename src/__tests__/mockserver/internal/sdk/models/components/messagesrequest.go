// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// IDType - Type of the id in the incoming request.
type IDType string

const (
	IDTypeChannelName    IDType = "CHANNEL_NAME"
	IDTypeThreadID       IDType = "THREAD_ID"
	IDTypeConversationID IDType = "CONVERSATION_ID"
)

func (e IDType) ToPointer() *IDType {
	return &e
}
func (e *IDType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHANNEL_NAME":
		fallthrough
	case "THREAD_ID":
		fallthrough
	case "CONVERSATION_ID":
		*e = IDType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IDType: %v", v)
	}
}

// Direction - The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
type Direction string

const (
	DirectionOlder Direction = "OLDER"
	DirectionNewer Direction = "NEWER"
)

func (e Direction) ToPointer() *Direction {
	return &e
}
func (e *Direction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OLDER":
		fallthrough
	case "NEWER":
		*e = Direction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Direction: %v", v)
	}
}

// Datasource - The type of the data source. Missing field defaults to SLACK.
type Datasource string

const (
	DatasourceSlack             Datasource = "SLACK"
	DatasourceMicrosoftteams    Datasource = "MICROSOFTTEAMS"
	DatasourceFacebookworkplace Datasource = "FACEBOOKWORKPLACE"
)

func (e Datasource) ToPointer() *Datasource {
	return &e
}
func (e *Datasource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SLACK":
		fallthrough
	case "MICROSOFTTEAMS":
		fallthrough
	case "FACEBOOKWORKPLACE":
		*e = Datasource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Datasource: %v", v)
	}
}

type MessagesRequest struct {
	// Type of the id in the incoming request.
	IDType IDType `json:"idType"`
	// ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.
	ID string `json:"id"`
	// Id for the for the workspace in case of multiple workspaces.
	WorkspaceID *string `json:"workspaceId,omitempty"`
	// The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
	Direction *Direction `json:"direction,omitempty"`
	// Timestamp in millis of the reference message. Only applicable when using a message_id.
	TimestampMillis *int64 `json:"timestampMillis,omitempty"`
	// Whether to include root message in response.
	IncludeRootMessage *bool `json:"includeRootMessage,omitempty"`
	// The type of the data source. Missing field defaults to SLACK.
	Datasource *Datasource `json:"datasource,omitempty"`
	// The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
	DatasourceInstanceDisplayName *string `json:"datasourceInstanceDisplayName,omitempty"`
}

func (o *MessagesRequest) GetIDType() IDType {
	if o == nil {
		return IDType("")
	}
	return o.IDType
}

func (o *MessagesRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *MessagesRequest) GetWorkspaceID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceID
}

func (o *MessagesRequest) GetDirection() *Direction {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *MessagesRequest) GetTimestampMillis() *int64 {
	if o == nil {
		return nil
	}
	return o.TimestampMillis
}

func (o *MessagesRequest) GetIncludeRootMessage() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeRootMessage
}

func (o *MessagesRequest) GetDatasource() *Datasource {
	if o == nil {
		return nil
	}
	return o.Datasource
}

func (o *MessagesRequest) GetDatasourceInstanceDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DatasourceInstanceDisplayName
}
