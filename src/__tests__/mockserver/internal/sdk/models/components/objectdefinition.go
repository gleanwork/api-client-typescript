// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// DocCategory - The document category of this object type.
type DocCategory string

const (
	DocCategoryUncategorized        DocCategory = "UNCATEGORIZED"
	DocCategoryTickets              DocCategory = "TICKETS"
	DocCategoryCrm                  DocCategory = "CRM"
	DocCategoryPublishedContent     DocCategory = "PUBLISHED_CONTENT"
	DocCategoryCollaborativeContent DocCategory = "COLLABORATIVE_CONTENT"
	DocCategoryQuestionAnswer       DocCategory = "QUESTION_ANSWER"
	DocCategoryMessaging            DocCategory = "MESSAGING"
	DocCategoryCodeRepository       DocCategory = "CODE_REPOSITORY"
	DocCategoryChangeManagement     DocCategory = "CHANGE_MANAGEMENT"
	DocCategoryPeople               DocCategory = "PEOPLE"
	DocCategoryEmail                DocCategory = "EMAIL"
	DocCategorySso                  DocCategory = "SSO"
	DocCategoryAts                  DocCategory = "ATS"
	DocCategoryKnowledgeHub         DocCategory = "KNOWLEDGE_HUB"
	DocCategoryExternalShortcut     DocCategory = "EXTERNAL_SHORTCUT"
	DocCategoryEntity               DocCategory = "ENTITY"
	DocCategoryCalendar             DocCategory = "CALENDAR"
)

func (e DocCategory) ToPointer() *DocCategory {
	return &e
}
func (e *DocCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNCATEGORIZED":
		fallthrough
	case "TICKETS":
		fallthrough
	case "CRM":
		fallthrough
	case "PUBLISHED_CONTENT":
		fallthrough
	case "COLLABORATIVE_CONTENT":
		fallthrough
	case "QUESTION_ANSWER":
		fallthrough
	case "MESSAGING":
		fallthrough
	case "CODE_REPOSITORY":
		fallthrough
	case "CHANGE_MANAGEMENT":
		fallthrough
	case "PEOPLE":
		fallthrough
	case "EMAIL":
		fallthrough
	case "SSO":
		fallthrough
	case "ATS":
		fallthrough
	case "KNOWLEDGE_HUB":
		fallthrough
	case "EXTERNAL_SHORTCUT":
		fallthrough
	case "ENTITY":
		fallthrough
	case "CALENDAR":
		*e = DocCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocCategory: %v", v)
	}
}

// ObjectDefinition - The definition for an `DocumentMetadata.objectType` within a datasource.
type ObjectDefinition struct {
	// Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
	Name *string `json:"name,omitempty"`
	// The user-friendly name of the object for display.
	DisplayLabel *string `json:"displayLabel,omitempty"`
	// The document category of this object type.
	DocCategory         *DocCategory         `json:"docCategory,omitempty"`
	PropertyDefinitions []PropertyDefinition `json:"propertyDefinitions,omitempty"`
	// A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
	PropertyGroups []PropertyGroup `json:"propertyGroups,omitempty"`
	// Whether or not the object is summarizable
	Summarizable *bool `json:"summarizable,omitempty"`
}

func (o *ObjectDefinition) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ObjectDefinition) GetDisplayLabel() *string {
	if o == nil {
		return nil
	}
	return o.DisplayLabel
}

func (o *ObjectDefinition) GetDocCategory() *DocCategory {
	if o == nil {
		return nil
	}
	return o.DocCategory
}

func (o *ObjectDefinition) GetPropertyDefinitions() []PropertyDefinition {
	if o == nil {
		return nil
	}
	return o.PropertyDefinitions
}

func (o *ObjectDefinition) GetPropertyGroups() []PropertyGroup {
	if o == nil {
		return nil
	}
	return o.PropertyGroups
}

func (o *ObjectDefinition) GetSummarizable() *bool {
	if o == nil {
		return nil
	}
	return o.Summarizable
}
