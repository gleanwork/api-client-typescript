// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"time"
)

type PersonMetadataType string

const (
	PersonMetadataTypeFullTime       PersonMetadataType = "FULL_TIME"
	PersonMetadataTypeContractor     PersonMetadataType = "CONTRACTOR"
	PersonMetadataTypeNonEmployee    PersonMetadataType = "NON_EMPLOYEE"
	PersonMetadataTypeFormerEmployee PersonMetadataType = "FORMER_EMPLOYEE"
)

func (e PersonMetadataType) ToPointer() *PersonMetadataType {
	return &e
}
func (e *PersonMetadataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FULL_TIME":
		fallthrough
	case "CONTRACTOR":
		fallthrough
	case "NON_EMPLOYEE":
		fallthrough
	case "FORMER_EMPLOYEE":
		*e = PersonMetadataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonMetadataType: %v", v)
	}
}

type PersonMetadata struct {
	Type *PersonMetadataType `json:"type,omitempty"`
	// The first name of the person
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the person
	LastName *string `json:"lastName,omitempty"`
	// Job title.
	Title *string `json:"title,omitempty"`
	// Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
	BusinessUnit *string `json:"businessUnit,omitempty"`
	// An organizational unit where everyone has a similar task, e.g. `Engineering`.
	Department *string `json:"department,omitempty"`
	// Info about the employee's team(s).
	Teams []PersonTeam `json:"teams,omitempty"`
	// The number of people in this person's department.
	DepartmentCount *int64 `json:"departmentCount,omitempty"`
	// The user's primary email address
	Email *string `json:"email,omitempty"`
	// Additional email addresses of this user beyond the primary, if any.
	AliasEmails []string `json:"aliasEmails,omitempty"`
	// User facing string representing the person's location.
	Location *string `json:"location,omitempty"`
	// Detailed location with information about country, state, city etc.
	StructuredLocation *StructuredLocation `json:"structuredLocation,omitempty"`
	// Link to a customer's internal profile page. This is set to '#' when no link is desired.
	ExternalProfileLink *string `json:"externalProfileLink,omitempty"`
	Manager             *Person `json:"manager,omitempty"`
	// The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
	ManagementChain []Person `json:"managementChain,omitempty"`
	// Phone number as a number string.
	Phone *string `json:"phone,omitempty"`
	// The timezone of the person. E.g. "Pacific Daylight Time".
	Timezone *string `json:"timezone,omitempty"`
	// The offset of the person's timezone in seconds from UTC.
	TimezoneOffset *int64 `json:"timezoneOffset,omitempty"`
	// The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	PhotoURL *string `json:"photoUrl,omitempty"`
	// The original photo URL of the person's avatar before any edits they made are applied
	UneditedPhotoURL *string `json:"uneditedPhotoUrl,omitempty"`
	// The URL of the person's banner photo.
	BannerURL *string  `json:"bannerUrl,omitempty"`
	Reports   []Person `json:"reports,omitempty"`
	// The date when the employee started.
	StartDate *types.Date `json:"startDate,omitempty"`
	// If a former employee, the last date of employment.
	EndDate *types.Date `json:"endDate,omitempty"`
	// Short biography or mission statement of the employee.
	Bio *string `json:"bio,omitempty"`
	// She/her, He/his or other pronoun.
	Pronoun *string `json:"pronoun,omitempty"`
	// The total recursive size of the people reporting to this person, or 1
	OrgSizeCount *int64 `json:"orgSizeCount,omitempty"`
	// The total number of people who directly report to this person, or 0
	DirectReportsCount *int64 `json:"directReportsCount,omitempty"`
	// The preferred name of the person, or a nickname.
	PreferredName *string `json:"preferredName,omitempty"`
	// List of social network profiles.
	SocialNetwork []SocialNetwork `json:"socialNetwork,omitempty"`
	// List of profiles this user has in different datasources / tools that they use.
	DatasourceProfile []DatasourceProfile  `json:"datasourceProfile,omitempty"`
	QuerySuggestions  *QuerySuggestionList `json:"querySuggestions,omitempty"`
	// List of people and distances to those people from this person. Optionally with metadata.
	PeopleDistance []PersonDistance `json:"peopleDistance,omitempty"`
	// Information regarding the invite status of a person.
	InviteInfo *InviteInfo `json:"inviteInfo,omitempty"`
	// Whether the user has signed into Glean at least once.
	IsSignedUp *bool `json:"isSignedUp,omitempty"`
	// The last time the user has used the Glean extension in ISO 8601 format.
	LastExtensionUse *time.Time `json:"lastExtensionUse,omitempty"`
	// Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
	// When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
	Permissions *Permissions `json:"permissions,omitempty"`
	// User customizable fields for additional people information.
	CustomFields []CustomFieldData `json:"customFields,omitempty"`
	// The logging id of the person used in scrubbed logs, tracking GA metrics.
	LoggingID *string `json:"loggingId,omitempty"`
	// Percentage of the company that started strictly after this person. Between [0,100).
	StartDatePercentile *float32 `json:"startDatePercentile,omitempty"`
	// Intervals of busy time for this person, along with the type of event they're busy with.
	BusyEvents []AnonymousEvent `json:"busyEvents,omitempty"`
	// flag settings to indicate user profile settings for certain items
	ProfileBoolSettings map[string]bool `json:"profileBoolSettings,omitempty"`
	// The badges that a user has earned over their lifetime.
	Badges []Badge `json:"badges,omitempty"`
	// Whether this person is a "root" node in their organization's hierarchy.
	IsOrgRoot *bool `json:"isOrgRoot,omitempty"`
}

func (p PersonMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonMetadata) GetType() *PersonMetadataType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PersonMetadata) GetFirstName() *string {
	if o == nil {
		return nil
	}
	return o.FirstName
}

func (o *PersonMetadata) GetLastName() *string {
	if o == nil {
		return nil
	}
	return o.LastName
}

func (o *PersonMetadata) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *PersonMetadata) GetBusinessUnit() *string {
	if o == nil {
		return nil
	}
	return o.BusinessUnit
}

func (o *PersonMetadata) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *PersonMetadata) GetTeams() []PersonTeam {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *PersonMetadata) GetDepartmentCount() *int64 {
	if o == nil {
		return nil
	}
	return o.DepartmentCount
}

func (o *PersonMetadata) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *PersonMetadata) GetAliasEmails() []string {
	if o == nil {
		return nil
	}
	return o.AliasEmails
}

func (o *PersonMetadata) GetLocation() *string {
	if o == nil {
		return nil
	}
	return o.Location
}

func (o *PersonMetadata) GetStructuredLocation() *StructuredLocation {
	if o == nil {
		return nil
	}
	return o.StructuredLocation
}

func (o *PersonMetadata) GetExternalProfileLink() *string {
	if o == nil {
		return nil
	}
	return o.ExternalProfileLink
}

func (o *PersonMetadata) GetManager() *Person {
	if o == nil {
		return nil
	}
	return o.Manager
}

func (o *PersonMetadata) GetManagementChain() []Person {
	if o == nil {
		return nil
	}
	return o.ManagementChain
}

func (o *PersonMetadata) GetPhone() *string {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *PersonMetadata) GetTimezone() *string {
	if o == nil {
		return nil
	}
	return o.Timezone
}

func (o *PersonMetadata) GetTimezoneOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.TimezoneOffset
}

func (o *PersonMetadata) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *PersonMetadata) GetUneditedPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.UneditedPhotoURL
}

func (o *PersonMetadata) GetBannerURL() *string {
	if o == nil {
		return nil
	}
	return o.BannerURL
}

func (o *PersonMetadata) GetReports() []Person {
	if o == nil {
		return nil
	}
	return o.Reports
}

func (o *PersonMetadata) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *PersonMetadata) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *PersonMetadata) GetBio() *string {
	if o == nil {
		return nil
	}
	return o.Bio
}

func (o *PersonMetadata) GetPronoun() *string {
	if o == nil {
		return nil
	}
	return o.Pronoun
}

func (o *PersonMetadata) GetOrgSizeCount() *int64 {
	if o == nil {
		return nil
	}
	return o.OrgSizeCount
}

func (o *PersonMetadata) GetDirectReportsCount() *int64 {
	if o == nil {
		return nil
	}
	return o.DirectReportsCount
}

func (o *PersonMetadata) GetPreferredName() *string {
	if o == nil {
		return nil
	}
	return o.PreferredName
}

func (o *PersonMetadata) GetSocialNetwork() []SocialNetwork {
	if o == nil {
		return nil
	}
	return o.SocialNetwork
}

func (o *PersonMetadata) GetDatasourceProfile() []DatasourceProfile {
	if o == nil {
		return nil
	}
	return o.DatasourceProfile
}

func (o *PersonMetadata) GetQuerySuggestions() *QuerySuggestionList {
	if o == nil {
		return nil
	}
	return o.QuerySuggestions
}

func (o *PersonMetadata) GetPeopleDistance() []PersonDistance {
	if o == nil {
		return nil
	}
	return o.PeopleDistance
}

func (o *PersonMetadata) GetInviteInfo() *InviteInfo {
	if o == nil {
		return nil
	}
	return o.InviteInfo
}

func (o *PersonMetadata) GetIsSignedUp() *bool {
	if o == nil {
		return nil
	}
	return o.IsSignedUp
}

func (o *PersonMetadata) GetLastExtensionUse() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastExtensionUse
}

func (o *PersonMetadata) GetPermissions() *Permissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *PersonMetadata) GetCustomFields() []CustomFieldData {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *PersonMetadata) GetLoggingID() *string {
	if o == nil {
		return nil
	}
	return o.LoggingID
}

func (o *PersonMetadata) GetStartDatePercentile() *float32 {
	if o == nil {
		return nil
	}
	return o.StartDatePercentile
}

func (o *PersonMetadata) GetBusyEvents() []AnonymousEvent {
	if o == nil {
		return nil
	}
	return o.BusyEvents
}

func (o *PersonMetadata) GetProfileBoolSettings() map[string]bool {
	if o == nil {
		return nil
	}
	return o.ProfileBoolSettings
}

func (o *PersonMetadata) GetBadges() []Badge {
	if o == nil {
		return nil
	}
	return o.Badges
}

func (o *PersonMetadata) GetIsOrgRoot() *bool {
	if o == nil {
		return nil
	}
	return o.IsOrgRoot
}
