// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// PersonToTeamRelationshipRelationship - The team member's relationship to the team. This defaults to MEMBER if not set.
type PersonToTeamRelationshipRelationship string

const (
	PersonToTeamRelationshipRelationshipMember         PersonToTeamRelationshipRelationship = "MEMBER"
	PersonToTeamRelationshipRelationshipManager        PersonToTeamRelationshipRelationship = "MANAGER"
	PersonToTeamRelationshipRelationshipLead           PersonToTeamRelationshipRelationship = "LEAD"
	PersonToTeamRelationshipRelationshipPointOfContact PersonToTeamRelationshipRelationship = "POINT_OF_CONTACT"
	PersonToTeamRelationshipRelationshipOther          PersonToTeamRelationshipRelationship = "OTHER"
)

func (e PersonToTeamRelationshipRelationship) ToPointer() *PersonToTeamRelationshipRelationship {
	return &e
}
func (e *PersonToTeamRelationshipRelationship) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MEMBER":
		fallthrough
	case "MANAGER":
		fallthrough
	case "LEAD":
		fallthrough
	case "POINT_OF_CONTACT":
		fallthrough
	case "OTHER":
		*e = PersonToTeamRelationshipRelationship(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PersonToTeamRelationshipRelationship: %v", v)
	}
}

// PersonToTeamRelationship - Metadata about the relationship of a person to a team.
type PersonToTeamRelationship struct {
	Person Person `json:"person"`
	// The team member's relationship to the team. This defaults to MEMBER if not set.
	Relationship *PersonToTeamRelationshipRelationship `default:"MEMBER" json:"relationship"`
	// Displayed name for the relationship if relationship is set to `OTHER`.
	CustomRelationshipStr *string `json:"customRelationshipStr,omitempty"`
	// The team member's start date
	JoinDate *time.Time `json:"joinDate,omitempty"`
}

func (p PersonToTeamRelationship) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PersonToTeamRelationship) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PersonToTeamRelationship) GetPerson() Person {
	if o == nil {
		return Person{}
	}
	return o.Person
}

func (o *PersonToTeamRelationship) GetRelationship() *PersonToTeamRelationshipRelationship {
	if o == nil {
		return nil
	}
	return o.Relationship
}

func (o *PersonToTeamRelationship) GetCustomRelationshipStr() *string {
	if o == nil {
		return nil
	}
	return o.CustomRelationshipStr
}

func (o *PersonToTeamRelationship) GetJoinDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.JoinDate
}
