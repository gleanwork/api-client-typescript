// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// PropertyType - The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
type PropertyType string

const (
	PropertyTypeText          PropertyType = "TEXT"
	PropertyTypeDate          PropertyType = "DATE"
	PropertyTypeInt           PropertyType = "INT"
	PropertyTypeUserid        PropertyType = "USERID"
	PropertyTypePicklist      PropertyType = "PICKLIST"
	PropertyTypeTextlist      PropertyType = "TEXTLIST"
	PropertyTypeMultipicklist PropertyType = "MULTIPICKLIST"
)

func (e PropertyType) ToPointer() *PropertyType {
	return &e
}
func (e *PropertyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TEXT":
		fallthrough
	case "DATE":
		fallthrough
	case "INT":
		fallthrough
	case "USERID":
		fallthrough
	case "PICKLIST":
		fallthrough
	case "TEXTLIST":
		fallthrough
	case "MULTIPICKLIST":
		*e = PropertyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyType: %v", v)
	}
}

type UIOptions string

const (
	UIOptionsNone         UIOptions = "NONE"
	UIOptionsSearchResult UIOptions = "SEARCH_RESULT"
	UIOptionsDocHovercard UIOptions = "DOC_HOVERCARD"
)

func (e UIOptions) ToPointer() *UIOptions {
	return &e
}
func (e *UIOptions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "SEARCH_RESULT":
		fallthrough
	case "DOC_HOVERCARD":
		*e = UIOptions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptions: %v", v)
	}
}

type PropertyDefinition struct {
	// The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
	Name *string `json:"name,omitempty"`
	// The user friendly label for the property.
	DisplayLabel *string `json:"displayLabel,omitempty"`
	// The user friendly label for the property that will be used if a plural context.
	DisplayLabelPlural *string `json:"displayLabelPlural,omitempty"`
	// The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
	PropertyType *PropertyType `json:"propertyType,omitempty"`
	UIOptions    *UIOptions    `json:"uiOptions,omitempty"`
	// If true then the property will not show up as a facet in the UI.
	HideUIFacet *bool `json:"hideUiFacet,omitempty"`
	// Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
	UIFacetOrder *int64 `json:"uiFacetOrder,omitempty"`
	// If true then the property will not be indexed for retrieval and ranking.
	SkipIndexing *bool `json:"skipIndexing,omitempty"`
	// The unique identifier of the `PropertyGroup` to which this property belongs.
	Group *string `json:"group,omitempty"`
}

func (o *PropertyDefinition) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PropertyDefinition) GetDisplayLabel() *string {
	if o == nil {
		return nil
	}
	return o.DisplayLabel
}

func (o *PropertyDefinition) GetDisplayLabelPlural() *string {
	if o == nil {
		return nil
	}
	return o.DisplayLabelPlural
}

func (o *PropertyDefinition) GetPropertyType() *PropertyType {
	if o == nil {
		return nil
	}
	return o.PropertyType
}

func (o *PropertyDefinition) GetUIOptions() *UIOptions {
	if o == nil {
		return nil
	}
	return o.UIOptions
}

func (o *PropertyDefinition) GetHideUIFacet() *bool {
	if o == nil {
		return nil
	}
	return o.HideUIFacet
}

func (o *PropertyDefinition) GetUIFacetOrder() *int64 {
	if o == nil {
		return nil
	}
	return o.UIFacetOrder
}

func (o *PropertyDefinition) GetSkipIndexing() *bool {
	if o == nil {
		return nil
	}
	return o.SkipIndexing
}

func (o *PropertyDefinition) GetGroup() *string {
	if o == nil {
		return nil
	}
	return o.Group
}
