// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type RecommendationsRequestOptions struct {
	// Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
	DatasourceFilter *string `json:"datasourceFilter,omitempty"`
	// Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
	DatasourcesFilter []string `json:"datasourcesFilter,omitempty"`
	// A list of facet filter sets that will be OR'ed together.
	FacetFilterSets []FacetFilterSet `json:"facetFilterSets,omitempty"`
	Context         *Document        `json:"context,omitempty"`
	// The types of prominence wanted in results returned. Default is any type.
	ResultProminence []SearchResultProminenceEnum `json:"resultProminence,omitempty"`
}

func (o *RecommendationsRequestOptions) GetDatasourceFilter() *string {
	if o == nil {
		return nil
	}
	return o.DatasourceFilter
}

func (o *RecommendationsRequestOptions) GetDatasourcesFilter() []string {
	if o == nil {
		return nil
	}
	return o.DatasourcesFilter
}

func (o *RecommendationsRequestOptions) GetFacetFilterSets() []FacetFilterSet {
	if o == nil {
		return nil
	}
	return o.FacetFilterSets
}

func (o *RecommendationsRequestOptions) GetContext() *Document {
	if o == nil {
		return nil
	}
	return o.Context
}

func (o *RecommendationsRequestOptions) GetResultProminence() []SearchResultProminenceEnum {
	if o == nil {
		return nil
	}
	return o.ResultProminence
}
