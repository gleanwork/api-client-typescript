// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Relation - How this document relates to the including entity.
type Relation string

const (
	RelationAttachment           Relation = "ATTACHMENT"
	RelationCanonical            Relation = "CANONICAL"
	RelationCase                 Relation = "CASE"
	RelationContact              Relation = "CONTACT"
	RelationConversationMessages Relation = "CONVERSATION_MESSAGES"
	RelationExpert               Relation = "EXPERT"
	RelationFrom                 Relation = "FROM"
	RelationHighlight            Relation = "HIGHLIGHT"
	RelationOpportunity          Relation = "OPPORTUNITY"
	RelationRecent               Relation = "RECENT"
	RelationSource               Relation = "SOURCE"
	RelationTicket               Relation = "TICKET"
	RelationTranscript           Relation = "TRANSCRIPT"
	RelationWith                 Relation = "WITH"
)

func (e Relation) ToPointer() *Relation {
	return &e
}
func (e *Relation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ATTACHMENT":
		fallthrough
	case "CANONICAL":
		fallthrough
	case "CASE":
		fallthrough
	case "CONTACT":
		fallthrough
	case "CONVERSATION_MESSAGES":
		fallthrough
	case "EXPERT":
		fallthrough
	case "FROM":
		fallthrough
	case "HIGHLIGHT":
		fallthrough
	case "OPPORTUNITY":
		fallthrough
	case "RECENT":
		fallthrough
	case "SOURCE":
		fallthrough
	case "TICKET":
		fallthrough
	case "TRANSCRIPT":
		fallthrough
	case "WITH":
		*e = Relation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Relation: %v", v)
	}
}

type RelatedDocuments struct {
	// How this document relates to the including entity.
	Relation *Relation `json:"relation,omitempty"`
	// Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
	AssociatedEntityID *string          `json:"associatedEntityId,omitempty"`
	QuerySuggestion    *QuerySuggestion `json:"querySuggestion,omitempty"`
	// A truncated list of documents with this relation. TO BE DEPRECATED.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Documents []Document `json:"documents,omitempty"`
	// A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
	Results []SearchResult `json:"results,omitempty"`
}

func (o *RelatedDocuments) GetRelation() *Relation {
	if o == nil {
		return nil
	}
	return o.Relation
}

func (o *RelatedDocuments) GetAssociatedEntityID() *string {
	if o == nil {
		return nil
	}
	return o.AssociatedEntityID
}

func (o *RelatedDocuments) GetQuerySuggestion() *QuerySuggestion {
	if o == nil {
		return nil
	}
	return o.QuerySuggestion
}

func (o *RelatedDocuments) GetDocuments() []Document {
	if o == nil {
		return nil
	}
	return o.Documents
}

func (o *RelatedDocuments) GetResults() []SearchResult {
	if o == nil {
		return nil
	}
	return o.Results
}
