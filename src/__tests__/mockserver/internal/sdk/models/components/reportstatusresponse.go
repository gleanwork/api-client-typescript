// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ReportStatusResponseStatus string

const (
	ReportStatusResponseStatusPending    ReportStatusResponseStatus = "PENDING"
	ReportStatusResponseStatusSuccess    ReportStatusResponseStatus = "SUCCESS"
	ReportStatusResponseStatusFailure    ReportStatusResponseStatus = "FAILURE"
	ReportStatusResponseStatusCancelled  ReportStatusResponseStatus = "CANCELLED"
	ReportStatusResponseStatusCancelling ReportStatusResponseStatus = "CANCELLING"
	ReportStatusResponseStatusActive     ReportStatusResponseStatus = "ACTIVE"
)

func (e ReportStatusResponseStatus) ToPointer() *ReportStatusResponseStatus {
	return &e
}
func (e *ReportStatusResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "SUCCESS":
		fallthrough
	case "FAILURE":
		fallthrough
	case "CANCELLED":
		fallthrough
	case "CANCELLING":
		fallthrough
	case "ACTIVE":
		*e = ReportStatusResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportStatusResponseStatus: %v", v)
	}
}

type ReportStatusResponse struct {
	Status *ReportStatusResponseStatus `json:"status,omitempty"`
	// The timestamp at which the report's run/scan began.
	StartTime *string `json:"startTime,omitempty"`
}

func (o *ReportStatusResponse) GetStatus() *ReportStatusResponseStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ReportStatusResponse) GetStartTime() *string {
	if o == nil {
		return nil
	}
	return o.StartTime
}
