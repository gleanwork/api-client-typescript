// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type SearchRequest struct {
	// The ISO 8601 timestamp associated with the client request.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
	TrackingToken  *string      `json:"trackingToken,omitempty"`
	SessionInfo    *SessionInfo `json:"sessionInfo,omitempty"`
	SourceDocument *Document    `json:"sourceDocument,omitempty"`
	// Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
	PageSize *int64 `json:"pageSize,omitempty"`
	// Hint to the server about how many characters long a snippet may be. Server may return less or more.
	MaxSnippetSize *int64 `json:"maxSnippetSize,omitempty"`
	// The search terms.
	Query string `json:"query"`
	// Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
	Cursor *string `json:"cursor,omitempty"`
	// The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
	ResultTabIds   []string                   `json:"resultTabIds,omitempty"`
	InputDetails   *SearchRequestInputDetails `json:"inputDetails,omitempty"`
	RequestOptions *SearchRequestOptions      `json:"requestOptions,omitempty"`
	// Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
	TimeoutMillis *int64 `json:"timeoutMillis,omitempty"`
	// People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.
	People []Person `json:"people,omitempty"`
	// Whether or not to disable spellcheck.
	DisableSpellcheck *bool `json:"disableSpellcheck,omitempty"`
}

func (s SearchRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SearchRequest) GetTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.Timestamp
}

func (o *SearchRequest) GetTrackingToken() *string {
	if o == nil {
		return nil
	}
	return o.TrackingToken
}

func (o *SearchRequest) GetSessionInfo() *SessionInfo {
	if o == nil {
		return nil
	}
	return o.SessionInfo
}

func (o *SearchRequest) GetSourceDocument() *Document {
	if o == nil {
		return nil
	}
	return o.SourceDocument
}

func (o *SearchRequest) GetPageSize() *int64 {
	if o == nil {
		return nil
	}
	return o.PageSize
}

func (o *SearchRequest) GetMaxSnippetSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxSnippetSize
}

func (o *SearchRequest) GetQuery() string {
	if o == nil {
		return ""
	}
	return o.Query
}

func (o *SearchRequest) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *SearchRequest) GetResultTabIds() []string {
	if o == nil {
		return nil
	}
	return o.ResultTabIds
}

func (o *SearchRequest) GetInputDetails() *SearchRequestInputDetails {
	if o == nil {
		return nil
	}
	return o.InputDetails
}

func (o *SearchRequest) GetRequestOptions() *SearchRequestOptions {
	if o == nil {
		return nil
	}
	return o.RequestOptions
}

func (o *SearchRequest) GetTimeoutMillis() *int64 {
	if o == nil {
		return nil
	}
	return o.TimeoutMillis
}

func (o *SearchRequest) GetPeople() []Person {
	if o == nil {
		return nil
	}
	return o.People
}

func (o *SearchRequest) GetDisableSpellcheck() *bool {
	if o == nil {
		return nil
	}
	return o.DisableSpellcheck
}
