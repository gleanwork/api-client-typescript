// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type SearchResponse struct {
	// A token that should be passed for additional requests related to this request (such as more results requests).
	TrackingToken      *string            `json:"trackingToken,omitempty"`
	SessionInfo        *SessionInfo       `json:"sessionInfo,omitempty"`
	Results            []SearchResult     `json:"results,omitempty"`
	StructuredResults  []StructuredResult `json:"structuredResults,omitempty"`
	GeneratedQnaResult *GeneratedQna      `json:"generatedQnaResult,omitempty"`
	ErrorInfo          *ErrorInfo         `json:"errorInfo,omitempty"`
	// A platform-generated request ID to correlate backend logs.
	RequestID *string `json:"requestID,omitempty"`
	// Time in milliseconds the backend took to respond to the request.
	BackendTimeMillis *int64 `json:"backendTimeMillis,omitempty"`
	// List of experiment ids for the corresponding request.
	ExperimentIds []int64                 `json:"experimentIds,omitempty"`
	Metadata      *SearchResponseMetadata `json:"metadata,omitempty"`
	FacetResults  []FacetResult           `json:"facetResults,omitempty"`
	// All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
	ResultTabs []ResultTab `json:"resultTabs,omitempty"`
	// The unique IDs of the result tabs to which this response belongs.
	ResultTabIds       []string            `json:"resultTabIds,omitempty"`
	ResultsDescription *ResultsDescription `json:"resultsDescription,omitempty"`
	// The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
	RewrittenFacetFilters []FacetFilter `json:"rewrittenFacetFilters,omitempty"`
	// Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
	Cursor *string `json:"cursor,omitempty"`
	// Whether more results are available. Use cursor to retrieve them.
	HasMoreResults *bool `json:"hasMoreResults,omitempty"`
}

func (o *SearchResponse) GetTrackingToken() *string {
	if o == nil {
		return nil
	}
	return o.TrackingToken
}

func (o *SearchResponse) GetSessionInfo() *SessionInfo {
	if o == nil {
		return nil
	}
	return o.SessionInfo
}

func (o *SearchResponse) GetResults() []SearchResult {
	if o == nil {
		return nil
	}
	return o.Results
}

func (o *SearchResponse) GetStructuredResults() []StructuredResult {
	if o == nil {
		return nil
	}
	return o.StructuredResults
}

func (o *SearchResponse) GetGeneratedQnaResult() *GeneratedQna {
	if o == nil {
		return nil
	}
	return o.GeneratedQnaResult
}

func (o *SearchResponse) GetErrorInfo() *ErrorInfo {
	if o == nil {
		return nil
	}
	return o.ErrorInfo
}

func (o *SearchResponse) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *SearchResponse) GetBackendTimeMillis() *int64 {
	if o == nil {
		return nil
	}
	return o.BackendTimeMillis
}

func (o *SearchResponse) GetExperimentIds() []int64 {
	if o == nil {
		return nil
	}
	return o.ExperimentIds
}

func (o *SearchResponse) GetMetadata() *SearchResponseMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *SearchResponse) GetFacetResults() []FacetResult {
	if o == nil {
		return nil
	}
	return o.FacetResults
}

func (o *SearchResponse) GetResultTabs() []ResultTab {
	if o == nil {
		return nil
	}
	return o.ResultTabs
}

func (o *SearchResponse) GetResultTabIds() []string {
	if o == nil {
		return nil
	}
	return o.ResultTabIds
}

func (o *SearchResponse) GetResultsDescription() *ResultsDescription {
	if o == nil {
		return nil
	}
	return o.ResultsDescription
}

func (o *SearchResponse) GetRewrittenFacetFilters() []FacetFilter {
	if o == nil {
		return nil
	}
	return o.RewrittenFacetFilters
}

func (o *SearchResponse) GetCursor() *string {
	if o == nil {
		return nil
	}
	return o.Cursor
}

func (o *SearchResponse) GetHasMoreResults() *bool {
	if o == nil {
		return nil
	}
	return o.HasMoreResults
}
