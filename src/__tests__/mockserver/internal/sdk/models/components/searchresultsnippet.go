// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type SearchResultSnippet struct {
	// A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
	Snippet string `json:"snippet"`
	// The mime type of the snippets, currently either text/plain or text/html.
	MimeType *string `json:"mimeType,omitempty"`
	// A matching snippet from the document with no highlights.
	Text *string `json:"text,omitempty"`
	// Used for sorting based off the snippet's location within all_snippetable_text
	SnippetTextOrdering *int64 `json:"snippetTextOrdering,omitempty"`
	// The bolded ranges within text.
	Ranges []TextRange `json:"ranges,omitempty"`
	// A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
	URL *string `json:"url,omitempty"`
}

func (o *SearchResultSnippet) GetSnippet() string {
	if o == nil {
		return ""
	}
	return o.Snippet
}

func (o *SearchResultSnippet) GetMimeType() *string {
	if o == nil {
		return nil
	}
	return o.MimeType
}

func (o *SearchResultSnippet) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *SearchResultSnippet) GetSnippetTextOrdering() *int64 {
	if o == nil {
		return nil
	}
	return o.SnippetTextOrdering
}

func (o *SearchResultSnippet) GetRanges() []TextRange {
	if o == nil {
		return nil
	}
	return o.Ranges
}

func (o *SearchResultSnippet) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}
