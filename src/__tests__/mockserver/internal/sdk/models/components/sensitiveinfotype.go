// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// LikelihoodThreshold
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type LikelihoodThreshold string

const (
	LikelihoodThresholdLikely     LikelihoodThreshold = "LIKELY"
	LikelihoodThresholdVeryLikely LikelihoodThreshold = "VERY_LIKELY"
)

func (e LikelihoodThreshold) ToPointer() *LikelihoodThreshold {
	return &e
}
func (e *LikelihoodThreshold) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LIKELY":
		fallthrough
	case "VERY_LIKELY":
		*e = LikelihoodThreshold(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LikelihoodThreshold: %v", v)
	}
}

type SensitiveInfoType struct {
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	LikelihoodThreshold *LikelihoodThreshold `json:"likelihoodThreshold,omitempty"`
	// Text representation of an info-type to scan for.
	InfoType *string `json:"infoType,omitempty"`
}

func (o *SensitiveInfoType) GetLikelihoodThreshold() *LikelihoodThreshold {
	if o == nil {
		return nil
	}
	return o.LikelihoodThreshold
}

func (o *SensitiveInfoType) GetInfoType() *string {
	if o == nil {
		return nil
	}
	return o.InfoType
}
