// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"mockserver/internal/sdk/utils"
	"time"
)

type SessionInfo struct {
	// A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
	SessionTrackingToken *string `json:"sessionTrackingToken,omitempty"`
	// A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
	TabID *string `json:"tabId,omitempty"`
	// The last time the server saw this token.
	LastSeen *time.Time `json:"lastSeen,omitempty"`
	// The last query seen by the server.
	LastQuery *string `json:"lastQuery,omitempty"`
}

func (s SessionInfo) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SessionInfo) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SessionInfo) GetSessionTrackingToken() *string {
	if o == nil {
		return nil
	}
	return o.SessionTrackingToken
}

func (o *SessionInfo) GetTabID() *string {
	if o == nil {
		return nil
	}
	return o.TabID
}

func (o *SessionInfo) GetLastSeen() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastSeen
}

func (o *SessionInfo) GetLastQuery() *string {
	if o == nil {
		return nil
	}
	return o.LastQuery
}
