// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type ShortcutErrorErrorType string

const (
	ShortcutErrorErrorTypeNoPermission     ShortcutErrorErrorType = "NO_PERMISSION"
	ShortcutErrorErrorTypeInvalidID        ShortcutErrorErrorType = "INVALID_ID"
	ShortcutErrorErrorTypeExistingShortcut ShortcutErrorErrorType = "EXISTING_SHORTCUT"
	ShortcutErrorErrorTypeInvalidChars     ShortcutErrorErrorType = "INVALID_CHARS"
)

func (e ShortcutErrorErrorType) ToPointer() *ShortcutErrorErrorType {
	return &e
}
func (e *ShortcutErrorErrorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NO_PERMISSION":
		fallthrough
	case "INVALID_ID":
		fallthrough
	case "EXISTING_SHORTCUT":
		fallthrough
	case "INVALID_CHARS":
		*e = ShortcutErrorErrorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShortcutErrorErrorType: %v", v)
	}
}

type ShortcutError struct {
	ErrorType *ShortcutErrorErrorType `json:"errorType,omitempty"`
}

func (o *ShortcutError) GetErrorType() *ShortcutErrorErrorType {
	if o == nil {
		return nil
	}
	return o.ErrorType
}
