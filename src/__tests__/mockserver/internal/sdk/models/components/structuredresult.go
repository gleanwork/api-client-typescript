// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Prominence - The level of visual distinction that should be given to a result.
type Prominence string

const (
	ProminenceHero     Prominence = "HERO"
	ProminencePromoted Prominence = "PROMOTED"
	ProminenceStandard Prominence = "STANDARD"
)

func (e Prominence) ToPointer() *Prominence {
	return &e
}
func (e *Prominence) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HERO":
		fallthrough
	case "PROMOTED":
		fallthrough
	case "STANDARD":
		*e = Prominence(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Prominence: %v", v)
	}
}

// StructuredResultSource - Source context for this result. Possible values depend on the result type.
type StructuredResultSource string

const (
	StructuredResultSourceExpertDetection StructuredResultSource = "EXPERT_DETECTION"
	StructuredResultSourceEntityNlq       StructuredResultSource = "ENTITY_NLQ"
)

func (e StructuredResultSource) ToPointer() *StructuredResultSource {
	return &e
}
func (e *StructuredResultSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EXPERT_DETECTION":
		fallthrough
	case "ENTITY_NLQ":
		*e = StructuredResultSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StructuredResultSource: %v", v)
	}
}

// StructuredResult - A single object that can support any object in the work graph. Only a single object will be populated.
type StructuredResult struct {
	Document         *Document            `json:"document,omitempty"`
	Person           *Person              `json:"person,omitempty"`
	Customer         *Customer            `json:"customer,omitempty"`
	Team             *Team                `json:"team,omitempty"`
	CustomEntity     *CustomEntity        `json:"customEntity,omitempty"`
	Answer           *Answer              `json:"answer,omitempty"`
	ExtractedQnA     *ExtractedQnA        `json:"extractedQnA,omitempty"`
	Meeting          *Meeting             `json:"meeting,omitempty"`
	App              *AppResult           `json:"app,omitempty"`
	Collection       *Collection          `json:"collection,omitempty"`
	AnswerBoard      *AnswerBoard         `json:"answerBoard,omitempty"`
	Code             *Code                `json:"code,omitempty"`
	Shortcut         *Shortcut            `json:"shortcut,omitempty"`
	QuerySuggestions *QuerySuggestionList `json:"querySuggestions,omitempty"`
	// A list of documents related to this structured result.
	RelatedDocuments []RelatedDocuments `json:"relatedDocuments,omitempty"`
	RelatedQuestion  *RelatedQuestion   `json:"relatedQuestion,omitempty"`
	// A disambiguation between multiple entities with the same name
	Disambiguation *Disambiguation `json:"disambiguation,omitempty"`
	// Any snippets associated to the populated object.
	Snippets []SearchResultSnippet `json:"snippets,omitempty"`
	// An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
	// The level of visual distinction that should be given to a result.
	Prominence *Prominence `json:"prominence,omitempty"`
	// Source context for this result. Possible values depend on the result type.
	Source *StructuredResultSource `json:"source,omitempty"`
}

func (o *StructuredResult) GetDocument() *Document {
	if o == nil {
		return nil
	}
	return o.Document
}

func (o *StructuredResult) GetPerson() *Person {
	if o == nil {
		return nil
	}
	return o.Person
}

func (o *StructuredResult) GetCustomer() *Customer {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *StructuredResult) GetTeam() *Team {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *StructuredResult) GetCustomEntity() *CustomEntity {
	if o == nil {
		return nil
	}
	return o.CustomEntity
}

func (o *StructuredResult) GetAnswer() *Answer {
	if o == nil {
		return nil
	}
	return o.Answer
}

func (o *StructuredResult) GetExtractedQnA() *ExtractedQnA {
	if o == nil {
		return nil
	}
	return o.ExtractedQnA
}

func (o *StructuredResult) GetMeeting() *Meeting {
	if o == nil {
		return nil
	}
	return o.Meeting
}

func (o *StructuredResult) GetApp() *AppResult {
	if o == nil {
		return nil
	}
	return o.App
}

func (o *StructuredResult) GetCollection() *Collection {
	if o == nil {
		return nil
	}
	return o.Collection
}

func (o *StructuredResult) GetAnswerBoard() *AnswerBoard {
	if o == nil {
		return nil
	}
	return o.AnswerBoard
}

func (o *StructuredResult) GetCode() *Code {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *StructuredResult) GetShortcut() *Shortcut {
	if o == nil {
		return nil
	}
	return o.Shortcut
}

func (o *StructuredResult) GetQuerySuggestions() *QuerySuggestionList {
	if o == nil {
		return nil
	}
	return o.QuerySuggestions
}

func (o *StructuredResult) GetRelatedDocuments() []RelatedDocuments {
	if o == nil {
		return nil
	}
	return o.RelatedDocuments
}

func (o *StructuredResult) GetRelatedQuestion() *RelatedQuestion {
	if o == nil {
		return nil
	}
	return o.RelatedQuestion
}

func (o *StructuredResult) GetDisambiguation() *Disambiguation {
	if o == nil {
		return nil
	}
	return o.Disambiguation
}

func (o *StructuredResult) GetSnippets() []SearchResultSnippet {
	if o == nil {
		return nil
	}
	return o.Snippets
}

func (o *StructuredResult) GetTrackingToken() *string {
	if o == nil {
		return nil
	}
	return o.TrackingToken
}

func (o *StructuredResult) GetProminence() *Prominence {
	if o == nil {
		return nil
	}
	return o.Prominence
}

func (o *StructuredResult) GetSource() *StructuredResultSource {
	if o == nil {
		return nil
	}
	return o.Source
}
