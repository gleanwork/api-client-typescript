// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// TeamStatus - whether this team is fully processed or there are still unprocessed operations that'll affect it
type TeamStatus string

const (
	TeamStatusProcessed         TeamStatus = "PROCESSED"
	TeamStatusQueuedForCreation TeamStatus = "QUEUED_FOR_CREATION"
	TeamStatusQueuedForDeletion TeamStatus = "QUEUED_FOR_DELETION"
)

func (e TeamStatus) ToPointer() *TeamStatus {
	return &e
}
func (e *TeamStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSED":
		fallthrough
	case "QUEUED_FOR_CREATION":
		fallthrough
	case "QUEUED_FOR_DELETION":
		*e = TeamStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamStatus: %v", v)
	}
}

type Team struct {
	// A list of objects related to a source object.
	RelatedObjects map[string]RelatedObjectEdge `json:"relatedObjects,omitempty"`
	Permissions    *ObjectPermissions           `json:"permissions,omitempty"`
	// Unique identifier
	ID string `json:"id"`
	// Team name
	Name string `json:"name"`
	// A description of the team
	Description *string `json:"description,omitempty"`
	// Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
	BusinessUnit *string `json:"businessUnit,omitempty"`
	// An organizational unit where everyone has a similar task, e.g. `Engineering`.
	Department *string `json:"department,omitempty"`
	// A link to the team's photo.
	PhotoURL *string `json:"photoUrl,omitempty"`
	// A link to the team's banner photo.
	BannerURL *string `json:"bannerUrl,omitempty"`
	// Link to a team page on the internet or your company's intranet
	ExternalLink *string `json:"externalLink,omitempty"`
	// The members on this team
	Members []PersonToTeamRelationship `json:"members,omitempty"`
	// Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
	MemberCount *int64 `json:"memberCount,omitempty"`
	// The emails for this team
	Emails []TeamEmail `json:"emails,omitempty"`
	// Customizable fields for additional team information.
	CustomFields []CustomFieldData `json:"customFields,omitempty"`
	// The datasource profiles of the team
	DatasourceProfiles []DatasourceProfile `json:"datasourceProfiles,omitempty"`
	// the data source of the team, e.g. GDRIVE
	Datasource *string `json:"datasource,omitempty"`
	// For teams created from docs, the doc title. Otherwise empty.
	CreatedFrom *string `json:"createdFrom,omitempty"`
	// when this team was last updated.
	LastUpdatedAt *time.Time `json:"lastUpdatedAt,omitempty"`
	// whether this team is fully processed or there are still unprocessed operations that'll affect it
	Status *TeamStatus `default:"PROCESSED" json:"status"`
	// can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
	CanBeDeleted *bool `default:"true" json:"canBeDeleted"`
	// The logging id of the team used in scrubbed logs, client analytics, and metrics.
	LoggingID *string `json:"loggingId,omitempty"`
}

func (t Team) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Team) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Team) GetRelatedObjects() map[string]RelatedObjectEdge {
	if o == nil {
		return nil
	}
	return o.RelatedObjects
}

func (o *Team) GetPermissions() *ObjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *Team) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Team) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Team) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Team) GetBusinessUnit() *string {
	if o == nil {
		return nil
	}
	return o.BusinessUnit
}

func (o *Team) GetDepartment() *string {
	if o == nil {
		return nil
	}
	return o.Department
}

func (o *Team) GetPhotoURL() *string {
	if o == nil {
		return nil
	}
	return o.PhotoURL
}

func (o *Team) GetBannerURL() *string {
	if o == nil {
		return nil
	}
	return o.BannerURL
}

func (o *Team) GetExternalLink() *string {
	if o == nil {
		return nil
	}
	return o.ExternalLink
}

func (o *Team) GetMembers() []PersonToTeamRelationship {
	if o == nil {
		return nil
	}
	return o.Members
}

func (o *Team) GetMemberCount() *int64 {
	if o == nil {
		return nil
	}
	return o.MemberCount
}

func (o *Team) GetEmails() []TeamEmail {
	if o == nil {
		return nil
	}
	return o.Emails
}

func (o *Team) GetCustomFields() []CustomFieldData {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Team) GetDatasourceProfiles() []DatasourceProfile {
	if o == nil {
		return nil
	}
	return o.DatasourceProfiles
}

func (o *Team) GetDatasource() *string {
	if o == nil {
		return nil
	}
	return o.Datasource
}

func (o *Team) GetCreatedFrom() *string {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *Team) GetLastUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdatedAt
}

func (o *Team) GetStatus() *TeamStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Team) GetCanBeDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.CanBeDeleted
}

func (o *Team) GetLoggingID() *string {
	if o == nil {
		return nil
	}
	return o.LoggingID
}
