// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type TextRangeType string

const (
	TextRangeTypeBold     TextRangeType = "BOLD"
	TextRangeTypeCitation TextRangeType = "CITATION"
	TextRangeTypeLink     TextRangeType = "LINK"
)

func (e TextRangeType) ToPointer() *TextRangeType {
	return &e
}
func (e *TextRangeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOLD":
		fallthrough
	case "CITATION":
		fallthrough
	case "LINK":
		*e = TextRangeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextRangeType: %v", v)
	}
}

// TextRange - A subsection of a given string to which some special formatting should be applied.
type TextRange struct {
	// The inclusive start index of the range.
	StartIndex int64 `json:"startIndex"`
	// The exclusive end index of the range.
	EndIndex *int64         `json:"endIndex,omitempty"`
	Type     *TextRangeType `json:"type,omitempty"`
	// The URL associated with the range, if applicable. For example, the linked URL for a LINK range.
	URL      *string   `json:"url,omitempty"`
	Document *Document `json:"document,omitempty"`
}

func (o *TextRange) GetStartIndex() int64 {
	if o == nil {
		return 0
	}
	return o.StartIndex
}

func (o *TextRange) GetEndIndex() *int64 {
	if o == nil {
		return nil
	}
	return o.EndIndex
}

func (o *TextRange) GetType() *TextRangeType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *TextRange) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *TextRange) GetDocument() *Document {
	if o == nil {
		return nil
	}
	return o.Document
}
