// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ToolType - Type of tool (READ, WRITE)
type ToolType string

const (
	ToolTypeRead  ToolType = "READ"
	ToolTypeWrite ToolType = "WRITE"
)

func (e ToolType) ToPointer() *ToolType {
	return &e
}
func (e *ToolType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "READ":
		fallthrough
	case "WRITE":
		*e = ToolType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ToolType: %v", v)
	}
}

type Tool struct {
	// Type of tool (READ, WRITE)
	Type *ToolType `json:"type,omitempty"`
	// Unique identifier for the tool
	Name *string `json:"name,omitempty"`
	// Human-readable name
	DisplayName *string `json:"displayName,omitempty"`
	// LLM friendly description of the tool
	Description *string `json:"description,omitempty"`
	// The parameters for the tool. Each key is the name of the parameter and the value is the parameter object.
	Parameters map[string]ToolParameter `json:"parameters,omitempty"`
}

func (o *Tool) GetType() *ToolType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Tool) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Tool) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *Tool) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Tool) GetParameters() map[string]ToolParameter {
	if o == nil {
		return nil
	}
	return o.Parameters
}
