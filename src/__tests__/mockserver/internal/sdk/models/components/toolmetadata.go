// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// ToolMetadataType - The type of tool.
type ToolMetadataType string

const (
	ToolMetadataTypeRetrieval ToolMetadataType = "RETRIEVAL"
	ToolMetadataTypeAction    ToolMetadataType = "ACTION"
)

func (e ToolMetadataType) ToPointer() *ToolMetadataType {
	return &e
}
func (e *ToolMetadataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RETRIEVAL":
		fallthrough
	case "ACTION":
		*e = ToolMetadataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ToolMetadataType: %v", v)
	}
}

// KnowledgeType - Indicates the kind of knowledge a tool would access or modify.
type KnowledgeType string

const (
	KnowledgeTypeNeutralKnowledge KnowledgeType = "NEUTRAL_KNOWLEDGE"
	KnowledgeTypeCompanyKnowledge KnowledgeType = "COMPANY_KNOWLEDGE"
	KnowledgeTypeWorldKnowledge   KnowledgeType = "WORLD_KNOWLEDGE"
)

func (e KnowledgeType) ToPointer() *KnowledgeType {
	return &e
}
func (e *KnowledgeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NEUTRAL_KNOWLEDGE":
		fallthrough
	case "COMPANY_KNOWLEDGE":
		fallthrough
	case "WORLD_KNOWLEDGE":
		*e = KnowledgeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KnowledgeType: %v", v)
	}
}

// WriteActionType - Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action.
type WriteActionType string

const (
	WriteActionTypeRedirect  WriteActionType = "REDIRECT"
	WriteActionTypeExecution WriteActionType = "EXECUTION"
)

func (e WriteActionType) ToPointer() *WriteActionType {
	return &e
}
func (e *WriteActionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REDIRECT":
		fallthrough
	case "EXECUTION":
		*e = WriteActionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WriteActionType: %v", v)
	}
}

// AuthType - The type of authentication being used.
// Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
// 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
// 'OAUTH_USER' uses individual user tokens for external API calls.
// 'DWD' refers to domain wide delegation.
type AuthType string

const (
	AuthTypeNone       AuthType = "NONE"
	AuthTypeOauthUser  AuthType = "OAUTH_USER"
	AuthTypeOauthAdmin AuthType = "OAUTH_ADMIN"
	AuthTypeAPIKey     AuthType = "API_KEY"
	AuthTypeBasicAuth  AuthType = "BASIC_AUTH"
	AuthTypeDwd        AuthType = "DWD"
)

func (e AuthType) ToPointer() *AuthType {
	return &e
}
func (e *AuthType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "OAUTH_USER":
		fallthrough
	case "OAUTH_ADMIN":
		fallthrough
	case "API_KEY":
		fallthrough
	case "BASIC_AUTH":
		fallthrough
	case "DWD":
		*e = AuthType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthType: %v", v)
	}
}

// ToolMetadata - The manifest for a tool that can be used to augment Glean Assistant.
type ToolMetadata struct {
	// The type of tool.
	Type ToolMetadataType `json:"type"`
	// Unique identifier for the tool. Name should be understandable by the LLM, and will be used to invoke a tool.
	Name string `json:"name"`
	// Human understandable name of the tool. Max 50 characters.
	DisplayName string `json:"displayName"`
	// An opaque id which is unique identifier for the tool.
	ToolID *string `json:"toolId,omitempty"`
	// Description of the tool meant for a human.
	DisplayDescription string `json:"displayDescription"`
	// URL used to fetch the logo.
	LogoURL *string `json:"logoUrl,omitempty"`
	// Name of the generated object. This will be used to indicate to the end user what the generated object contains.
	ObjectName *string `json:"objectName,omitempty"`
	// Indicates the kind of knowledge a tool would access or modify.
	KnowledgeType *KnowledgeType `json:"knowledgeType,omitempty"`
	CreatedBy     *PersonObject  `json:"createdBy,omitempty"`
	LastUpdatedBy *PersonObject  `json:"lastUpdatedBy,omitempty"`
	// The time the tool was created in ISO format (ISO 8601)
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The time the tool was last updated in ISO format (ISO 8601)
	LastUpdatedAt *time.Time `json:"lastUpdatedAt,omitempty"`
	// Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action.
	WriteActionType *WriteActionType `json:"writeActionType,omitempty"`
	// The type of authentication being used.
	// Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
	// 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
	// 'OAUTH_USER' uses individual user tokens for external API calls.
	// 'DWD' refers to domain wide delegation.
	//
	AuthType *AuthType `json:"authType,omitempty"`
	// Config for tool's authentication method.
	Auth        *AuthConfig        `json:"auth,omitempty"`
	Permissions *ObjectPermissions `json:"permissions,omitempty"`
	// Usage instructions for the LLM to use this action.
	UsageInstructions *string `json:"usageInstructions,omitempty"`
	// Whether this action has been fully configured and validated.
	IsSetupFinished *bool `json:"isSetupFinished,omitempty"`
}

func (t ToolMetadata) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *ToolMetadata) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ToolMetadata) GetType() ToolMetadataType {
	if o == nil {
		return ToolMetadataType("")
	}
	return o.Type
}

func (o *ToolMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ToolMetadata) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *ToolMetadata) GetToolID() *string {
	if o == nil {
		return nil
	}
	return o.ToolID
}

func (o *ToolMetadata) GetDisplayDescription() string {
	if o == nil {
		return ""
	}
	return o.DisplayDescription
}

func (o *ToolMetadata) GetLogoURL() *string {
	if o == nil {
		return nil
	}
	return o.LogoURL
}

func (o *ToolMetadata) GetObjectName() *string {
	if o == nil {
		return nil
	}
	return o.ObjectName
}

func (o *ToolMetadata) GetKnowledgeType() *KnowledgeType {
	if o == nil {
		return nil
	}
	return o.KnowledgeType
}

func (o *ToolMetadata) GetCreatedBy() *PersonObject {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *ToolMetadata) GetLastUpdatedBy() *PersonObject {
	if o == nil {
		return nil
	}
	return o.LastUpdatedBy
}

func (o *ToolMetadata) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ToolMetadata) GetLastUpdatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastUpdatedAt
}

func (o *ToolMetadata) GetWriteActionType() *WriteActionType {
	if o == nil {
		return nil
	}
	return o.WriteActionType
}

func (o *ToolMetadata) GetAuthType() *AuthType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *ToolMetadata) GetAuth() *AuthConfig {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *ToolMetadata) GetPermissions() *ObjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *ToolMetadata) GetUsageInstructions() *string {
	if o == nil {
		return nil
	}
	return o.UsageInstructions
}

func (o *ToolMetadata) GetIsSetupFinished() *bool {
	if o == nil {
		return nil
	}
	return o.IsSetupFinished
}
