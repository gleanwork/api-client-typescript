// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ToolParameterType - Parameter type (string, number, boolean, object, array)
type ToolParameterType string

const (
	ToolParameterTypeString  ToolParameterType = "string"
	ToolParameterTypeNumber  ToolParameterType = "number"
	ToolParameterTypeBoolean ToolParameterType = "boolean"
	ToolParameterTypeObject  ToolParameterType = "object"
	ToolParameterTypeArray   ToolParameterType = "array"
)

func (e ToolParameterType) ToPointer() *ToolParameterType {
	return &e
}
func (e *ToolParameterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "object":
		fallthrough
	case "array":
		*e = ToolParameterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ToolParameterType: %v", v)
	}
}

type ToolParameter struct {
	// Parameter type (string, number, boolean, object, array)
	Type *ToolParameterType `json:"type,omitempty"`
	// The name of the parameter
	Name *string `json:"name,omitempty"`
	// The description of the parameter
	Description *string `json:"description,omitempty"`
	// Whether the parameter is required
	IsRequired *bool `json:"isRequired,omitempty"`
	// The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
	PossibleValues []string       `json:"possibleValues,omitempty"`
	Items          *ToolParameter `json:"items,omitempty"`
	// When type is 'object', this describes the structure of the object.
	Properties map[string]ToolParameter `json:"properties,omitempty"`
}

func (o *ToolParameter) GetType() *ToolParameterType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ToolParameter) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ToolParameter) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ToolParameter) GetIsRequired() *bool {
	if o == nil {
		return nil
	}
	return o.IsRequired
}

func (o *ToolParameter) GetPossibleValues() []string {
	if o == nil {
		return nil
	}
	return o.PossibleValues
}

func (o *ToolParameter) GetItems() *ToolParameter {
	if o == nil {
		return nil
	}
	return o.Items
}

func (o *ToolParameter) GetProperties() map[string]ToolParameter {
	if o == nil {
		return nil
	}
	return o.Properties
}
