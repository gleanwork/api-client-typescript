// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// ActivityEnum - Activity e.g. search, home page visit or all.
type ActivityEnum string

const (
	ActivityEnumAll    ActivityEnum = "ALL"
	ActivityEnumSearch ActivityEnum = "SEARCH"
)

func (e ActivityEnum) ToPointer() *ActivityEnum {
	return &e
}
func (e *ActivityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "SEARCH":
		*e = ActivityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityEnum: %v", v)
	}
}

type UserActivityInsight struct {
	User Person `json:"user"`
	// Activity e.g. search, home page visit or all.
	Activity ActivityEnum `json:"activity"`
	// Unix timestamp of the last activity (in seconds since epoch UTC).
	LastActivityTimestamp *int64     `json:"lastActivityTimestamp,omitempty"`
	ActivityCount         *CountInfo `json:"activityCount,omitempty"`
	ActiveDayCount        *CountInfo `json:"activeDayCount,omitempty"`
}

func (o *UserActivityInsight) GetUser() Person {
	if o == nil {
		return Person{}
	}
	return o.User
}

func (o *UserActivityInsight) GetActivity() ActivityEnum {
	if o == nil {
		return ActivityEnum("")
	}
	return o.Activity
}

func (o *UserActivityInsight) GetLastActivityTimestamp() *int64 {
	if o == nil {
		return nil
	}
	return o.LastActivityTimestamp
}

func (o *UserActivityInsight) GetActivityCount() *CountInfo {
	if o == nil {
		return nil
	}
	return o.ActivityCount
}

func (o *UserActivityInsight) GetActiveDayCount() *CountInfo {
	if o == nil {
		return nil
	}
	return o.ActiveDayCount
}
