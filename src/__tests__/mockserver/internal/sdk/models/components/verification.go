// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// State - The verification state for the document.
type State string

const (
	StateUnverified State = "UNVERIFIED"
	StateVerified   State = "VERIFIED"
	StateDeprecated State = "DEPRECATED"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNVERIFIED":
		fallthrough
	case "VERIFIED":
		fallthrough
	case "DEPRECATED":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

type Verification struct {
	// The verification state for the document.
	State    State                 `json:"state"`
	Metadata *VerificationMetadata `json:"metadata,omitempty"`
}

func (o *Verification) GetState() State {
	if o == nil {
		return State("")
	}
	return o.State
}

func (o *Verification) GetMetadata() *VerificationMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}
