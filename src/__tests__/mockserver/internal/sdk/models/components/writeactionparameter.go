// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// WriteActionParameterType - The type of the value (e.g., integer, string, boolean, etc.)
type WriteActionParameterType string

const (
	WriteActionParameterTypeUnknown WriteActionParameterType = "UNKNOWN"
	WriteActionParameterTypeInteger WriteActionParameterType = "INTEGER"
	WriteActionParameterTypeString  WriteActionParameterType = "STRING"
	WriteActionParameterTypeBoolean WriteActionParameterType = "BOOLEAN"
)

func (e WriteActionParameterType) ToPointer() *WriteActionParameterType {
	return &e
}
func (e *WriteActionParameterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNKNOWN":
		fallthrough
	case "INTEGER":
		fallthrough
	case "STRING":
		fallthrough
	case "BOOLEAN":
		*e = WriteActionParameterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WriteActionParameterType: %v", v)
	}
}

type WriteActionParameter struct {
	// The type of the value (e.g., integer, string, boolean, etc.)
	Type *WriteActionParameterType `json:"type,omitempty"`
	// Human readable display name for the key.
	DisplayName *string `json:"displayName,omitempty"`
	// The value of the field.
	Value *string `json:"value,omitempty"`
	// Is the parameter a required field.
	IsRequired *bool `json:"isRequired,omitempty"`
	// Description of the parameter.
	Description *string `json:"description,omitempty"`
	// Possible values that the parameter can take.
	PossibleValues []PossibleValue `json:"possibleValues,omitempty"`
}

func (o *WriteActionParameter) GetType() *WriteActionParameterType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *WriteActionParameter) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *WriteActionParameter) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *WriteActionParameter) GetIsRequired() *bool {
	if o == nil {
		return nil
	}
	return o.IsRequired
}

func (o *WriteActionParameter) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *WriteActionParameter) GetPossibleValues() []PossibleValue {
	if o == nil {
		return nil
	}
	return o.PossibleValues
}
