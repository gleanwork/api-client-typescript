// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"io"
	"mockserver/internal/sdk/models/components"
)

type ImagesRequest struct {
	// Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
	XGleanActAs *string `header:"style=simple,explode=false,name=X-Glean-ActAs"`
	// Auth type being used to access the endpoint (should be non-empty only for global tokens).
	XGleanAuthType *string `header:"style=simple,explode=false,name=X-Glean-Auth-Type"`
	// Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// The type of image requested. Supported values are listed in ImageMetadata.type enum.
	Type *components.ImageType `queryParam:"style=form,explode=true,name=type"`
	// ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on.
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some.
	Ds *string `queryParam:"style=form,explode=true,name=ds"`
	// Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
	Cid *string `queryParam:"style=form,explode=true,name=cid"`
}

func (o *ImagesRequest) GetXGleanActAs() *string {
	if o == nil {
		return nil
	}
	return o.XGleanActAs
}

func (o *ImagesRequest) GetXGleanAuthType() *string {
	if o == nil {
		return nil
	}
	return o.XGleanAuthType
}

func (o *ImagesRequest) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *ImagesRequest) GetType() *components.ImageType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ImagesRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ImagesRequest) GetDs() *string {
	if o == nil {
		return nil
	}
	return o.Ds
}

func (o *ImagesRequest) GetCid() *string {
	if o == nil {
		return nil
	}
	return o.Cid
}

type ImagesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	// The Close method must be called on this field, even if it is not used, to prevent resource leaks.
	ResponseStream io.ReadCloser
}

func (o *ImagesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ImagesResponse) GetResponseStream() io.ReadCloser {
	if o == nil {
		return nil
	}
	return o.ResponseStream
}
