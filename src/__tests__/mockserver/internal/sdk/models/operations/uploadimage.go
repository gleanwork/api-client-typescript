// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"io"
	"mockserver/internal/sdk/models/components"
)

type UploadimageRequest struct {
	// Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
	XGleanActAs *string `header:"style=simple,explode=false,name=X-Glean-ActAs"`
	// Auth type being used to access the endpoint (should be non-empty only for global tokens).
	XGleanAuthType *string `header:"style=simple,explode=false,name=X-Glean-Auth-Type"`
	// The type of image requested. Supported values are listed in ImageMetadata.type enum.
	Type *components.ImageType `queryParam:"style=form,explode=true,name=type"`
	// ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
	Ds *string `queryParam:"style=form,explode=true,name=ds"`
	// Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
	Cid *string `queryParam:"style=form,explode=true,name=cid"`
	// Content and metadata for the image. Content is in the POST body, metadata is in the URL.
	RequestBody io.Reader `request:"mediaType=image/*"`
}

func (o *UploadimageRequest) GetXGleanActAs() *string {
	if o == nil {
		return nil
	}
	return o.XGleanActAs
}

func (o *UploadimageRequest) GetXGleanAuthType() *string {
	if o == nil {
		return nil
	}
	return o.XGleanAuthType
}

func (o *UploadimageRequest) GetType() *components.ImageType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UploadimageRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UploadimageRequest) GetDs() *string {
	if o == nil {
		return nil
	}
	return o.Ds
}

func (o *UploadimageRequest) GetCid() *string {
	if o == nil {
		return nil
	}
	return o.Cid
}

func (o *UploadimageRequest) GetRequestBody() io.Reader {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UploadimageResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// OK
	UploadImageResponse *components.UploadImageResponse
}

func (o *UploadimageResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UploadimageResponse) GetUploadImageResponse() *components.UploadImageResponse {
	if o == nil {
		return nil
	}
	return o.UploadImageResponse
}
