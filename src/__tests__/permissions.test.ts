/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Permissions Post /Indexuser", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/indexuser.test referencing operation post_/indexuser not found in document`]",
  );
});

it.skip("Permissions Post /Bulkindexusers", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexusers.test referencing operation post_/bulkindexusers not found in document`]",
  );
});

it.skip("Permissions Post /Indexgroup", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/indexgroup.test referencing operation post_/indexgroup not found in document`]",
  );
});

it.skip("Permissions Post /Bulkindexgroups", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexgroups.test referencing operation post_/bulkindexgroups not found in document`]",
  );
});

it.skip("Permissions Post /Indexmembership", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/indexmembership.test referencing operation post_/indexmembership not found in document`]",
  );
});

it.skip("Permissions Post /Bulkindexmemberships", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/bulkindexmemberships.test referencing operation post_/bulkindexmemberships not found in document`]",
  );
});

it.skip("Permissions Post /Processallmemberships", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/processallmemberships.test referencing operation post_/processallmemberships not found in document`]",
  );
});

it.skip("Permissions Post /Deleteuser", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/deleteuser.test referencing operation post_/deleteuser not found in document`]",
  );
});

it.skip("Permissions Post /Deletegroup", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/deletegroup.test referencing operation post_/deletegroup not found in document`]",
  );
});

it.skip("Permissions Post /Deletemembership", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/deletemembership.test referencing operation post_/deletemembership not found in document`]",
  );
});

it.skip("Permissions Post /Betausers", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/betausers.test referencing operation post_/betausers not found in document`]",
  );
});

test("Permissions Post /Api/index/v1 /Indexuser", async () => {
  const testHttpClient = createTestHTTPClient("post_/api/index/v1/indexuser");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.indexUser({
    datasource: "<value>",
    user: {
      email: "Aracely40@hotmail.com",
      name: "<value>",
    },
  });
});

test("Permissions Post /Api/index/v1 /Bulkindexusers", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/bulkindexusers",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.bulkIndexUsers({
    uploadId: "<id>",
    datasource: "<value>",
    users: [],
  });
});

test("Permissions Post /Api/index/v1 /Indexgroup", async () => {
  const testHttpClient = createTestHTTPClient("post_/api/index/v1/indexgroup");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.indexGroup({
    datasource: "<value>",
    group: {
      name: "<value>",
    },
  });
});

test("Permissions Post /Api/index/v1 /Bulkindexgroups", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/bulkindexgroups",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.bulkIndexGroups({
    uploadId: "<id>",
    datasource: "<value>",
    groups: [],
  });
});

test("Permissions Post /Api/index/v1 /Indexmembership", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/indexmembership",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.indexMembership({
    datasource: "<value>",
    membership: {
      groupName: "<value>",
    },
  });
});

test("Permissions Post /Api/index/v1 /Bulkindexmemberships", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/bulkindexmemberships",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.bulkIndexMemberships({
    uploadId: "<id>",
    datasource: "<value>",
    memberships: [
      {},
    ],
  });
});

test("Permissions Post /Api/index/v1 /Processallmemberships", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/processallmemberships",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.processMemberships();
});

test("Permissions Post /Api/index/v1 /Deleteuser", async () => {
  const testHttpClient = createTestHTTPClient("post_/api/index/v1/deleteuser");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.deleteUser({
    datasource: "<value>",
    email: "Kendra.Cole57@hotmail.com",
  });
});

test("Permissions Post /Api/index/v1 /Deletegroup", async () => {
  const testHttpClient = createTestHTTPClient("post_/api/index/v1/deletegroup");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.deleteGroup({
    datasource: "<value>",
    groupName: "<value>",
  });
});

test("Permissions Post /Api/index/v1 /Deletemembership", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/deletemembership",
  );

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.deleteMembership({
    datasource: "<value>",
    membership: {
      groupName: "<value>",
    },
  });
});

test("Permissions Post /Api/index/v1 /Betausers", async () => {
  const testHttpClient = createTestHTTPClient("post_/api/index/v1/betausers");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.indexing.permissions.authorizeBetaUsers({
    datasource: "<value>",
    emails: [
      "Casper50@yahoo.com",
    ],
  });
});
