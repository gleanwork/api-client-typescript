/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Pins Editpin", async () => {
  const testHttpClient = createTestHTTPClient("editpin");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  const result = await glean.client.pins.update({
    audienceFilters: [
      {
        fieldName: "type",
        values: [
          {
            value: "Spreadsheet",
            relationType: "EQUALS",
          },
          {
            value: "Presentation",
            relationType: "EQUALS",
          },
        ],
      },
    ],
  });
  expect(result).toBeDefined();
});

test("Pins Getpin", async () => {
  const testHttpClient = createTestHTTPClient("getpin");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  const result = await glean.client.pins.retrieve({});
  expect(result).toBeDefined();
});

test("Pins Listpins", async () => {
  const testHttpClient = createTestHTTPClient("listpins");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  const result = await glean.client.pins.list({});
  expect(result).toBeDefined();
});

test("Pins Pin", async () => {
  const testHttpClient = createTestHTTPClient("pin");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  const result = await glean.client.pins.create({
    audienceFilters: [
      {
        fieldName: "type",
        values: [
          {
            value: "Spreadsheet",
            relationType: "EQUALS",
          },
          {
            value: "Presentation",
            relationType: "EQUALS",
          },
        ],
      },
    ],
  });
  expect(result).toBeDefined();
});

test("Pins Unpin", async () => {
  const testHttpClient = createTestHTTPClient("unpin");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    security: {
      apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
    },
  });

  await glean.client.pins.remove({});
});
