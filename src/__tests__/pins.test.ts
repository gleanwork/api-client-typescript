/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Pins Editpin", async () => {
  const testHttpClient = createTestHTTPClient("editpin");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.pins.edit({
    editPinRequest: {
      audienceFilters: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    audienceFilters: [
      {
        fieldName: "type",
        values: [
          {
            value: "Spreadsheet",
            relationType: "EQUALS",
          },
          {
            value: "Presentation",
            relationType: "EQUALS",
          },
        ],
      },
    ],
    documentId: "<id>",
    attribution: {
      name: "George Clooney",
      obfuscatedId: "abc123",
      relatedDocuments: [],
      metadata: {
        type: "FULL_TIME",
        title: "Actor",
        department: "Movies",
        email: "george@example.com",
        location: "Hollywood, CA",
        phone: "6505551234",
        photoUrl: "https://example.com/george.jpg",
        startDate: new RFCDate("2000-01-23"),
        datasourceProfile: [
          {
            datasource: "github",
            handle: "<value>",
          },
          {
            datasource: "github",
            handle: "<value>",
          },
        ],
        querySuggestions: {
          suggestions: [],
        },
        inviteInfo: {
          invites: [],
        },
        customFields: [],
        badges: [
          {
            key: "deployment_name_new_hire",
            displayName: "New hire",
            iconConfig: {
              color: "#343CED",
              key: "person_icon",
              iconType: "GLYPH",
              name: "user",
            },
          },
        ],
      },
    },
    updatedBy: {
      name: "George Clooney",
      obfuscatedId: "abc123",
    },
  });
});

test("Pins Getpin", async () => {
  const testHttpClient = createTestHTTPClient("getpin");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.pins.get({
    getPinRequest: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    pin: {
      audienceFilters: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
      documentId: "<id>",
      attribution: {
        name: "George Clooney",
        obfuscatedId: "abc123",
        relatedDocuments: [],
        metadata: {
          type: "FULL_TIME",
          title: "Actor",
          department: "Movies",
          email: "george@example.com",
          location: "Hollywood, CA",
          phone: "6505551234",
          photoUrl: "https://example.com/george.jpg",
          startDate: new RFCDate("2000-01-23"),
          datasourceProfile: [
            {
              datasource: "github",
              handle: "<value>",
            },
            {
              datasource: "github",
              handle: "<value>",
            },
          ],
          querySuggestions: {
            suggestions: [],
          },
          inviteInfo: {
            invites: [],
          },
          customFields: [],
          badges: [
            {
              key: "deployment_name_new_hire",
              displayName: "New hire",
              iconConfig: {
                color: "#343CED",
                key: "person_icon",
                iconType: "GLYPH",
                name: "user",
              },
            },
          ],
        },
      },
      updatedBy: {
        name: "George Clooney",
        obfuscatedId: "abc123",
      },
    },
  });
});

test("Pins Listpins", async () => {
  const testHttpClient = createTestHTTPClient("listpins");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.pins.list({
    requestBody: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    pins: [
      {
        audienceFilters: [
          {
            fieldName: "type",
            values: [],
          },
        ],
        documentId: "<id>",
        attribution: {
          name: "George Clooney",
          obfuscatedId: "abc123",
          relatedDocuments: [],
          metadata: {
            type: "FULL_TIME",
            title: "Actor",
            department: "Movies",
            email: "george@example.com",
            location: "Hollywood, CA",
            managementChain: [],
            phone: "6505551234",
            photoUrl: "https://example.com/george.jpg",
            reports: [],
            startDate: new RFCDate("2000-01-23"),
            datasourceProfile: [],
            querySuggestions: {
              suggestions: [],
            },
            inviteInfo: {
              invites: [],
            },
            customFields: [],
            badges: [],
          },
        },
        updatedBy: {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
      },
      {
        audienceFilters: [
          {
            fieldName: "type",
            values: [],
          },
        ],
        documentId: "<id>",
      },
      {
        audienceFilters: [
          {
            fieldName: "type",
            values: [],
          },
        ],
        documentId: "<id>",
      },
    ],
  });
});

test("Pins Pin", async () => {
  const testHttpClient = createTestHTTPClient("pin");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.pins.create({
    pinRequest: {
      audienceFilters: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    audienceFilters: [
      {
        fieldName: "type",
        values: [
          {
            value: "Spreadsheet",
            relationType: "EQUALS",
          },
          {
            value: "Presentation",
            relationType: "EQUALS",
          },
        ],
      },
    ],
    documentId: "<id>",
    attribution: {
      name: "George Clooney",
      obfuscatedId: "abc123",
      relatedDocuments: [],
      metadata: {
        type: "FULL_TIME",
        title: "Actor",
        department: "Movies",
        email: "george@example.com",
        location: "Hollywood, CA",
        phone: "6505551234",
        photoUrl: "https://example.com/george.jpg",
        startDate: new RFCDate("2000-01-23"),
        datasourceProfile: [
          {
            datasource: "github",
            handle: "<value>",
          },
          {
            datasource: "github",
            handle: "<value>",
          },
        ],
        querySuggestions: {
          suggestions: [],
        },
        inviteInfo: {
          invites: [],
        },
        customFields: [],
        badges: [
          {
            key: "deployment_name_new_hire",
            displayName: "New hire",
            iconConfig: {
              color: "#343CED",
              key: "person_icon",
              iconType: "GLYPH",
              name: "user",
            },
          },
        ],
      },
    },
    updatedBy: {
      name: "George Clooney",
      obfuscatedId: "abc123",
    },
  });
});

test("Pins Unpin", async () => {
  const testHttpClient = createTestHTTPClient("unpin");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.pins.remove({
    unpin: {},
  });
});
