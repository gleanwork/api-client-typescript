/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Policies Getpolicy", async () => {
  const testHttpClient = createTestHTTPClient("getpolicy");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
  });

  const result = await glean.client.governance.data.policies.retrieve("<id>");
  expect(result).toBeDefined();
});

it.skip("Policies Getpolicies", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step getpolicies.test referencing operation getpolicies not found in document`]",
  );
});

it.skip("Policies Downloadpolicycsv", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step downloadpolicycsv.test contains criterion simple with invalid condition`, `workflow step downloadpolicycsv.test does not contain $contentType successCriteria and required for response body assertion`]",
  );
});

test("Policies Listpolicies", async () => {
  const testHttpClient = createTestHTTPClient("listpolicies");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    apiToken: process.env["GLEAN_API_TOKEN"] ?? "value",
  });

  const result = await glean.client.governance.data.policies.list();
  expect(result).toBeDefined();
});
