/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Shortcuts Createshortcut", async () => {
  const testHttpClient = createTestHTTPClient("createshortcut");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.shortcuts.create({
    createShortcutRequest: {
      data: {
        addedRoles: [
          {
            person: {
              name: "George Clooney",
              obfuscatedId: "abc123",
              relatedDocuments: [],
              metadata: {
                type: "FULL_TIME",
                title: "Actor",
                department: "Movies",
                email: "george@example.com",
                location: "Hollywood, CA",
                managementChain: [],
                phone: "6505551234",
                photoUrl: "https://example.com/george.jpg",
                reports: [],
                startDate: new RFCDate("2000-01-23"),
                datasourceProfile: [],
                querySuggestions: {
                  suggestions: [],
                },
                inviteInfo: {
                  invites: [],
                },
                customFields: [],
                badges: [],
              },
            },
            role: "EDITOR",
          },
          {
            role: "EDITOR",
          },
        ],
        removedRoles: [
          {
            role: "EDITOR",
          },
          {
            role: "EDITOR",
          },
        ],
      },
    },
  });
  expect(result).toBeDefined();
});

test("Shortcuts Deleteshortcut", async () => {
  const testHttpClient = createTestHTTPClient("deleteshortcut");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.shortcuts.delete({
    deleteShortcutRequest: {
      id: 545907,
    },
  });
});

test("Shortcuts Getshortcut", async () => {
  const testHttpClient = createTestHTTPClient("getshortcut");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.shortcuts.get({
    getShortcutRequest: {
      alias: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Shortcuts Getsimilarshortcuts", async () => {
  const testHttpClient = createTestHTTPClient("getsimilarshortcuts");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.shortcuts.getSimilar({
    getSimilarShortcutsRequest: {
      alias: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Shortcuts Listshortcuts", async () => {
  const testHttpClient = createTestHTTPClient("listshortcuts");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.shortcuts.list({
    listShortcutsPaginatedRequest: {
      pageSize: 10,
      filters: [
        {
          fieldName: "type",
          values: [
            {
              value: "Spreadsheet",
              relationType: "EQUALS",
            },
            {
              value: "Presentation",
              relationType: "EQUALS",
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Shortcuts Previewshortcut", async () => {
  const testHttpClient = createTestHTTPClient("previewshortcut");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.shortcuts.preview({
    shortcutMutableProperties: {
      addedRoles: [
        {
          person: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              managementChain: [],
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              reports: [],
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [],
            },
          },
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
      ],
      removedRoles: [
        {
          role: "EDITOR",
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Shortcuts Updateshortcut", async () => {
  const testHttpClient = createTestHTTPClient("updateshortcut");

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.shortcuts.update({
    updateShortcutRequest: {
      id: 857478,
      addedRoles: [
        {
          person: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              managementChain: [],
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              reports: [],
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [],
            },
          },
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
      ],
      removedRoles: [
        {
          role: "EDITOR",
        },
        {
          role: "EDITOR",
        },
      ],
    },
  });
  expect(result).toBeDefined();
});
