/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Glean } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Troubleshooting Post /Api/index/v1 /Debug/{datasource}/status", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post_/api/index/v1/debug/{datasource}/status.test contains criterion simple with invalid condition`, `workflow step post_/api/index/v1/debug/{datasource}/status.test does not contain $contentType successCriteria and required for response body assertion`]",
  );
});

test("Troubleshooting Post /Api/index/v1 /Checkdocumentaccess", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/checkdocumentaccess",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.indexing.troubleshooting.checkAccess({
    datasource: "<value>",
    objectType: "<value>",
    docId: "<id>",
    userEmail: "<value>",
  });
  expect(result).toBeDefined();
});

test("Troubleshooting Post /Api/index/v1 /Getdocumentstatus", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/getdocumentstatus",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.indexing.troubleshooting.getStatus({
    datasource: "<value>",
    objectType: "<value>",
    docId: "<id>",
  });
  expect(result).toBeDefined();
});

test("Troubleshooting Post /Api/index/v1 /Getdocumentcount", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/getdocumentcount",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.indexing.troubleshooting.getDocumentCount({
    datasource: "<value>",
  });
  expect(result).toBeDefined();
});

test("Troubleshooting Post /Api/index/v1 /Getusercount", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/api/index/v1/getusercount",
  );

  const glean = new Glean({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.indexing.troubleshooting.getUserCount({
    datasource: "<value>",
  });
  expect(result).toBeDefined();
});
