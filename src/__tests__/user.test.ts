/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("User Addcredential", async () => {
  const testHttpClient = createTestHTTPClient("addcredential");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.user.addCredential({
    addCredentialRequest: {},
  });
});

test("User Deletequeryhistory", async () => {
  const testHttpClient = createTestHTTPClient("deletequeryhistory");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.user.deleteQueryHistory({
    deleteQueryHistoryRequest: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("User Invite", async () => {
  const testHttpClient = createTestHTTPClient("invite");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.user.invite({
    inviteRequest: {
      recipients: [
        {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
      ],
      recipientFilters: {
        filter: [
          {
            fieldName: "type",
            values: [
              {
                value: "Spreadsheet",
                relationType: "EQUALS",
              },
              {
                value: "Presentation",
                relationType: "EQUALS",
              },
            ],
          },
        ],
      },
    },
  });
});

test("User Publicconfig", async () => {
  const testHttpClient = createTestHTTPClient("publicconfig");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.user.getPublicConfig({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    integerValues: {
      "autocompleteDebounceMs": 300,
      "retries": 3,
    },
    themes: {
      light: {
        "background": "#fafafa",
        "textPrimary": "#1e1e1e",
      },
      dark: {
        "background": "#fafafa",
        "textPrimary": "#1e1e1e",
      },
    },
    greetingFormat: "(This would be the current default Glean greeting)",
  });
});

test("User Removecredential", async () => {
  const testHttpClient = createTestHTTPClient("removecredential");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.user.removeCredential({
    removeCredentialRequest: {},
  });
});

test("User Support Email", async () => {
  const testHttpClient = createTestHTTPClient("support_email");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  await glean.client.user.sendSupportEmail({
    emailRequest: {
      emailTemplate: "ONBOARDING_TIPS",
      recipients: [
        {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
      ],
      ccRecipients: [
        {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
      ],
      recipientFilters: {
        filter: [
          {
            fieldName: "type",
            values: [
              {
                value: "Spreadsheet",
                relationType: "EQUALS",
              },
              {
                value: "Presentation",
                relationType: "EQUALS",
              },
            ],
          },
        ],
      },
      senders: [
        {
          name: "George Clooney",
          obfuscatedId: "abc123",
        },
      ],
      documents: [
        {
          metadata: {
            datasource: "datasource",
            objectType: "Feature Request",
            container: "container",
            parentId: "JIRA_EN-1337",
            mimeType: "mimeType",
            documentId: "documentId",
            createTime: new Date("2000-01-23T04:56:07.000Z"),
            updateTime: new Date("2000-01-23T04:56:07.000Z"),
            author: {
              name: "George Clooney",
              obfuscatedId: "abc123",
              relatedDocuments: [],
              metadata: {
                type: "FULL_TIME",
                title: "Actor",
                department: "Movies",
                email: "george@example.com",
                location: "Hollywood, CA",
                managementChain: [],
                phone: "6505551234",
                photoUrl: "https://example.com/george.jpg",
                reports: [],
                startDate: new RFCDate("2000-01-23"),
                datasourceProfile: [],
                querySuggestions: {
                  suggestions: [],
                },
                inviteInfo: {
                  invites: [],
                },
                customFields: [],
                badges: [],
              },
            },
            owner: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            mentionedPeople: [],
            components: [
              "Backend",
              "Networking",
            ],
            status: "[\"Done\"]",
            pins: [],
            assignedTo: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            updatedBy: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            collections: [],
            interactions: {
              reacts: [],
              shares: [],
            },
            verification: {
              state: "UNVERIFIED",
              metadata: {
                lastVerifier: {
                  name: "George Clooney",
                  obfuscatedId: "abc123",
                },
                reminders: [],
                lastReminder: {
                  assignee: {
                    name: "George Clooney",
                    obfuscatedId: "abc123",
                  },
                  requestor: {
                    name: "George Clooney",
                    obfuscatedId: "abc123",
                  },
                  remindAt: 129663,
                },
                candidateVerifiers: [],
              },
            },
            customData: {
              "someCustomField": {},
            },
            contactPerson: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
          },
        },
        {},
      ],
      feedbackPayload: {
        customJson:
          "{\"comment\": \"glean is awesome!\", \"sender\": \"happycustomer@customer.com\"}",
      },
    },
  });
});
