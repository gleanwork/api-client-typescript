/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Glean } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Verifications Listverifications", async () => {
  const testHttpClient = createTestHTTPClient("listverifications");

  const glean = new Glean({
    httpClient: testHttpClient,
    bearerAuth: process.env["GLEAN_BEARER_AUTH"] ?? "value",
  });

  const result = await glean.client.verification.list({});
  expect(result).toBeDefined();
  expect(result).toEqual({
    documents: [
      {
        state: "VERIFIED",
        metadata: {
          lastVerifier: {
            name: "George Clooney",
            obfuscatedId: "abc123",
            relatedDocuments: [],
            metadata: {
              type: "FULL_TIME",
              title: "Actor",
              department: "Movies",
              email: "george@example.com",
              location: "Hollywood, CA",
              managementChain: [],
              phone: "6505551234",
              photoUrl: "https://example.com/george.jpg",
              reports: [],
              startDate: new RFCDate("2000-01-23"),
              datasourceProfile: [],
              querySuggestions: {
                suggestions: [],
              },
              inviteInfo: {
                invites: [],
              },
              customFields: [],
              badges: [],
            },
          },
          reminders: [],
          lastReminder: {
            assignee: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            requestor: {
              name: "George Clooney",
              obfuscatedId: "abc123",
            },
            remindAt: 129663,
          },
          candidateVerifiers: [],
        },
      },
      {
        state: "VERIFIED",
      },
      {
        state: "VERIFIED",
      },
    ],
  });
});
