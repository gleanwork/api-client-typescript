/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddCredentialRequest = {
  /**
   * the datasource the credential applies to
   */
  datasource?: string | undefined;
  /**
   * the datasource instance the credential applies to
   */
  datasourceInstance?: string | undefined;
  /**
   * the user info (email or username for example) for the credential
   */
  user?: string | undefined;
  /**
   * the token part of the credential (password, apiToken etc)
   */
  token?: string | undefined;
  /**
   * any metadata associated with the user credential
   */
  metadata?: string | undefined;
};

/** @internal */
export const AddCredentialRequest$inboundSchema: z.ZodType<
  AddCredentialRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasource: z.string().optional(),
  datasourceInstance: z.string().optional(),
  user: z.string().optional(),
  token: z.string().optional(),
  metadata: z.string().optional(),
});

/** @internal */
export type AddCredentialRequest$Outbound = {
  datasource?: string | undefined;
  datasourceInstance?: string | undefined;
  user?: string | undefined;
  token?: string | undefined;
  metadata?: string | undefined;
};

/** @internal */
export const AddCredentialRequest$outboundSchema: z.ZodType<
  AddCredentialRequest$Outbound,
  z.ZodTypeDef,
  AddCredentialRequest
> = z.object({
  datasource: z.string().optional(),
  datasourceInstance: z.string().optional(),
  user: z.string().optional(),
  token: z.string().optional(),
  metadata: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddCredentialRequest$ {
  /** @deprecated use `AddCredentialRequest$inboundSchema` instead. */
  export const inboundSchema = AddCredentialRequest$inboundSchema;
  /** @deprecated use `AddCredentialRequest$outboundSchema` instead. */
  export const outboundSchema = AddCredentialRequest$outboundSchema;
  /** @deprecated use `AddCredentialRequest$Outbound` instead. */
  export type Outbound = AddCredentialRequest$Outbound;
}

export function addCredentialRequestToJSON(
  addCredentialRequest: AddCredentialRequest,
): string {
  return JSON.stringify(
    AddCredentialRequest$outboundSchema.parse(addCredentialRequest),
  );
}

export function addCredentialRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddCredentialRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddCredentialRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddCredentialRequest' from JSON`,
  );
}
