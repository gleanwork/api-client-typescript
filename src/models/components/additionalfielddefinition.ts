/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Either a string or HypertextField. When OpenAPI Generator supports oneOf, we can semantically enforce this in the docs.
 */
export type Value = {};

/**
 * Additional information about the employee or team.
 */
export type AdditionalFieldDefinition = {
  /**
   * Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
   */
  key?: string | undefined;
  /**
   * List of type string or HypertextField.
   *
   * @remarks
   *
   * HypertextField is defined as
   * ```
   * {
   *   anchor: string,    // Anchor text for the hypertext field.
   *   hyperlink: string, // URL for the hypertext field.
   * }
   * ```
   * Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```
   *
   * When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.
   *
   * **Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
   * Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
   */
  value?: Array<Value> | undefined;
};

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Value$Outbound = {};

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const AdditionalFieldDefinition$inboundSchema: z.ZodType<
  AdditionalFieldDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.array(z.lazy(() => Value$inboundSchema)).optional(),
});

/** @internal */
export type AdditionalFieldDefinition$Outbound = {
  key?: string | undefined;
  value?: Array<Value$Outbound> | undefined;
};

/** @internal */
export const AdditionalFieldDefinition$outboundSchema: z.ZodType<
  AdditionalFieldDefinition$Outbound,
  z.ZodTypeDef,
  AdditionalFieldDefinition
> = z.object({
  key: z.string().optional(),
  value: z.array(z.lazy(() => Value$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalFieldDefinition$ {
  /** @deprecated use `AdditionalFieldDefinition$inboundSchema` instead. */
  export const inboundSchema = AdditionalFieldDefinition$inboundSchema;
  /** @deprecated use `AdditionalFieldDefinition$outboundSchema` instead. */
  export const outboundSchema = AdditionalFieldDefinition$outboundSchema;
  /** @deprecated use `AdditionalFieldDefinition$Outbound` instead. */
  export type Outbound = AdditionalFieldDefinition$Outbound;
}

export function additionalFieldDefinitionToJSON(
  additionalFieldDefinition: AdditionalFieldDefinition,
): string {
  return JSON.stringify(
    AdditionalFieldDefinition$outboundSchema.parse(additionalFieldDefinition),
  );
}

export function additionalFieldDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<AdditionalFieldDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdditionalFieldDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdditionalFieldDefinition' from JSON`,
  );
}
