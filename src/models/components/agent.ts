/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The agent metadata.
 */
export type AgentMetadata = {};

/**
 * Describes which protocol features the agent supports. In addition to the standard capabilities (prefixed with ap.), implementations can declare custom capabilities, named in reverse domain notation (eg. com.example.some.capability).
 */
export type AgentCapabilities = {
  /**
   * Whether the agent supports Messages as input/output/state. If true, the agent uses the `messages` key in threads/runs endpoints.
   */
  apIoMessages?: boolean | undefined;
  /**
   * Whether the agent supports streaming output.
   */
  apIoStreaming?: boolean | undefined;
  additionalProperties?: { [k: string]: any };
};

export type Agent = {
  /**
   * The ID of the agent.
   */
  agentId: string;
  /**
   * The name of the agent
   */
  name: string;
  /**
   * The description of the agent.
   */
  description?: string | undefined;
  /**
   * The agent metadata.
   */
  metadata?: AgentMetadata | undefined;
  /**
   * Describes which protocol features the agent supports. In addition to the standard capabilities (prefixed with ap.), implementations can declare custom capabilities, named in reverse domain notation (eg. com.example.some.capability).
   */
  capabilities: AgentCapabilities;
};

/** @internal */
export const AgentMetadata$inboundSchema: z.ZodType<
  AgentMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AgentMetadata$Outbound = {};

/** @internal */
export const AgentMetadata$outboundSchema: z.ZodType<
  AgentMetadata$Outbound,
  z.ZodTypeDef,
  AgentMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentMetadata$ {
  /** @deprecated use `AgentMetadata$inboundSchema` instead. */
  export const inboundSchema = AgentMetadata$inboundSchema;
  /** @deprecated use `AgentMetadata$outboundSchema` instead. */
  export const outboundSchema = AgentMetadata$outboundSchema;
  /** @deprecated use `AgentMetadata$Outbound` instead. */
  export type Outbound = AgentMetadata$Outbound;
}

export function agentMetadataToJSON(agentMetadata: AgentMetadata): string {
  return JSON.stringify(AgentMetadata$outboundSchema.parse(agentMetadata));
}

export function agentMetadataFromJSON(
  jsonString: string,
): SafeParseResult<AgentMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentMetadata' from JSON`,
  );
}

/** @internal */
export const AgentCapabilities$inboundSchema: z.ZodType<
  AgentCapabilities,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    "ap.io.messages": z.boolean().optional(),
    "ap.io.streaming": z.boolean().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "ap.io.messages": "apIoMessages",
    "ap.io.streaming": "apIoStreaming",
  });
});

/** @internal */
export type AgentCapabilities$Outbound = {
  "ap.io.messages"?: boolean | undefined;
  "ap.io.streaming"?: boolean | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const AgentCapabilities$outboundSchema: z.ZodType<
  AgentCapabilities$Outbound,
  z.ZodTypeDef,
  AgentCapabilities
> = z.object({
  apIoMessages: z.boolean().optional(),
  apIoStreaming: z.boolean().optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      apIoMessages: "ap.io.messages",
      apIoStreaming: "ap.io.streaming",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentCapabilities$ {
  /** @deprecated use `AgentCapabilities$inboundSchema` instead. */
  export const inboundSchema = AgentCapabilities$inboundSchema;
  /** @deprecated use `AgentCapabilities$outboundSchema` instead. */
  export const outboundSchema = AgentCapabilities$outboundSchema;
  /** @deprecated use `AgentCapabilities$Outbound` instead. */
  export type Outbound = AgentCapabilities$Outbound;
}

export function agentCapabilitiesToJSON(
  agentCapabilities: AgentCapabilities,
): string {
  return JSON.stringify(
    AgentCapabilities$outboundSchema.parse(agentCapabilities),
  );
}

export function agentCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<AgentCapabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentCapabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentCapabilities' from JSON`,
  );
}

/** @internal */
export const Agent$inboundSchema: z.ZodType<Agent, z.ZodTypeDef, unknown> = z
  .object({
    agent_id: z.string(),
    name: z.string(),
    description: z.string().optional(),
    metadata: z.lazy(() => AgentMetadata$inboundSchema).optional(),
    capabilities: z.lazy(() => AgentCapabilities$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "agent_id": "agentId",
    });
  });

/** @internal */
export type Agent$Outbound = {
  agent_id: string;
  name: string;
  description?: string | undefined;
  metadata?: AgentMetadata$Outbound | undefined;
  capabilities: AgentCapabilities$Outbound;
};

/** @internal */
export const Agent$outboundSchema: z.ZodType<
  Agent$Outbound,
  z.ZodTypeDef,
  Agent
> = z.object({
  agentId: z.string(),
  name: z.string(),
  description: z.string().optional(),
  metadata: z.lazy(() => AgentMetadata$outboundSchema).optional(),
  capabilities: z.lazy(() => AgentCapabilities$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Agent$ {
  /** @deprecated use `Agent$inboundSchema` instead. */
  export const inboundSchema = Agent$inboundSchema;
  /** @deprecated use `Agent$outboundSchema` instead. */
  export const outboundSchema = Agent$outboundSchema;
  /** @deprecated use `Agent$Outbound` instead. */
  export type Outbound = Agent$Outbound;
}

export function agentToJSON(agent: Agent): string {
  return JSON.stringify(Agent$outboundSchema.parse(agent));
}

export function agentFromJSON(
  jsonString: string,
): SafeParseResult<Agent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Agent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Agent' from JSON`,
  );
}
