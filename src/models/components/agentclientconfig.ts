/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentConfig,
  AgentConfig$inboundSchema,
  AgentConfig$Outbound,
  AgentConfig$outboundSchema,
} from "./agentconfig.js";

/**
 * Describes the configurations that GleanChat has based on an AgentConfig.
 */
export type AgentClientConfig = {
  /**
   * Describes the agent that executes the request.
   */
  agentConfig?: AgentConfig | undefined;
  /**
   * The character limit of an input to GleanChat under the specified AgentConfig.
   */
  inputCharLimit?: number | undefined;
};

/** @internal */
export const AgentClientConfig$inboundSchema: z.ZodType<
  AgentClientConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentConfig: AgentConfig$inboundSchema.optional(),
  inputCharLimit: z.number().int().optional(),
});

/** @internal */
export type AgentClientConfig$Outbound = {
  agentConfig?: AgentConfig$Outbound | undefined;
  inputCharLimit?: number | undefined;
};

/** @internal */
export const AgentClientConfig$outboundSchema: z.ZodType<
  AgentClientConfig$Outbound,
  z.ZodTypeDef,
  AgentClientConfig
> = z.object({
  agentConfig: AgentConfig$outboundSchema.optional(),
  inputCharLimit: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentClientConfig$ {
  /** @deprecated use `AgentClientConfig$inboundSchema` instead. */
  export const inboundSchema = AgentClientConfig$inboundSchema;
  /** @deprecated use `AgentClientConfig$outboundSchema` instead. */
  export const outboundSchema = AgentClientConfig$outboundSchema;
  /** @deprecated use `AgentClientConfig$Outbound` instead. */
  export type Outbound = AgentClientConfig$Outbound;
}

export function agentClientConfigToJSON(
  agentClientConfig: AgentClientConfig,
): string {
  return JSON.stringify(
    AgentClientConfig$outboundSchema.parse(agentClientConfig),
  );
}

export function agentClientConfigFromJSON(
  jsonString: string,
): SafeParseResult<AgentClientConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentClientConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentClientConfig' from JSON`,
  );
}
