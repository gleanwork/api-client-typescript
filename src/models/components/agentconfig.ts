/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Name of the agent.
 */
export const AgentEnum = {
  Default: "DEFAULT",
  Gpt: "GPT",
  DeepResearch: "DEEP_RESEARCH",
} as const;
/**
 * Name of the agent.
 */
export type AgentEnum = ClosedEnum<typeof AgentEnum>;

/**
 * Top level modes to run GleanChat in.
 */
export const Mode = {
  Default: "DEFAULT",
  Quick: "QUICK",
} as const;
/**
 * Top level modes to run GleanChat in.
 */
export type Mode = ClosedEnum<typeof Mode>;

/**
 * Describes the agent that executes the request.
 */
export type AgentConfig = {
  /**
   * Name of the agent.
   */
  agent?: AgentEnum | undefined;
  /**
   * Top level modes to run GleanChat in.
   */
  mode?: Mode | undefined;
};

/** @internal */
export const AgentEnum$inboundSchema: z.ZodNativeEnum<typeof AgentEnum> = z
  .nativeEnum(AgentEnum);

/** @internal */
export const AgentEnum$outboundSchema: z.ZodNativeEnum<typeof AgentEnum> =
  AgentEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentEnum$ {
  /** @deprecated use `AgentEnum$inboundSchema` instead. */
  export const inboundSchema = AgentEnum$inboundSchema;
  /** @deprecated use `AgentEnum$outboundSchema` instead. */
  export const outboundSchema = AgentEnum$outboundSchema;
}

/** @internal */
export const Mode$inboundSchema: z.ZodNativeEnum<typeof Mode> = z.nativeEnum(
  Mode,
);

/** @internal */
export const Mode$outboundSchema: z.ZodNativeEnum<typeof Mode> =
  Mode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mode$ {
  /** @deprecated use `Mode$inboundSchema` instead. */
  export const inboundSchema = Mode$inboundSchema;
  /** @deprecated use `Mode$outboundSchema` instead. */
  export const outboundSchema = Mode$outboundSchema;
}

/** @internal */
export const AgentConfig$inboundSchema: z.ZodType<
  AgentConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent: AgentEnum$inboundSchema.optional(),
  mode: Mode$inboundSchema.optional(),
});

/** @internal */
export type AgentConfig$Outbound = {
  agent?: string | undefined;
  mode?: string | undefined;
};

/** @internal */
export const AgentConfig$outboundSchema: z.ZodType<
  AgentConfig$Outbound,
  z.ZodTypeDef,
  AgentConfig
> = z.object({
  agent: AgentEnum$outboundSchema.optional(),
  mode: Mode$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentConfig$ {
  /** @deprecated use `AgentConfig$inboundSchema` instead. */
  export const inboundSchema = AgentConfig$inboundSchema;
  /** @deprecated use `AgentConfig$outboundSchema` instead. */
  export const outboundSchema = AgentConfig$outboundSchema;
  /** @deprecated use `AgentConfig$Outbound` instead. */
  export type Outbound = AgentConfig$Outbound;
}

export function agentConfigToJSON(agentConfig: AgentConfig): string {
  return JSON.stringify(AgentConfig$outboundSchema.parse(agentConfig));
}

export function agentConfigFromJSON(
  jsonString: string,
): SafeParseResult<AgentConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentConfig' from JSON`,
  );
}
