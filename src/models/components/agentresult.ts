/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Agent,
  Agent$inboundSchema,
  Agent$Outbound,
  Agent$outboundSchema,
} from "./agent.js";

export type AgentResult = {
  agent: Agent;
};

/** @internal */
export const AgentResult$inboundSchema: z.ZodType<
  AgentResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent: Agent$inboundSchema,
});

/** @internal */
export type AgentResult$Outbound = {
  agent: Agent$Outbound;
};

/** @internal */
export const AgentResult$outboundSchema: z.ZodType<
  AgentResult$Outbound,
  z.ZodTypeDef,
  AgentResult
> = z.object({
  agent: Agent$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentResult$ {
  /** @deprecated use `AgentResult$inboundSchema` instead. */
  export const inboundSchema = AgentResult$inboundSchema;
  /** @deprecated use `AgentResult$outboundSchema` instead. */
  export const outboundSchema = AgentResult$outboundSchema;
  /** @deprecated use `AgentResult$Outbound` instead. */
  export type Outbound = AgentResult$Outbound;
}

export function agentResultToJSON(agentResult: AgentResult): string {
  return JSON.stringify(AgentResult$outboundSchema.parse(agentResult));
}

export function agentResultFromJSON(
  jsonString: string,
): SafeParseResult<AgentResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentResult' from JSON`,
  );
}
