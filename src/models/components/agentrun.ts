/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentExecutionStatus,
  AgentExecutionStatus$inboundSchema,
  AgentExecutionStatus$outboundSchema,
} from "./agentexecutionstatus.js";
import {
  Message,
  Message$inboundSchema,
  Message$Outbound,
  Message$outboundSchema,
} from "./message.js";

/**
 * The input to the agent.
 */
export type AgentRunInput = {};

/**
 * Payload for creating a run.
 */
export type AgentRun = {
  /**
   * The ID of the agent to run.
   */
  agentId?: string | undefined;
  /**
   * The input to the agent.
   */
  input?: AgentRunInput | undefined;
  /**
   * The messages to pass an input to the agent.
   */
  messages?: Array<Message> | undefined;
  /**
   * The status of the run. One of 'error', 'success'.
   */
  status?: AgentExecutionStatus | undefined;
};

/** @internal */
export const AgentRunInput$inboundSchema: z.ZodType<
  AgentRunInput,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AgentRunInput$Outbound = {};

/** @internal */
export const AgentRunInput$outboundSchema: z.ZodType<
  AgentRunInput$Outbound,
  z.ZodTypeDef,
  AgentRunInput
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentRunInput$ {
  /** @deprecated use `AgentRunInput$inboundSchema` instead. */
  export const inboundSchema = AgentRunInput$inboundSchema;
  /** @deprecated use `AgentRunInput$outboundSchema` instead. */
  export const outboundSchema = AgentRunInput$outboundSchema;
  /** @deprecated use `AgentRunInput$Outbound` instead. */
  export type Outbound = AgentRunInput$Outbound;
}

export function agentRunInputToJSON(agentRunInput: AgentRunInput): string {
  return JSON.stringify(AgentRunInput$outboundSchema.parse(agentRunInput));
}

export function agentRunInputFromJSON(
  jsonString: string,
): SafeParseResult<AgentRunInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentRunInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentRunInput' from JSON`,
  );
}

/** @internal */
export const AgentRun$inboundSchema: z.ZodType<
  AgentRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_id: z.string().optional(),
  input: z.lazy(() => AgentRunInput$inboundSchema).optional(),
  messages: z.array(Message$inboundSchema).optional(),
  status: AgentExecutionStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
  });
});

/** @internal */
export type AgentRun$Outbound = {
  agent_id?: string | undefined;
  input?: AgentRunInput$Outbound | undefined;
  messages?: Array<Message$Outbound> | undefined;
  status?: string | undefined;
};

/** @internal */
export const AgentRun$outboundSchema: z.ZodType<
  AgentRun$Outbound,
  z.ZodTypeDef,
  AgentRun
> = z.object({
  agentId: z.string().optional(),
  input: z.lazy(() => AgentRunInput$outboundSchema).optional(),
  messages: z.array(Message$outboundSchema).optional(),
  status: AgentExecutionStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentRun$ {
  /** @deprecated use `AgentRun$inboundSchema` instead. */
  export const inboundSchema = AgentRun$inboundSchema;
  /** @deprecated use `AgentRun$outboundSchema` instead. */
  export const outboundSchema = AgentRun$outboundSchema;
  /** @deprecated use `AgentRun$Outbound` instead. */
  export type Outbound = AgentRun$Outbound;
}

export function agentRunToJSON(agentRun: AgentRun): string {
  return JSON.stringify(AgentRun$outboundSchema.parse(agentRun));
}

export function agentRunFromJSON(
  jsonString: string,
): SafeParseResult<AgentRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentRun' from JSON`,
  );
}
