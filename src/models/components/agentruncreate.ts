/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Message,
  Message$inboundSchema,
  Message$Outbound,
  Message$outboundSchema,
} from "./message.js";

/**
 * The input to the agent.
 */
export type AgentRunCreateInput = {};

/**
 * Payload for creating a run.
 */
export type AgentRunCreate = {
  /**
   * The ID of the agent to run.
   */
  agentId?: string | undefined;
  /**
   * The input to the agent.
   */
  input?: AgentRunCreateInput | undefined;
  /**
   * The messages to pass an input to the agent.
   */
  messages?: Array<Message> | undefined;
};

/** @internal */
export const AgentRunCreateInput$inboundSchema: z.ZodType<
  AgentRunCreateInput,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AgentRunCreateInput$Outbound = {};

/** @internal */
export const AgentRunCreateInput$outboundSchema: z.ZodType<
  AgentRunCreateInput$Outbound,
  z.ZodTypeDef,
  AgentRunCreateInput
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentRunCreateInput$ {
  /** @deprecated use `AgentRunCreateInput$inboundSchema` instead. */
  export const inboundSchema = AgentRunCreateInput$inboundSchema;
  /** @deprecated use `AgentRunCreateInput$outboundSchema` instead. */
  export const outboundSchema = AgentRunCreateInput$outboundSchema;
  /** @deprecated use `AgentRunCreateInput$Outbound` instead. */
  export type Outbound = AgentRunCreateInput$Outbound;
}

export function agentRunCreateInputToJSON(
  agentRunCreateInput: AgentRunCreateInput,
): string {
  return JSON.stringify(
    AgentRunCreateInput$outboundSchema.parse(agentRunCreateInput),
  );
}

export function agentRunCreateInputFromJSON(
  jsonString: string,
): SafeParseResult<AgentRunCreateInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentRunCreateInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentRunCreateInput' from JSON`,
  );
}

/** @internal */
export const AgentRunCreate$inboundSchema: z.ZodType<
  AgentRunCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_id: z.string().optional(),
  input: z.lazy(() => AgentRunCreateInput$inboundSchema).optional(),
  messages: z.array(Message$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
  });
});

/** @internal */
export type AgentRunCreate$Outbound = {
  agent_id?: string | undefined;
  input?: AgentRunCreateInput$Outbound | undefined;
  messages?: Array<Message$Outbound> | undefined;
};

/** @internal */
export const AgentRunCreate$outboundSchema: z.ZodType<
  AgentRunCreate$Outbound,
  z.ZodTypeDef,
  AgentRunCreate
> = z.object({
  agentId: z.string().optional(),
  input: z.lazy(() => AgentRunCreateInput$outboundSchema).optional(),
  messages: z.array(Message$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentRunCreate$ {
  /** @deprecated use `AgentRunCreate$inboundSchema` instead. */
  export const inboundSchema = AgentRunCreate$inboundSchema;
  /** @deprecated use `AgentRunCreate$outboundSchema` instead. */
  export const outboundSchema = AgentRunCreate$outboundSchema;
  /** @deprecated use `AgentRunCreate$Outbound` instead. */
  export type Outbound = AgentRunCreate$Outbound;
}

export function agentRunCreateToJSON(agentRunCreate: AgentRunCreate): string {
  return JSON.stringify(AgentRunCreate$outboundSchema.parse(agentRunCreate));
}

export function agentRunCreateFromJSON(
  jsonString: string,
): SafeParseResult<AgentRunCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentRunCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentRunCreate' from JSON`,
  );
}
