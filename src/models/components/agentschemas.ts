/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The schema for the agent input. In JSON Schema format.
 */
export type InputSchema = {};

/**
 * The schema for the agent output. In JSON Schema format.
 */
export type OutputSchema = {};

/**
 * Defines the structure and properties of an agent.
 */
export type AgentSchemas = {
  /**
   * The ID of the agent.
   */
  agentId: string;
  /**
   * The schema for the agent input. In JSON Schema format.
   */
  inputSchema: InputSchema;
  /**
   * The schema for the agent output. In JSON Schema format.
   */
  outputSchema: OutputSchema;
};

/** @internal */
export const InputSchema$inboundSchema: z.ZodType<
  InputSchema,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InputSchema$Outbound = {};

/** @internal */
export const InputSchema$outboundSchema: z.ZodType<
  InputSchema$Outbound,
  z.ZodTypeDef,
  InputSchema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputSchema$ {
  /** @deprecated use `InputSchema$inboundSchema` instead. */
  export const inboundSchema = InputSchema$inboundSchema;
  /** @deprecated use `InputSchema$outboundSchema` instead. */
  export const outboundSchema = InputSchema$outboundSchema;
  /** @deprecated use `InputSchema$Outbound` instead. */
  export type Outbound = InputSchema$Outbound;
}

export function inputSchemaToJSON(inputSchema: InputSchema): string {
  return JSON.stringify(InputSchema$outboundSchema.parse(inputSchema));
}

export function inputSchemaFromJSON(
  jsonString: string,
): SafeParseResult<InputSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputSchema' from JSON`,
  );
}

/** @internal */
export const OutputSchema$inboundSchema: z.ZodType<
  OutputSchema,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OutputSchema$Outbound = {};

/** @internal */
export const OutputSchema$outboundSchema: z.ZodType<
  OutputSchema$Outbound,
  z.ZodTypeDef,
  OutputSchema
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OutputSchema$ {
  /** @deprecated use `OutputSchema$inboundSchema` instead. */
  export const inboundSchema = OutputSchema$inboundSchema;
  /** @deprecated use `OutputSchema$outboundSchema` instead. */
  export const outboundSchema = OutputSchema$outboundSchema;
  /** @deprecated use `OutputSchema$Outbound` instead. */
  export type Outbound = OutputSchema$Outbound;
}

export function outputSchemaToJSON(outputSchema: OutputSchema): string {
  return JSON.stringify(OutputSchema$outboundSchema.parse(outputSchema));
}

export function outputSchemaFromJSON(
  jsonString: string,
): SafeParseResult<OutputSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OutputSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OutputSchema' from JSON`,
  );
}

/** @internal */
export const AgentSchemas$inboundSchema: z.ZodType<
  AgentSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  agent_id: z.string(),
  input_schema: z.lazy(() => InputSchema$inboundSchema),
  output_schema: z.lazy(() => OutputSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
    "input_schema": "inputSchema",
    "output_schema": "outputSchema",
  });
});

/** @internal */
export type AgentSchemas$Outbound = {
  agent_id: string;
  input_schema: InputSchema$Outbound;
  output_schema: OutputSchema$Outbound;
};

/** @internal */
export const AgentSchemas$outboundSchema: z.ZodType<
  AgentSchemas$Outbound,
  z.ZodTypeDef,
  AgentSchemas
> = z.object({
  agentId: z.string(),
  inputSchema: z.lazy(() => InputSchema$outboundSchema),
  outputSchema: z.lazy(() => OutputSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
    inputSchema: "input_schema",
    outputSchema: "output_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AgentSchemas$ {
  /** @deprecated use `AgentSchemas$inboundSchema` instead. */
  export const inboundSchema = AgentSchemas$inboundSchema;
  /** @deprecated use `AgentSchemas$outboundSchema` instead. */
  export const outboundSchema = AgentSchemas$outboundSchema;
  /** @deprecated use `AgentSchemas$Outbound` instead. */
  export type Outbound = AgentSchemas$Outbound;
}

export function agentSchemasToJSON(agentSchemas: AgentSchemas): string {
  return JSON.stringify(AgentSchemas$outboundSchema.parse(agentSchemas));
}

export function agentSchemasFromJSON(
  jsonString: string,
): SafeParseResult<AgentSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AgentSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AgentSchemas' from JSON`,
  );
}
