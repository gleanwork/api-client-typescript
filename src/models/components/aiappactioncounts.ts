/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Map from action to frequency.
 */
export type AiAppActionCounts = {
  /**
   * Total number of Slackbot responses, both proactive and reactive.
   */
  totalSlackbotResponses?: number | undefined;
  /**
   * Total number of Slackbot responses shared publicly (upvoted).
   */
  totalSlackbotResponsesShared?: number | undefined;
  /**
   * Total number of Slackbot responses rejected as not helpful (downvoted).
   */
  totalSlackbotResponsesNotHelpful?: number | undefined;
  /**
   * Total number of Chat messages sent in requested period.
   */
  totalChatMessages?: number | undefined;
  /**
   * Total number of Chat messages which received upvotes by the user.
   */
  totalUpvotes?: number | undefined;
  /**
   * Total number of Chat messages which received downvotes by the user.
   */
  totalDownvotes?: number | undefined;
  additionalProperties?: { [k: string]: number };
};

/** @internal */
export const AiAppActionCounts$inboundSchema: z.ZodType<
  AiAppActionCounts,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    totalSlackbotResponses: z.number().int().optional(),
    totalSlackbotResponsesShared: z.number().int().optional(),
    totalSlackbotResponsesNotHelpful: z.number().int().optional(),
    totalChatMessages: z.number().int().optional(),
    totalUpvotes: z.number().int().optional(),
    totalDownvotes: z.number().int().optional(),
  }).catchall(z.number().int()),
  "additionalProperties",
  true,
);

/** @internal */
export type AiAppActionCounts$Outbound = {
  totalSlackbotResponses?: number | undefined;
  totalSlackbotResponsesShared?: number | undefined;
  totalSlackbotResponsesNotHelpful?: number | undefined;
  totalChatMessages?: number | undefined;
  totalUpvotes?: number | undefined;
  totalDownvotes?: number | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const AiAppActionCounts$outboundSchema: z.ZodType<
  AiAppActionCounts$Outbound,
  z.ZodTypeDef,
  AiAppActionCounts
> = z.object({
  totalSlackbotResponses: z.number().int().optional(),
  totalSlackbotResponsesShared: z.number().int().optional(),
  totalSlackbotResponsesNotHelpful: z.number().int().optional(),
  totalChatMessages: z.number().int().optional(),
  totalUpvotes: z.number().int().optional(),
  totalDownvotes: z.number().int().optional(),
  additionalProperties: z.record(z.number().int()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AiAppActionCounts$ {
  /** @deprecated use `AiAppActionCounts$inboundSchema` instead. */
  export const inboundSchema = AiAppActionCounts$inboundSchema;
  /** @deprecated use `AiAppActionCounts$outboundSchema` instead. */
  export const outboundSchema = AiAppActionCounts$outboundSchema;
  /** @deprecated use `AiAppActionCounts$Outbound` instead. */
  export type Outbound = AiAppActionCounts$Outbound;
}

export function aiAppActionCountsToJSON(
  aiAppActionCounts: AiAppActionCounts,
): string {
  return JSON.stringify(
    AiAppActionCounts$outboundSchema.parse(aiAppActionCounts),
  );
}

export function aiAppActionCountsFromJSON(
  jsonString: string,
): SafeParseResult<AiAppActionCounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AiAppActionCounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AiAppActionCounts' from JSON`,
  );
}
