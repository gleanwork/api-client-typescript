/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ResolutionStep,
  ResolutionStep$inboundSchema,
  ResolutionStep$Outbound,
  ResolutionStep$outboundSchema,
} from "./resolutionstep.js";

/**
 * Banner type to display for this alert
 */
export const BannerType = {
  ActionRequired: "ACTION_REQUIRED",
  ReviewRequired: "REVIEW_REQUIRED",
} as const;
/**
 * Banner type to display for this alert
 */
export type BannerType = ClosedEnum<typeof BannerType>;

/**
 * Admin alert related information that is used to construct the admin alert email
 */
export type AlertData = {
  /**
   * Banner type to display for this alert
   */
  bannerType?: BannerType | undefined;
  /**
   * Text to display for the alert banner
   */
  bannerText?: string | undefined;
  /**
   * Text for what happened section of an admin alert.
   */
  alertDescription?: string | undefined;
  /**
   * Text for why this matters section of an admin alert.
   */
  relevanceDescription?: string | undefined;
  /**
   * Text for to do section before actual steps.
   */
  resolutionStepsDescription?: string | undefined;
  /**
   * Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)
   */
  resolutionSteps?: Array<ResolutionStep> | undefined;
  /**
   * Help link for the alert that the admin can reference
   */
  helpLink?: string | undefined;
  /**
   * The name of the admin alert
   */
  name?: string | undefined;
  /**
   * The time that the alert was triggered
   */
  triggeredTime?: Date | undefined;
  /**
   * Human readable name of the project instance
   */
  projectName?: string | undefined;
  /**
   * Datasource that the alert is related to (possibly null)
   */
  datasource?: string | undefined;
  /**
   * datasource instance's user set display name
   */
  instanceDisplayName?: string | undefined;
  /**
   * datasource instance's name e.g. confluence_0a0odwv
   */
  instanceName?: string | undefined;
  /**
   * custom text in subject line
   */
  emailSubjectDescription?: string | undefined;
};

/** @internal */
export const BannerType$inboundSchema: z.ZodNativeEnum<typeof BannerType> = z
  .nativeEnum(BannerType);

/** @internal */
export const BannerType$outboundSchema: z.ZodNativeEnum<typeof BannerType> =
  BannerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BannerType$ {
  /** @deprecated use `BannerType$inboundSchema` instead. */
  export const inboundSchema = BannerType$inboundSchema;
  /** @deprecated use `BannerType$outboundSchema` instead. */
  export const outboundSchema = BannerType$outboundSchema;
}

/** @internal */
export const AlertData$inboundSchema: z.ZodType<
  AlertData,
  z.ZodTypeDef,
  unknown
> = z.object({
  bannerType: BannerType$inboundSchema.optional(),
  bannerText: z.string().optional(),
  alertDescription: z.string().optional(),
  relevanceDescription: z.string().optional(),
  resolutionStepsDescription: z.string().optional(),
  resolutionSteps: z.array(ResolutionStep$inboundSchema).optional(),
  helpLink: z.string().optional(),
  name: z.string().optional(),
  triggeredTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  projectName: z.string().optional(),
  datasource: z.string().optional(),
  instanceDisplayName: z.string().optional(),
  instanceName: z.string().optional(),
  emailSubjectDescription: z.string().optional(),
});

/** @internal */
export type AlertData$Outbound = {
  bannerType?: string | undefined;
  bannerText?: string | undefined;
  alertDescription?: string | undefined;
  relevanceDescription?: string | undefined;
  resolutionStepsDescription?: string | undefined;
  resolutionSteps?: Array<ResolutionStep$Outbound> | undefined;
  helpLink?: string | undefined;
  name?: string | undefined;
  triggeredTime?: string | undefined;
  projectName?: string | undefined;
  datasource?: string | undefined;
  instanceDisplayName?: string | undefined;
  instanceName?: string | undefined;
  emailSubjectDescription?: string | undefined;
};

/** @internal */
export const AlertData$outboundSchema: z.ZodType<
  AlertData$Outbound,
  z.ZodTypeDef,
  AlertData
> = z.object({
  bannerType: BannerType$outboundSchema.optional(),
  bannerText: z.string().optional(),
  alertDescription: z.string().optional(),
  relevanceDescription: z.string().optional(),
  resolutionStepsDescription: z.string().optional(),
  resolutionSteps: z.array(ResolutionStep$outboundSchema).optional(),
  helpLink: z.string().optional(),
  name: z.string().optional(),
  triggeredTime: z.date().transform(v => v.toISOString()).optional(),
  projectName: z.string().optional(),
  datasource: z.string().optional(),
  instanceDisplayName: z.string().optional(),
  instanceName: z.string().optional(),
  emailSubjectDescription: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlertData$ {
  /** @deprecated use `AlertData$inboundSchema` instead. */
  export const inboundSchema = AlertData$inboundSchema;
  /** @deprecated use `AlertData$outboundSchema` instead. */
  export const outboundSchema = AlertData$outboundSchema;
  /** @deprecated use `AlertData$Outbound` instead. */
  export type Outbound = AlertData$Outbound;
}

export function alertDataToJSON(alertData: AlertData): string {
  return JSON.stringify(AlertData$outboundSchema.parse(alertData));
}

export function alertDataFromJSON(
  jsonString: string,
): SafeParseResult<AlertData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AlertData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AlertData' from JSON`,
  );
}
