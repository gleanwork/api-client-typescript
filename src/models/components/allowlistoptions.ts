/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Terms that are allow-listed during the scans. If any finding picked up by a rule exactly matches a term in the allow-list, it will not be counted as a violation.
 */
export type AllowlistOptions = {
  /**
   * list of words and phrases to consider as whitelisted content
   */
  terms?: Array<string> | undefined;
};

/** @internal */
export const AllowlistOptions$inboundSchema: z.ZodType<
  AllowlistOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  terms: z.array(z.string()).optional(),
});

/** @internal */
export type AllowlistOptions$Outbound = {
  terms?: Array<string> | undefined;
};

/** @internal */
export const AllowlistOptions$outboundSchema: z.ZodType<
  AllowlistOptions$Outbound,
  z.ZodTypeDef,
  AllowlistOptions
> = z.object({
  terms: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllowlistOptions$ {
  /** @deprecated use `AllowlistOptions$inboundSchema` instead. */
  export const inboundSchema = AllowlistOptions$inboundSchema;
  /** @deprecated use `AllowlistOptions$outboundSchema` instead. */
  export const outboundSchema = AllowlistOptions$outboundSchema;
  /** @deprecated use `AllowlistOptions$Outbound` instead. */
  export type Outbound = AllowlistOptions$Outbound;
}

export function allowlistOptionsToJSON(
  allowlistOptions: AllowlistOptions,
): string {
  return JSON.stringify(
    AllowlistOptions$outboundSchema.parse(allowlistOptions),
  );
}

export function allowlistOptionsFromJSON(
  jsonString: string,
): SafeParseResult<AllowlistOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllowlistOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllowlistOptions' from JSON`,
  );
}
