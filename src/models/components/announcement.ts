/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  ObjectPermissions,
  ObjectPermissions$inboundSchema,
  ObjectPermissions$Outbound,
  ObjectPermissions$outboundSchema,
} from "./objectpermissions.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";
import {
  StructuredText,
  StructuredText$inboundSchema,
  StructuredText$Outbound,
  StructuredText$outboundSchema,
} from "./structuredtext.js";
import {
  Thumbnail,
  Thumbnail$inboundSchema,
  Thumbnail$Outbound,
  Thumbnail$outboundSchema,
} from "./thumbnail.js";

/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
export const AnnouncementChannel1 = {
  Main: "MAIN",
  SocialFeed: "SOCIAL_FEED",
} as const;
/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
export type AnnouncementChannel1 = ClosedEnum<typeof AnnouncementChannel1>;

/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
export const AnnouncementPostType = {
  Text: "TEXT",
  Link: "LINK",
} as const;
/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
export type AnnouncementPostType = ClosedEnum<typeof AnnouncementPostType>;

export type AnnouncementViewerInfo = {
  /**
   * Whether the viewer has dismissed the announcement.
   */
  isDismissed?: boolean | undefined;
  /**
   * Whether the viewer has read the announcement.
   */
  isRead?: boolean | undefined;
};

export type Announcement = {
  /**
   * The date and time at which the announcement becomes active.
   */
  startTime?: Date | undefined;
  /**
   * The date and time at which the announcement expires.
   */
  endTime?: Date | undefined;
  /**
   * The headline of the announcement.
   */
  title?: string | undefined;
  body?: StructuredText | undefined;
  /**
   * An emoji used to indicate the nature of the announcement.
   */
  emoji?: string | undefined;
  thumbnail?: Thumbnail | undefined;
  banner?: Thumbnail | undefined;
  /**
   * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
   */
  audienceFilters?: Array<FacetFilter> | undefined;
  /**
   * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
   */
  sourceDocumentId?: string | undefined;
  /**
   * Whether or not to hide an author attribution.
   */
  hideAttribution?: boolean | undefined;
  /**
   * This determines whether this is a Social Feed post or a regular announcement.
   */
  channel?: AnnouncementChannel1 | undefined;
  /**
   * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
   */
  postType?: AnnouncementPostType | undefined;
  /**
   * Used by the Social Feed to pin posts to the front of the feed.
   */
  isPrioritized?: boolean | undefined;
  /**
   * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
   */
  viewUrl?: string | undefined;
  /**
   * The opaque id of the associated draft.
   */
  draftId?: number | undefined;
  permissions?: ObjectPermissions | undefined;
  /**
   * The opaque id of the announcement.
   */
  id?: number | undefined;
  author?: Person | undefined;
  /**
   * Server Unix timestamp of the creation time (in seconds since epoch UTC).
   */
  createTimestamp?: number | undefined;
  /**
   * Server Unix timestamp of the last update time (in seconds since epoch UTC).
   */
  lastUpdateTimestamp?: number | undefined;
  updatedBy?: Person | undefined;
  viewerInfo?: AnnouncementViewerInfo | undefined;
  sourceDocument?: Document | undefined;
  /**
   * Whether or not the announcement is published.
   */
  isPublished?: boolean | undefined;
};

/** @internal */
export const AnnouncementChannel1$inboundSchema: z.ZodNativeEnum<
  typeof AnnouncementChannel1
> = z.nativeEnum(AnnouncementChannel1);

/** @internal */
export const AnnouncementChannel1$outboundSchema: z.ZodNativeEnum<
  typeof AnnouncementChannel1
> = AnnouncementChannel1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementChannel1$ {
  /** @deprecated use `AnnouncementChannel1$inboundSchema` instead. */
  export const inboundSchema = AnnouncementChannel1$inboundSchema;
  /** @deprecated use `AnnouncementChannel1$outboundSchema` instead. */
  export const outboundSchema = AnnouncementChannel1$outboundSchema;
}

/** @internal */
export const AnnouncementPostType$inboundSchema: z.ZodNativeEnum<
  typeof AnnouncementPostType
> = z.nativeEnum(AnnouncementPostType);

/** @internal */
export const AnnouncementPostType$outboundSchema: z.ZodNativeEnum<
  typeof AnnouncementPostType
> = AnnouncementPostType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementPostType$ {
  /** @deprecated use `AnnouncementPostType$inboundSchema` instead. */
  export const inboundSchema = AnnouncementPostType$inboundSchema;
  /** @deprecated use `AnnouncementPostType$outboundSchema` instead. */
  export const outboundSchema = AnnouncementPostType$outboundSchema;
}

/** @internal */
export const AnnouncementViewerInfo$inboundSchema: z.ZodType<
  AnnouncementViewerInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  isDismissed: z.boolean().optional(),
  isRead: z.boolean().optional(),
});

/** @internal */
export type AnnouncementViewerInfo$Outbound = {
  isDismissed?: boolean | undefined;
  isRead?: boolean | undefined;
};

/** @internal */
export const AnnouncementViewerInfo$outboundSchema: z.ZodType<
  AnnouncementViewerInfo$Outbound,
  z.ZodTypeDef,
  AnnouncementViewerInfo
> = z.object({
  isDismissed: z.boolean().optional(),
  isRead: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementViewerInfo$ {
  /** @deprecated use `AnnouncementViewerInfo$inboundSchema` instead. */
  export const inboundSchema = AnnouncementViewerInfo$inboundSchema;
  /** @deprecated use `AnnouncementViewerInfo$outboundSchema` instead. */
  export const outboundSchema = AnnouncementViewerInfo$outboundSchema;
  /** @deprecated use `AnnouncementViewerInfo$Outbound` instead. */
  export type Outbound = AnnouncementViewerInfo$Outbound;
}

export function announcementViewerInfoToJSON(
  announcementViewerInfo: AnnouncementViewerInfo,
): string {
  return JSON.stringify(
    AnnouncementViewerInfo$outboundSchema.parse(announcementViewerInfo),
  );
}

export function announcementViewerInfoFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementViewerInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementViewerInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementViewerInfo' from JSON`,
  );
}

/** @internal */
export const Announcement$inboundSchema: z.ZodType<
  Announcement,
  z.ZodTypeDef,
  unknown
> = z.object({
  startTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  endTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  title: z.string().optional(),
  body: StructuredText$inboundSchema.optional(),
  emoji: z.string().optional(),
  thumbnail: Thumbnail$inboundSchema.optional(),
  banner: Thumbnail$inboundSchema.optional(),
  audienceFilters: z.array(FacetFilter$inboundSchema).optional(),
  sourceDocumentId: z.string().optional(),
  hideAttribution: z.boolean().optional(),
  channel: AnnouncementChannel1$inboundSchema.optional(),
  postType: AnnouncementPostType$inboundSchema.optional(),
  isPrioritized: z.boolean().optional(),
  viewUrl: z.string().optional(),
  draftId: z.number().int().optional(),
  permissions: ObjectPermissions$inboundSchema.optional(),
  id: z.number().int().optional(),
  author: Person$inboundSchema.optional(),
  createTimestamp: z.number().int().optional(),
  lastUpdateTimestamp: z.number().int().optional(),
  updatedBy: Person$inboundSchema.optional(),
  viewerInfo: z.lazy(() => AnnouncementViewerInfo$inboundSchema).optional(),
  sourceDocument: Document$inboundSchema.optional(),
  isPublished: z.boolean().optional(),
});

/** @internal */
export type Announcement$Outbound = {
  startTime?: string | undefined;
  endTime?: string | undefined;
  title?: string | undefined;
  body?: StructuredText$Outbound | undefined;
  emoji?: string | undefined;
  thumbnail?: Thumbnail$Outbound | undefined;
  banner?: Thumbnail$Outbound | undefined;
  audienceFilters?: Array<FacetFilter$Outbound> | undefined;
  sourceDocumentId?: string | undefined;
  hideAttribution?: boolean | undefined;
  channel?: string | undefined;
  postType?: string | undefined;
  isPrioritized?: boolean | undefined;
  viewUrl?: string | undefined;
  draftId?: number | undefined;
  permissions?: ObjectPermissions$Outbound | undefined;
  id?: number | undefined;
  author?: Person$Outbound | undefined;
  createTimestamp?: number | undefined;
  lastUpdateTimestamp?: number | undefined;
  updatedBy?: Person$Outbound | undefined;
  viewerInfo?: AnnouncementViewerInfo$Outbound | undefined;
  sourceDocument?: Document$Outbound | undefined;
  isPublished?: boolean | undefined;
};

/** @internal */
export const Announcement$outboundSchema: z.ZodType<
  Announcement$Outbound,
  z.ZodTypeDef,
  Announcement
> = z.object({
  startTime: z.date().transform(v => v.toISOString()).optional(),
  endTime: z.date().transform(v => v.toISOString()).optional(),
  title: z.string().optional(),
  body: StructuredText$outboundSchema.optional(),
  emoji: z.string().optional(),
  thumbnail: Thumbnail$outboundSchema.optional(),
  banner: Thumbnail$outboundSchema.optional(),
  audienceFilters: z.array(FacetFilter$outboundSchema).optional(),
  sourceDocumentId: z.string().optional(),
  hideAttribution: z.boolean().optional(),
  channel: AnnouncementChannel1$outboundSchema.optional(),
  postType: AnnouncementPostType$outboundSchema.optional(),
  isPrioritized: z.boolean().optional(),
  viewUrl: z.string().optional(),
  draftId: z.number().int().optional(),
  permissions: ObjectPermissions$outboundSchema.optional(),
  id: z.number().int().optional(),
  author: Person$outboundSchema.optional(),
  createTimestamp: z.number().int().optional(),
  lastUpdateTimestamp: z.number().int().optional(),
  updatedBy: Person$outboundSchema.optional(),
  viewerInfo: z.lazy(() => AnnouncementViewerInfo$outboundSchema).optional(),
  sourceDocument: Document$outboundSchema.optional(),
  isPublished: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Announcement$ {
  /** @deprecated use `Announcement$inboundSchema` instead. */
  export const inboundSchema = Announcement$inboundSchema;
  /** @deprecated use `Announcement$outboundSchema` instead. */
  export const outboundSchema = Announcement$outboundSchema;
  /** @deprecated use `Announcement$Outbound` instead. */
  export type Outbound = Announcement$Outbound;
}

export function announcementToJSON(announcement: Announcement): string {
  return JSON.stringify(Announcement$outboundSchema.parse(announcement));
}

export function announcementFromJSON(
  jsonString: string,
): SafeParseResult<Announcement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Announcement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Announcement' from JSON`,
  );
}
