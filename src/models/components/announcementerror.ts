/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AnnouncementErrorErrorType = {
  InvalidId: "INVALID_ID",
} as const;
export type AnnouncementErrorErrorType = ClosedEnum<
  typeof AnnouncementErrorErrorType
>;

export type AnnouncementError = {
  errorType?: AnnouncementErrorErrorType | undefined;
};

/** @internal */
export const AnnouncementErrorErrorType$inboundSchema: z.ZodNativeEnum<
  typeof AnnouncementErrorErrorType
> = z.nativeEnum(AnnouncementErrorErrorType);

/** @internal */
export const AnnouncementErrorErrorType$outboundSchema: z.ZodNativeEnum<
  typeof AnnouncementErrorErrorType
> = AnnouncementErrorErrorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementErrorErrorType$ {
  /** @deprecated use `AnnouncementErrorErrorType$inboundSchema` instead. */
  export const inboundSchema = AnnouncementErrorErrorType$inboundSchema;
  /** @deprecated use `AnnouncementErrorErrorType$outboundSchema` instead. */
  export const outboundSchema = AnnouncementErrorErrorType$outboundSchema;
}

/** @internal */
export const AnnouncementError$inboundSchema: z.ZodType<
  AnnouncementError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorType: AnnouncementErrorErrorType$inboundSchema.optional(),
});

/** @internal */
export type AnnouncementError$Outbound = {
  errorType?: string | undefined;
};

/** @internal */
export const AnnouncementError$outboundSchema: z.ZodType<
  AnnouncementError$Outbound,
  z.ZodTypeDef,
  AnnouncementError
> = z.object({
  errorType: AnnouncementErrorErrorType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnnouncementError$ {
  /** @deprecated use `AnnouncementError$inboundSchema` instead. */
  export const inboundSchema = AnnouncementError$inboundSchema;
  /** @deprecated use `AnnouncementError$outboundSchema` instead. */
  export const outboundSchema = AnnouncementError$outboundSchema;
  /** @deprecated use `AnnouncementError$Outbound` instead. */
  export type Outbound = AnnouncementError$Outbound;
}

export function announcementErrorToJSON(
  announcementError: AnnouncementError,
): string {
  return JSON.stringify(
    AnnouncementError$outboundSchema.parse(announcementError),
  );
}

export function announcementErrorFromJSON(
  jsonString: string,
): SafeParseResult<AnnouncementError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnnouncementError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnnouncementError' from JSON`,
  );
}
