/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TimeInterval,
  TimeInterval$inboundSchema,
  TimeInterval$Outbound,
  TimeInterval$outboundSchema,
} from "./timeinterval.js";

/**
 * The nature of the event, for example "out of office".
 */
export const AnonymousEventEventType = {
  Default: "DEFAULT",
  OutOfOffice: "OUT_OF_OFFICE",
} as const;
/**
 * The nature of the event, for example "out of office".
 */
export type AnonymousEventEventType = ClosedEnum<
  typeof AnonymousEventEventType
>;

/**
 * A generic, light-weight calendar event.
 */
export type AnonymousEvent = {
  time?: TimeInterval | undefined;
  /**
   * The nature of the event, for example "out of office".
   */
  eventType?: AnonymousEventEventType | undefined;
};

/** @internal */
export const AnonymousEventEventType$inboundSchema: z.ZodNativeEnum<
  typeof AnonymousEventEventType
> = z.nativeEnum(AnonymousEventEventType);

/** @internal */
export const AnonymousEventEventType$outboundSchema: z.ZodNativeEnum<
  typeof AnonymousEventEventType
> = AnonymousEventEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnonymousEventEventType$ {
  /** @deprecated use `AnonymousEventEventType$inboundSchema` instead. */
  export const inboundSchema = AnonymousEventEventType$inboundSchema;
  /** @deprecated use `AnonymousEventEventType$outboundSchema` instead. */
  export const outboundSchema = AnonymousEventEventType$outboundSchema;
}

/** @internal */
export const AnonymousEvent$inboundSchema: z.ZodType<
  AnonymousEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  time: TimeInterval$inboundSchema.optional(),
  eventType: AnonymousEventEventType$inboundSchema.optional(),
});

/** @internal */
export type AnonymousEvent$Outbound = {
  time?: TimeInterval$Outbound | undefined;
  eventType?: string | undefined;
};

/** @internal */
export const AnonymousEvent$outboundSchema: z.ZodType<
  AnonymousEvent$Outbound,
  z.ZodTypeDef,
  AnonymousEvent
> = z.object({
  time: TimeInterval$outboundSchema.optional(),
  eventType: AnonymousEventEventType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnonymousEvent$ {
  /** @deprecated use `AnonymousEvent$inboundSchema` instead. */
  export const inboundSchema = AnonymousEvent$inboundSchema;
  /** @deprecated use `AnonymousEvent$outboundSchema` instead. */
  export const outboundSchema = AnonymousEvent$outboundSchema;
  /** @deprecated use `AnonymousEvent$Outbound` instead. */
  export type Outbound = AnonymousEvent$Outbound;
}

export function anonymousEventToJSON(anonymousEvent: AnonymousEvent): string {
  return JSON.stringify(AnonymousEvent$outboundSchema.parse(anonymousEvent));
}

export function anonymousEventFromJSON(
  jsonString: string,
): SafeParseResult<AnonymousEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnonymousEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnonymousEvent' from JSON`,
  );
}
