/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  ObjectPermissions,
  ObjectPermissions$inboundSchema,
  ObjectPermissions$Outbound,
  ObjectPermissions$outboundSchema,
} from "./objectpermissions.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";
import {
  UserRoleSpecification,
  UserRoleSpecification$inboundSchema,
  UserRoleSpecification$Outbound,
  UserRoleSpecification$outboundSchema,
} from "./userrolespecification.js";

export type AnswerBoard = {
  /**
   * The unique name of the Collection.
   */
  name: string;
  /**
   * A brief summary of the Collection's contents.
   */
  description: string;
  /**
   * A list of added user roles for the Collection.
   */
  addedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * A list of removed user roles for the Collection.
   */
  removedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
   */
  audienceFilters?: Array<FacetFilter> | undefined;
  permissions?: ObjectPermissions | undefined;
  /**
   * The unique ID of the Answer Board.
   */
  id: number;
  createTime?: Date | undefined;
  updateTime?: Date | undefined;
  creator?: Person | undefined;
  updatedBy?: Person | undefined;
  /**
   * The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
   */
  itemCount?: number | undefined;
  /**
   * A list of user roles for the Answer Board.
   */
  roles?: Array<UserRoleSpecification> | undefined;
};

/** @internal */
export const AnswerBoard$inboundSchema: z.ZodType<
  AnswerBoard,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  addedRoles: z.array(z.lazy(() => UserRoleSpecification$inboundSchema))
    .optional(),
  removedRoles: z.array(z.lazy(() => UserRoleSpecification$inboundSchema))
    .optional(),
  audienceFilters: z.array(FacetFilter$inboundSchema).optional(),
  permissions: ObjectPermissions$inboundSchema.optional(),
  id: z.number().int(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  creator: z.lazy(() => Person$inboundSchema).optional(),
  updatedBy: z.lazy(() => Person$inboundSchema).optional(),
  itemCount: z.number().int().optional(),
  roles: z.array(z.lazy(() => UserRoleSpecification$inboundSchema)).optional(),
});

/** @internal */
export type AnswerBoard$Outbound = {
  name: string;
  description: string;
  addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  audienceFilters?: Array<FacetFilter$Outbound> | undefined;
  permissions?: ObjectPermissions$Outbound | undefined;
  id: number;
  createTime?: string | undefined;
  updateTime?: string | undefined;
  creator?: Person$Outbound | undefined;
  updatedBy?: Person$Outbound | undefined;
  itemCount?: number | undefined;
  roles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
export const AnswerBoard$outboundSchema: z.ZodType<
  AnswerBoard$Outbound,
  z.ZodTypeDef,
  AnswerBoard
> = z.object({
  name: z.string(),
  description: z.string(),
  addedRoles: z.array(z.lazy(() => UserRoleSpecification$outboundSchema))
    .optional(),
  removedRoles: z.array(z.lazy(() => UserRoleSpecification$outboundSchema))
    .optional(),
  audienceFilters: z.array(FacetFilter$outboundSchema).optional(),
  permissions: ObjectPermissions$outboundSchema.optional(),
  id: z.number().int(),
  createTime: z.date().transform(v => v.toISOString()).optional(),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  creator: z.lazy(() => Person$outboundSchema).optional(),
  updatedBy: z.lazy(() => Person$outboundSchema).optional(),
  itemCount: z.number().int().optional(),
  roles: z.array(z.lazy(() => UserRoleSpecification$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswerBoard$ {
  /** @deprecated use `AnswerBoard$inboundSchema` instead. */
  export const inboundSchema = AnswerBoard$inboundSchema;
  /** @deprecated use `AnswerBoard$outboundSchema` instead. */
  export const outboundSchema = AnswerBoard$outboundSchema;
  /** @deprecated use `AnswerBoard$Outbound` instead. */
  export type Outbound = AnswerBoard$Outbound;
}

export function answerBoardToJSON(answerBoard: AnswerBoard): string {
  return JSON.stringify(AnswerBoard$outboundSchema.parse(answerBoard));
}

export function answerBoardFromJSON(
  jsonString: string,
): SafeParseResult<AnswerBoard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnswerBoard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnswerBoard' from JSON`,
  );
}
