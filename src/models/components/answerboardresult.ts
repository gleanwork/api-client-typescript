/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnswerBoard,
  AnswerBoard$inboundSchema,
  AnswerBoard$Outbound,
  AnswerBoard$outboundSchema,
} from "./answerboard.js";

export type AnswerBoardResult = {
  board: AnswerBoard;
  /**
   * An opaque token that represents this particular Answer Board. To be used for /feedback reporting.
   */
  trackingToken?: string | undefined;
};

/** @internal */
export const AnswerBoardResult$inboundSchema: z.ZodType<
  AnswerBoardResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  board: AnswerBoard$inboundSchema,
  trackingToken: z.string().optional(),
});

/** @internal */
export type AnswerBoardResult$Outbound = {
  board: AnswerBoard$Outbound;
  trackingToken?: string | undefined;
};

/** @internal */
export const AnswerBoardResult$outboundSchema: z.ZodType<
  AnswerBoardResult$Outbound,
  z.ZodTypeDef,
  AnswerBoardResult
> = z.object({
  board: AnswerBoard$outboundSchema,
  trackingToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswerBoardResult$ {
  /** @deprecated use `AnswerBoardResult$inboundSchema` instead. */
  export const inboundSchema = AnswerBoardResult$inboundSchema;
  /** @deprecated use `AnswerBoardResult$outboundSchema` instead. */
  export const outboundSchema = AnswerBoardResult$outboundSchema;
  /** @deprecated use `AnswerBoardResult$Outbound` instead. */
  export type Outbound = AnswerBoardResult$Outbound;
}

export function answerBoardResultToJSON(
  answerBoardResult: AnswerBoardResult,
): string {
  return JSON.stringify(
    AnswerBoardResult$outboundSchema.parse(answerBoardResult),
  );
}

export function answerBoardResultFromJSON(
  jsonString: string,
): SafeParseResult<AnswerBoardResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnswerBoardResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnswerBoardResult' from JSON`,
  );
}
