/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DocumentSpecUnion,
  DocumentSpecUnion$inboundSchema,
  DocumentSpecUnion$Outbound,
  DocumentSpecUnion$outboundSchema,
} from "./documentspecunion.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  StructuredTextMutableProperties,
  StructuredTextMutableProperties$inboundSchema,
  StructuredTextMutableProperties$Outbound,
  StructuredTextMutableProperties$outboundSchema,
} from "./structuredtextmutableproperties.js";
import {
  UserRoleSpecification,
  UserRoleSpecification$inboundSchema,
  UserRoleSpecification$Outbound,
  UserRoleSpecification$outboundSchema,
} from "./userrolespecification.js";

export const AnswerCreationDataSourceType = {
  Document: "DOCUMENT",
  Assistant: "ASSISTANT",
} as const;
export type AnswerCreationDataSourceType = ClosedEnum<
  typeof AnswerCreationDataSourceType
>;

export type AnswerCreationData = {
  question?: string | undefined;
  /**
   * Additional ways of phrasing this question.
   */
  questionVariations?: Array<string> | undefined;
  /**
   * The plain text answer to the question.
   */
  bodyText?: string | undefined;
  /**
   * The parent board ID of this Answer, or 0 if it's a floating Answer.
   */
  boardId?: number | undefined;
  /**
   * Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
   */
  audienceFilters?: Array<FacetFilter> | undefined;
  /**
   * A list of user roles for the answer added by the owner.
   */
  addedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * A list of user roles for the answer removed by the owner.
   */
  removedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * A list of roles for this answer explicitly granted by an owner, editor, or admin.
   */
  roles?: Array<UserRoleSpecification> | undefined;
  sourceDocumentSpec?: DocumentSpecUnion | undefined;
  sourceType?: AnswerCreationDataSourceType | undefined;
  /**
   * IDs of Collections to which a document is added.
   */
  addedCollections?: Array<number> | undefined;
  combinedAnswerText?: StructuredTextMutableProperties | undefined;
};

/** @internal */
export const AnswerCreationDataSourceType$inboundSchema: z.ZodNativeEnum<
  typeof AnswerCreationDataSourceType
> = z.nativeEnum(AnswerCreationDataSourceType);

/** @internal */
export const AnswerCreationDataSourceType$outboundSchema: z.ZodNativeEnum<
  typeof AnswerCreationDataSourceType
> = AnswerCreationDataSourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswerCreationDataSourceType$ {
  /** @deprecated use `AnswerCreationDataSourceType$inboundSchema` instead. */
  export const inboundSchema = AnswerCreationDataSourceType$inboundSchema;
  /** @deprecated use `AnswerCreationDataSourceType$outboundSchema` instead. */
  export const outboundSchema = AnswerCreationDataSourceType$outboundSchema;
}

/** @internal */
export const AnswerCreationData$inboundSchema: z.ZodType<
  AnswerCreationData,
  z.ZodTypeDef,
  unknown
> = z.object({
  question: z.string().optional(),
  questionVariations: z.array(z.string()).optional(),
  bodyText: z.string().optional(),
  boardId: z.number().int().optional(),
  audienceFilters: z.array(FacetFilter$inboundSchema).optional(),
  addedRoles: z.array(UserRoleSpecification$inboundSchema).optional(),
  removedRoles: z.array(UserRoleSpecification$inboundSchema).optional(),
  roles: z.array(UserRoleSpecification$inboundSchema).optional(),
  sourceDocumentSpec: DocumentSpecUnion$inboundSchema.optional(),
  sourceType: AnswerCreationDataSourceType$inboundSchema.optional(),
  addedCollections: z.array(z.number().int()).optional(),
  combinedAnswerText: StructuredTextMutableProperties$inboundSchema.optional(),
});

/** @internal */
export type AnswerCreationData$Outbound = {
  question?: string | undefined;
  questionVariations?: Array<string> | undefined;
  bodyText?: string | undefined;
  boardId?: number | undefined;
  audienceFilters?: Array<FacetFilter$Outbound> | undefined;
  addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  roles?: Array<UserRoleSpecification$Outbound> | undefined;
  sourceDocumentSpec?: DocumentSpecUnion$Outbound | undefined;
  sourceType?: string | undefined;
  addedCollections?: Array<number> | undefined;
  combinedAnswerText?: StructuredTextMutableProperties$Outbound | undefined;
};

/** @internal */
export const AnswerCreationData$outboundSchema: z.ZodType<
  AnswerCreationData$Outbound,
  z.ZodTypeDef,
  AnswerCreationData
> = z.object({
  question: z.string().optional(),
  questionVariations: z.array(z.string()).optional(),
  bodyText: z.string().optional(),
  boardId: z.number().int().optional(),
  audienceFilters: z.array(FacetFilter$outboundSchema).optional(),
  addedRoles: z.array(UserRoleSpecification$outboundSchema).optional(),
  removedRoles: z.array(UserRoleSpecification$outboundSchema).optional(),
  roles: z.array(UserRoleSpecification$outboundSchema).optional(),
  sourceDocumentSpec: DocumentSpecUnion$outboundSchema.optional(),
  sourceType: AnswerCreationDataSourceType$outboundSchema.optional(),
  addedCollections: z.array(z.number().int()).optional(),
  combinedAnswerText: StructuredTextMutableProperties$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswerCreationData$ {
  /** @deprecated use `AnswerCreationData$inboundSchema` instead. */
  export const inboundSchema = AnswerCreationData$inboundSchema;
  /** @deprecated use `AnswerCreationData$outboundSchema` instead. */
  export const outboundSchema = AnswerCreationData$outboundSchema;
  /** @deprecated use `AnswerCreationData$Outbound` instead. */
  export type Outbound = AnswerCreationData$Outbound;
}

export function answerCreationDataToJSON(
  answerCreationData: AnswerCreationData,
): string {
  return JSON.stringify(
    AnswerCreationData$outboundSchema.parse(answerCreationData),
  );
}

export function answerCreationDataFromJSON(
  jsonString: string,
): SafeParseResult<AnswerCreationData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnswerCreationData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnswerCreationData' from JSON`,
  );
}
