/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnswerLike,
  AnswerLike$inboundSchema,
  AnswerLike$Outbound,
  AnswerLike$outboundSchema,
} from "./answerlike.js";

export type AnswerLikes = {
  likedBy: Array<AnswerLike>;
  /**
   * Whether the user in context liked the answer.
   */
  likedByUser: boolean;
  /**
   * The total number of likes for the answer.
   */
  numLikes: number;
};

/** @internal */
export const AnswerLikes$inboundSchema: z.ZodType<
  AnswerLikes,
  z.ZodTypeDef,
  unknown
> = z.object({
  likedBy: z.array(z.lazy(() => AnswerLike$inboundSchema)),
  likedByUser: z.boolean(),
  numLikes: z.number().int(),
});

/** @internal */
export type AnswerLikes$Outbound = {
  likedBy: Array<AnswerLike$Outbound>;
  likedByUser: boolean;
  numLikes: number;
};

/** @internal */
export const AnswerLikes$outboundSchema: z.ZodType<
  AnswerLikes$Outbound,
  z.ZodTypeDef,
  AnswerLikes
> = z.object({
  likedBy: z.array(z.lazy(() => AnswerLike$outboundSchema)),
  likedByUser: z.boolean(),
  numLikes: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AnswerLikes$ {
  /** @deprecated use `AnswerLikes$inboundSchema` instead. */
  export const inboundSchema = AnswerLikes$inboundSchema;
  /** @deprecated use `AnswerLikes$outboundSchema` instead. */
  export const outboundSchema = AnswerLikes$outboundSchema;
  /** @deprecated use `AnswerLikes$Outbound` instead. */
  export type Outbound = AnswerLikes$Outbound;
}

export function answerLikesToJSON(answerLikes: AnswerLikes): string {
  return JSON.stringify(AnswerLikes$outboundSchema.parse(answerLikes));
}

export function answerLikesFromJSON(
  jsonString: string,
): SafeParseResult<AnswerLikes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AnswerLikes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AnswerLikes' from JSON`,
  );
}
