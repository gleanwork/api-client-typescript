/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AppResult = {
  /**
   * The app or other repository type this represents
   */
  datasource: string;
  /**
   * The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
   */
  docType?: string | undefined;
  /**
   * Mimetype is used to differentiate between sub applications from a datasource (e.g. Sheets, Docs from Gdrive)
   */
  mimeType?: string | undefined;
  /**
   * If there is available icon URL.
   */
  iconUrl?: string | undefined;
};

/** @internal */
export const AppResult$inboundSchema: z.ZodType<
  AppResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasource: z.string(),
  docType: z.string().optional(),
  mimeType: z.string().optional(),
  iconUrl: z.string().optional(),
});

/** @internal */
export type AppResult$Outbound = {
  datasource: string;
  docType?: string | undefined;
  mimeType?: string | undefined;
  iconUrl?: string | undefined;
};

/** @internal */
export const AppResult$outboundSchema: z.ZodType<
  AppResult$Outbound,
  z.ZodTypeDef,
  AppResult
> = z.object({
  datasource: z.string(),
  docType: z.string().optional(),
  mimeType: z.string().optional(),
  iconUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AppResult$ {
  /** @deprecated use `AppResult$inboundSchema` instead. */
  export const inboundSchema = AppResult$inboundSchema;
  /** @deprecated use `AppResult$outboundSchema` instead. */
  export const outboundSchema = AppResult$outboundSchema;
  /** @deprecated use `AppResult$Outbound` instead. */
  export type Outbound = AppResult$Outbound;
}

export function appResultToJSON(appResult: AppResult): string {
  return JSON.stringify(AppResult$outboundSchema.parse(appResult));
}

export function appResultFromJSON(
  jsonString: string,
): SafeParseResult<AppResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AppResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AppResult' from JSON`,
  );
}
