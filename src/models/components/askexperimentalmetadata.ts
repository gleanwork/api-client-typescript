/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AskExperimentalMetadata = {
  /**
   * Whether or not the query (i.e. the slack message) has a mention.
   */
  queryHasMentions?: boolean | undefined;
  /**
   * Whether or not the query (i.e. the slack message) is length appropriate.
   */
  queryIsLengthAppropriate?: boolean | undefined;
  /**
   * Whether or not the query (i.e. the slack message) has a question term.
   */
  queryIsAnswerable?: boolean | undefined;
};

/** @internal */
export const AskExperimentalMetadata$inboundSchema: z.ZodType<
  AskExperimentalMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  QueryHasMentions: z.boolean().optional(),
  QueryIsLengthAppropriate: z.boolean().optional(),
  QueryIsAnswerable: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "QueryHasMentions": "queryHasMentions",
    "QueryIsLengthAppropriate": "queryIsLengthAppropriate",
    "QueryIsAnswerable": "queryIsAnswerable",
  });
});

/** @internal */
export type AskExperimentalMetadata$Outbound = {
  QueryHasMentions?: boolean | undefined;
  QueryIsLengthAppropriate?: boolean | undefined;
  QueryIsAnswerable?: boolean | undefined;
};

/** @internal */
export const AskExperimentalMetadata$outboundSchema: z.ZodType<
  AskExperimentalMetadata$Outbound,
  z.ZodTypeDef,
  AskExperimentalMetadata
> = z.object({
  queryHasMentions: z.boolean().optional(),
  queryIsLengthAppropriate: z.boolean().optional(),
  queryIsAnswerable: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    queryHasMentions: "QueryHasMentions",
    queryIsLengthAppropriate: "QueryIsLengthAppropriate",
    queryIsAnswerable: "QueryIsAnswerable",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AskExperimentalMetadata$ {
  /** @deprecated use `AskExperimentalMetadata$inboundSchema` instead. */
  export const inboundSchema = AskExperimentalMetadata$inboundSchema;
  /** @deprecated use `AskExperimentalMetadata$outboundSchema` instead. */
  export const outboundSchema = AskExperimentalMetadata$outboundSchema;
  /** @deprecated use `AskExperimentalMetadata$Outbound` instead. */
  export type Outbound = AskExperimentalMetadata$Outbound;
}

export function askExperimentalMetadataToJSON(
  askExperimentalMetadata: AskExperimentalMetadata,
): string {
  return JSON.stringify(
    AskExperimentalMetadata$outboundSchema.parse(askExperimentalMetadata),
  );
}

export function askExperimentalMetadataFromJSON(
  jsonString: string,
): SafeParseResult<AskExperimentalMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AskExperimentalMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AskExperimentalMetadata' from JSON`,
  );
}
