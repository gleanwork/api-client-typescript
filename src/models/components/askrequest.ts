/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AskExperimentalMetadata,
  AskExperimentalMetadata$inboundSchema,
  AskExperimentalMetadata$Outbound,
  AskExperimentalMetadata$outboundSchema,
} from "./askexperimentalmetadata.js";
import {
  ChatRestrictionFilters,
  ChatRestrictionFilters$inboundSchema,
  ChatRestrictionFilters$Outbound,
  ChatRestrictionFilters$outboundSchema,
} from "./chatrestrictionfilters.js";
import {
  DocumentSpecUnion,
  DocumentSpecUnion$inboundSchema,
  DocumentSpecUnion$Outbound,
  DocumentSpecUnion$outboundSchema,
} from "./documentspecunion.js";
import {
  SearchRequest,
  SearchRequest$inboundSchema,
  SearchRequest$Outbound,
  SearchRequest$outboundSchema,
} from "./searchrequest.js";

/**
 * Which backend to use to fulfill the requests.
 */
export const Backend = {
  Search: "SEARCH",
  Chat: "CHAT",
} as const;
/**
 * Which backend to use to fulfill the requests.
 */
export type Backend = ClosedEnum<typeof Backend>;

export type AskRequest = {
  /**
   * Whether to apply only question detection and not answering.
   */
  detectOnly?: boolean | undefined;
  askExperimentalMetadata?: AskExperimentalMetadata | undefined;
  searchRequest: SearchRequest;
  /**
   * A list of Glean Document IDs to be excluded when retrieving documents. Note that, currently, it only supports exclusion of one Glean Documnet ID based spec. If multiple specifications are provided only the first Glean Document ID based spec is excluded and the remaining specs are ignored.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  excludedDocumentSpecs?: Array<DocumentSpecUnion> | undefined;
  /**
   * Search operators to append to the query
   */
  operators?: string | undefined;
  /**
   * Which backend to use to fulfill the requests.
   */
  backend?: Backend | undefined;
  /**
   * The ID of the application this request originates from, used to determine the configuration of underlying chat processes when invoking the CHAT backend. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
   */
  chatApplicationId?: string | undefined;
  inclusions?: ChatRestrictionFilters | undefined;
  exclusions?: ChatRestrictionFilters | undefined;
};

/** @internal */
export const Backend$inboundSchema: z.ZodNativeEnum<typeof Backend> = z
  .nativeEnum(Backend);

/** @internal */
export const Backend$outboundSchema: z.ZodNativeEnum<typeof Backend> =
  Backend$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Backend$ {
  /** @deprecated use `Backend$inboundSchema` instead. */
  export const inboundSchema = Backend$inboundSchema;
  /** @deprecated use `Backend$outboundSchema` instead. */
  export const outboundSchema = Backend$outboundSchema;
}

/** @internal */
export const AskRequest$inboundSchema: z.ZodType<
  AskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  detectOnly: z.boolean().optional(),
  AskExperimentalMetadata: AskExperimentalMetadata$inboundSchema.optional(),
  searchRequest: SearchRequest$inboundSchema,
  excludedDocumentSpecs: z.array(DocumentSpecUnion$inboundSchema).optional(),
  operators: z.string().optional(),
  backend: Backend$inboundSchema.optional(),
  chatApplicationId: z.string().optional(),
  inclusions: ChatRestrictionFilters$inboundSchema.optional(),
  exclusions: ChatRestrictionFilters$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "AskExperimentalMetadata": "askExperimentalMetadata",
  });
});

/** @internal */
export type AskRequest$Outbound = {
  detectOnly?: boolean | undefined;
  AskExperimentalMetadata?: AskExperimentalMetadata$Outbound | undefined;
  searchRequest: SearchRequest$Outbound;
  excludedDocumentSpecs?: Array<DocumentSpecUnion$Outbound> | undefined;
  operators?: string | undefined;
  backend?: string | undefined;
  chatApplicationId?: string | undefined;
  inclusions?: ChatRestrictionFilters$Outbound | undefined;
  exclusions?: ChatRestrictionFilters$Outbound | undefined;
};

/** @internal */
export const AskRequest$outboundSchema: z.ZodType<
  AskRequest$Outbound,
  z.ZodTypeDef,
  AskRequest
> = z.object({
  detectOnly: z.boolean().optional(),
  askExperimentalMetadata: AskExperimentalMetadata$outboundSchema.optional(),
  searchRequest: SearchRequest$outboundSchema,
  excludedDocumentSpecs: z.array(DocumentSpecUnion$outboundSchema).optional(),
  operators: z.string().optional(),
  backend: Backend$outboundSchema.optional(),
  chatApplicationId: z.string().optional(),
  inclusions: ChatRestrictionFilters$outboundSchema.optional(),
  exclusions: ChatRestrictionFilters$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    askExperimentalMetadata: "AskExperimentalMetadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AskRequest$ {
  /** @deprecated use `AskRequest$inboundSchema` instead. */
  export const inboundSchema = AskRequest$inboundSchema;
  /** @deprecated use `AskRequest$outboundSchema` instead. */
  export const outboundSchema = AskRequest$outboundSchema;
  /** @deprecated use `AskRequest$Outbound` instead. */
  export type Outbound = AskRequest$Outbound;
}

export function askRequestToJSON(askRequest: AskRequest): string {
  return JSON.stringify(AskRequest$outboundSchema.parse(askRequest));
}

export function askRequestFromJSON(
  jsonString: string,
): SafeParseResult<AskRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AskRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AskRequest' from JSON`,
  );
}
