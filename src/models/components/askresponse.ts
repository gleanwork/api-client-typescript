/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatResponse,
  ChatResponse$inboundSchema,
  ChatResponse$Outbound,
  ChatResponse$outboundSchema,
} from "./chatresponse.js";
import {
  SearchResponse,
  SearchResponse$inboundSchema,
  SearchResponse$Outbound,
  SearchResponse$outboundSchema,
} from "./searchresponse.js";

export type AskResponse = {
  /**
   * Whether or not the query was a question.
   */
  isQuestion: boolean;
  /**
   * The part of the query which was used as a question for search
   */
  question?: string | undefined;
  searchResponse?: SearchResponse | undefined;
  /**
   * A single response from the /chat backend.
   */
  chatResponse?: ChatResponse | undefined;
};

/** @internal */
export const AskResponse$inboundSchema: z.ZodType<
  AskResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  isQuestion: z.boolean(),
  question: z.string().optional(),
  searchResponse: SearchResponse$inboundSchema.optional(),
  chatResponse: ChatResponse$inboundSchema.optional(),
});

/** @internal */
export type AskResponse$Outbound = {
  isQuestion: boolean;
  question?: string | undefined;
  searchResponse?: SearchResponse$Outbound | undefined;
  chatResponse?: ChatResponse$Outbound | undefined;
};

/** @internal */
export const AskResponse$outboundSchema: z.ZodType<
  AskResponse$Outbound,
  z.ZodTypeDef,
  AskResponse
> = z.object({
  isQuestion: z.boolean(),
  question: z.string().optional(),
  searchResponse: SearchResponse$outboundSchema.optional(),
  chatResponse: ChatResponse$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AskResponse$ {
  /** @deprecated use `AskResponse$inboundSchema` instead. */
  export const inboundSchema = AskResponse$inboundSchema;
  /** @deprecated use `AskResponse$outboundSchema` instead. */
  export const outboundSchema = AskResponse$outboundSchema;
  /** @deprecated use `AskResponse$Outbound` instead. */
  export type Outbound = AskResponse$Outbound;
}

export function askResponseToJSON(askResponse: AskResponse): string {
  return JSON.stringify(AskResponse$outboundSchema.parse(askResponse));
}

export function askResponseFromJSON(
  jsonString: string,
): SafeParseResult<AskResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AskResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AskResponse' from JSON`,
  );
}
