/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentClientConfig,
  AgentClientConfig$inboundSchema,
  AgentClientConfig$Outbound,
  AgentClientConfig$outboundSchema,
} from "./agentclientconfig.js";
import {
  AgentMigrationStatuses,
  AgentMigrationStatuses$inboundSchema,
  AgentMigrationStatuses$Outbound,
  AgentMigrationStatuses$outboundSchema,
} from "./agentmigrationstatuses.js";
import {
  FileUploadConfig,
  FileUploadConfig$inboundSchema,
  FileUploadConfig$Outbound,
  FileUploadConfig$outboundSchema,
} from "./fileuploadconfig.js";
import {
  WebSearchConfig,
  WebSearchConfig$inboundSchema,
  WebSearchConfig$Outbound,
  WebSearchConfig$outboundSchema,
} from "./websearchconfig.js";

/**
 * Configuration settings specific to Assistant features
 */
export type AssistantConfig = {
  /**
   * Disclaimer message to be displayed as a banner on top of chat. This could be in markdown format with "\n" between each line.
   */
  chatBannerText?: string | undefined;
  /**
   * Disclaimer message to be displayed below the chat box. This could be in markdown format.
   */
  chatBoxDisclaimer?: string | undefined;
  /**
   * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
   */
  chatLinkUrlTemplate?: string | undefined;
  /**
   * Label for the chat header during initial state.
   */
  chatStarterHeader?: string | undefined;
  /**
   * Label for the chat subheader during initial state.
   */
  chatStarterSubheader?: string | undefined;
  agentClientConfigs?: Array<AgentClientConfig> | undefined;
  /**
   * A list of datasources that are disabled in Chat
   */
  redlistedDatasources?: Array<string> | undefined;
  /**
   * A list of datasources that are always visible in Chat
   */
  greenlistedDatasourceInstances?: Array<string> | undefined;
  /**
   * Whether the GPT agent (general mode) for Chat is enabled
   */
  gptAgentEnabled?: boolean | undefined;
  /**
   * Configuration settings for the chat file upload feature
   */
  fileUpload?: FileUploadConfig | undefined;
  /**
   * Whether the chat history for Chat is enabled for the deployment
   */
  chatHistoryEnabled?: boolean | undefined;
  /**
   * Redirect URL for "Chat guide" in the default chat starter subheader
   */
  chatGuideUrl?: string | undefined;
  /**
   * Whether prompt templates feature are enabled for the deployment.
   */
  promptsEnabled?: boolean | undefined;
  /**
   * Whether a default user can share prompts to the prompt library.
   */
  defaultUserCanSharePrompts?: boolean | undefined;
  /**
   * Whether a default user can share agents to the agent library.
   */
  defaultUserCanShareAgents?: boolean | undefined;
  /**
   * Whether file upload for Chat is enabled for the deployment
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  fileUploadEnabled?: boolean | undefined;
  /**
   * Configuration settings related to web search
   */
  webSearch?: WebSearchConfig | undefined;
  /**
   * Whether admin has enabled Chat Bar V3 for the deployment. This shall eventually go away when we launch Chat Bar V3 to all customers.
   */
  chatBarV3Enabled?: boolean | undefined;
  /**
   * Placeholder text for the chat bar
   */
  chatBarPlaceholderText?: string | undefined;
  agentMigrationStatuses?: AgentMigrationStatuses | undefined;
};

/** @internal */
export const AssistantConfig$inboundSchema: z.ZodType<
  AssistantConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  chatBannerText: z.string().optional(),
  chatBoxDisclaimer: z.string().optional(),
  chatLinkUrlTemplate: z.string().optional(),
  chatStarterHeader: z.string().optional(),
  chatStarterSubheader: z.string().optional(),
  agentClientConfigs: z.array(AgentClientConfig$inboundSchema).optional(),
  redlistedDatasources: z.array(z.string()).optional(),
  greenlistedDatasourceInstances: z.array(z.string()).optional(),
  gptAgentEnabled: z.boolean().optional(),
  fileUpload: FileUploadConfig$inboundSchema.optional(),
  chatHistoryEnabled: z.boolean().optional(),
  chatGuideUrl: z.string().optional(),
  promptsEnabled: z.boolean().optional(),
  defaultUserCanSharePrompts: z.boolean().optional(),
  defaultUserCanShareAgents: z.boolean().optional(),
  fileUploadEnabled: z.boolean().optional(),
  webSearch: WebSearchConfig$inboundSchema.optional(),
  chatBarV3Enabled: z.boolean().optional(),
  chatBarPlaceholderText: z.string().optional(),
  agentMigrationStatuses: AgentMigrationStatuses$inboundSchema.optional(),
});

/** @internal */
export type AssistantConfig$Outbound = {
  chatBannerText?: string | undefined;
  chatBoxDisclaimer?: string | undefined;
  chatLinkUrlTemplate?: string | undefined;
  chatStarterHeader?: string | undefined;
  chatStarterSubheader?: string | undefined;
  agentClientConfigs?: Array<AgentClientConfig$Outbound> | undefined;
  redlistedDatasources?: Array<string> | undefined;
  greenlistedDatasourceInstances?: Array<string> | undefined;
  gptAgentEnabled?: boolean | undefined;
  fileUpload?: FileUploadConfig$Outbound | undefined;
  chatHistoryEnabled?: boolean | undefined;
  chatGuideUrl?: string | undefined;
  promptsEnabled?: boolean | undefined;
  defaultUserCanSharePrompts?: boolean | undefined;
  defaultUserCanShareAgents?: boolean | undefined;
  fileUploadEnabled?: boolean | undefined;
  webSearch?: WebSearchConfig$Outbound | undefined;
  chatBarV3Enabled?: boolean | undefined;
  chatBarPlaceholderText?: string | undefined;
  agentMigrationStatuses?: AgentMigrationStatuses$Outbound | undefined;
};

/** @internal */
export const AssistantConfig$outboundSchema: z.ZodType<
  AssistantConfig$Outbound,
  z.ZodTypeDef,
  AssistantConfig
> = z.object({
  chatBannerText: z.string().optional(),
  chatBoxDisclaimer: z.string().optional(),
  chatLinkUrlTemplate: z.string().optional(),
  chatStarterHeader: z.string().optional(),
  chatStarterSubheader: z.string().optional(),
  agentClientConfigs: z.array(AgentClientConfig$outboundSchema).optional(),
  redlistedDatasources: z.array(z.string()).optional(),
  greenlistedDatasourceInstances: z.array(z.string()).optional(),
  gptAgentEnabled: z.boolean().optional(),
  fileUpload: FileUploadConfig$outboundSchema.optional(),
  chatHistoryEnabled: z.boolean().optional(),
  chatGuideUrl: z.string().optional(),
  promptsEnabled: z.boolean().optional(),
  defaultUserCanSharePrompts: z.boolean().optional(),
  defaultUserCanShareAgents: z.boolean().optional(),
  fileUploadEnabled: z.boolean().optional(),
  webSearch: WebSearchConfig$outboundSchema.optional(),
  chatBarV3Enabled: z.boolean().optional(),
  chatBarPlaceholderText: z.string().optional(),
  agentMigrationStatuses: AgentMigrationStatuses$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantConfig$ {
  /** @deprecated use `AssistantConfig$inboundSchema` instead. */
  export const inboundSchema = AssistantConfig$inboundSchema;
  /** @deprecated use `AssistantConfig$outboundSchema` instead. */
  export const outboundSchema = AssistantConfig$outboundSchema;
  /** @deprecated use `AssistantConfig$Outbound` instead. */
  export type Outbound = AssistantConfig$Outbound;
}

export function assistantConfigToJSON(
  assistantConfig: AssistantConfig,
): string {
  return JSON.stringify(AssistantConfig$outboundSchema.parse(assistantConfig));
}

export function assistantConfigFromJSON(
  jsonString: string,
): SafeParseResult<AssistantConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssistantConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssistantConfig' from JSON`,
  );
}
