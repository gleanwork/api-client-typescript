/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of authentication being used.
 *
 * @remarks
 * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
 * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
 * 'OAUTH_USER' uses individual user tokens for external API calls.
 * 'DWD' refers to domain wide delegation.
 */
export const AuthConfigType = {
  None: "NONE",
  OauthUser: "OAUTH_USER",
  OauthAdmin: "OAUTH_ADMIN",
  ApiKey: "API_KEY",
  BasicAuth: "BASIC_AUTH",
  Dwd: "DWD",
} as const;
/**
 * The type of authentication being used.
 *
 * @remarks
 * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
 * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
 * 'OAUTH_USER' uses individual user tokens for external API calls.
 * 'DWD' refers to domain wide delegation.
 */
export type AuthConfigType = ClosedEnum<typeof AuthConfigType>;

/**
 * The type of grant type being used.
 */
export const GrantType = {
  AuthCode: "AUTH_CODE",
  ClientCredentials: "CLIENT_CREDENTIALS",
} as const;
/**
 * The type of grant type being used.
 */
export type GrantType = ClosedEnum<typeof GrantType>;

/**
 * Auth status of the tool.
 */
export const AuthConfigStatus = {
  AwaitingAuth: "AWAITING_AUTH",
  Authorized: "AUTHORIZED",
} as const;
/**
 * Auth status of the tool.
 */
export type AuthConfigStatus = ClosedEnum<typeof AuthConfigStatus>;

/**
 * Config for tool's authentication method.
 */
export type AuthConfig = {
  /**
   * Whether or not this tool is hosted on-premise.
   */
  isOnPrem?: boolean | undefined;
  /**
   * Whether or not this uses central auth.
   */
  usesCentralAuth?: boolean | undefined;
  /**
   * The type of authentication being used.
   *
   * @remarks
   * Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
   * 'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
   * 'OAUTH_USER' uses individual user tokens for external API calls.
   * 'DWD' refers to domain wide delegation.
   */
  type?: AuthConfigType | undefined;
  /**
   * The type of grant type being used.
   */
  grantType?: GrantType | undefined;
  /**
   * Auth status of the tool.
   */
  status?: AuthConfigStatus | undefined;
  /**
   * The URL where users will be directed to start the OAuth flow.
   */
  clientUrl?: string | undefined;
  /**
   * A list of strings denoting the different scopes or access levels required by the tool.
   */
  scopes?: Array<string> | undefined;
  /**
   * A list of strings denoting the different audience which can access the tool.
   */
  audiences?: Array<string> | undefined;
  /**
   * The OAuth provider's endpoint, where access tokens are requested.
   */
  authorizationUrl?: string | undefined;
  /**
   * The time the tool was last authorized in ISO format (ISO 8601).
   */
  lastAuthorizedAt?: Date | undefined;
};

/** @internal */
export const AuthConfigType$inboundSchema: z.ZodNativeEnum<
  typeof AuthConfigType
> = z.nativeEnum(AuthConfigType);

/** @internal */
export const AuthConfigType$outboundSchema: z.ZodNativeEnum<
  typeof AuthConfigType
> = AuthConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthConfigType$ {
  /** @deprecated use `AuthConfigType$inboundSchema` instead. */
  export const inboundSchema = AuthConfigType$inboundSchema;
  /** @deprecated use `AuthConfigType$outboundSchema` instead. */
  export const outboundSchema = AuthConfigType$outboundSchema;
}

/** @internal */
export const GrantType$inboundSchema: z.ZodNativeEnum<typeof GrantType> = z
  .nativeEnum(GrantType);

/** @internal */
export const GrantType$outboundSchema: z.ZodNativeEnum<typeof GrantType> =
  GrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantType$ {
  /** @deprecated use `GrantType$inboundSchema` instead. */
  export const inboundSchema = GrantType$inboundSchema;
  /** @deprecated use `GrantType$outboundSchema` instead. */
  export const outboundSchema = GrantType$outboundSchema;
}

/** @internal */
export const AuthConfigStatus$inboundSchema: z.ZodNativeEnum<
  typeof AuthConfigStatus
> = z.nativeEnum(AuthConfigStatus);

/** @internal */
export const AuthConfigStatus$outboundSchema: z.ZodNativeEnum<
  typeof AuthConfigStatus
> = AuthConfigStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthConfigStatus$ {
  /** @deprecated use `AuthConfigStatus$inboundSchema` instead. */
  export const inboundSchema = AuthConfigStatus$inboundSchema;
  /** @deprecated use `AuthConfigStatus$outboundSchema` instead. */
  export const outboundSchema = AuthConfigStatus$outboundSchema;
}

/** @internal */
export const AuthConfig$inboundSchema: z.ZodType<
  AuthConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  isOnPrem: z.boolean().optional(),
  usesCentralAuth: z.boolean().optional(),
  type: AuthConfigType$inboundSchema.optional(),
  grantType: GrantType$inboundSchema.optional(),
  status: AuthConfigStatus$inboundSchema.optional(),
  client_url: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  audiences: z.array(z.string()).optional(),
  authorization_url: z.string().optional(),
  lastAuthorizedAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "client_url": "clientUrl",
    "authorization_url": "authorizationUrl",
  });
});

/** @internal */
export type AuthConfig$Outbound = {
  isOnPrem?: boolean | undefined;
  usesCentralAuth?: boolean | undefined;
  type?: string | undefined;
  grantType?: string | undefined;
  status?: string | undefined;
  client_url?: string | undefined;
  scopes?: Array<string> | undefined;
  audiences?: Array<string> | undefined;
  authorization_url?: string | undefined;
  lastAuthorizedAt?: string | undefined;
};

/** @internal */
export const AuthConfig$outboundSchema: z.ZodType<
  AuthConfig$Outbound,
  z.ZodTypeDef,
  AuthConfig
> = z.object({
  isOnPrem: z.boolean().optional(),
  usesCentralAuth: z.boolean().optional(),
  type: AuthConfigType$outboundSchema.optional(),
  grantType: GrantType$outboundSchema.optional(),
  status: AuthConfigStatus$outboundSchema.optional(),
  clientUrl: z.string().optional(),
  scopes: z.array(z.string()).optional(),
  audiences: z.array(z.string()).optional(),
  authorizationUrl: z.string().optional(),
  lastAuthorizedAt: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    clientUrl: "client_url",
    authorizationUrl: "authorization_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthConfig$ {
  /** @deprecated use `AuthConfig$inboundSchema` instead. */
  export const inboundSchema = AuthConfig$inboundSchema;
  /** @deprecated use `AuthConfig$outboundSchema` instead. */
  export const outboundSchema = AuthConfig$outboundSchema;
  /** @deprecated use `AuthConfig$Outbound` instead. */
  export type Outbound = AuthConfig$Outbound;
}

export function authConfigToJSON(authConfig: AuthConfig): string {
  return JSON.stringify(AuthConfig$outboundSchema.parse(authConfig));
}

export function authConfigFromJSON(
  jsonString: string,
): SafeParseResult<AuthConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthConfig' from JSON`,
  );
}
