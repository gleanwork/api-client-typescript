/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AuthToken = {
  accessToken: string;
  datasource: string;
  scope?: string | undefined;
  tokenType?: string | undefined;
  /**
   * Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
   */
  authUser?: string | undefined;
  /**
   * Unix timestamp when this token expires (in seconds since epoch UTC).
   */
  expiration?: number | undefined;
};

/** @internal */
export const AuthToken$inboundSchema: z.ZodType<
  AuthToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
  datasource: z.string(),
  scope: z.string().optional(),
  tokenType: z.string().optional(),
  authUser: z.string().optional(),
  expiration: z.number().int().optional(),
});

/** @internal */
export type AuthToken$Outbound = {
  accessToken: string;
  datasource: string;
  scope?: string | undefined;
  tokenType?: string | undefined;
  authUser?: string | undefined;
  expiration?: number | undefined;
};

/** @internal */
export const AuthToken$outboundSchema: z.ZodType<
  AuthToken$Outbound,
  z.ZodTypeDef,
  AuthToken
> = z.object({
  accessToken: z.string(),
  datasource: z.string(),
  scope: z.string().optional(),
  tokenType: z.string().optional(),
  authUser: z.string().optional(),
  expiration: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthToken$ {
  /** @deprecated use `AuthToken$inboundSchema` instead. */
  export const inboundSchema = AuthToken$inboundSchema;
  /** @deprecated use `AuthToken$outboundSchema` instead. */
  export const outboundSchema = AuthToken$outboundSchema;
  /** @deprecated use `AuthToken$Outbound` instead. */
  export type Outbound = AuthToken$Outbound;
}

export function authTokenToJSON(authToken: AuthToken): string {
  return JSON.stringify(AuthToken$outboundSchema.parse(authToken));
}

export function authTokenFromJSON(
  jsonString: string,
): SafeParseResult<AuthToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthToken' from JSON`,
  );
}
