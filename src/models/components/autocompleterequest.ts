/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthToken,
  AuthToken$inboundSchema,
  AuthToken$Outbound,
  AuthToken$outboundSchema,
} from "./authtoken.js";
import {
  SessionInfo,
  SessionInfo$inboundSchema,
  SessionInfo$Outbound,
  SessionInfo$outboundSchema,
} from "./sessioninfo.js";

export const AutocompleteRequestResultType = {
  AdditionalDocument: "ADDITIONAL_DOCUMENT",
  App: "APP",
  BrowserHistory: "BROWSER_HISTORY",
  Datasource: "DATASOURCE",
  Document: "DOCUMENT",
  Entity: "ENTITY",
  Golink: "GOLINK",
  History: "HISTORY",
  NewChat: "NEW_CHAT",
  Operator: "OPERATOR",
  OperatorValue: "OPERATOR_VALUE",
  Quicklink: "QUICKLINK",
  Suggestion: "SUGGESTION",
} as const;
export type AutocompleteRequestResultType = ClosedEnum<
  typeof AutocompleteRequestResultType
>;

export type AutocompleteRequest = {
  trackingToken?: string | undefined;
  sessionInfo?: SessionInfo | undefined;
  /**
   * Partially typed query.
   */
  query?: string | undefined;
  /**
   * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
   */
  datasourcesFilter?: Array<string> | undefined;
  /**
   * Filter to only return results relevant to the given datasource.
   */
  datasource?: string | undefined;
  /**
   * Filter to only return results of the given type(s). All types may be returned if omitted.
   */
  resultTypes?: Array<AutocompleteRequestResultType> | undefined;
  /**
   * Maximum number of results to be returned. If no value is provided, the backend will cap at 200.
   *
   * @remarks
   */
  resultSize?: number | undefined;
  /**
   * Auth tokens which may be used for federated results.
   */
  authTokens?: Array<AuthToken> | undefined;
};

/** @internal */
export const AutocompleteRequestResultType$inboundSchema: z.ZodNativeEnum<
  typeof AutocompleteRequestResultType
> = z.nativeEnum(AutocompleteRequestResultType);

/** @internal */
export const AutocompleteRequestResultType$outboundSchema: z.ZodNativeEnum<
  typeof AutocompleteRequestResultType
> = AutocompleteRequestResultType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutocompleteRequestResultType$ {
  /** @deprecated use `AutocompleteRequestResultType$inboundSchema` instead. */
  export const inboundSchema = AutocompleteRequestResultType$inboundSchema;
  /** @deprecated use `AutocompleteRequestResultType$outboundSchema` instead. */
  export const outboundSchema = AutocompleteRequestResultType$outboundSchema;
}

/** @internal */
export const AutocompleteRequest$inboundSchema: z.ZodType<
  AutocompleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  trackingToken: z.string().optional(),
  sessionInfo: SessionInfo$inboundSchema.optional(),
  query: z.string().optional(),
  datasourcesFilter: z.array(z.string()).optional(),
  datasource: z.string().optional(),
  resultTypes: z.array(AutocompleteRequestResultType$inboundSchema).optional(),
  resultSize: z.number().int().optional(),
  authTokens: z.array(AuthToken$inboundSchema).optional(),
});

/** @internal */
export type AutocompleteRequest$Outbound = {
  trackingToken?: string | undefined;
  sessionInfo?: SessionInfo$Outbound | undefined;
  query?: string | undefined;
  datasourcesFilter?: Array<string> | undefined;
  datasource?: string | undefined;
  resultTypes?: Array<string> | undefined;
  resultSize?: number | undefined;
  authTokens?: Array<AuthToken$Outbound> | undefined;
};

/** @internal */
export const AutocompleteRequest$outboundSchema: z.ZodType<
  AutocompleteRequest$Outbound,
  z.ZodTypeDef,
  AutocompleteRequest
> = z.object({
  trackingToken: z.string().optional(),
  sessionInfo: SessionInfo$outboundSchema.optional(),
  query: z.string().optional(),
  datasourcesFilter: z.array(z.string()).optional(),
  datasource: z.string().optional(),
  resultTypes: z.array(AutocompleteRequestResultType$outboundSchema).optional(),
  resultSize: z.number().int().optional(),
  authTokens: z.array(AuthToken$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutocompleteRequest$ {
  /** @deprecated use `AutocompleteRequest$inboundSchema` instead. */
  export const inboundSchema = AutocompleteRequest$inboundSchema;
  /** @deprecated use `AutocompleteRequest$outboundSchema` instead. */
  export const outboundSchema = AutocompleteRequest$outboundSchema;
  /** @deprecated use `AutocompleteRequest$Outbound` instead. */
  export type Outbound = AutocompleteRequest$Outbound;
}

export function autocompleteRequestToJSON(
  autocompleteRequest: AutocompleteRequest,
): string {
  return JSON.stringify(
    AutocompleteRequest$outboundSchema.parse(autocompleteRequest),
  );
}

export function autocompleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<AutocompleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutocompleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutocompleteRequest' from JSON`,
  );
}
