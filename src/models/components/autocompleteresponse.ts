/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutocompleteResult,
  AutocompleteResult$inboundSchema,
  AutocompleteResult$Outbound,
  AutocompleteResult$outboundSchema,
} from "./autocompleteresult.js";
import {
  AutocompleteResultGroup,
  AutocompleteResultGroup$inboundSchema,
  AutocompleteResultGroup$Outbound,
  AutocompleteResultGroup$outboundSchema,
} from "./autocompleteresultgroup.js";
import {
  GleanDataError,
  GleanDataError$inboundSchema,
  GleanDataError$Outbound,
  GleanDataError$outboundSchema,
} from "./gleandataerror.js";
import {
  SessionInfo,
  SessionInfo$inboundSchema,
  SessionInfo$Outbound,
  SessionInfo$outboundSchema,
} from "./sessioninfo.js";

export type AutocompleteResponse = {
  /**
   * List of experiment ids for the corresponding request.
   */
  experimentIds?: Array<number> | undefined;
  /**
   * An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
   */
  trackingToken?: string | undefined;
  sessionInfo?: SessionInfo | undefined;
  results?: Array<AutocompleteResult> | undefined;
  /**
   * Subsections of the results list from which distinct sections should be created.
   */
  groups?: Array<AutocompleteResultGroup> | undefined;
  gleanDataError?: GleanDataError | undefined;
  /**
   * Time in milliseconds the backend took to respond to the request.
   */
  backendTimeMillis?: number | undefined;
};

/** @internal */
export const AutocompleteResponse$inboundSchema: z.ZodType<
  AutocompleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  experimentIds: z.array(z.number().int()).optional(),
  trackingToken: z.string().optional(),
  sessionInfo: SessionInfo$inboundSchema.optional(),
  results: z.array(AutocompleteResult$inboundSchema).optional(),
  groups: z.array(AutocompleteResultGroup$inboundSchema).optional(),
  errorInfo: GleanDataError$inboundSchema.optional(),
  backendTimeMillis: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "errorInfo": "gleanDataError",
  });
});

/** @internal */
export type AutocompleteResponse$Outbound = {
  experimentIds?: Array<number> | undefined;
  trackingToken?: string | undefined;
  sessionInfo?: SessionInfo$Outbound | undefined;
  results?: Array<AutocompleteResult$Outbound> | undefined;
  groups?: Array<AutocompleteResultGroup$Outbound> | undefined;
  errorInfo?: GleanDataError$Outbound | undefined;
  backendTimeMillis?: number | undefined;
};

/** @internal */
export const AutocompleteResponse$outboundSchema: z.ZodType<
  AutocompleteResponse$Outbound,
  z.ZodTypeDef,
  AutocompleteResponse
> = z.object({
  experimentIds: z.array(z.number().int()).optional(),
  trackingToken: z.string().optional(),
  sessionInfo: SessionInfo$outboundSchema.optional(),
  results: z.array(AutocompleteResult$outboundSchema).optional(),
  groups: z.array(AutocompleteResultGroup$outboundSchema).optional(),
  gleanDataError: GleanDataError$outboundSchema.optional(),
  backendTimeMillis: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    gleanDataError: "errorInfo",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutocompleteResponse$ {
  /** @deprecated use `AutocompleteResponse$inboundSchema` instead. */
  export const inboundSchema = AutocompleteResponse$inboundSchema;
  /** @deprecated use `AutocompleteResponse$outboundSchema` instead. */
  export const outboundSchema = AutocompleteResponse$outboundSchema;
  /** @deprecated use `AutocompleteResponse$Outbound` instead. */
  export type Outbound = AutocompleteResponse$Outbound;
}

export function autocompleteResponseToJSON(
  autocompleteResponse: AutocompleteResponse,
): string {
  return JSON.stringify(
    AutocompleteResponse$outboundSchema.parse(autocompleteResponse),
  );
}

export function autocompleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<AutocompleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutocompleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutocompleteResponse' from JSON`,
  );
}
