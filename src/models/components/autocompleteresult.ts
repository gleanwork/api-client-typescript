/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  OperatorMetadata,
  OperatorMetadata$inboundSchema,
  OperatorMetadata$Outbound,
  OperatorMetadata$outboundSchema,
} from "./operatormetadata.js";
import {
  Quicklink,
  Quicklink$inboundSchema,
  Quicklink$Outbound,
  Quicklink$outboundSchema,
} from "./quicklink.js";
import {
  StructuredResult,
  StructuredResult$inboundSchema,
  StructuredResult$Outbound,
  StructuredResult$outboundSchema,
} from "./structuredresult.js";
import {
  TextRange,
  TextRange$inboundSchema,
  TextRange$Outbound,
  TextRange$outboundSchema,
} from "./textrange.js";

export const AutocompleteResultResultType = {
  AdditionalDocument: "ADDITIONAL_DOCUMENT",
  App: "APP",
  BrowserHistory: "BROWSER_HISTORY",
  Datasource: "DATASOURCE",
  Document: "DOCUMENT",
  Entity: "ENTITY",
  Golink: "GOLINK",
  History: "HISTORY",
  NewChat: "NEW_CHAT",
  Operator: "OPERATOR",
  OperatorValue: "OPERATOR_VALUE",
  Quicklink: "QUICKLINK",
  Suggestion: "SUGGESTION",
} as const;
export type AutocompleteResultResultType = ClosedEnum<
  typeof AutocompleteResultResultType
>;

export type AutocompleteResult = {
  result: string;
  /**
   * A list of all possible keywords for given result.
   */
  keywords?: Array<string> | undefined;
  resultType?: AutocompleteResultResultType | undefined;
  /**
   * Higher indicates a more confident match.
   */
  score?: number | undefined;
  operatorMetadata?: OperatorMetadata | undefined;
  /**
   * An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
   */
  quicklink?: Quicklink | undefined;
  document?: Document | undefined;
  url?: string | undefined;
  /**
   * A single object that can support any object in the work graph. Only a single object will be populated.
   */
  structuredResult?: StructuredResult | undefined;
  /**
   * A token to be passed in /feedback events associated with this autocomplete result.
   */
  trackingToken?: string | undefined;
  /**
   * Subsections of the result string to which some special formatting should be applied (eg. bold)
   */
  ranges?: Array<TextRange> | undefined;
};

/** @internal */
export const AutocompleteResultResultType$inboundSchema: z.ZodNativeEnum<
  typeof AutocompleteResultResultType
> = z.nativeEnum(AutocompleteResultResultType);

/** @internal */
export const AutocompleteResultResultType$outboundSchema: z.ZodNativeEnum<
  typeof AutocompleteResultResultType
> = AutocompleteResultResultType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutocompleteResultResultType$ {
  /** @deprecated use `AutocompleteResultResultType$inboundSchema` instead. */
  export const inboundSchema = AutocompleteResultResultType$inboundSchema;
  /** @deprecated use `AutocompleteResultResultType$outboundSchema` instead. */
  export const outboundSchema = AutocompleteResultResultType$outboundSchema;
}

/** @internal */
export const AutocompleteResult$inboundSchema: z.ZodType<
  AutocompleteResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: z.string(),
  keywords: z.array(z.string()).optional(),
  resultType: AutocompleteResultResultType$inboundSchema.optional(),
  score: z.number().optional(),
  operatorMetadata: OperatorMetadata$inboundSchema.optional(),
  quicklink: Quicklink$inboundSchema.optional(),
  document: Document$inboundSchema.optional(),
  url: z.string().optional(),
  structuredResult: StructuredResult$inboundSchema.optional(),
  trackingToken: z.string().optional(),
  ranges: z.array(TextRange$inboundSchema).optional(),
});

/** @internal */
export type AutocompleteResult$Outbound = {
  result: string;
  keywords?: Array<string> | undefined;
  resultType?: string | undefined;
  score?: number | undefined;
  operatorMetadata?: OperatorMetadata$Outbound | undefined;
  quicklink?: Quicklink$Outbound | undefined;
  document?: Document$Outbound | undefined;
  url?: string | undefined;
  structuredResult?: StructuredResult$Outbound | undefined;
  trackingToken?: string | undefined;
  ranges?: Array<TextRange$Outbound> | undefined;
};

/** @internal */
export const AutocompleteResult$outboundSchema: z.ZodType<
  AutocompleteResult$Outbound,
  z.ZodTypeDef,
  AutocompleteResult
> = z.object({
  result: z.string(),
  keywords: z.array(z.string()).optional(),
  resultType: AutocompleteResultResultType$outboundSchema.optional(),
  score: z.number().optional(),
  operatorMetadata: OperatorMetadata$outboundSchema.optional(),
  quicklink: Quicklink$outboundSchema.optional(),
  document: Document$outboundSchema.optional(),
  url: z.string().optional(),
  structuredResult: StructuredResult$outboundSchema.optional(),
  trackingToken: z.string().optional(),
  ranges: z.array(TextRange$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutocompleteResult$ {
  /** @deprecated use `AutocompleteResult$inboundSchema` instead. */
  export const inboundSchema = AutocompleteResult$inboundSchema;
  /** @deprecated use `AutocompleteResult$outboundSchema` instead. */
  export const outboundSchema = AutocompleteResult$outboundSchema;
  /** @deprecated use `AutocompleteResult$Outbound` instead. */
  export type Outbound = AutocompleteResult$Outbound;
}

export function autocompleteResultToJSON(
  autocompleteResult: AutocompleteResult,
): string {
  return JSON.stringify(
    AutocompleteResult$outboundSchema.parse(autocompleteResult),
  );
}

export function autocompleteResultFromJSON(
  jsonString: string,
): SafeParseResult<AutocompleteResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutocompleteResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutocompleteResult' from JSON`,
  );
}
