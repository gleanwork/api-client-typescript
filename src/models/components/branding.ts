/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
 */
export type Branding = {
  /**
   * User facing company background image to be displayed to users on the home page.
   */
  companyBackgroundImageName?: string | undefined;
  /**
   * User facing company background image to be displayed to users on mobile devices on the home page.
   */
  companyMobileBackgroundImageName?: string | undefined;
  /**
   * An image URL pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred.
   */
  companyLogoUrl?: string | undefined;
  /**
   * An image URL pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred.
   */
  companyWideLogoUrl?: string | undefined;
  /**
   * A hex RGB color to display behind custom logo (e.g. '#ff4080').
   */
  companyLogoBackgroundColor?: string | undefined;
};

/** @internal */
export const Branding$inboundSchema: z.ZodType<
  Branding,
  z.ZodTypeDef,
  unknown
> = z.object({
  companyBackgroundImageName: z.string().optional(),
  companyMobileBackgroundImageName: z.string().optional(),
  companyLogoUrl: z.string().optional(),
  companyWideLogoUrl: z.string().optional(),
  companyLogoBackgroundColor: z.string().optional(),
});

/** @internal */
export type Branding$Outbound = {
  companyBackgroundImageName?: string | undefined;
  companyMobileBackgroundImageName?: string | undefined;
  companyLogoUrl?: string | undefined;
  companyWideLogoUrl?: string | undefined;
  companyLogoBackgroundColor?: string | undefined;
};

/** @internal */
export const Branding$outboundSchema: z.ZodType<
  Branding$Outbound,
  z.ZodTypeDef,
  Branding
> = z.object({
  companyBackgroundImageName: z.string().optional(),
  companyMobileBackgroundImageName: z.string().optional(),
  companyLogoUrl: z.string().optional(),
  companyWideLogoUrl: z.string().optional(),
  companyLogoBackgroundColor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Branding$ {
  /** @deprecated use `Branding$inboundSchema` instead. */
  export const inboundSchema = Branding$inboundSchema;
  /** @deprecated use `Branding$outboundSchema` instead. */
  export const outboundSchema = Branding$outboundSchema;
  /** @deprecated use `Branding$Outbound` instead. */
  export type Outbound = Branding$Outbound;
}

export function brandingToJSON(branding: Branding): string {
  return JSON.stringify(Branding$outboundSchema.parse(branding));
}

export function brandingFromJSON(
  jsonString: string,
): SafeParseResult<Branding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Branding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Branding' from JSON`,
  );
}
