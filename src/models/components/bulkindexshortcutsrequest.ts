/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExternalShortcut,
  ExternalShortcut$inboundSchema,
  ExternalShortcut$Outbound,
  ExternalShortcut$outboundSchema,
} from "./externalshortcut.js";

/**
 * Describes the request body of the /bulkindexshortcuts API call
 */
export type BulkIndexShortcutsRequest = {
  /**
   * Unique id that must be used for this bulk upload instance
   */
  uploadId: string;
  /**
   * true if this is the first page of the upload. Defaults to false
   */
  isFirstPage?: boolean | undefined;
  /**
   * true if this is the last page of the upload. Defaults to false
   */
  isLastPage?: boolean | undefined;
  /**
   * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
   */
  forceRestartUpload?: boolean | undefined;
  /**
   * Batch of shortcuts information
   */
  shortcuts: Array<ExternalShortcut>;
};

/** @internal */
export const BulkIndexShortcutsRequest$inboundSchema: z.ZodType<
  BulkIndexShortcutsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploadId: z.string(),
  isFirstPage: z.boolean().optional(),
  isLastPage: z.boolean().optional(),
  forceRestartUpload: z.boolean().optional(),
  shortcuts: z.array(ExternalShortcut$inboundSchema),
});

/** @internal */
export type BulkIndexShortcutsRequest$Outbound = {
  uploadId: string;
  isFirstPage?: boolean | undefined;
  isLastPage?: boolean | undefined;
  forceRestartUpload?: boolean | undefined;
  shortcuts: Array<ExternalShortcut$Outbound>;
};

/** @internal */
export const BulkIndexShortcutsRequest$outboundSchema: z.ZodType<
  BulkIndexShortcutsRequest$Outbound,
  z.ZodTypeDef,
  BulkIndexShortcutsRequest
> = z.object({
  uploadId: z.string(),
  isFirstPage: z.boolean().optional(),
  isLastPage: z.boolean().optional(),
  forceRestartUpload: z.boolean().optional(),
  shortcuts: z.array(ExternalShortcut$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkIndexShortcutsRequest$ {
  /** @deprecated use `BulkIndexShortcutsRequest$inboundSchema` instead. */
  export const inboundSchema = BulkIndexShortcutsRequest$inboundSchema;
  /** @deprecated use `BulkIndexShortcutsRequest$outboundSchema` instead. */
  export const outboundSchema = BulkIndexShortcutsRequest$outboundSchema;
  /** @deprecated use `BulkIndexShortcutsRequest$Outbound` instead. */
  export type Outbound = BulkIndexShortcutsRequest$Outbound;
}

export function bulkIndexShortcutsRequestToJSON(
  bulkIndexShortcutsRequest: BulkIndexShortcutsRequest,
): string {
  return JSON.stringify(
    BulkIndexShortcutsRequest$outboundSchema.parse(bulkIndexShortcutsRequest),
  );
}

export function bulkIndexShortcutsRequestFromJSON(
  jsonString: string,
): SafeParseResult<BulkIndexShortcutsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkIndexShortcutsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkIndexShortcutsRequest' from JSON`,
  );
}
