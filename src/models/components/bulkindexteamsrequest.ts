/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TeamInfoDefinition,
  TeamInfoDefinition$inboundSchema,
  TeamInfoDefinition$Outbound,
  TeamInfoDefinition$outboundSchema,
} from "./teaminfodefinition.js";

/**
 * Describes the request body of the /bulkindexteams API call
 */
export type BulkIndexTeamsRequest = {
  /**
   * Unique id that must be used for this bulk upload instance
   */
  uploadId: string;
  /**
   * true if this is the first page of the upload. Defaults to false
   */
  isFirstPage?: boolean | undefined;
  /**
   * true if this is the last page of the upload. Defaults to false
   */
  isLastPage?: boolean | undefined;
  /**
   * Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
   */
  forceRestartUpload?: boolean | undefined;
  /**
   * Batch of team information
   */
  teams: Array<TeamInfoDefinition>;
};

/** @internal */
export const BulkIndexTeamsRequest$inboundSchema: z.ZodType<
  BulkIndexTeamsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploadId: z.string(),
  isFirstPage: z.boolean().optional(),
  isLastPage: z.boolean().optional(),
  forceRestartUpload: z.boolean().optional(),
  teams: z.array(TeamInfoDefinition$inboundSchema),
});

/** @internal */
export type BulkIndexTeamsRequest$Outbound = {
  uploadId: string;
  isFirstPage?: boolean | undefined;
  isLastPage?: boolean | undefined;
  forceRestartUpload?: boolean | undefined;
  teams: Array<TeamInfoDefinition$Outbound>;
};

/** @internal */
export const BulkIndexTeamsRequest$outboundSchema: z.ZodType<
  BulkIndexTeamsRequest$Outbound,
  z.ZodTypeDef,
  BulkIndexTeamsRequest
> = z.object({
  uploadId: z.string(),
  isFirstPage: z.boolean().optional(),
  isLastPage: z.boolean().optional(),
  forceRestartUpload: z.boolean().optional(),
  teams: z.array(TeamInfoDefinition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkIndexTeamsRequest$ {
  /** @deprecated use `BulkIndexTeamsRequest$inboundSchema` instead. */
  export const inboundSchema = BulkIndexTeamsRequest$inboundSchema;
  /** @deprecated use `BulkIndexTeamsRequest$outboundSchema` instead. */
  export const outboundSchema = BulkIndexTeamsRequest$outboundSchema;
  /** @deprecated use `BulkIndexTeamsRequest$Outbound` instead. */
  export type Outbound = BulkIndexTeamsRequest$Outbound;
}

export function bulkIndexTeamsRequestToJSON(
  bulkIndexTeamsRequest: BulkIndexTeamsRequest,
): string {
  return JSON.stringify(
    BulkIndexTeamsRequest$outboundSchema.parse(bulkIndexTeamsRequest),
  );
}

export function bulkIndexTeamsRequestFromJSON(
  jsonString: string,
): SafeParseResult<BulkIndexTeamsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkIndexTeamsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkIndexTeamsRequest' from JSON`,
  );
}
