/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the upload, an enum of ACTIVE, SUCCESSFUL
 */
export const BulkUploadHistoryEventStatus = {
  Active: "ACTIVE",
  Successful: "SUCCESSFUL",
} as const;
/**
 * The status of the upload, an enum of ACTIVE, SUCCESSFUL
 */
export type BulkUploadHistoryEventStatus = ClosedEnum<
  typeof BulkUploadHistoryEventStatus
>;

/**
 * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
 */
export const ProcessingState = {
  Unavailable: "UNAVAILABLE",
  UploadStarted: "UPLOAD STARTED",
  UploadInProgress: "UPLOAD IN PROGRESS",
  UploadCompleted: "UPLOAD COMPLETED",
  DeletionPaused: "DELETION PAUSED",
  IndexingCompleted: "INDEXING COMPLETED",
} as const;
/**
 * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
 */
export type ProcessingState = ClosedEnum<typeof ProcessingState>;

/**
 * Information about a successful bulk upload
 */
export type BulkUploadHistoryEvent = {
  /**
   * The unique ID of the upload
   */
  uploadId?: string | undefined;
  /**
   * The start time of the upload in ISO 8601 format
   */
  startTime?: string | undefined;
  /**
   * The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
   */
  endTime?: string | undefined;
  /**
   * The status of the upload, an enum of ACTIVE, SUCCESSFUL
   */
  status?: BulkUploadHistoryEventStatus | undefined;
  /**
   * The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
   */
  processingState?: ProcessingState | undefined;
};

/** @internal */
export const BulkUploadHistoryEventStatus$inboundSchema: z.ZodNativeEnum<
  typeof BulkUploadHistoryEventStatus
> = z.nativeEnum(BulkUploadHistoryEventStatus);

/** @internal */
export const BulkUploadHistoryEventStatus$outboundSchema: z.ZodNativeEnum<
  typeof BulkUploadHistoryEventStatus
> = BulkUploadHistoryEventStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkUploadHistoryEventStatus$ {
  /** @deprecated use `BulkUploadHistoryEventStatus$inboundSchema` instead. */
  export const inboundSchema = BulkUploadHistoryEventStatus$inboundSchema;
  /** @deprecated use `BulkUploadHistoryEventStatus$outboundSchema` instead. */
  export const outboundSchema = BulkUploadHistoryEventStatus$outboundSchema;
}

/** @internal */
export const ProcessingState$inboundSchema: z.ZodNativeEnum<
  typeof ProcessingState
> = z.nativeEnum(ProcessingState);

/** @internal */
export const ProcessingState$outboundSchema: z.ZodNativeEnum<
  typeof ProcessingState
> = ProcessingState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessingState$ {
  /** @deprecated use `ProcessingState$inboundSchema` instead. */
  export const inboundSchema = ProcessingState$inboundSchema;
  /** @deprecated use `ProcessingState$outboundSchema` instead. */
  export const outboundSchema = ProcessingState$outboundSchema;
}

/** @internal */
export const BulkUploadHistoryEvent$inboundSchema: z.ZodType<
  BulkUploadHistoryEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploadId: z.string().optional(),
  startTime: z.string().optional(),
  endTime: z.string().optional(),
  status: BulkUploadHistoryEventStatus$inboundSchema.optional(),
  processingState: ProcessingState$inboundSchema.optional(),
});

/** @internal */
export type BulkUploadHistoryEvent$Outbound = {
  uploadId?: string | undefined;
  startTime?: string | undefined;
  endTime?: string | undefined;
  status?: string | undefined;
  processingState?: string | undefined;
};

/** @internal */
export const BulkUploadHistoryEvent$outboundSchema: z.ZodType<
  BulkUploadHistoryEvent$Outbound,
  z.ZodTypeDef,
  BulkUploadHistoryEvent
> = z.object({
  uploadId: z.string().optional(),
  startTime: z.string().optional(),
  endTime: z.string().optional(),
  status: BulkUploadHistoryEventStatus$outboundSchema.optional(),
  processingState: ProcessingState$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BulkUploadHistoryEvent$ {
  /** @deprecated use `BulkUploadHistoryEvent$inboundSchema` instead. */
  export const inboundSchema = BulkUploadHistoryEvent$inboundSchema;
  /** @deprecated use `BulkUploadHistoryEvent$outboundSchema` instead. */
  export const outboundSchema = BulkUploadHistoryEvent$outboundSchema;
  /** @deprecated use `BulkUploadHistoryEvent$Outbound` instead. */
  export type Outbound = BulkUploadHistoryEvent$Outbound;
}

export function bulkUploadHistoryEventToJSON(
  bulkUploadHistoryEvent: BulkUploadHistoryEvent,
): string {
  return JSON.stringify(
    BulkUploadHistoryEvent$outboundSchema.parse(bulkUploadHistoryEvent),
  );
}

export function bulkUploadHistoryEventFromJSON(
  jsonString: string,
): SafeParseResult<BulkUploadHistoryEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BulkUploadHistoryEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BulkUploadHistoryEvent' from JSON`,
  );
}
