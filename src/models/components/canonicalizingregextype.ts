/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Regular expression to apply to an arbitrary string to transform it into a canonical string.
 */
export type CanonicalizingRegexType = {
  /**
   * Regular expression to match to an arbitrary string.
   */
  matchRegex?: string | undefined;
  /**
   * Regular expression to transform into a canonical string.
   */
  rewriteRegex?: string | undefined;
};

/** @internal */
export const CanonicalizingRegexType$inboundSchema: z.ZodType<
  CanonicalizingRegexType,
  z.ZodTypeDef,
  unknown
> = z.object({
  matchRegex: z.string().optional(),
  rewriteRegex: z.string().optional(),
});

/** @internal */
export type CanonicalizingRegexType$Outbound = {
  matchRegex?: string | undefined;
  rewriteRegex?: string | undefined;
};

/** @internal */
export const CanonicalizingRegexType$outboundSchema: z.ZodType<
  CanonicalizingRegexType$Outbound,
  z.ZodTypeDef,
  CanonicalizingRegexType
> = z.object({
  matchRegex: z.string().optional(),
  rewriteRegex: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CanonicalizingRegexType$ {
  /** @deprecated use `CanonicalizingRegexType$inboundSchema` instead. */
  export const inboundSchema = CanonicalizingRegexType$inboundSchema;
  /** @deprecated use `CanonicalizingRegexType$outboundSchema` instead. */
  export const outboundSchema = CanonicalizingRegexType$outboundSchema;
  /** @deprecated use `CanonicalizingRegexType$Outbound` instead. */
  export type Outbound = CanonicalizingRegexType$Outbound;
}

export function canonicalizingRegexTypeToJSON(
  canonicalizingRegexType: CanonicalizingRegexType,
): string {
  return JSON.stringify(
    CanonicalizingRegexType$outboundSchema.parse(canonicalizingRegexType),
  );
}

export function canonicalizingRegexTypeFromJSON(
  jsonString: string,
): SafeParseResult<CanonicalizingRegexType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CanonicalizingRegexType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CanonicalizingRegexType' from JSON`,
  );
}
