/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentConfig,
  AgentConfig$inboundSchema,
  AgentConfig$Outbound,
  AgentConfig$outboundSchema,
} from "./agentconfig.js";
import {
  ChatMessageCitation,
  ChatMessageCitation$inboundSchema,
  ChatMessageCitation$Outbound,
  ChatMessageCitation$outboundSchema,
} from "./chatmessagecitation.js";
import {
  ChatMessageFragment,
  ChatMessageFragment$inboundSchema,
  ChatMessageFragment$Outbound,
  ChatMessageFragment$outboundSchema,
} from "./chatmessagefragment.js";

export const Author = {
  User: "USER",
  GleanAi: "GLEAN_AI",
} as const;
export type Author = ClosedEnum<typeof Author>;

/**
 * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
 */
export const MessageType = {
  Update: "UPDATE",
  Content: "CONTENT",
  Context: "CONTEXT",
  Debug: "DEBUG",
  DebugExternal: "DEBUG_EXTERNAL",
  Error: "ERROR",
  Heading: "HEADING",
  Warning: "WARNING",
} as const;
/**
 * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
 */
export type MessageType = ClosedEnum<typeof MessageType>;

/**
 * A message that is rendered as one coherent unit with one given sender.
 */
export type ChatMessage = {
  /**
   * Describes the agent that executes the request.
   */
  agentConfig?: AgentConfig | undefined;
  author?: Author | undefined;
  /**
   * A list of Citations that were used to generate the response.
   */
  citations?: Array<ChatMessageCitation> | undefined;
  /**
   * IDs of files uploaded in the message that are referenced to generate the answer.
   */
  uploadedFileIds?: Array<string> | undefined;
  /**
   * A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
   */
  fragments?: Array<ChatMessageFragment> | undefined;
  /**
   * Response timestamp of the message.
   */
  ts?: string | undefined;
  /**
   * A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
   */
  messageId?: string | undefined;
  /**
   * Opaque tracking token generated server-side.
   */
  messageTrackingToken?: string | undefined;
  /**
   * Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
   */
  messageType?: MessageType | undefined;
  /**
   * Signals there are additional response fragments incoming.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  hasMoreFragments?: boolean | undefined;
};

/** @internal */
export const Author$inboundSchema: z.ZodNativeEnum<typeof Author> = z
  .nativeEnum(Author);

/** @internal */
export const Author$outboundSchema: z.ZodNativeEnum<typeof Author> =
  Author$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Author$ {
  /** @deprecated use `Author$inboundSchema` instead. */
  export const inboundSchema = Author$inboundSchema;
  /** @deprecated use `Author$outboundSchema` instead. */
  export const outboundSchema = Author$outboundSchema;
}

/** @internal */
export const MessageType$inboundSchema: z.ZodNativeEnum<typeof MessageType> = z
  .nativeEnum(MessageType);

/** @internal */
export const MessageType$outboundSchema: z.ZodNativeEnum<typeof MessageType> =
  MessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageType$ {
  /** @deprecated use `MessageType$inboundSchema` instead. */
  export const inboundSchema = MessageType$inboundSchema;
  /** @deprecated use `MessageType$outboundSchema` instead. */
  export const outboundSchema = MessageType$outboundSchema;
}

/** @internal */
export const ChatMessage$inboundSchema: z.ZodType<
  ChatMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentConfig: AgentConfig$inboundSchema.optional(),
  author: Author$inboundSchema.default("USER"),
  citations: z.array(ChatMessageCitation$inboundSchema).optional(),
  uploadedFileIds: z.array(z.string()).optional(),
  fragments: z.array(ChatMessageFragment$inboundSchema).optional(),
  ts: z.string().optional(),
  messageId: z.string().optional(),
  messageTrackingToken: z.string().optional(),
  messageType: MessageType$inboundSchema.default("CONTENT"),
  hasMoreFragments: z.boolean().optional(),
});

/** @internal */
export type ChatMessage$Outbound = {
  agentConfig?: AgentConfig$Outbound | undefined;
  author: string;
  citations?: Array<ChatMessageCitation$Outbound> | undefined;
  uploadedFileIds?: Array<string> | undefined;
  fragments?: Array<ChatMessageFragment$Outbound> | undefined;
  ts?: string | undefined;
  messageId?: string | undefined;
  messageTrackingToken?: string | undefined;
  messageType: string;
  hasMoreFragments?: boolean | undefined;
};

/** @internal */
export const ChatMessage$outboundSchema: z.ZodType<
  ChatMessage$Outbound,
  z.ZodTypeDef,
  ChatMessage
> = z.object({
  agentConfig: AgentConfig$outboundSchema.optional(),
  author: Author$outboundSchema.default("USER"),
  citations: z.array(ChatMessageCitation$outboundSchema).optional(),
  uploadedFileIds: z.array(z.string()).optional(),
  fragments: z.array(ChatMessageFragment$outboundSchema).optional(),
  ts: z.string().optional(),
  messageId: z.string().optional(),
  messageTrackingToken: z.string().optional(),
  messageType: MessageType$outboundSchema.default("CONTENT"),
  hasMoreFragments: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessage$ {
  /** @deprecated use `ChatMessage$inboundSchema` instead. */
  export const inboundSchema = ChatMessage$inboundSchema;
  /** @deprecated use `ChatMessage$outboundSchema` instead. */
  export const outboundSchema = ChatMessage$outboundSchema;
  /** @deprecated use `ChatMessage$Outbound` instead. */
  export type Outbound = ChatMessage$Outbound;
}

export function chatMessageToJSON(chatMessage: ChatMessage): string {
  return JSON.stringify(ChatMessage$outboundSchema.parse(chatMessage));
}

export function chatMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessage' from JSON`,
  );
}
