/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatFile,
  ChatFile$inboundSchema,
  ChatFile$Outbound,
  ChatFile$outboundSchema,
} from "./chatfile.js";
import {
  QuerySuggestion,
  QuerySuggestion$inboundSchema,
  QuerySuggestion$Outbound,
  QuerySuggestion$outboundSchema,
} from "./querysuggestion.js";
import {
  StructuredResult,
  StructuredResult$inboundSchema,
  StructuredResult$Outbound,
  StructuredResult$outboundSchema,
} from "./structuredresult.js";
import {
  ToolInfo,
  ToolInfo$inboundSchema,
  ToolInfo$Outbound,
  ToolInfo$outboundSchema,
} from "./toolinfo.js";

/**
 * Represents a part of a ChatMessage that originates from a single action/tool. It is designed to support rich data formats beyond simple text, allowing for a more dynamic and interactive chat experience. Each fragment can include various types of content, such as text, search queries, action information, and more. Also, each ChatMessageFragment should only have one of structuredResults, querySuggestion, writeAction, followupAction, or file.
 */
export type ChatMessageFragment = {
  /**
   * An array of entities in the work graph retrieved via a data request.
   */
  structuredResults?: Array<StructuredResult> | undefined;
  /**
   * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
   */
  trackingToken?: string | undefined;
  text?: string | undefined;
  querySuggestion?: QuerySuggestion | undefined;
  /**
   * Structure for file uploaded by a user for Chat.
   */
  file?: ChatFile | undefined;
  action?: ToolInfo | undefined;
};

/** @internal */
export const ChatMessageFragment$inboundSchema: z.ZodType<
  ChatMessageFragment,
  z.ZodTypeDef,
  unknown
> = z.object({
  structuredResults: z.array(StructuredResult$inboundSchema).optional(),
  trackingToken: z.string().optional(),
  text: z.string().optional(),
  querySuggestion: QuerySuggestion$inboundSchema.optional(),
  file: ChatFile$inboundSchema.optional(),
  action: ToolInfo$inboundSchema.optional(),
});

/** @internal */
export type ChatMessageFragment$Outbound = {
  structuredResults?: Array<StructuredResult$Outbound> | undefined;
  trackingToken?: string | undefined;
  text?: string | undefined;
  querySuggestion?: QuerySuggestion$Outbound | undefined;
  file?: ChatFile$Outbound | undefined;
  action?: ToolInfo$Outbound | undefined;
};

/** @internal */
export const ChatMessageFragment$outboundSchema: z.ZodType<
  ChatMessageFragment$Outbound,
  z.ZodTypeDef,
  ChatMessageFragment
> = z.object({
  structuredResults: z.array(StructuredResult$outboundSchema).optional(),
  trackingToken: z.string().optional(),
  text: z.string().optional(),
  querySuggestion: QuerySuggestion$outboundSchema.optional(),
  file: ChatFile$outboundSchema.optional(),
  action: ToolInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatMessageFragment$ {
  /** @deprecated use `ChatMessageFragment$inboundSchema` instead. */
  export const inboundSchema = ChatMessageFragment$inboundSchema;
  /** @deprecated use `ChatMessageFragment$outboundSchema` instead. */
  export const outboundSchema = ChatMessageFragment$outboundSchema;
  /** @deprecated use `ChatMessageFragment$Outbound` instead. */
  export type Outbound = ChatMessageFragment$Outbound;
}

export function chatMessageFragmentToJSON(
  chatMessageFragment: ChatMessageFragment,
): string {
  return JSON.stringify(
    ChatMessageFragment$outboundSchema.parse(chatMessageFragment),
  );
}

export function chatMessageFragmentFromJSON(
  jsonString: string,
): SafeParseResult<ChatMessageFragment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatMessageFragment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatMessageFragment' from JSON`,
  );
}
