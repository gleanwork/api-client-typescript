/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatMessage,
  ChatMessage$inboundSchema,
  ChatMessage$Outbound,
  ChatMessage$outboundSchema,
} from "./chatmessage.js";

/**
 * A single response from the /chat backend.
 */
export type ChatResponse = {
  messages?: Array<ChatMessage> | undefined;
  /**
   * The id of the associated Chat the messages belong to, if one exists.
   */
  chatId?: string | undefined;
  /**
   * Follow-up prompts for the user to potentially use
   */
  followUpPrompts?: Array<string> | undefined;
  /**
   * Time in milliseconds the backend took to respond to the request.
   */
  backendTimeMillis?: number | undefined;
  /**
   * A token that is used to track the session.
   */
  chatSessionTrackingToken?: string | undefined;
};

/** @internal */
export const ChatResponse$inboundSchema: z.ZodType<
  ChatResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(ChatMessage$inboundSchema).optional(),
  chatId: z.string().optional(),
  followUpPrompts: z.array(z.string()).optional(),
  backendTimeMillis: z.number().int().optional(),
  chatSessionTrackingToken: z.string().optional(),
});

/** @internal */
export type ChatResponse$Outbound = {
  messages?: Array<ChatMessage$Outbound> | undefined;
  chatId?: string | undefined;
  followUpPrompts?: Array<string> | undefined;
  backendTimeMillis?: number | undefined;
  chatSessionTrackingToken?: string | undefined;
};

/** @internal */
export const ChatResponse$outboundSchema: z.ZodType<
  ChatResponse$Outbound,
  z.ZodTypeDef,
  ChatResponse
> = z.object({
  messages: z.array(ChatMessage$outboundSchema).optional(),
  chatId: z.string().optional(),
  followUpPrompts: z.array(z.string()).optional(),
  backendTimeMillis: z.number().int().optional(),
  chatSessionTrackingToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatResponse$ {
  /** @deprecated use `ChatResponse$inboundSchema` instead. */
  export const inboundSchema = ChatResponse$inboundSchema;
  /** @deprecated use `ChatResponse$outboundSchema` instead. */
  export const outboundSchema = ChatResponse$outboundSchema;
  /** @deprecated use `ChatResponse$Outbound` instead. */
  export type Outbound = ChatResponse$Outbound;
}

export function chatResponseToJSON(chatResponse: ChatResponse): string {
  return JSON.stringify(ChatResponse$outboundSchema.parse(chatResponse));
}

export function chatResponseFromJSON(
  jsonString: string,
): SafeParseResult<ChatResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatResponse' from JSON`,
  );
}
