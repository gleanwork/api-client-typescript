/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Chat,
  Chat$inboundSchema,
  Chat$Outbound,
  Chat$outboundSchema,
} from "./chat.js";

export type ChatResult = {
  /**
   * A historical representation of a series of chat messages a user had with Glean Assistant.
   */
  chat?: Chat | undefined;
  /**
   * An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
   */
  trackingToken?: string | undefined;
};

/** @internal */
export const ChatResult$inboundSchema: z.ZodType<
  ChatResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  chat: Chat$inboundSchema.optional(),
  trackingToken: z.string().optional(),
});

/** @internal */
export type ChatResult$Outbound = {
  chat?: Chat$Outbound | undefined;
  trackingToken?: string | undefined;
};

/** @internal */
export const ChatResult$outboundSchema: z.ZodType<
  ChatResult$Outbound,
  z.ZodTypeDef,
  ChatResult
> = z.object({
  chat: Chat$outboundSchema.optional(),
  trackingToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatResult$ {
  /** @deprecated use `ChatResult$inboundSchema` instead. */
  export const inboundSchema = ChatResult$inboundSchema;
  /** @deprecated use `ChatResult$outboundSchema` instead. */
  export const outboundSchema = ChatResult$outboundSchema;
  /** @deprecated use `ChatResult$Outbound` instead. */
  export type Outbound = ChatResult$Outbound;
}

export function chatResultToJSON(chatResult: ChatResult): string {
  return JSON.stringify(ChatResult$outboundSchema.parse(chatResult));
}

export function chatResultFromJSON(
  jsonString: string,
): SafeParseResult<ChatResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatResult' from JSON`,
  );
}
