/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChatZeroStateSuggestionOptions = {
  /**
   * The Chat Application ID this feed request should be scoped to. Empty means there is no Chat Application ID..
   */
  applicationId?: string | undefined;
};

/** @internal */
export const ChatZeroStateSuggestionOptions$inboundSchema: z.ZodType<
  ChatZeroStateSuggestionOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  applicationId: z.string().optional(),
});

/** @internal */
export type ChatZeroStateSuggestionOptions$Outbound = {
  applicationId?: string | undefined;
};

/** @internal */
export const ChatZeroStateSuggestionOptions$outboundSchema: z.ZodType<
  ChatZeroStateSuggestionOptions$Outbound,
  z.ZodTypeDef,
  ChatZeroStateSuggestionOptions
> = z.object({
  applicationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatZeroStateSuggestionOptions$ {
  /** @deprecated use `ChatZeroStateSuggestionOptions$inboundSchema` instead. */
  export const inboundSchema = ChatZeroStateSuggestionOptions$inboundSchema;
  /** @deprecated use `ChatZeroStateSuggestionOptions$outboundSchema` instead. */
  export const outboundSchema = ChatZeroStateSuggestionOptions$outboundSchema;
  /** @deprecated use `ChatZeroStateSuggestionOptions$Outbound` instead. */
  export type Outbound = ChatZeroStateSuggestionOptions$Outbound;
}

export function chatZeroStateSuggestionOptionsToJSON(
  chatZeroStateSuggestionOptions: ChatZeroStateSuggestionOptions,
): string {
  return JSON.stringify(
    ChatZeroStateSuggestionOptions$outboundSchema.parse(
      chatZeroStateSuggestionOptions,
    ),
  );
}

export function chatZeroStateSuggestionOptionsFromJSON(
  jsonString: string,
): SafeParseResult<ChatZeroStateSuggestionOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatZeroStateSuggestionOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatZeroStateSuggestionOptions' from JSON`,
  );
}
