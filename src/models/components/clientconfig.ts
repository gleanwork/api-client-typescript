/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssistantConfig,
  AssistantConfig$inboundSchema,
  AssistantConfig$Outbound,
  AssistantConfig$outboundSchema,
} from "./assistantconfig.js";
import {
  Branding,
  Branding$inboundSchema,
  Branding$Outbound,
  Branding$outboundSchema,
} from "./branding.js";
import {
  FeedbackCustomizations,
  FeedbackCustomizations$inboundSchema,
  FeedbackCustomizations$Outbound,
  FeedbackCustomizations$outboundSchema,
} from "./feedbackcustomizations.js";
import {
  ProductTerms,
  ProductTerms$inboundSchema,
  ProductTerms$Outbound,
  ProductTerms$outboundSchema,
} from "./productterms.js";
import {
  SearchClientConfig,
  SearchClientConfig$inboundSchema,
  SearchClientConfig$Outbound,
  SearchClientConfig$outboundSchema,
} from "./searchclientconfig.js";
import {
  ShortcutsConfig,
  ShortcutsConfig$inboundSchema,
  ShortcutsConfig$Outbound,
  ShortcutsConfig$outboundSchema,
} from "./shortcutsconfig.js";
import {
  Themes,
  Themes$inboundSchema,
  Themes$Outbound,
  Themes$outboundSchema,
} from "./themes.js";
import {
  ToolsConfig,
  ToolsConfig$inboundSchema,
  ToolsConfig$Outbound,
  ToolsConfig$outboundSchema,
} from "./toolsconfig.js";
import {
  UserOutreachConfig,
  UserOutreachConfig$inboundSchema,
  UserOutreachConfig$Outbound,
  UserOutreachConfig$outboundSchema,
} from "./useroutreachconfig.js";

/**
 * Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
 */
export type Brandings = {
  /**
   * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
   */
  light?: Branding | undefined;
  /**
   * A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
   */
  dark?: Branding | undefined;
  /**
   * Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
   */
  productTerms?: ProductTerms | undefined;
};

/**
 * SSO provider used by the company
 */
export const SsoCompanyProvider = {
  Gsuite: "gsuite",
  Iap: "iap",
  Okta: "okta",
  OktaSaml: "okta_saml",
  Ping: "ping",
  Azure: "azure",
  Onelogin: "onelogin",
  OneloginSaml: "onelogin_saml",
} as const;
/**
 * SSO provider used by the company
 */
export type SsoCompanyProvider = ClosedEnum<typeof SsoCompanyProvider>;

/**
 * Configuration settings for a specific client deployment that are not related to any particular datasource
 */
export type ClientConfig = {
  /**
   * Configuration settings specific to Assistant features
   */
  assistant?: AssistantConfig | undefined;
  /**
   * Configuration settings related to Tools.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  tools?: ToolsConfig | undefined;
  /**
   * Configuration settings related to Shortcuts
   */
  shortcuts?: ShortcutsConfig | undefined;
  /**
   * Configuration settings related to Search
   */
  search?: SearchClientConfig | undefined;
  /**
   * Whether people celebrations is enabled or not for the instance
   */
  feedPeopleCelebrationsEnabled?: boolean | undefined;
  /**
   * Whether the suggested feed is enabled
   */
  feedSuggestedEnabled?: boolean | undefined;
  /**
   * Whether the trending feed is enabled
   */
  feedTrendingEnabled?: boolean | undefined;
  /**
   * Whether the recents feed is enabled
   */
  feedRecentsEnabled?: boolean | undefined;
  /**
   * Whether the mentions feed is enabled
   */
  feedMentionsEnabled?: boolean | undefined;
  /**
   * Whether the GPT agent for Chat is enabled
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  gptAgentEnabled?: boolean | undefined;
  /**
   * Whether the chat history for Chat is enabled
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  chatHistoryEnabled?: boolean | undefined;
  /**
   * A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.
   */
  boolValues?: { [k: string]: boolean } | undefined;
  /**
   * A map of {string, integer} pairs for client consumption.
   */
  integerValues?: { [k: string]: number } | undefined;
  /**
   * The user-facing name of the company owning the deployment
   */
  companyDisplayName?: string | undefined;
  /**
   * A markdown string to be displayed on the search results page. Useful for outlinks to help pages.
   */
  customSerpMarkdown?: string | undefined;
  /**
   * A demonstrative query to show during new user onboarding
   */
  onboardingQuery?: string | undefined;
  /**
   * Determines whether the org chart link in the Directory panel is visible to all users.
   */
  isOrgChartLinkVisible?: boolean | undefined;
  /**
   * Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible.
   */
  isOrgChartAccessible?: boolean | undefined;
  /**
   * Whether or not people data has been set up.
   */
  isPeopleSetup?: boolean | undefined;
  /**
   * Whether or not the deployment is in pilot mode.
   */
  isPilotMode?: boolean | undefined;
  /**
   * URL the company uses to access the web app
   */
  webAppUrl?: string | undefined;
  userOutreach?: UserOutreachConfig | undefined;
  /**
   * The URL to use for outbound links to Glean Search. Defaults to {webAppUrl}/search?q=%s.
   */
  searchLinkUrlTemplate?: string | undefined;
  /**
   * The URL to use for outbound links to Glean Chat. Defaults to {webAppUrl}/chat.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  chatLinkUrlTemplate?: string | undefined;
  /**
   * A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
   */
  themes?: Themes | undefined;
  /**
   * Branding customizations applicable to the current user, such as custom company logos and background images for light and dark mode or company-specific product terminology.
   */
  brandings?: Brandings | undefined;
  /**
   * Describes how to format the web app greeting. Possible format options include \%t - timely greeting \%n - the user's first name
   */
  greetingFormat?: string | undefined;
  /**
   * Label for the external link at the end of the Task card in order to guide user to the source.
   */
  taskSeeAllLabel?: string | undefined;
  /**
   * Link used in conjunction with taskSeeAllLabel to redirect user to the task's source.
   */
  taskSeeAllLink?: string | undefined;
  /**
   * Custom autocomplete box placeholder to replace rotating prompts. Deprecated for `search.placeholder`
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  searchPlaceholder?: string | undefined;
  /**
   * Company-wide custom prefix for Go Links.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  shortcutsPrefix?: string | undefined;
  /**
   * SSO provider used by the company
   */
  ssoCompanyProvider?: SsoCompanyProvider | undefined;
  /**
   * whether to show the running ML pipelines banner
   */
  showPipelinesSetupBanner?: boolean | undefined;
  feedbackCustomizations?: FeedbackCustomizations | undefined;
};

/** @internal */
export const Brandings$inboundSchema: z.ZodType<
  Brandings,
  z.ZodTypeDef,
  unknown
> = z.object({
  light: Branding$inboundSchema.optional(),
  dark: Branding$inboundSchema.optional(),
  productTerms: ProductTerms$inboundSchema.optional(),
});

/** @internal */
export type Brandings$Outbound = {
  light?: Branding$Outbound | undefined;
  dark?: Branding$Outbound | undefined;
  productTerms?: ProductTerms$Outbound | undefined;
};

/** @internal */
export const Brandings$outboundSchema: z.ZodType<
  Brandings$Outbound,
  z.ZodTypeDef,
  Brandings
> = z.object({
  light: Branding$outboundSchema.optional(),
  dark: Branding$outboundSchema.optional(),
  productTerms: ProductTerms$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Brandings$ {
  /** @deprecated use `Brandings$inboundSchema` instead. */
  export const inboundSchema = Brandings$inboundSchema;
  /** @deprecated use `Brandings$outboundSchema` instead. */
  export const outboundSchema = Brandings$outboundSchema;
  /** @deprecated use `Brandings$Outbound` instead. */
  export type Outbound = Brandings$Outbound;
}

export function brandingsToJSON(brandings: Brandings): string {
  return JSON.stringify(Brandings$outboundSchema.parse(brandings));
}

export function brandingsFromJSON(
  jsonString: string,
): SafeParseResult<Brandings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Brandings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Brandings' from JSON`,
  );
}

/** @internal */
export const SsoCompanyProvider$inboundSchema: z.ZodNativeEnum<
  typeof SsoCompanyProvider
> = z.nativeEnum(SsoCompanyProvider);

/** @internal */
export const SsoCompanyProvider$outboundSchema: z.ZodNativeEnum<
  typeof SsoCompanyProvider
> = SsoCompanyProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SsoCompanyProvider$ {
  /** @deprecated use `SsoCompanyProvider$inboundSchema` instead. */
  export const inboundSchema = SsoCompanyProvider$inboundSchema;
  /** @deprecated use `SsoCompanyProvider$outboundSchema` instead. */
  export const outboundSchema = SsoCompanyProvider$outboundSchema;
}

/** @internal */
export const ClientConfig$inboundSchema: z.ZodType<
  ClientConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  assistant: AssistantConfig$inboundSchema.optional(),
  tools: ToolsConfig$inboundSchema.optional(),
  shortcuts: ShortcutsConfig$inboundSchema.optional(),
  search: SearchClientConfig$inboundSchema.optional(),
  feedPeopleCelebrationsEnabled: z.boolean().optional(),
  feedSuggestedEnabled: z.boolean().optional(),
  feedTrendingEnabled: z.boolean().optional(),
  feedRecentsEnabled: z.boolean().optional(),
  feedMentionsEnabled: z.boolean().optional(),
  gptAgentEnabled: z.boolean().optional(),
  chatHistoryEnabled: z.boolean().optional(),
  boolValues: z.record(z.boolean()).optional(),
  integerValues: z.record(z.number().int()).optional(),
  companyDisplayName: z.string().optional(),
  customSerpMarkdown: z.string().optional(),
  onboardingQuery: z.string().optional(),
  isOrgChartLinkVisible: z.boolean().optional(),
  isOrgChartAccessible: z.boolean().optional(),
  isPeopleSetup: z.boolean().optional(),
  isPilotMode: z.boolean().optional(),
  webAppUrl: z.string().optional(),
  userOutreach: UserOutreachConfig$inboundSchema.optional(),
  searchLinkUrlTemplate: z.string().optional(),
  chatLinkUrlTemplate: z.string().optional(),
  themes: Themes$inboundSchema.optional(),
  brandings: z.lazy(() => Brandings$inboundSchema).optional(),
  greetingFormat: z.string().optional(),
  taskSeeAllLabel: z.string().optional(),
  taskSeeAllLink: z.string().optional(),
  searchPlaceholder: z.string().optional(),
  shortcutsPrefix: z.string().optional(),
  ssoCompanyProvider: SsoCompanyProvider$inboundSchema.optional(),
  showPipelinesSetupBanner: z.boolean().optional(),
  feedbackCustomizations: FeedbackCustomizations$inboundSchema.optional(),
});

/** @internal */
export type ClientConfig$Outbound = {
  assistant?: AssistantConfig$Outbound | undefined;
  tools?: ToolsConfig$Outbound | undefined;
  shortcuts?: ShortcutsConfig$Outbound | undefined;
  search?: SearchClientConfig$Outbound | undefined;
  feedPeopleCelebrationsEnabled?: boolean | undefined;
  feedSuggestedEnabled?: boolean | undefined;
  feedTrendingEnabled?: boolean | undefined;
  feedRecentsEnabled?: boolean | undefined;
  feedMentionsEnabled?: boolean | undefined;
  gptAgentEnabled?: boolean | undefined;
  chatHistoryEnabled?: boolean | undefined;
  boolValues?: { [k: string]: boolean } | undefined;
  integerValues?: { [k: string]: number } | undefined;
  companyDisplayName?: string | undefined;
  customSerpMarkdown?: string | undefined;
  onboardingQuery?: string | undefined;
  isOrgChartLinkVisible?: boolean | undefined;
  isOrgChartAccessible?: boolean | undefined;
  isPeopleSetup?: boolean | undefined;
  isPilotMode?: boolean | undefined;
  webAppUrl?: string | undefined;
  userOutreach?: UserOutreachConfig$Outbound | undefined;
  searchLinkUrlTemplate?: string | undefined;
  chatLinkUrlTemplate?: string | undefined;
  themes?: Themes$Outbound | undefined;
  brandings?: Brandings$Outbound | undefined;
  greetingFormat?: string | undefined;
  taskSeeAllLabel?: string | undefined;
  taskSeeAllLink?: string | undefined;
  searchPlaceholder?: string | undefined;
  shortcutsPrefix?: string | undefined;
  ssoCompanyProvider?: string | undefined;
  showPipelinesSetupBanner?: boolean | undefined;
  feedbackCustomizations?: FeedbackCustomizations$Outbound | undefined;
};

/** @internal */
export const ClientConfig$outboundSchema: z.ZodType<
  ClientConfig$Outbound,
  z.ZodTypeDef,
  ClientConfig
> = z.object({
  assistant: AssistantConfig$outboundSchema.optional(),
  tools: ToolsConfig$outboundSchema.optional(),
  shortcuts: ShortcutsConfig$outboundSchema.optional(),
  search: SearchClientConfig$outboundSchema.optional(),
  feedPeopleCelebrationsEnabled: z.boolean().optional(),
  feedSuggestedEnabled: z.boolean().optional(),
  feedTrendingEnabled: z.boolean().optional(),
  feedRecentsEnabled: z.boolean().optional(),
  feedMentionsEnabled: z.boolean().optional(),
  gptAgentEnabled: z.boolean().optional(),
  chatHistoryEnabled: z.boolean().optional(),
  boolValues: z.record(z.boolean()).optional(),
  integerValues: z.record(z.number().int()).optional(),
  companyDisplayName: z.string().optional(),
  customSerpMarkdown: z.string().optional(),
  onboardingQuery: z.string().optional(),
  isOrgChartLinkVisible: z.boolean().optional(),
  isOrgChartAccessible: z.boolean().optional(),
  isPeopleSetup: z.boolean().optional(),
  isPilotMode: z.boolean().optional(),
  webAppUrl: z.string().optional(),
  userOutreach: UserOutreachConfig$outboundSchema.optional(),
  searchLinkUrlTemplate: z.string().optional(),
  chatLinkUrlTemplate: z.string().optional(),
  themes: Themes$outboundSchema.optional(),
  brandings: z.lazy(() => Brandings$outboundSchema).optional(),
  greetingFormat: z.string().optional(),
  taskSeeAllLabel: z.string().optional(),
  taskSeeAllLink: z.string().optional(),
  searchPlaceholder: z.string().optional(),
  shortcutsPrefix: z.string().optional(),
  ssoCompanyProvider: SsoCompanyProvider$outboundSchema.optional(),
  showPipelinesSetupBanner: z.boolean().optional(),
  feedbackCustomizations: FeedbackCustomizations$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientConfig$ {
  /** @deprecated use `ClientConfig$inboundSchema` instead. */
  export const inboundSchema = ClientConfig$inboundSchema;
  /** @deprecated use `ClientConfig$outboundSchema` instead. */
  export const outboundSchema = ClientConfig$outboundSchema;
  /** @deprecated use `ClientConfig$Outbound` instead. */
  export type Outbound = ClientConfig$Outbound;
}

export function clientConfigToJSON(clientConfig: ClientConfig): string {
  return JSON.stringify(ClientConfig$outboundSchema.parse(clientConfig));
}

export function clientConfigFromJSON(
  jsonString: string,
): SafeParseResult<ClientConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientConfig' from JSON`,
  );
}
