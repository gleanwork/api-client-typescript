/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CodeLine,
  CodeLine$inboundSchema,
  CodeLine$Outbound,
  CodeLine$outboundSchema,
} from "./codeline.js";

export type Code = {
  repoName?: string | undefined;
  fileName?: string | undefined;
  fileUrl?: string | undefined;
  lines?: Array<CodeLine> | undefined;
  /**
   * Last file match for a repo
   */
  isLastMatch?: boolean | undefined;
};

/** @internal */
export const Code$inboundSchema: z.ZodType<Code, z.ZodTypeDef, unknown> = z
  .object({
    repoName: z.string().optional(),
    fileName: z.string().optional(),
    fileUrl: z.string().optional(),
    lines: z.array(z.lazy(() => CodeLine$inboundSchema)).optional(),
    isLastMatch: z.boolean().optional(),
  });

/** @internal */
export type Code$Outbound = {
  repoName?: string | undefined;
  fileName?: string | undefined;
  fileUrl?: string | undefined;
  lines?: Array<CodeLine$Outbound> | undefined;
  isLastMatch?: boolean | undefined;
};

/** @internal */
export const Code$outboundSchema: z.ZodType<Code$Outbound, z.ZodTypeDef, Code> =
  z.object({
    repoName: z.string().optional(),
    fileName: z.string().optional(),
    fileUrl: z.string().optional(),
    lines: z.array(z.lazy(() => CodeLine$outboundSchema)).optional(),
    isLastMatch: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Code$ {
  /** @deprecated use `Code$inboundSchema` instead. */
  export const inboundSchema = Code$inboundSchema;
  /** @deprecated use `Code$outboundSchema` instead. */
  export const outboundSchema = Code$outboundSchema;
  /** @deprecated use `Code$Outbound` instead. */
  export type Outbound = Code$Outbound;
}

export function codeToJSON(code: Code): string {
  return JSON.stringify(Code$outboundSchema.parse(code));
}

export function codeFromJSON(
  jsonString: string,
): SafeParseResult<Code, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Code$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Code' from JSON`,
  );
}
