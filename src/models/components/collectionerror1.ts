/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as errors from "../errors/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionError1 = {
  errorCode: errors.ErrorCode;
};

/** @internal */
export const CollectionError1$inboundSchema: z.ZodType<
  CollectionError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCode: errors.ErrorCode$inboundSchema,
});

/** @internal */
export type CollectionError1$Outbound = {
  errorCode: string;
};

/** @internal */
export const CollectionError1$outboundSchema: z.ZodType<
  CollectionError1$Outbound,
  z.ZodTypeDef,
  CollectionError1
> = z.object({
  errorCode: errors.ErrorCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionError1$ {
  /** @deprecated use `CollectionError1$inboundSchema` instead. */
  export const inboundSchema = CollectionError1$inboundSchema;
  /** @deprecated use `CollectionError1$outboundSchema` instead. */
  export const outboundSchema = CollectionError1$outboundSchema;
  /** @deprecated use `CollectionError1$Outbound` instead. */
  export type Outbound = CollectionError1$Outbound;
}

export function collectionError1ToJSON(
  collectionError1: CollectionError1,
): string {
  return JSON.stringify(
    CollectionError1$outboundSchema.parse(collectionError1),
  );
}

export function collectionError1FromJSON(
  jsonString: string,
): SafeParseResult<CollectionError1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionError1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionError1' from JSON`,
  );
}
