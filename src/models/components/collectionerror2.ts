/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as errors from "../errors/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CollectionError2 = {
  errorCode: errors.ErrorCode;
};

/** @internal */
export const CollectionError2$inboundSchema: z.ZodType<
  CollectionError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCode: errors.ErrorCode$inboundSchema,
});

/** @internal */
export type CollectionError2$Outbound = {
  errorCode: string;
};

/** @internal */
export const CollectionError2$outboundSchema: z.ZodType<
  CollectionError2$Outbound,
  z.ZodTypeDef,
  CollectionError2
> = z.object({
  errorCode: errors.ErrorCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionError2$ {
  /** @deprecated use `CollectionError2$inboundSchema` instead. */
  export const inboundSchema = CollectionError2$inboundSchema;
  /** @deprecated use `CollectionError2$outboundSchema` instead. */
  export const outboundSchema = CollectionError2$outboundSchema;
  /** @deprecated use `CollectionError2$Outbound` instead. */
  export type Outbound = CollectionError2$Outbound;
}

export function collectionError2ToJSON(
  collectionError2: CollectionError2,
): string {
  return JSON.stringify(
    CollectionError2$outboundSchema.parse(collectionError2),
  );
}

export function collectionError2FromJSON(
  jsonString: string,
): SafeParseResult<CollectionError2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionError2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionError2' from JSON`,
  );
}
