/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CollectionErrorErrorCode = {
  NameExists: "NAME_EXISTS",
  NotFound: "NOT_FOUND",
  CollectionPinned: "COLLECTION_PINNED",
  ConcurrentHierarchyEdit: "CONCURRENT_HIERARCHY_EDIT",
  HeightViolation: "HEIGHT_VIOLATION",
  WidthViolation: "WIDTH_VIOLATION",
  NoPermissions: "NO_PERMISSIONS",
} as const;
export type CollectionErrorErrorCode = ClosedEnum<
  typeof CollectionErrorErrorCode
>;

export type CollectionError3 = {
  errorCode: CollectionErrorErrorCode;
};

/** @internal */
export const CollectionErrorErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof CollectionErrorErrorCode
> = z.nativeEnum(CollectionErrorErrorCode);

/** @internal */
export const CollectionErrorErrorCode$outboundSchema: z.ZodNativeEnum<
  typeof CollectionErrorErrorCode
> = CollectionErrorErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionErrorErrorCode$ {
  /** @deprecated use `CollectionErrorErrorCode$inboundSchema` instead. */
  export const inboundSchema = CollectionErrorErrorCode$inboundSchema;
  /** @deprecated use `CollectionErrorErrorCode$outboundSchema` instead. */
  export const outboundSchema = CollectionErrorErrorCode$outboundSchema;
}

/** @internal */
export const CollectionError3$inboundSchema: z.ZodType<
  CollectionError3,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCode: CollectionErrorErrorCode$inboundSchema,
});

/** @internal */
export type CollectionError3$Outbound = {
  errorCode: string;
};

/** @internal */
export const CollectionError3$outboundSchema: z.ZodType<
  CollectionError3$Outbound,
  z.ZodTypeDef,
  CollectionError3
> = z.object({
  errorCode: CollectionErrorErrorCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionError3$ {
  /** @deprecated use `CollectionError3$inboundSchema` instead. */
  export const inboundSchema = CollectionError3$inboundSchema;
  /** @deprecated use `CollectionError3$outboundSchema` instead. */
  export const outboundSchema = CollectionError3$outboundSchema;
  /** @deprecated use `CollectionError3$Outbound` instead. */
  export type Outbound = CollectionError3$Outbound;
}

export function collectionError3ToJSON(
  collectionError3: CollectionError3,
): string {
  return JSON.stringify(
    CollectionError3$outboundSchema.parse(collectionError3),
  );
}

export function collectionError3FromJSON(
  jsonString: string,
): SafeParseResult<CollectionError3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionError3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionError3' from JSON`,
  );
}
