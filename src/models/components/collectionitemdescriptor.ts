/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CollectionItemDescriptorItemType = {
  Document: "DOCUMENT",
  Text: "TEXT",
  Url: "URL",
} as const;
export type CollectionItemDescriptorItemType = ClosedEnum<
  typeof CollectionItemDescriptorItemType
>;

export type CollectionItemDescriptor = {
  /**
   * The optional name of the Collection item.
   */
  name?: string | undefined;
  /**
   * A helpful description of why this CollectionItem is in the Collection that it's in.
   */
  description?: string | undefined;
  /**
   * The emoji icon for this CollectionItem. Only used for Text type items.
   */
  icon?: string | undefined;
  /**
   * The URL of the item being added.
   */
  url?: string | undefined;
  /**
   * The Glean Document ID of the item being added if it's an indexed document.
   */
  documentId?: string | undefined;
  /**
   * The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
   */
  newNextItemId?: string | undefined;
  itemType?: CollectionItemDescriptorItemType | undefined;
};

/** @internal */
export const CollectionItemDescriptorItemType$inboundSchema: z.ZodNativeEnum<
  typeof CollectionItemDescriptorItemType
> = z.nativeEnum(CollectionItemDescriptorItemType);

/** @internal */
export const CollectionItemDescriptorItemType$outboundSchema: z.ZodNativeEnum<
  typeof CollectionItemDescriptorItemType
> = CollectionItemDescriptorItemType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionItemDescriptorItemType$ {
  /** @deprecated use `CollectionItemDescriptorItemType$inboundSchema` instead. */
  export const inboundSchema = CollectionItemDescriptorItemType$inboundSchema;
  /** @deprecated use `CollectionItemDescriptorItemType$outboundSchema` instead. */
  export const outboundSchema = CollectionItemDescriptorItemType$outboundSchema;
}

/** @internal */
export const CollectionItemDescriptor$inboundSchema: z.ZodType<
  CollectionItemDescriptor,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  icon: z.string().optional(),
  url: z.string().optional(),
  documentId: z.string().optional(),
  newNextItemId: z.string().optional(),
  itemType: CollectionItemDescriptorItemType$inboundSchema.optional(),
});

/** @internal */
export type CollectionItemDescriptor$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  icon?: string | undefined;
  url?: string | undefined;
  documentId?: string | undefined;
  newNextItemId?: string | undefined;
  itemType?: string | undefined;
};

/** @internal */
export const CollectionItemDescriptor$outboundSchema: z.ZodType<
  CollectionItemDescriptor$Outbound,
  z.ZodTypeDef,
  CollectionItemDescriptor
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  icon: z.string().optional(),
  url: z.string().optional(),
  documentId: z.string().optional(),
  newNextItemId: z.string().optional(),
  itemType: CollectionItemDescriptorItemType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionItemDescriptor$ {
  /** @deprecated use `CollectionItemDescriptor$inboundSchema` instead. */
  export const inboundSchema = CollectionItemDescriptor$inboundSchema;
  /** @deprecated use `CollectionItemDescriptor$outboundSchema` instead. */
  export const outboundSchema = CollectionItemDescriptor$outboundSchema;
  /** @deprecated use `CollectionItemDescriptor$Outbound` instead. */
  export type Outbound = CollectionItemDescriptor$Outbound;
}

export function collectionItemDescriptorToJSON(
  collectionItemDescriptor: CollectionItemDescriptor,
): string {
  return JSON.stringify(
    CollectionItemDescriptor$outboundSchema.parse(collectionItemDescriptor),
  );
}

export function collectionItemDescriptorFromJSON(
  jsonString: string,
): SafeParseResult<CollectionItemDescriptor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionItemDescriptor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionItemDescriptor' from JSON`,
  );
}
