/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CollectionPinTarget,
  CollectionPinTarget$inboundSchema,
  CollectionPinTarget$Outbound,
  CollectionPinTarget$outboundSchema,
} from "./collectionpintarget.js";

export type CollectionPinMetadata = {
  /**
   * The ID of the Collection.
   */
  id: number;
  target: CollectionPinTarget;
};

/** @internal */
export const CollectionPinMetadata$inboundSchema: z.ZodType<
  CollectionPinMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  target: CollectionPinTarget$inboundSchema,
});

/** @internal */
export type CollectionPinMetadata$Outbound = {
  id: number;
  target: CollectionPinTarget$Outbound;
};

/** @internal */
export const CollectionPinMetadata$outboundSchema: z.ZodType<
  CollectionPinMetadata$Outbound,
  z.ZodTypeDef,
  CollectionPinMetadata
> = z.object({
  id: z.number().int(),
  target: CollectionPinTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionPinMetadata$ {
  /** @deprecated use `CollectionPinMetadata$inboundSchema` instead. */
  export const inboundSchema = CollectionPinMetadata$inboundSchema;
  /** @deprecated use `CollectionPinMetadata$outboundSchema` instead. */
  export const outboundSchema = CollectionPinMetadata$outboundSchema;
  /** @deprecated use `CollectionPinMetadata$Outbound` instead. */
  export type Outbound = CollectionPinMetadata$Outbound;
}

export function collectionPinMetadataToJSON(
  collectionPinMetadata: CollectionPinMetadata,
): string {
  return JSON.stringify(
    CollectionPinMetadata$outboundSchema.parse(collectionPinMetadata),
  );
}

export function collectionPinMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CollectionPinMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionPinMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionPinMetadata' from JSON`,
  );
}
