/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CollectionPinnableCategories,
  CollectionPinnableCategories$inboundSchema,
  CollectionPinnableCategories$outboundSchema,
} from "./collectionpinnablecategories.js";
import {
  CollectionPinnableTargets,
  CollectionPinnableTargets$inboundSchema,
  CollectionPinnableTargets$outboundSchema,
} from "./collectionpinnabletargets.js";

export type CollectionPinTarget = {
  /**
   * Categories a Collection can be pinned to.
   */
  category: CollectionPinnableCategories;
  /**
   * Optional. If category supports values, then the additional value for the category e.g. department name for DEPARTMENT_RESOURCE, team name/id for TEAM_RESOURCE and so on.
   */
  value?: string | undefined;
  /**
   * What targets can a Collection be pinned to.
   */
  target?: CollectionPinnableTargets | undefined;
};

/** @internal */
export const CollectionPinTarget$inboundSchema: z.ZodType<
  CollectionPinTarget,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: CollectionPinnableCategories$inboundSchema,
  value: z.string().optional(),
  target: CollectionPinnableTargets$inboundSchema.optional(),
});

/** @internal */
export type CollectionPinTarget$Outbound = {
  category: string;
  value?: string | undefined;
  target?: string | undefined;
};

/** @internal */
export const CollectionPinTarget$outboundSchema: z.ZodType<
  CollectionPinTarget$Outbound,
  z.ZodTypeDef,
  CollectionPinTarget
> = z.object({
  category: CollectionPinnableCategories$outboundSchema,
  value: z.string().optional(),
  target: CollectionPinnableTargets$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionPinTarget$ {
  /** @deprecated use `CollectionPinTarget$inboundSchema` instead. */
  export const inboundSchema = CollectionPinTarget$inboundSchema;
  /** @deprecated use `CollectionPinTarget$outboundSchema` instead. */
  export const outboundSchema = CollectionPinTarget$outboundSchema;
  /** @deprecated use `CollectionPinTarget$Outbound` instead. */
  export type Outbound = CollectionPinTarget$Outbound;
}

export function collectionPinTargetToJSON(
  collectionPinTarget: CollectionPinTarget,
): string {
  return JSON.stringify(
    CollectionPinTarget$outboundSchema.parse(collectionPinTarget),
  );
}

export function collectionPinTargetFromJSON(
  jsonString: string,
): SafeParseResult<CollectionPinTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CollectionPinTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CollectionPinTarget' from JSON`,
  );
}
