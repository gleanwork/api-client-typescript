/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContentDefinition,
  ContentDefinition$inboundSchema,
  ContentDefinition$Outbound,
  ContentDefinition$outboundSchema,
} from "./contentdefinition.js";
import {
  UserReferenceDefinition,
  UserReferenceDefinition$inboundSchema,
  UserReferenceDefinition$Outbound,
  UserReferenceDefinition$outboundSchema,
} from "./userreferencedefinition.js";

/**
 * Describes a comment on a document
 */
export type CommentDefinition = {
  /**
   * The document specific id for the comment. This field is case insensitive and should not be more than 200 characters in length.
   */
  id: string;
  /**
   * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
   */
  author?: UserReferenceDefinition | undefined;
  /**
   * Describes text content or base64 encoded binary content
   */
  content?: ContentDefinition | undefined;
  /**
   * The creation time, in epoch seconds.
   */
  createdAt?: number | undefined;
  /**
   * The last updated time, in epoch seconds.
   */
  updatedAt?: number | undefined;
  /**
   * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
   */
  updatedBy?: UserReferenceDefinition | undefined;
};

/** @internal */
export const CommentDefinition$inboundSchema: z.ZodType<
  CommentDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  author: UserReferenceDefinition$inboundSchema.optional(),
  content: ContentDefinition$inboundSchema.optional(),
  createdAt: z.number().int().optional(),
  updatedAt: z.number().int().optional(),
  updatedBy: UserReferenceDefinition$inboundSchema.optional(),
});

/** @internal */
export type CommentDefinition$Outbound = {
  id: string;
  author?: UserReferenceDefinition$Outbound | undefined;
  content?: ContentDefinition$Outbound | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
  updatedBy?: UserReferenceDefinition$Outbound | undefined;
};

/** @internal */
export const CommentDefinition$outboundSchema: z.ZodType<
  CommentDefinition$Outbound,
  z.ZodTypeDef,
  CommentDefinition
> = z.object({
  id: z.string(),
  author: UserReferenceDefinition$outboundSchema.optional(),
  content: ContentDefinition$outboundSchema.optional(),
  createdAt: z.number().int().optional(),
  updatedAt: z.number().int().optional(),
  updatedBy: UserReferenceDefinition$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommentDefinition$ {
  /** @deprecated use `CommentDefinition$inboundSchema` instead. */
  export const inboundSchema = CommentDefinition$inboundSchema;
  /** @deprecated use `CommentDefinition$outboundSchema` instead. */
  export const outboundSchema = CommentDefinition$outboundSchema;
  /** @deprecated use `CommentDefinition$Outbound` instead. */
  export type Outbound = CommentDefinition$Outbound;
}

export function commentDefinitionToJSON(
  commentDefinition: CommentDefinition,
): string {
  return JSON.stringify(
    CommentDefinition$outboundSchema.parse(commentDefinition),
  );
}

export function commentDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<CommentDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CommentDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CommentDefinition' from JSON`,
  );
}
