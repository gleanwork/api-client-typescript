/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The type of email to send
 */
export const CommunicationTemplate = {
  AdminAlert: "ADMIN_ALERT",
  AdminAlertV2: "ADMIN_ALERT_V2",
  AdminInvite: "ADMIN_INVITE",
  AgentMessage: "AGENT_MESSAGE",
  AssistantAccess: "ASSISTANT_ACCESS",
  AutoInvite: "AUTO_INVITE",
  ChatFeedback: "CHAT_FEEDBACK",
  CustomJsonReport: "CUSTOM_JSON_REPORT",
  DlpReportNotification: "DLP_REPORT_NOTIFICATION",
  DomainVerification: "DOMAIN_VERIFICATION",
  GeneralFeedback: "GENERAL_FEEDBACK",
  InviteReminder: "INVITE_REMINDER",
  ManagerInvite: "MANAGER_INVITE",
  OnboardingChat: "ONBOARDING_CHAT",
  OnboardingIntro: "ONBOARDING_INTRO",
  OnboardingExplore: "ONBOARDING_EXPLORE",
  OnboardingExploreExtensionPromo: "ONBOARDING_EXPLORE_EXTENSION_PROMO",
  OnboardingTips: "ONBOARDING_TIPS",
  OnboardingTipsExtensionPromo: "ONBOARDING_TIPS_EXTENSION_PROMO",
  OnboardingSurvey: "ONBOARDING_SURVEY",
  OnboardingAdminInvite: "ONBOARDING_ADMIN_INVITE",
  RecrawlDatasource: "RECRAWL_DATASOURCE",
  ReportIssueFeedback: "REPORT_ISSUE_FEEDBACK",
  SearchFeedback: "SEARCH_FEEDBACK",
  TeammateInvite: "TEAMMATE_INVITE",
  VerificationRequest: "VERIFICATION_REQUEST",
  VerificationRequestNonuser: "VERIFICATION_REQUEST_NONUSER",
  WeeklyFeed: "WEEKLY_FEED",
  WorkspaceInitialized: "WORKSPACE_INITIALIZED",
  ChannelsDigestReminder: "CHANNELS_DIGEST_REMINDER",
  ChannelsDigestSignupReminder: "CHANNELS_DIGEST_SIGNUP_REMINDER",
} as const;
/**
 * The type of email to send
 */
export type CommunicationTemplate = ClosedEnum<typeof CommunicationTemplate>;

/** @internal */
export const CommunicationTemplate$inboundSchema: z.ZodNativeEnum<
  typeof CommunicationTemplate
> = z.nativeEnum(CommunicationTemplate);

/** @internal */
export const CommunicationTemplate$outboundSchema: z.ZodNativeEnum<
  typeof CommunicationTemplate
> = CommunicationTemplate$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CommunicationTemplate$ {
  /** @deprecated use `CommunicationTemplate$inboundSchema` instead. */
  export const inboundSchema = CommunicationTemplate$inboundSchema;
  /** @deprecated use `CommunicationTemplate$outboundSchema` instead. */
  export const outboundSchema = CommunicationTemplate$outboundSchema;
}
