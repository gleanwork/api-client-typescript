/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Provider = {
  Zoom: "ZOOM",
  Hangouts: "HANGOUTS",
} as const;
export type Provider = ClosedEnum<typeof Provider>;

export const ConferenceDataSource = {
  NativeConference: "NATIVE_CONFERENCE",
  Location: "LOCATION",
  Description: "DESCRIPTION",
} as const;
export type ConferenceDataSource = ClosedEnum<typeof ConferenceDataSource>;

export type ConferenceData = {
  provider: Provider;
  /**
   * A permalink for the conference.
   */
  uri: string;
  source?: ConferenceDataSource | undefined;
};

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z
  .nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> =
  Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
  /** @deprecated use `Provider$inboundSchema` instead. */
  export const inboundSchema = Provider$inboundSchema;
  /** @deprecated use `Provider$outboundSchema` instead. */
  export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const ConferenceDataSource$inboundSchema: z.ZodNativeEnum<
  typeof ConferenceDataSource
> = z.nativeEnum(ConferenceDataSource);

/** @internal */
export const ConferenceDataSource$outboundSchema: z.ZodNativeEnum<
  typeof ConferenceDataSource
> = ConferenceDataSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConferenceDataSource$ {
  /** @deprecated use `ConferenceDataSource$inboundSchema` instead. */
  export const inboundSchema = ConferenceDataSource$inboundSchema;
  /** @deprecated use `ConferenceDataSource$outboundSchema` instead. */
  export const outboundSchema = ConferenceDataSource$outboundSchema;
}

/** @internal */
export const ConferenceData$inboundSchema: z.ZodType<
  ConferenceData,
  z.ZodTypeDef,
  unknown
> = z.object({
  provider: Provider$inboundSchema,
  uri: z.string(),
  source: ConferenceDataSource$inboundSchema.optional(),
});

/** @internal */
export type ConferenceData$Outbound = {
  provider: string;
  uri: string;
  source?: string | undefined;
};

/** @internal */
export const ConferenceData$outboundSchema: z.ZodType<
  ConferenceData$Outbound,
  z.ZodTypeDef,
  ConferenceData
> = z.object({
  provider: Provider$outboundSchema,
  uri: z.string(),
  source: ConferenceDataSource$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConferenceData$ {
  /** @deprecated use `ConferenceData$inboundSchema` instead. */
  export const inboundSchema = ConferenceData$inboundSchema;
  /** @deprecated use `ConferenceData$outboundSchema` instead. */
  export const outboundSchema = ConferenceData$outboundSchema;
  /** @deprecated use `ConferenceData$Outbound` instead. */
  export type Outbound = ConferenceData$Outbound;
}

export function conferenceDataToJSON(conferenceData: ConferenceData): string {
  return JSON.stringify(ConferenceData$outboundSchema.parse(conferenceData));
}

export function conferenceDataFromJSON(
  jsonString: string,
): SafeParseResult<ConferenceData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConferenceData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConferenceData' from JSON`,
  );
}
