/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DocumentInsight,
  DocumentInsight$inboundSchema,
  DocumentInsight$Outbound,
  DocumentInsight$outboundSchema,
} from "./documentinsight.js";

export type ContentInsightsResponse = {
  /**
   * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
   */
  lastLogTimestamp?: number | undefined;
  /**
   * Insights for documents.
   */
  documentInsights?: Array<DocumentInsight> | undefined;
  /**
   * list of departments applicable for contents tab.
   */
  departments?: Array<string> | undefined;
  /**
   * Min threshold in size of departments while populating results, otherwise 0.
   */
  minDepartmentSizeThreshold?: number | undefined;
  /**
   * Minimum number of visitors to a document required to be included in insights.
   */
  minVisitorThreshold?: number | undefined;
};

/** @internal */
export const ContentInsightsResponse$inboundSchema: z.ZodType<
  ContentInsightsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lastLogTimestamp: z.number().int().optional(),
  documentInsights: z.array(DocumentInsight$inboundSchema).optional(),
  departments: z.array(z.string()).optional(),
  minDepartmentSizeThreshold: z.number().int().optional(),
  minVisitorThreshold: z.number().int().optional(),
});

/** @internal */
export type ContentInsightsResponse$Outbound = {
  lastLogTimestamp?: number | undefined;
  documentInsights?: Array<DocumentInsight$Outbound> | undefined;
  departments?: Array<string> | undefined;
  minDepartmentSizeThreshold?: number | undefined;
  minVisitorThreshold?: number | undefined;
};

/** @internal */
export const ContentInsightsResponse$outboundSchema: z.ZodType<
  ContentInsightsResponse$Outbound,
  z.ZodTypeDef,
  ContentInsightsResponse
> = z.object({
  lastLogTimestamp: z.number().int().optional(),
  documentInsights: z.array(DocumentInsight$outboundSchema).optional(),
  departments: z.array(z.string()).optional(),
  minDepartmentSizeThreshold: z.number().int().optional(),
  minVisitorThreshold: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentInsightsResponse$ {
  /** @deprecated use `ContentInsightsResponse$inboundSchema` instead. */
  export const inboundSchema = ContentInsightsResponse$inboundSchema;
  /** @deprecated use `ContentInsightsResponse$outboundSchema` instead. */
  export const outboundSchema = ContentInsightsResponse$outboundSchema;
  /** @deprecated use `ContentInsightsResponse$Outbound` instead. */
  export type Outbound = ContentInsightsResponse$Outbound;
}

export function contentInsightsResponseToJSON(
  contentInsightsResponse: ContentInsightsResponse,
): string {
  return JSON.stringify(
    ContentInsightsResponse$outboundSchema.parse(contentInsightsResponse),
  );
}

export function contentInsightsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ContentInsightsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentInsightsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentInsightsResponse' from JSON`,
  );
}
