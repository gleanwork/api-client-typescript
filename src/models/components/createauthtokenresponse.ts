/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateAuthTokenResponse = {
  /**
   * An authentication token that can be passed to any endpoint via Bearer Authentication
   */
  token: string;
  /**
   * Unix timestamp for when this token expires (in seconds since epoch UTC).
   */
  expirationTime: number;
};

/** @internal */
export const CreateAuthTokenResponse$inboundSchema: z.ZodType<
  CreateAuthTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  expirationTime: z.number().int(),
});

/** @internal */
export type CreateAuthTokenResponse$Outbound = {
  token: string;
  expirationTime: number;
};

/** @internal */
export const CreateAuthTokenResponse$outboundSchema: z.ZodType<
  CreateAuthTokenResponse$Outbound,
  z.ZodTypeDef,
  CreateAuthTokenResponse
> = z.object({
  token: z.string(),
  expirationTime: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthTokenResponse$ {
  /** @deprecated use `CreateAuthTokenResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAuthTokenResponse$inboundSchema;
  /** @deprecated use `CreateAuthTokenResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAuthTokenResponse$outboundSchema;
  /** @deprecated use `CreateAuthTokenResponse$Outbound` instead. */
  export type Outbound = CreateAuthTokenResponse$Outbound;
}

export function createAuthTokenResponseToJSON(
  createAuthTokenResponse: CreateAuthTokenResponse,
): string {
  return JSON.stringify(
    CreateAuthTokenResponse$outboundSchema.parse(createAuthTokenResponse),
  );
}

export function createAuthTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAuthTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAuthTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAuthTokenResponse' from JSON`,
  );
}
