/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DlpConfig,
  DlpConfig$inboundSchema,
  DlpConfig$Outbound,
  DlpConfig$outboundSchema,
} from "./dlpconfig.js";
import {
  DlpFrequency,
  DlpFrequency$inboundSchema,
  DlpFrequency$outboundSchema,
} from "./dlpfrequency.js";

export type CreateDlpReportRequest = {
  /**
   * Name of the policy being created.
   */
  name?: string | undefined;
  /**
   * Detailed configuration of what documents and sensitive content will be scanned.
   */
  config?: DlpConfig | undefined;
  /**
   * Interval between scans. DAILY is deprecated.
   */
  frequency?: DlpFrequency | undefined;
  /**
   * Controls whether the policy should hide documents with violations.
   */
  autoHideDocs?: boolean | undefined;
};

/** @internal */
export const CreateDlpReportRequest$inboundSchema: z.ZodType<
  CreateDlpReportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  config: DlpConfig$inboundSchema.optional(),
  frequency: DlpFrequency$inboundSchema.optional(),
  autoHideDocs: z.boolean().optional(),
});

/** @internal */
export type CreateDlpReportRequest$Outbound = {
  name?: string | undefined;
  config?: DlpConfig$Outbound | undefined;
  frequency?: string | undefined;
  autoHideDocs?: boolean | undefined;
};

/** @internal */
export const CreateDlpReportRequest$outboundSchema: z.ZodType<
  CreateDlpReportRequest$Outbound,
  z.ZodTypeDef,
  CreateDlpReportRequest
> = z.object({
  name: z.string().optional(),
  config: DlpConfig$outboundSchema.optional(),
  frequency: DlpFrequency$outboundSchema.optional(),
  autoHideDocs: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDlpReportRequest$ {
  /** @deprecated use `CreateDlpReportRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDlpReportRequest$inboundSchema;
  /** @deprecated use `CreateDlpReportRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDlpReportRequest$outboundSchema;
  /** @deprecated use `CreateDlpReportRequest$Outbound` instead. */
  export type Outbound = CreateDlpReportRequest$Outbound;
}

export function createDlpReportRequestToJSON(
  createDlpReportRequest: CreateDlpReportRequest,
): string {
  return JSON.stringify(
    CreateDlpReportRequest$outboundSchema.parse(createDlpReportRequest),
  );
}

export function createDlpReportRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDlpReportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDlpReportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDlpReportRequest' from JSON`,
  );
}
