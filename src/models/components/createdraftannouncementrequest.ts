/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  StructuredText,
  StructuredText$inboundSchema,
  StructuredText$Outbound,
  StructuredText$outboundSchema,
} from "./structuredtext.js";
import {
  Thumbnail,
  Thumbnail$inboundSchema,
  Thumbnail$Outbound,
  Thumbnail$outboundSchema,
} from "./thumbnail.js";

/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
export const CreateDraftAnnouncementRequestChannel = {
  Main: "MAIN",
  SocialFeed: "SOCIAL_FEED",
} as const;
/**
 * This determines whether this is a Social Feed post or a regular announcement.
 */
export type CreateDraftAnnouncementRequestChannel = ClosedEnum<
  typeof CreateDraftAnnouncementRequestChannel
>;

/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
export const CreateDraftAnnouncementRequestPostType = {
  Text: "TEXT",
  Link: "LINK",
} as const;
/**
 * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
 */
export type CreateDraftAnnouncementRequestPostType = ClosedEnum<
  typeof CreateDraftAnnouncementRequestPostType
>;

export type CreateDraftAnnouncementRequest = {
  /**
   * The date and time at which the announcement becomes active.
   */
  startTime?: Date | undefined;
  /**
   * The date and time at which the announcement expires.
   */
  endTime?: Date | undefined;
  /**
   * The headline of the announcement.
   */
  title?: string | undefined;
  body?: StructuredText | undefined;
  /**
   * An emoji used to indicate the nature of the announcement.
   */
  emoji?: string | undefined;
  thumbnail?: Thumbnail | undefined;
  banner?: Thumbnail | undefined;
  /**
   * Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
   */
  audienceFilters?: Array<FacetFilter> | undefined;
  /**
   * The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
   */
  sourceDocumentId?: string | undefined;
  /**
   * Whether or not to hide an author attribution.
   */
  hideAttribution?: boolean | undefined;
  /**
   * This determines whether this is a Social Feed post or a regular announcement.
   */
  channel?: CreateDraftAnnouncementRequestChannel | undefined;
  /**
   * This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
   */
  postType?: CreateDraftAnnouncementRequestPostType | undefined;
  /**
   * Used by the Social Feed to pin posts to the front of the feed.
   */
  isPrioritized?: boolean | undefined;
  /**
   * URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
   */
  viewUrl?: string | undefined;
  /**
   * The opaque id of the parent announcement.
   */
  id?: number | undefined;
};

/** @internal */
export const CreateDraftAnnouncementRequestChannel$inboundSchema:
  z.ZodNativeEnum<typeof CreateDraftAnnouncementRequestChannel> = z.nativeEnum(
    CreateDraftAnnouncementRequestChannel,
  );

/** @internal */
export const CreateDraftAnnouncementRequestChannel$outboundSchema:
  z.ZodNativeEnum<typeof CreateDraftAnnouncementRequestChannel> =
    CreateDraftAnnouncementRequestChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDraftAnnouncementRequestChannel$ {
  /** @deprecated use `CreateDraftAnnouncementRequestChannel$inboundSchema` instead. */
  export const inboundSchema =
    CreateDraftAnnouncementRequestChannel$inboundSchema;
  /** @deprecated use `CreateDraftAnnouncementRequestChannel$outboundSchema` instead. */
  export const outboundSchema =
    CreateDraftAnnouncementRequestChannel$outboundSchema;
}

/** @internal */
export const CreateDraftAnnouncementRequestPostType$inboundSchema:
  z.ZodNativeEnum<typeof CreateDraftAnnouncementRequestPostType> = z.nativeEnum(
    CreateDraftAnnouncementRequestPostType,
  );

/** @internal */
export const CreateDraftAnnouncementRequestPostType$outboundSchema:
  z.ZodNativeEnum<typeof CreateDraftAnnouncementRequestPostType> =
    CreateDraftAnnouncementRequestPostType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDraftAnnouncementRequestPostType$ {
  /** @deprecated use `CreateDraftAnnouncementRequestPostType$inboundSchema` instead. */
  export const inboundSchema =
    CreateDraftAnnouncementRequestPostType$inboundSchema;
  /** @deprecated use `CreateDraftAnnouncementRequestPostType$outboundSchema` instead. */
  export const outboundSchema =
    CreateDraftAnnouncementRequestPostType$outboundSchema;
}

/** @internal */
export const CreateDraftAnnouncementRequest$inboundSchema: z.ZodType<
  CreateDraftAnnouncementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  startTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  endTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  title: z.string().optional(),
  body: StructuredText$inboundSchema.optional(),
  emoji: z.string().optional(),
  thumbnail: Thumbnail$inboundSchema.optional(),
  banner: Thumbnail$inboundSchema.optional(),
  audienceFilters: z.array(FacetFilter$inboundSchema).optional(),
  sourceDocumentId: z.string().optional(),
  hideAttribution: z.boolean().optional(),
  channel: CreateDraftAnnouncementRequestChannel$inboundSchema.optional(),
  postType: CreateDraftAnnouncementRequestPostType$inboundSchema.optional(),
  isPrioritized: z.boolean().optional(),
  viewUrl: z.string().optional(),
  id: z.number().int().optional(),
});

/** @internal */
export type CreateDraftAnnouncementRequest$Outbound = {
  startTime?: string | undefined;
  endTime?: string | undefined;
  title?: string | undefined;
  body?: StructuredText$Outbound | undefined;
  emoji?: string | undefined;
  thumbnail?: Thumbnail$Outbound | undefined;
  banner?: Thumbnail$Outbound | undefined;
  audienceFilters?: Array<FacetFilter$Outbound> | undefined;
  sourceDocumentId?: string | undefined;
  hideAttribution?: boolean | undefined;
  channel?: string | undefined;
  postType?: string | undefined;
  isPrioritized?: boolean | undefined;
  viewUrl?: string | undefined;
  id?: number | undefined;
};

/** @internal */
export const CreateDraftAnnouncementRequest$outboundSchema: z.ZodType<
  CreateDraftAnnouncementRequest$Outbound,
  z.ZodTypeDef,
  CreateDraftAnnouncementRequest
> = z.object({
  startTime: z.date().transform(v => v.toISOString()).optional(),
  endTime: z.date().transform(v => v.toISOString()).optional(),
  title: z.string().optional(),
  body: StructuredText$outboundSchema.optional(),
  emoji: z.string().optional(),
  thumbnail: Thumbnail$outboundSchema.optional(),
  banner: Thumbnail$outboundSchema.optional(),
  audienceFilters: z.array(FacetFilter$outboundSchema).optional(),
  sourceDocumentId: z.string().optional(),
  hideAttribution: z.boolean().optional(),
  channel: CreateDraftAnnouncementRequestChannel$outboundSchema.optional(),
  postType: CreateDraftAnnouncementRequestPostType$outboundSchema.optional(),
  isPrioritized: z.boolean().optional(),
  viewUrl: z.string().optional(),
  id: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDraftAnnouncementRequest$ {
  /** @deprecated use `CreateDraftAnnouncementRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDraftAnnouncementRequest$inboundSchema;
  /** @deprecated use `CreateDraftAnnouncementRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDraftAnnouncementRequest$outboundSchema;
  /** @deprecated use `CreateDraftAnnouncementRequest$Outbound` instead. */
  export type Outbound = CreateDraftAnnouncementRequest$Outbound;
}

export function createDraftAnnouncementRequestToJSON(
  createDraftAnnouncementRequest: CreateDraftAnnouncementRequest,
): string {
  return JSON.stringify(
    CreateDraftAnnouncementRequest$outboundSchema.parse(
      createDraftAnnouncementRequest,
    ),
  );
}

export function createDraftAnnouncementRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDraftAnnouncementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDraftAnnouncementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDraftAnnouncementRequest' from JSON`,
  );
}
