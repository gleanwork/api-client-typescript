/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CanonicalizingRegexType,
  CanonicalizingRegexType$inboundSchema,
  CanonicalizingRegexType$Outbound,
  CanonicalizingRegexType$outboundSchema,
} from "./canonicalizingregextype.js";
import {
  ObjectDefinition,
  ObjectDefinition$inboundSchema,
  ObjectDefinition$Outbound,
  ObjectDefinition$outboundSchema,
} from "./objectdefinition.js";
import {
  Quicklink,
  Quicklink$inboundSchema,
  Quicklink$Outbound,
  Quicklink$outboundSchema,
} from "./quicklink.js";

/**
 * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
 */
export const DatasourceCategory = {
  Uncategorized: "UNCATEGORIZED",
  Tickets: "TICKETS",
  Crm: "CRM",
  PublishedContent: "PUBLISHED_CONTENT",
  CollaborativeContent: "COLLABORATIVE_CONTENT",
  QuestionAnswer: "QUESTION_ANSWER",
  Messaging: "MESSAGING",
  CodeRepository: "CODE_REPOSITORY",
  ChangeManagement: "CHANGE_MANAGEMENT",
  People: "PEOPLE",
  Email: "EMAIL",
  Sso: "SSO",
  Ats: "ATS",
  KnowledgeHub: "KNOWLEDGE_HUB",
  ExternalShortcut: "EXTERNAL_SHORTCUT",
  Entity: "ENTITY",
  Calendar: "CALENDAR",
} as const;
/**
 * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
 */
export type DatasourceCategory = ClosedEnum<typeof DatasourceCategory>;

export const HideBuiltInFacet = {
  Type: "TYPE",
  Tag: "TAG",
  Author: "AUTHOR",
  Owner: "OWNER",
} as const;
export type HideBuiltInFacet = ClosedEnum<typeof HideBuiltInFacet>;

/**
 * The source from which document content was pulled, e.g. an API crawl or browser history
 */
export const CustomDatasourceConfigConnectorType = {
  ApiCrawl: "API_CRAWL",
  BrowserCrawl: "BROWSER_CRAWL",
  BrowserHistory: "BROWSER_HISTORY",
  Builtin: "BUILTIN",
  FederatedSearch: "FEDERATED_SEARCH",
  PushApi: "PUSH_API",
  WebCrawl: "WEB_CRAWL",
  NativeHistory: "NATIVE_HISTORY",
} as const;
/**
 * The source from which document content was pulled, e.g. an API crawl or browser history
 */
export type CustomDatasourceConfigConnectorType = ClosedEnum<
  typeof CustomDatasourceConfigConnectorType
>;

/**
 * Structure describing config properties of a custom datasource
 */
export type CustomDatasourceConfig = {
  /**
   * Unique identifier of datasource instance to which this config applies.
   */
  name: string;
  /**
   * The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
   */
  displayName?: string | undefined;
  /**
   * The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
   */
  datasourceCategory?: DatasourceCategory | undefined;
  /**
   * Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
   */
  urlRegex?: string | undefined;
  /**
   * The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
   */
  iconUrl?: string | undefined;
  /**
   * The list of top-level `objectType`s for the datasource.
   */
  objectDefinitions?: Array<ObjectDefinition> | undefined;
  /**
   * Example text for what to search for in this datasource
   */
  suggestionText?: string | undefined;
  /**
   * The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
   */
  homeUrl?: string | undefined;
  /**
   * This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
   */
  crawlerSeedUrls?: Array<string> | undefined;
  /**
   * The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
   */
  iconDarkUrl?: string | undefined;
  /**
   * List of built-in facet types that should be hidden for the datasource.
   */
  hideBuiltInFacets?: Array<HideBuiltInFacet> | undefined;
  /**
   * A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
   */
  canonicalizingURLRegex?: Array<CanonicalizingRegexType> | undefined;
  /**
   * A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
   */
  canonicalizingTitleRegex?: Array<CanonicalizingRegexType> | undefined;
  /**
   * A regex that identifies titles that should not be indexed
   */
  redlistTitleRegex?: string | undefined;
  connectorType?: CustomDatasourceConfigConnectorType | undefined;
  /**
   * List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
   */
  quicklinks?: Array<Quicklink> | undefined;
  /**
   * The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
   */
  renderConfigPreset?: string | undefined;
  /**
   * Aliases that can be used as `app` operator-values.
   */
  aliases?: Array<string> | undefined;
  /**
   * Whether or not this datasource is hosted on-premise.
   */
  isOnPrem?: boolean | undefined;
  /**
   * True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
   */
  trustUrlRegexForViewActivity?: boolean | undefined;
  /**
   * If true, a utm_source query param will be added to outbound links to this datasource within Glean.
   */
  includeUtmSource?: boolean | undefined;
  /**
   * If true, the fragment part of the URL will be stripped when converting to a canonical url.
   */
  stripFragmentInCanonicalUrl?: boolean | undefined;
  /**
   * If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
   */
  identityDatasourceName?: string | undefined;
  /**
   * If the datasource uses a specific product access group, then the name of that group.
   */
  productAccessGroup?: string | undefined;
  /**
   * whether email is used to reference users in document ACLs and in group memberships.
   */
  isUserReferencedByEmail?: boolean | undefined;
  /**
   * True if this datasource is used to push custom entities.
   */
  isEntityDatasource?: boolean | undefined;
  /**
   * True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
   */
  isTestDatasource?: boolean | undefined;
};

/** @internal */
export const DatasourceCategory$inboundSchema: z.ZodNativeEnum<
  typeof DatasourceCategory
> = z.nativeEnum(DatasourceCategory);

/** @internal */
export const DatasourceCategory$outboundSchema: z.ZodNativeEnum<
  typeof DatasourceCategory
> = DatasourceCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasourceCategory$ {
  /** @deprecated use `DatasourceCategory$inboundSchema` instead. */
  export const inboundSchema = DatasourceCategory$inboundSchema;
  /** @deprecated use `DatasourceCategory$outboundSchema` instead. */
  export const outboundSchema = DatasourceCategory$outboundSchema;
}

/** @internal */
export const HideBuiltInFacet$inboundSchema: z.ZodNativeEnum<
  typeof HideBuiltInFacet
> = z.nativeEnum(HideBuiltInFacet);

/** @internal */
export const HideBuiltInFacet$outboundSchema: z.ZodNativeEnum<
  typeof HideBuiltInFacet
> = HideBuiltInFacet$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HideBuiltInFacet$ {
  /** @deprecated use `HideBuiltInFacet$inboundSchema` instead. */
  export const inboundSchema = HideBuiltInFacet$inboundSchema;
  /** @deprecated use `HideBuiltInFacet$outboundSchema` instead. */
  export const outboundSchema = HideBuiltInFacet$outboundSchema;
}

/** @internal */
export const CustomDatasourceConfigConnectorType$inboundSchema: z.ZodNativeEnum<
  typeof CustomDatasourceConfigConnectorType
> = z.nativeEnum(CustomDatasourceConfigConnectorType);

/** @internal */
export const CustomDatasourceConfigConnectorType$outboundSchema:
  z.ZodNativeEnum<typeof CustomDatasourceConfigConnectorType> =
    CustomDatasourceConfigConnectorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomDatasourceConfigConnectorType$ {
  /** @deprecated use `CustomDatasourceConfigConnectorType$inboundSchema` instead. */
  export const inboundSchema =
    CustomDatasourceConfigConnectorType$inboundSchema;
  /** @deprecated use `CustomDatasourceConfigConnectorType$outboundSchema` instead. */
  export const outboundSchema =
    CustomDatasourceConfigConnectorType$outboundSchema;
}

/** @internal */
export const CustomDatasourceConfig$inboundSchema: z.ZodType<
  CustomDatasourceConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  datasourceCategory: DatasourceCategory$inboundSchema.default("UNCATEGORIZED"),
  urlRegex: z.string().optional(),
  iconUrl: z.string().optional(),
  objectDefinitions: z.array(ObjectDefinition$inboundSchema).optional(),
  suggestionText: z.string().optional(),
  homeUrl: z.string().optional(),
  crawlerSeedUrls: z.array(z.string()).optional(),
  iconDarkUrl: z.string().optional(),
  hideBuiltInFacets: z.array(HideBuiltInFacet$inboundSchema).optional(),
  canonicalizingURLRegex: z.array(CanonicalizingRegexType$inboundSchema)
    .optional(),
  canonicalizingTitleRegex: z.array(CanonicalizingRegexType$inboundSchema)
    .optional(),
  redlistTitleRegex: z.string().optional(),
  connectorType: CustomDatasourceConfigConnectorType$inboundSchema.optional(),
  quicklinks: z.array(Quicklink$inboundSchema).optional(),
  renderConfigPreset: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  isOnPrem: z.boolean().optional(),
  trustUrlRegexForViewActivity: z.boolean().default(true),
  includeUtmSource: z.boolean().optional(),
  stripFragmentInCanonicalUrl: z.boolean().default(true),
  identityDatasourceName: z.string().optional(),
  productAccessGroup: z.string().optional(),
  isUserReferencedByEmail: z.boolean().optional(),
  isEntityDatasource: z.boolean().default(false),
  isTestDatasource: z.boolean().default(false),
});

/** @internal */
export type CustomDatasourceConfig$Outbound = {
  name: string;
  displayName?: string | undefined;
  datasourceCategory: string;
  urlRegex?: string | undefined;
  iconUrl?: string | undefined;
  objectDefinitions?: Array<ObjectDefinition$Outbound> | undefined;
  suggestionText?: string | undefined;
  homeUrl?: string | undefined;
  crawlerSeedUrls?: Array<string> | undefined;
  iconDarkUrl?: string | undefined;
  hideBuiltInFacets?: Array<string> | undefined;
  canonicalizingURLRegex?: Array<CanonicalizingRegexType$Outbound> | undefined;
  canonicalizingTitleRegex?:
    | Array<CanonicalizingRegexType$Outbound>
    | undefined;
  redlistTitleRegex?: string | undefined;
  connectorType?: string | undefined;
  quicklinks?: Array<Quicklink$Outbound> | undefined;
  renderConfigPreset?: string | undefined;
  aliases?: Array<string> | undefined;
  isOnPrem?: boolean | undefined;
  trustUrlRegexForViewActivity: boolean;
  includeUtmSource?: boolean | undefined;
  stripFragmentInCanonicalUrl: boolean;
  identityDatasourceName?: string | undefined;
  productAccessGroup?: string | undefined;
  isUserReferencedByEmail?: boolean | undefined;
  isEntityDatasource: boolean;
  isTestDatasource: boolean;
};

/** @internal */
export const CustomDatasourceConfig$outboundSchema: z.ZodType<
  CustomDatasourceConfig$Outbound,
  z.ZodTypeDef,
  CustomDatasourceConfig
> = z.object({
  name: z.string(),
  displayName: z.string().optional(),
  datasourceCategory: DatasourceCategory$outboundSchema.default(
    "UNCATEGORIZED",
  ),
  urlRegex: z.string().optional(),
  iconUrl: z.string().optional(),
  objectDefinitions: z.array(ObjectDefinition$outboundSchema).optional(),
  suggestionText: z.string().optional(),
  homeUrl: z.string().optional(),
  crawlerSeedUrls: z.array(z.string()).optional(),
  iconDarkUrl: z.string().optional(),
  hideBuiltInFacets: z.array(HideBuiltInFacet$outboundSchema).optional(),
  canonicalizingURLRegex: z.array(CanonicalizingRegexType$outboundSchema)
    .optional(),
  canonicalizingTitleRegex: z.array(CanonicalizingRegexType$outboundSchema)
    .optional(),
  redlistTitleRegex: z.string().optional(),
  connectorType: CustomDatasourceConfigConnectorType$outboundSchema.optional(),
  quicklinks: z.array(Quicklink$outboundSchema).optional(),
  renderConfigPreset: z.string().optional(),
  aliases: z.array(z.string()).optional(),
  isOnPrem: z.boolean().optional(),
  trustUrlRegexForViewActivity: z.boolean().default(true),
  includeUtmSource: z.boolean().optional(),
  stripFragmentInCanonicalUrl: z.boolean().default(true),
  identityDatasourceName: z.string().optional(),
  productAccessGroup: z.string().optional(),
  isUserReferencedByEmail: z.boolean().optional(),
  isEntityDatasource: z.boolean().default(false),
  isTestDatasource: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomDatasourceConfig$ {
  /** @deprecated use `CustomDatasourceConfig$inboundSchema` instead. */
  export const inboundSchema = CustomDatasourceConfig$inboundSchema;
  /** @deprecated use `CustomDatasourceConfig$outboundSchema` instead. */
  export const outboundSchema = CustomDatasourceConfig$outboundSchema;
  /** @deprecated use `CustomDatasourceConfig$Outbound` instead. */
  export type Outbound = CustomDatasourceConfig$Outbound;
}

export function customDatasourceConfigToJSON(
  customDatasourceConfig: CustomDatasourceConfig,
): string {
  return JSON.stringify(
    CustomDatasourceConfig$outboundSchema.parse(customDatasourceConfig),
  );
}

export function customDatasourceConfigFromJSON(
  jsonString: string,
): SafeParseResult<CustomDatasourceConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomDatasourceConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomDatasourceConfig' from JSON`,
  );
}
