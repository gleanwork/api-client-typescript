/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomDataValue = {
  displayLabel?: string | undefined;
  stringValue?: string | undefined;
  /**
   * list of strings for multi-value properties
   */
  stringListValue?: Array<string> | undefined;
  numberValue?: number | undefined;
  booleanValue?: boolean | undefined;
};

/** @internal */
export const CustomDataValue$inboundSchema: z.ZodType<
  CustomDataValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayLabel: z.string().optional(),
  stringValue: z.string().optional(),
  stringListValue: z.array(z.string()).optional(),
  numberValue: z.number().optional(),
  booleanValue: z.boolean().optional(),
});

/** @internal */
export type CustomDataValue$Outbound = {
  displayLabel?: string | undefined;
  stringValue?: string | undefined;
  stringListValue?: Array<string> | undefined;
  numberValue?: number | undefined;
  booleanValue?: boolean | undefined;
};

/** @internal */
export const CustomDataValue$outboundSchema: z.ZodType<
  CustomDataValue$Outbound,
  z.ZodTypeDef,
  CustomDataValue
> = z.object({
  displayLabel: z.string().optional(),
  stringValue: z.string().optional(),
  stringListValue: z.array(z.string()).optional(),
  numberValue: z.number().optional(),
  booleanValue: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomDataValue$ {
  /** @deprecated use `CustomDataValue$inboundSchema` instead. */
  export const inboundSchema = CustomDataValue$inboundSchema;
  /** @deprecated use `CustomDataValue$outboundSchema` instead. */
  export const outboundSchema = CustomDataValue$outboundSchema;
  /** @deprecated use `CustomDataValue$Outbound` instead. */
  export type Outbound = CustomDataValue$Outbound;
}

export function customDataValueToJSON(
  customDataValue: CustomDataValue,
): string {
  return JSON.stringify(CustomDataValue$outboundSchema.parse(customDataValue));
}

export function customDataValueFromJSON(
  jsonString: string,
): SafeParseResult<CustomDataValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomDataValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomDataValue' from JSON`,
  );
}
