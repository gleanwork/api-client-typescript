/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomDataValue,
  CustomDataValue$inboundSchema,
  CustomDataValue$Outbound,
  CustomDataValue$outboundSchema,
} from "./customdatavalue.js";

export type CustomEntityMetadata = {
  /**
   * Custom fields specific to individual datasources
   */
  customData?: { [k: string]: CustomDataValue } | undefined;
};

/** @internal */
export const CustomEntityMetadata$inboundSchema: z.ZodType<
  CustomEntityMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  customData: z.record(CustomDataValue$inboundSchema).optional(),
});

/** @internal */
export type CustomEntityMetadata$Outbound = {
  customData?: { [k: string]: CustomDataValue$Outbound } | undefined;
};

/** @internal */
export const CustomEntityMetadata$outboundSchema: z.ZodType<
  CustomEntityMetadata$Outbound,
  z.ZodTypeDef,
  CustomEntityMetadata
> = z.object({
  customData: z.record(CustomDataValue$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomEntityMetadata$ {
  /** @deprecated use `CustomEntityMetadata$inboundSchema` instead. */
  export const inboundSchema = CustomEntityMetadata$inboundSchema;
  /** @deprecated use `CustomEntityMetadata$outboundSchema` instead. */
  export const outboundSchema = CustomEntityMetadata$outboundSchema;
  /** @deprecated use `CustomEntityMetadata$Outbound` instead. */
  export type Outbound = CustomEntityMetadata$Outbound;
}

export function customEntityMetadataToJSON(
  customEntityMetadata: CustomEntityMetadata,
): string {
  return JSON.stringify(
    CustomEntityMetadata$outboundSchema.parse(customEntityMetadata),
  );
}

export function customEntityMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CustomEntityMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomEntityMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomEntityMetadata' from JSON`,
  );
}
