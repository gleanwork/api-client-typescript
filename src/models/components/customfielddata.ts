/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomFieldValue,
  CustomFieldValue$inboundSchema,
  CustomFieldValue$Outbound,
  CustomFieldValue$outboundSchema,
} from "./customfieldvalue.js";

export type CustomFieldData = {
  /**
   * A user-facing label for this field.
   */
  label: string;
  values: Array<CustomFieldValue>;
  /**
   * Determines whether the client should display this custom field
   */
  displayable?: boolean | undefined;
};

/** @internal */
export const CustomFieldData$inboundSchema: z.ZodType<
  CustomFieldData,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  values: z.array(z.lazy(() => CustomFieldValue$inboundSchema)),
  displayable: z.boolean().default(true),
});

/** @internal */
export type CustomFieldData$Outbound = {
  label: string;
  values: Array<CustomFieldValue$Outbound>;
  displayable: boolean;
};

/** @internal */
export const CustomFieldData$outboundSchema: z.ZodType<
  CustomFieldData$Outbound,
  z.ZodTypeDef,
  CustomFieldData
> = z.object({
  label: z.string(),
  values: z.array(z.lazy(() => CustomFieldValue$outboundSchema)),
  displayable: z.boolean().default(true),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldData$ {
  /** @deprecated use `CustomFieldData$inboundSchema` instead. */
  export const inboundSchema = CustomFieldData$inboundSchema;
  /** @deprecated use `CustomFieldData$outboundSchema` instead. */
  export const outboundSchema = CustomFieldData$outboundSchema;
  /** @deprecated use `CustomFieldData$Outbound` instead. */
  export type Outbound = CustomFieldData$Outbound;
}

export function customFieldDataToJSON(
  customFieldData: CustomFieldData,
): string {
  return JSON.stringify(CustomFieldData$outboundSchema.parse(customFieldData));
}

export function customFieldDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldData' from JSON`,
  );
}
