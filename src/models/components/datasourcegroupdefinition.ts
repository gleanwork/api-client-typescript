/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * describes a group in the datasource
 */
export type DatasourceGroupDefinition = {
  /**
   * name of the group. Should be unique among all groups for the datasource, and cannot have spaces.
   */
  name: string;
};

/** @internal */
export const DatasourceGroupDefinition$inboundSchema: z.ZodType<
  DatasourceGroupDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type DatasourceGroupDefinition$Outbound = {
  name: string;
};

/** @internal */
export const DatasourceGroupDefinition$outboundSchema: z.ZodType<
  DatasourceGroupDefinition$Outbound,
  z.ZodTypeDef,
  DatasourceGroupDefinition
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasourceGroupDefinition$ {
  /** @deprecated use `DatasourceGroupDefinition$inboundSchema` instead. */
  export const inboundSchema = DatasourceGroupDefinition$inboundSchema;
  /** @deprecated use `DatasourceGroupDefinition$outboundSchema` instead. */
  export const outboundSchema = DatasourceGroupDefinition$outboundSchema;
  /** @deprecated use `DatasourceGroupDefinition$Outbound` instead. */
  export type Outbound = DatasourceGroupDefinition$Outbound;
}

export function datasourceGroupDefinitionToJSON(
  datasourceGroupDefinition: DatasourceGroupDefinition,
): string {
  return JSON.stringify(
    DatasourceGroupDefinition$outboundSchema.parse(datasourceGroupDefinition),
  );
}

export function datasourceGroupDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<DatasourceGroupDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatasourceGroupDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatasourceGroupDefinition' from JSON`,
  );
}
