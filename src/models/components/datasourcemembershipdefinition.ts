/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
 */
export type DatasourceMembershipDefinition = {
  /**
   * The group for which the membership is specified
   */
  groupName: string;
  /**
   * If the member is a user, then the email or datasource id for the user
   */
  memberUserId?: string | undefined;
  /**
   * If the member is a group, then the name of the member group
   */
  memberGroupName?: string | undefined;
};

/** @internal */
export const DatasourceMembershipDefinition$inboundSchema: z.ZodType<
  DatasourceMembershipDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  groupName: z.string(),
  memberUserId: z.string().optional(),
  memberGroupName: z.string().optional(),
});

/** @internal */
export type DatasourceMembershipDefinition$Outbound = {
  groupName: string;
  memberUserId?: string | undefined;
  memberGroupName?: string | undefined;
};

/** @internal */
export const DatasourceMembershipDefinition$outboundSchema: z.ZodType<
  DatasourceMembershipDefinition$Outbound,
  z.ZodTypeDef,
  DatasourceMembershipDefinition
> = z.object({
  groupName: z.string(),
  memberUserId: z.string().optional(),
  memberGroupName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasourceMembershipDefinition$ {
  /** @deprecated use `DatasourceMembershipDefinition$inboundSchema` instead. */
  export const inboundSchema = DatasourceMembershipDefinition$inboundSchema;
  /** @deprecated use `DatasourceMembershipDefinition$outboundSchema` instead. */
  export const outboundSchema = DatasourceMembershipDefinition$outboundSchema;
  /** @deprecated use `DatasourceMembershipDefinition$Outbound` instead. */
  export type Outbound = DatasourceMembershipDefinition$Outbound;
}

export function datasourceMembershipDefinitionToJSON(
  datasourceMembershipDefinition: DatasourceMembershipDefinition,
): string {
  return JSON.stringify(
    DatasourceMembershipDefinition$outboundSchema.parse(
      datasourceMembershipDefinition,
    ),
  );
}

export function datasourceMembershipDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<DatasourceMembershipDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatasourceMembershipDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatasourceMembershipDefinition' from JSON`,
  );
}
