/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DatasourceProfile = {
  /**
   * The datasource the profile is of.
   */
  datasource: string;
  /**
   * The display name of the entity in the given datasource.
   */
  handle: string;
  /**
   * URL to view the entity's profile.
   */
  url?: string | undefined;
  /**
   * A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
   */
  nativeAppUrl?: string | undefined;
  /**
   * For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
   */
  isUserGenerated?: boolean | undefined;
};

/** @internal */
export const DatasourceProfile$inboundSchema: z.ZodType<
  DatasourceProfile,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasource: z.string(),
  handle: z.string(),
  url: z.string().optional(),
  nativeAppUrl: z.string().optional(),
  isUserGenerated: z.boolean().optional(),
});

/** @internal */
export type DatasourceProfile$Outbound = {
  datasource: string;
  handle: string;
  url?: string | undefined;
  nativeAppUrl?: string | undefined;
  isUserGenerated?: boolean | undefined;
};

/** @internal */
export const DatasourceProfile$outboundSchema: z.ZodType<
  DatasourceProfile$Outbound,
  z.ZodTypeDef,
  DatasourceProfile
> = z.object({
  datasource: z.string(),
  handle: z.string(),
  url: z.string().optional(),
  nativeAppUrl: z.string().optional(),
  isUserGenerated: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasourceProfile$ {
  /** @deprecated use `DatasourceProfile$inboundSchema` instead. */
  export const inboundSchema = DatasourceProfile$inboundSchema;
  /** @deprecated use `DatasourceProfile$outboundSchema` instead. */
  export const outboundSchema = DatasourceProfile$outboundSchema;
  /** @deprecated use `DatasourceProfile$Outbound` instead. */
  export type Outbound = DatasourceProfile$Outbound;
}

export function datasourceProfileToJSON(
  datasourceProfile: DatasourceProfile,
): string {
  return JSON.stringify(
    DatasourceProfile$outboundSchema.parse(datasourceProfile),
  );
}

export function datasourceProfileFromJSON(
  jsonString: string,
): SafeParseResult<DatasourceProfile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatasourceProfile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatasourceProfile' from JSON`,
  );
}
