/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * describes a user in the datasource
 */
export type DatasourceUserDefinition = {
  email: string;
  /**
   * To be supplied if the user id in the datasource is not the email
   */
  userId?: string | undefined;
  name: string;
  /**
   * set to false if the user is a former employee or a bot
   */
  isActive?: boolean | undefined;
};

/** @internal */
export const DatasourceUserDefinition$inboundSchema: z.ZodType<
  DatasourceUserDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  userId: z.string().optional(),
  name: z.string(),
  isActive: z.boolean().optional(),
});

/** @internal */
export type DatasourceUserDefinition$Outbound = {
  email: string;
  userId?: string | undefined;
  name: string;
  isActive?: boolean | undefined;
};

/** @internal */
export const DatasourceUserDefinition$outboundSchema: z.ZodType<
  DatasourceUserDefinition$Outbound,
  z.ZodTypeDef,
  DatasourceUserDefinition
> = z.object({
  email: z.string(),
  userId: z.string().optional(),
  name: z.string(),
  isActive: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasourceUserDefinition$ {
  /** @deprecated use `DatasourceUserDefinition$inboundSchema` instead. */
  export const inboundSchema = DatasourceUserDefinition$inboundSchema;
  /** @deprecated use `DatasourceUserDefinition$outboundSchema` instead. */
  export const outboundSchema = DatasourceUserDefinition$outboundSchema;
  /** @deprecated use `DatasourceUserDefinition$Outbound` instead. */
  export type Outbound = DatasourceUserDefinition$Outbound;
}

export function datasourceUserDefinitionToJSON(
  datasourceUserDefinition: DatasourceUserDefinition,
): string {
  return JSON.stringify(
    DatasourceUserDefinition$outboundSchema.parse(datasourceUserDefinition),
  );
}

export function datasourceUserDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<DatasourceUserDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DatasourceUserDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DatasourceUserDefinition' from JSON`,
  );
}
