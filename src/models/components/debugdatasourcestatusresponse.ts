/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BulkUploadHistoryEvent,
  BulkUploadHistoryEvent$inboundSchema,
  BulkUploadHistoryEvent$Outbound,
  BulkUploadHistoryEvent$outboundSchema,
} from "./bulkuploadhistoryevent.js";
import {
  DatasourceObjectTypeDocumentCountEntry,
  DatasourceObjectTypeDocumentCountEntry$inboundSchema,
  DatasourceObjectTypeDocumentCountEntry$Outbound,
  DatasourceObjectTypeDocumentCountEntry$outboundSchema,
} from "./datasourceobjecttypedocumentcountentry.js";
import {
  DebugDatasourceStatusIdentityResponseComponent,
  DebugDatasourceStatusIdentityResponseComponent$inboundSchema,
  DebugDatasourceStatusIdentityResponseComponent$Outbound,
  DebugDatasourceStatusIdentityResponseComponent$outboundSchema,
} from "./debugdatasourcestatusidentityresponsecomponent.js";
import {
  ProcessingHistoryEvent,
  ProcessingHistoryEvent$inboundSchema,
  ProcessingHistoryEvent$Outbound,
  ProcessingHistoryEvent$outboundSchema,
} from "./processinghistoryevent.js";

export type DebugDatasourceStatusResponseCounts = {
  /**
   * A list of object types and corresponding upload counts
   */
  uploaded?: Array<DatasourceObjectTypeDocumentCountEntry> | undefined;
  /**
   * The number of documents indexed, grouped by objectType
   */
  indexed?: Array<DatasourceObjectTypeDocumentCountEntry> | undefined;
};

export type Documents = {
  /**
   * Information about active and recent successful uploads for the datasource
   */
  bulkUploadHistory?: Array<BulkUploadHistoryEvent> | undefined;
  counts?: DebugDatasourceStatusResponseCounts | undefined;
  /**
   * Information about processing history for the datasource
   */
  processingHistory?: Array<ProcessingHistoryEvent> | undefined;
};

export type Identity = {
  /**
   * Information about processing history for the datasource
   */
  processingHistory?: Array<ProcessingHistoryEvent> | undefined;
  users?: DebugDatasourceStatusIdentityResponseComponent | undefined;
  groups?: DebugDatasourceStatusIdentityResponseComponent | undefined;
  memberships?: DebugDatasourceStatusIdentityResponseComponent | undefined;
};

/**
 * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
 */
export const DatasourceVisibility = {
  EnabledForAll: "ENABLED_FOR_ALL",
  EnabledForTestGroup: "ENABLED_FOR_TEST_GROUP",
  NotEnabled: "NOT_ENABLED",
} as const;
/**
 * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
 */
export type DatasourceVisibility = ClosedEnum<typeof DatasourceVisibility>;

/**
 * Describes the response body of the /debug/{datasource}/status API call
 */
export type DebugDatasourceStatusResponse = {
  documents?: Documents | undefined;
  identity?: Identity | undefined;
  /**
   * The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
   */
  datasourceVisibility?: DatasourceVisibility | undefined;
};

/** @internal */
export const DebugDatasourceStatusResponseCounts$inboundSchema: z.ZodType<
  DebugDatasourceStatusResponseCounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploaded: z.array(DatasourceObjectTypeDocumentCountEntry$inboundSchema)
    .optional(),
  indexed: z.array(DatasourceObjectTypeDocumentCountEntry$inboundSchema)
    .optional(),
});

/** @internal */
export type DebugDatasourceStatusResponseCounts$Outbound = {
  uploaded?: Array<DatasourceObjectTypeDocumentCountEntry$Outbound> | undefined;
  indexed?: Array<DatasourceObjectTypeDocumentCountEntry$Outbound> | undefined;
};

/** @internal */
export const DebugDatasourceStatusResponseCounts$outboundSchema: z.ZodType<
  DebugDatasourceStatusResponseCounts$Outbound,
  z.ZodTypeDef,
  DebugDatasourceStatusResponseCounts
> = z.object({
  uploaded: z.array(DatasourceObjectTypeDocumentCountEntry$outboundSchema)
    .optional(),
  indexed: z.array(DatasourceObjectTypeDocumentCountEntry$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugDatasourceStatusResponseCounts$ {
  /** @deprecated use `DebugDatasourceStatusResponseCounts$inboundSchema` instead. */
  export const inboundSchema =
    DebugDatasourceStatusResponseCounts$inboundSchema;
  /** @deprecated use `DebugDatasourceStatusResponseCounts$outboundSchema` instead. */
  export const outboundSchema =
    DebugDatasourceStatusResponseCounts$outboundSchema;
  /** @deprecated use `DebugDatasourceStatusResponseCounts$Outbound` instead. */
  export type Outbound = DebugDatasourceStatusResponseCounts$Outbound;
}

export function debugDatasourceStatusResponseCountsToJSON(
  debugDatasourceStatusResponseCounts: DebugDatasourceStatusResponseCounts,
): string {
  return JSON.stringify(
    DebugDatasourceStatusResponseCounts$outboundSchema.parse(
      debugDatasourceStatusResponseCounts,
    ),
  );
}

export function debugDatasourceStatusResponseCountsFromJSON(
  jsonString: string,
): SafeParseResult<DebugDatasourceStatusResponseCounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DebugDatasourceStatusResponseCounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DebugDatasourceStatusResponseCounts' from JSON`,
  );
}

/** @internal */
export const Documents$inboundSchema: z.ZodType<
  Documents,
  z.ZodTypeDef,
  unknown
> = z.object({
  bulkUploadHistory: z.array(BulkUploadHistoryEvent$inboundSchema).optional(),
  counts: z.lazy(() => DebugDatasourceStatusResponseCounts$inboundSchema)
    .optional(),
  processingHistory: z.array(ProcessingHistoryEvent$inboundSchema).optional(),
});

/** @internal */
export type Documents$Outbound = {
  bulkUploadHistory?: Array<BulkUploadHistoryEvent$Outbound> | undefined;
  counts?: DebugDatasourceStatusResponseCounts$Outbound | undefined;
  processingHistory?: Array<ProcessingHistoryEvent$Outbound> | undefined;
};

/** @internal */
export const Documents$outboundSchema: z.ZodType<
  Documents$Outbound,
  z.ZodTypeDef,
  Documents
> = z.object({
  bulkUploadHistory: z.array(BulkUploadHistoryEvent$outboundSchema).optional(),
  counts: z.lazy(() => DebugDatasourceStatusResponseCounts$outboundSchema)
    .optional(),
  processingHistory: z.array(ProcessingHistoryEvent$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documents$ {
  /** @deprecated use `Documents$inboundSchema` instead. */
  export const inboundSchema = Documents$inboundSchema;
  /** @deprecated use `Documents$outboundSchema` instead. */
  export const outboundSchema = Documents$outboundSchema;
  /** @deprecated use `Documents$Outbound` instead. */
  export type Outbound = Documents$Outbound;
}

export function documentsToJSON(documents: Documents): string {
  return JSON.stringify(Documents$outboundSchema.parse(documents));
}

export function documentsFromJSON(
  jsonString: string,
): SafeParseResult<Documents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Documents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Documents' from JSON`,
  );
}

/** @internal */
export const Identity$inboundSchema: z.ZodType<
  Identity,
  z.ZodTypeDef,
  unknown
> = z.object({
  processingHistory: z.array(ProcessingHistoryEvent$inboundSchema).optional(),
  users: DebugDatasourceStatusIdentityResponseComponent$inboundSchema
    .optional(),
  groups: DebugDatasourceStatusIdentityResponseComponent$inboundSchema
    .optional(),
  memberships: DebugDatasourceStatusIdentityResponseComponent$inboundSchema
    .optional(),
});

/** @internal */
export type Identity$Outbound = {
  processingHistory?: Array<ProcessingHistoryEvent$Outbound> | undefined;
  users?: DebugDatasourceStatusIdentityResponseComponent$Outbound | undefined;
  groups?: DebugDatasourceStatusIdentityResponseComponent$Outbound | undefined;
  memberships?:
    | DebugDatasourceStatusIdentityResponseComponent$Outbound
    | undefined;
};

/** @internal */
export const Identity$outboundSchema: z.ZodType<
  Identity$Outbound,
  z.ZodTypeDef,
  Identity
> = z.object({
  processingHistory: z.array(ProcessingHistoryEvent$outboundSchema).optional(),
  users: DebugDatasourceStatusIdentityResponseComponent$outboundSchema
    .optional(),
  groups: DebugDatasourceStatusIdentityResponseComponent$outboundSchema
    .optional(),
  memberships: DebugDatasourceStatusIdentityResponseComponent$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Identity$ {
  /** @deprecated use `Identity$inboundSchema` instead. */
  export const inboundSchema = Identity$inboundSchema;
  /** @deprecated use `Identity$outboundSchema` instead. */
  export const outboundSchema = Identity$outboundSchema;
  /** @deprecated use `Identity$Outbound` instead. */
  export type Outbound = Identity$Outbound;
}

export function identityToJSON(identity: Identity): string {
  return JSON.stringify(Identity$outboundSchema.parse(identity));
}

export function identityFromJSON(
  jsonString: string,
): SafeParseResult<Identity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Identity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Identity' from JSON`,
  );
}

/** @internal */
export const DatasourceVisibility$inboundSchema: z.ZodNativeEnum<
  typeof DatasourceVisibility
> = z.nativeEnum(DatasourceVisibility);

/** @internal */
export const DatasourceVisibility$outboundSchema: z.ZodNativeEnum<
  typeof DatasourceVisibility
> = DatasourceVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasourceVisibility$ {
  /** @deprecated use `DatasourceVisibility$inboundSchema` instead. */
  export const inboundSchema = DatasourceVisibility$inboundSchema;
  /** @deprecated use `DatasourceVisibility$outboundSchema` instead. */
  export const outboundSchema = DatasourceVisibility$outboundSchema;
}

/** @internal */
export const DebugDatasourceStatusResponse$inboundSchema: z.ZodType<
  DebugDatasourceStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  documents: z.lazy(() => Documents$inboundSchema).optional(),
  identity: z.lazy(() => Identity$inboundSchema).optional(),
  datasourceVisibility: DatasourceVisibility$inboundSchema.optional(),
});

/** @internal */
export type DebugDatasourceStatusResponse$Outbound = {
  documents?: Documents$Outbound | undefined;
  identity?: Identity$Outbound | undefined;
  datasourceVisibility?: string | undefined;
};

/** @internal */
export const DebugDatasourceStatusResponse$outboundSchema: z.ZodType<
  DebugDatasourceStatusResponse$Outbound,
  z.ZodTypeDef,
  DebugDatasourceStatusResponse
> = z.object({
  documents: z.lazy(() => Documents$outboundSchema).optional(),
  identity: z.lazy(() => Identity$outboundSchema).optional(),
  datasourceVisibility: DatasourceVisibility$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugDatasourceStatusResponse$ {
  /** @deprecated use `DebugDatasourceStatusResponse$inboundSchema` instead. */
  export const inboundSchema = DebugDatasourceStatusResponse$inboundSchema;
  /** @deprecated use `DebugDatasourceStatusResponse$outboundSchema` instead. */
  export const outboundSchema = DebugDatasourceStatusResponse$outboundSchema;
  /** @deprecated use `DebugDatasourceStatusResponse$Outbound` instead. */
  export type Outbound = DebugDatasourceStatusResponse$Outbound;
}

export function debugDatasourceStatusResponseToJSON(
  debugDatasourceStatusResponse: DebugDatasourceStatusResponse,
): string {
  return JSON.stringify(
    DebugDatasourceStatusResponse$outboundSchema.parse(
      debugDatasourceStatusResponse,
    ),
  );
}

export function debugDatasourceStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<DebugDatasourceStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DebugDatasourceStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DebugDatasourceStatusResponse' from JSON`,
  );
}
