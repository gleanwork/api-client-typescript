/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the request body of the /debug/{datasource}/document API call.
 */
export type DebugDocumentRequest = {
  /**
   * Object type of the document to get the status for.
   */
  objectType: string;
  /**
   * Glean Document ID within the datasource to get the status for.
   */
  docId: string;
};

/** @internal */
export const DebugDocumentRequest$inboundSchema: z.ZodType<
  DebugDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  objectType: z.string(),
  docId: z.string(),
});

/** @internal */
export type DebugDocumentRequest$Outbound = {
  objectType: string;
  docId: string;
};

/** @internal */
export const DebugDocumentRequest$outboundSchema: z.ZodType<
  DebugDocumentRequest$Outbound,
  z.ZodTypeDef,
  DebugDocumentRequest
> = z.object({
  objectType: z.string(),
  docId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugDocumentRequest$ {
  /** @deprecated use `DebugDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = DebugDocumentRequest$inboundSchema;
  /** @deprecated use `DebugDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = DebugDocumentRequest$outboundSchema;
  /** @deprecated use `DebugDocumentRequest$Outbound` instead. */
  export type Outbound = DebugDocumentRequest$Outbound;
}

export function debugDocumentRequestToJSON(
  debugDocumentRequest: DebugDocumentRequest,
): string {
  return JSON.stringify(
    DebugDocumentRequest$outboundSchema.parse(debugDocumentRequest),
  );
}

export function debugDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<DebugDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DebugDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DebugDocumentRequest' from JSON`,
  );
}
