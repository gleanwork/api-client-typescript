/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DebugDocumentsResponseItem,
  DebugDocumentsResponseItem$inboundSchema,
  DebugDocumentsResponseItem$Outbound,
  DebugDocumentsResponseItem$outboundSchema,
} from "./debugdocumentsresponseitem.js";

/**
 * Describes the response body of a single document in the /debug/{datasource}/documents API call
 */
export type DebugDocumentsResponse = {
  /**
   * List of document ids/urls and their debug information
   */
  documentStatuses?: Array<DebugDocumentsResponseItem> | undefined;
};

/** @internal */
export const DebugDocumentsResponse$inboundSchema: z.ZodType<
  DebugDocumentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentStatuses: z.array(DebugDocumentsResponseItem$inboundSchema)
    .optional(),
});

/** @internal */
export type DebugDocumentsResponse$Outbound = {
  documentStatuses?: Array<DebugDocumentsResponseItem$Outbound> | undefined;
};

/** @internal */
export const DebugDocumentsResponse$outboundSchema: z.ZodType<
  DebugDocumentsResponse$Outbound,
  z.ZodTypeDef,
  DebugDocumentsResponse
> = z.object({
  documentStatuses: z.array(DebugDocumentsResponseItem$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugDocumentsResponse$ {
  /** @deprecated use `DebugDocumentsResponse$inboundSchema` instead. */
  export const inboundSchema = DebugDocumentsResponse$inboundSchema;
  /** @deprecated use `DebugDocumentsResponse$outboundSchema` instead. */
  export const outboundSchema = DebugDocumentsResponse$outboundSchema;
  /** @deprecated use `DebugDocumentsResponse$Outbound` instead. */
  export type Outbound = DebugDocumentsResponse$Outbound;
}

export function debugDocumentsResponseToJSON(
  debugDocumentsResponse: DebugDocumentsResponse,
): string {
  return JSON.stringify(
    DebugDocumentsResponse$outboundSchema.parse(debugDocumentsResponse),
  );
}

export function debugDocumentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<DebugDocumentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DebugDocumentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DebugDocumentsResponse' from JSON`,
  );
}
