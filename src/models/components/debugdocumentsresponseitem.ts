/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DebugDocumentResponse,
  DebugDocumentResponse$inboundSchema,
  DebugDocumentResponse$Outbound,
  DebugDocumentResponse$outboundSchema,
} from "./debugdocumentresponse.js";

/**
 * Describes the response body of a single document in the /debug/{datasource}/documents API call
 */
export type DebugDocumentsResponseItem = {
  /**
   * Id of the document
   */
  docId?: string | undefined;
  /**
   * objectType of the document
   */
  objectType?: string | undefined;
  /**
   * Describes the response body of the /debug/{datasource}/document API call
   */
  debugInfo?: DebugDocumentResponse | undefined;
};

/** @internal */
export const DebugDocumentsResponseItem$inboundSchema: z.ZodType<
  DebugDocumentsResponseItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  docId: z.string().optional(),
  objectType: z.string().optional(),
  debugInfo: DebugDocumentResponse$inboundSchema.optional(),
});

/** @internal */
export type DebugDocumentsResponseItem$Outbound = {
  docId?: string | undefined;
  objectType?: string | undefined;
  debugInfo?: DebugDocumentResponse$Outbound | undefined;
};

/** @internal */
export const DebugDocumentsResponseItem$outboundSchema: z.ZodType<
  DebugDocumentsResponseItem$Outbound,
  z.ZodTypeDef,
  DebugDocumentsResponseItem
> = z.object({
  docId: z.string().optional(),
  objectType: z.string().optional(),
  debugInfo: DebugDocumentResponse$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugDocumentsResponseItem$ {
  /** @deprecated use `DebugDocumentsResponseItem$inboundSchema` instead. */
  export const inboundSchema = DebugDocumentsResponseItem$inboundSchema;
  /** @deprecated use `DebugDocumentsResponseItem$outboundSchema` instead. */
  export const outboundSchema = DebugDocumentsResponseItem$outboundSchema;
  /** @deprecated use `DebugDocumentsResponseItem$Outbound` instead. */
  export type Outbound = DebugDocumentsResponseItem$Outbound;
}

export function debugDocumentsResponseItemToJSON(
  debugDocumentsResponseItem: DebugDocumentsResponseItem,
): string {
  return JSON.stringify(
    DebugDocumentsResponseItem$outboundSchema.parse(debugDocumentsResponseItem),
  );
}

export function debugDocumentsResponseItemFromJSON(
  jsonString: string,
): SafeParseResult<DebugDocumentsResponseItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DebugDocumentsResponseItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DebugDocumentsResponseItem' from JSON`,
  );
}
