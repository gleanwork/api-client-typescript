/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DatasourceGroupDefinition,
  DatasourceGroupDefinition$inboundSchema,
  DatasourceGroupDefinition$Outbound,
  DatasourceGroupDefinition$outboundSchema,
} from "./datasourcegroupdefinition.js";
import {
  UserStatusResponse,
  UserStatusResponse$inboundSchema,
  UserStatusResponse$Outbound,
  UserStatusResponse$outboundSchema,
} from "./userstatusresponse.js";

/**
 * Describes the response body of the /debug/{datasource}/user API call
 */
export type DebugUserResponse = {
  /**
   * Describes the user status response body
   */
  status?: UserStatusResponse | undefined;
  /**
   * List of groups the user is a member of, as uploaded via permissions API.
   */
  uploadedGroups?: Array<DatasourceGroupDefinition> | undefined;
};

/** @internal */
export const DebugUserResponse$inboundSchema: z.ZodType<
  DebugUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: UserStatusResponse$inboundSchema.optional(),
  uploadedGroups: z.array(DatasourceGroupDefinition$inboundSchema).optional(),
});

/** @internal */
export type DebugUserResponse$Outbound = {
  status?: UserStatusResponse$Outbound | undefined;
  uploadedGroups?: Array<DatasourceGroupDefinition$Outbound> | undefined;
};

/** @internal */
export const DebugUserResponse$outboundSchema: z.ZodType<
  DebugUserResponse$Outbound,
  z.ZodTypeDef,
  DebugUserResponse
> = z.object({
  status: UserStatusResponse$outboundSchema.optional(),
  uploadedGroups: z.array(DatasourceGroupDefinition$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DebugUserResponse$ {
  /** @deprecated use `DebugUserResponse$inboundSchema` instead. */
  export const inboundSchema = DebugUserResponse$inboundSchema;
  /** @deprecated use `DebugUserResponse$outboundSchema` instead. */
  export const outboundSchema = DebugUserResponse$outboundSchema;
  /** @deprecated use `DebugUserResponse$Outbound` instead. */
  export type Outbound = DebugUserResponse$Outbound;
}

export function debugUserResponseToJSON(
  debugUserResponse: DebugUserResponse,
): string {
  return JSON.stringify(
    DebugUserResponse$outboundSchema.parse(debugUserResponse),
  );
}

export function debugUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<DebugUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DebugUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DebugUserResponse' from JSON`,
  );
}
