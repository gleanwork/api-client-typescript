/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCollectionItemRequest = {
  /**
   * The ID of the Collection to remove an item in.
   */
  collectionId: number;
  /**
   * The item ID of the CollectionItem to remove from this Collection.
   */
  itemId: string;
  /**
   * The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
   */
  documentId?: string | undefined;
};

/** @internal */
export const DeleteCollectionItemRequest$inboundSchema: z.ZodType<
  DeleteCollectionItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionId: z.number(),
  itemId: z.string(),
  documentId: z.string().optional(),
});

/** @internal */
export type DeleteCollectionItemRequest$Outbound = {
  collectionId: number;
  itemId: string;
  documentId?: string | undefined;
};

/** @internal */
export const DeleteCollectionItemRequest$outboundSchema: z.ZodType<
  DeleteCollectionItemRequest$Outbound,
  z.ZodTypeDef,
  DeleteCollectionItemRequest
> = z.object({
  collectionId: z.number(),
  itemId: z.string(),
  documentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCollectionItemRequest$ {
  /** @deprecated use `DeleteCollectionItemRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteCollectionItemRequest$inboundSchema;
  /** @deprecated use `DeleteCollectionItemRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteCollectionItemRequest$outboundSchema;
  /** @deprecated use `DeleteCollectionItemRequest$Outbound` instead. */
  export type Outbound = DeleteCollectionItemRequest$Outbound;
}

export function deleteCollectionItemRequestToJSON(
  deleteCollectionItemRequest: DeleteCollectionItemRequest,
): string {
  return JSON.stringify(
    DeleteCollectionItemRequest$outboundSchema.parse(
      deleteCollectionItemRequest,
    ),
  );
}

export function deleteCollectionItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCollectionItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCollectionItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCollectionItemRequest' from JSON`,
  );
}
