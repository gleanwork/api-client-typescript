/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Collection,
  Collection$inboundSchema,
  Collection$Outbound,
  Collection$outboundSchema,
} from "./collection.js";

export type DeleteCollectionItemResponse = {
  collection?: Collection | undefined;
};

/** @internal */
export const DeleteCollectionItemResponse$inboundSchema: z.ZodType<
  DeleteCollectionItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  collection: Collection$inboundSchema.optional(),
});

/** @internal */
export type DeleteCollectionItemResponse$Outbound = {
  collection?: Collection$Outbound | undefined;
};

/** @internal */
export const DeleteCollectionItemResponse$outboundSchema: z.ZodType<
  DeleteCollectionItemResponse$Outbound,
  z.ZodTypeDef,
  DeleteCollectionItemResponse
> = z.object({
  collection: Collection$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCollectionItemResponse$ {
  /** @deprecated use `DeleteCollectionItemResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteCollectionItemResponse$inboundSchema;
  /** @deprecated use `DeleteCollectionItemResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteCollectionItemResponse$outboundSchema;
  /** @deprecated use `DeleteCollectionItemResponse$Outbound` instead. */
  export type Outbound = DeleteCollectionItemResponse$Outbound;
}

export function deleteCollectionItemResponseToJSON(
  deleteCollectionItemResponse: DeleteCollectionItemResponse,
): string {
  return JSON.stringify(
    DeleteCollectionItemResponse$outboundSchema.parse(
      deleteCollectionItemResponse,
    ),
  );
}

export function deleteCollectionItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteCollectionItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteCollectionItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteCollectionItemResponse' from JSON`,
  );
}
