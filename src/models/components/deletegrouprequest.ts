/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the request body of the /deletegroup API call
 */
export type DeleteGroupRequest = {
  /**
   * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
   */
  version?: number | undefined;
  /**
   * The datasource for which the group is removed
   */
  datasource: string;
  /**
   * the name of the group to be deleted
   */
  groupName: string;
};

/** @internal */
export const DeleteGroupRequest$inboundSchema: z.ZodType<
  DeleteGroupRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().optional(),
  datasource: z.string(),
  groupName: z.string(),
});

/** @internal */
export type DeleteGroupRequest$Outbound = {
  version?: number | undefined;
  datasource: string;
  groupName: string;
};

/** @internal */
export const DeleteGroupRequest$outboundSchema: z.ZodType<
  DeleteGroupRequest$Outbound,
  z.ZodTypeDef,
  DeleteGroupRequest
> = z.object({
  version: z.number().int().optional(),
  datasource: z.string(),
  groupName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteGroupRequest$ {
  /** @deprecated use `DeleteGroupRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteGroupRequest$inboundSchema;
  /** @deprecated use `DeleteGroupRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteGroupRequest$outboundSchema;
  /** @deprecated use `DeleteGroupRequest$Outbound` instead. */
  export type Outbound = DeleteGroupRequest$Outbound;
}

export function deleteGroupRequestToJSON(
  deleteGroupRequest: DeleteGroupRequest,
): string {
  return JSON.stringify(
    DeleteGroupRequest$outboundSchema.parse(deleteGroupRequest),
  );
}

export function deleteGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteGroupRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteGroupRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteGroupRequest' from JSON`,
  );
}
