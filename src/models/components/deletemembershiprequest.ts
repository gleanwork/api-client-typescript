/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DatasourceMembershipDefinition,
  DatasourceMembershipDefinition$inboundSchema,
  DatasourceMembershipDefinition$Outbound,
  DatasourceMembershipDefinition$outboundSchema,
} from "./datasourcemembershipdefinition.js";

/**
 * Describes the request body of the /deletemembership API call
 */
export type DeleteMembershipRequest = {
  /**
   * Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
   */
  version?: number | undefined;
  /**
   * The datasource for which the membership is removed
   */
  datasource: string;
  /**
   * describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
   */
  membership: DatasourceMembershipDefinition;
};

/** @internal */
export const DeleteMembershipRequest$inboundSchema: z.ZodType<
  DeleteMembershipRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().optional(),
  datasource: z.string(),
  membership: DatasourceMembershipDefinition$inboundSchema,
});

/** @internal */
export type DeleteMembershipRequest$Outbound = {
  version?: number | undefined;
  datasource: string;
  membership: DatasourceMembershipDefinition$Outbound;
};

/** @internal */
export const DeleteMembershipRequest$outboundSchema: z.ZodType<
  DeleteMembershipRequest$Outbound,
  z.ZodTypeDef,
  DeleteMembershipRequest
> = z.object({
  version: z.number().int().optional(),
  datasource: z.string(),
  membership: DatasourceMembershipDefinition$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteMembershipRequest$ {
  /** @deprecated use `DeleteMembershipRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteMembershipRequest$inboundSchema;
  /** @deprecated use `DeleteMembershipRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteMembershipRequest$outboundSchema;
  /** @deprecated use `DeleteMembershipRequest$Outbound` instead. */
  export type Outbound = DeleteMembershipRequest$Outbound;
}

export function deleteMembershipRequestToJSON(
  deleteMembershipRequest: DeleteMembershipRequest,
): string {
  return JSON.stringify(
    DeleteMembershipRequest$outboundSchema.parse(deleteMembershipRequest),
  );
}

export function deleteMembershipRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteMembershipRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteMembershipRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteMembershipRequest' from JSON`,
  );
}
