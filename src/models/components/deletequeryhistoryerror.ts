/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteQueryHistoryErrorErrorType = {
  DeletionFailed: "DELETION_FAILED",
} as const;
export type DeleteQueryHistoryErrorErrorType = ClosedEnum<
  typeof DeleteQueryHistoryErrorErrorType
>;

export type DeleteQueryHistoryError = {
  errorType?: DeleteQueryHistoryErrorErrorType | undefined;
};

/** @internal */
export const DeleteQueryHistoryErrorErrorType$inboundSchema: z.ZodNativeEnum<
  typeof DeleteQueryHistoryErrorErrorType
> = z.nativeEnum(DeleteQueryHistoryErrorErrorType);

/** @internal */
export const DeleteQueryHistoryErrorErrorType$outboundSchema: z.ZodNativeEnum<
  typeof DeleteQueryHistoryErrorErrorType
> = DeleteQueryHistoryErrorErrorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteQueryHistoryErrorErrorType$ {
  /** @deprecated use `DeleteQueryHistoryErrorErrorType$inboundSchema` instead. */
  export const inboundSchema = DeleteQueryHistoryErrorErrorType$inboundSchema;
  /** @deprecated use `DeleteQueryHistoryErrorErrorType$outboundSchema` instead. */
  export const outboundSchema = DeleteQueryHistoryErrorErrorType$outboundSchema;
}

/** @internal */
export const DeleteQueryHistoryError$inboundSchema: z.ZodType<
  DeleteQueryHistoryError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorType: DeleteQueryHistoryErrorErrorType$inboundSchema.optional(),
});

/** @internal */
export type DeleteQueryHistoryError$Outbound = {
  errorType?: string | undefined;
};

/** @internal */
export const DeleteQueryHistoryError$outboundSchema: z.ZodType<
  DeleteQueryHistoryError$Outbound,
  z.ZodTypeDef,
  DeleteQueryHistoryError
> = z.object({
  errorType: DeleteQueryHistoryErrorErrorType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteQueryHistoryError$ {
  /** @deprecated use `DeleteQueryHistoryError$inboundSchema` instead. */
  export const inboundSchema = DeleteQueryHistoryError$inboundSchema;
  /** @deprecated use `DeleteQueryHistoryError$outboundSchema` instead. */
  export const outboundSchema = DeleteQueryHistoryError$outboundSchema;
  /** @deprecated use `DeleteQueryHistoryError$Outbound` instead. */
  export type Outbound = DeleteQueryHistoryError$Outbound;
}

export function deleteQueryHistoryErrorToJSON(
  deleteQueryHistoryError: DeleteQueryHistoryError,
): string {
  return JSON.stringify(
    DeleteQueryHistoryError$outboundSchema.parse(deleteQueryHistoryError),
  );
}

export function deleteQueryHistoryErrorFromJSON(
  jsonString: string,
): SafeParseResult<DeleteQueryHistoryError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteQueryHistoryError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteQueryHistoryError' from JSON`,
  );
}
