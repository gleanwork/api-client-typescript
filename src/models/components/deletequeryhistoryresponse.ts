/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DeleteQueryHistoryError,
  DeleteQueryHistoryError$inboundSchema,
  DeleteQueryHistoryError$Outbound,
  DeleteQueryHistoryError$outboundSchema,
} from "./deletequeryhistoryerror.js";

export type DeleteQueryHistoryResponse = {
  error?: DeleteQueryHistoryError | undefined;
};

/** @internal */
export const DeleteQueryHistoryResponse$inboundSchema: z.ZodType<
  DeleteQueryHistoryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: DeleteQueryHistoryError$inboundSchema.optional(),
});

/** @internal */
export type DeleteQueryHistoryResponse$Outbound = {
  error?: DeleteQueryHistoryError$Outbound | undefined;
};

/** @internal */
export const DeleteQueryHistoryResponse$outboundSchema: z.ZodType<
  DeleteQueryHistoryResponse$Outbound,
  z.ZodTypeDef,
  DeleteQueryHistoryResponse
> = z.object({
  error: DeleteQueryHistoryError$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteQueryHistoryResponse$ {
  /** @deprecated use `DeleteQueryHistoryResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteQueryHistoryResponse$inboundSchema;
  /** @deprecated use `DeleteQueryHistoryResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteQueryHistoryResponse$outboundSchema;
  /** @deprecated use `DeleteQueryHistoryResponse$Outbound` instead. */
  export type Outbound = DeleteQueryHistoryResponse$Outbound;
}

export function deleteQueryHistoryResponseToJSON(
  deleteQueryHistoryResponse: DeleteQueryHistoryResponse,
): string {
  return JSON.stringify(
    DeleteQueryHistoryResponse$outboundSchema.parse(deleteQueryHistoryResponse),
  );
}

export function deleteQueryHistoryResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteQueryHistoryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteQueryHistoryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteQueryHistoryResponse' from JSON`,
  );
}
