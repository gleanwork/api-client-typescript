/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EntityType,
  EntityType$inboundSchema,
  EntityType$outboundSchema,
} from "./entitytype.js";

/**
 * A disambiguation between multiple entities with the same name
 */
export type Disambiguation = {
  /**
   * Name of the ambiguous entity
   */
  name?: string | undefined;
  /**
   * The unique id of the entity in the knowledge graph
   */
  id?: string | undefined;
  /**
   * The type of entity.
   */
  type?: EntityType | undefined;
};

/** @internal */
export const Disambiguation$inboundSchema: z.ZodType<
  Disambiguation,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
  type: EntityType$inboundSchema.optional(),
});

/** @internal */
export type Disambiguation$Outbound = {
  name?: string | undefined;
  id?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Disambiguation$outboundSchema: z.ZodType<
  Disambiguation$Outbound,
  z.ZodTypeDef,
  Disambiguation
> = z.object({
  name: z.string().optional(),
  id: z.string().optional(),
  type: EntityType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Disambiguation$ {
  /** @deprecated use `Disambiguation$inboundSchema` instead. */
  export const inboundSchema = Disambiguation$inboundSchema;
  /** @deprecated use `Disambiguation$outboundSchema` instead. */
  export const outboundSchema = Disambiguation$outboundSchema;
  /** @deprecated use `Disambiguation$Outbound` instead. */
  export type Outbound = Disambiguation$Outbound;
}

export function disambiguationToJSON(disambiguation: Disambiguation): string {
  return JSON.stringify(Disambiguation$outboundSchema.parse(disambiguation));
}

export function disambiguationFromJSON(
  jsonString: string,
): SafeParseResult<Disambiguation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Disambiguation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Disambiguation' from JSON`,
  );
}
