/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DisplayableListConfig,
  DisplayableListConfig$inboundSchema,
  DisplayableListConfig$Outbound,
  DisplayableListConfig$outboundSchema,
} from "./displayablelistconfig.js";

/**
 * The type of data that backs this displayable list
 */
export const DisplayableListSource = {
  SavedSearch: "SAVED_SEARCH",
  Collection: "COLLECTION",
} as const;
/**
 * The type of data that backs this displayable list
 */
export type DisplayableListSource = ClosedEnum<typeof DisplayableListSource>;

/**
 * All configurations for a list that can be displayed.
 */
export type DisplayableList = {
  /**
   * The type of data that backs this displayable list
   */
  source?: DisplayableListSource | undefined;
  /**
   * Unique identifier of this list. Unique amongst only DisplayableLists, not unique amongst other types of UGC.
   */
  id?: number | undefined;
  /**
   * Unstructured identifier for the source to render (ID, URL, query).
   */
  sourceId?: string | undefined;
  /**
   * UI specific configurations for a displayable list
   */
  config?: DisplayableListConfig | undefined;
};

/** @internal */
export const DisplayableListSource$inboundSchema: z.ZodNativeEnum<
  typeof DisplayableListSource
> = z.nativeEnum(DisplayableListSource);

/** @internal */
export const DisplayableListSource$outboundSchema: z.ZodNativeEnum<
  typeof DisplayableListSource
> = DisplayableListSource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisplayableListSource$ {
  /** @deprecated use `DisplayableListSource$inboundSchema` instead. */
  export const inboundSchema = DisplayableListSource$inboundSchema;
  /** @deprecated use `DisplayableListSource$outboundSchema` instead. */
  export const outboundSchema = DisplayableListSource$outboundSchema;
}

/** @internal */
export const DisplayableList$inboundSchema: z.ZodType<
  DisplayableList,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: DisplayableListSource$inboundSchema.optional(),
  id: z.number().int().optional(),
  sourceId: z.string().optional(),
  config: DisplayableListConfig$inboundSchema.optional(),
});

/** @internal */
export type DisplayableList$Outbound = {
  source?: string | undefined;
  id?: number | undefined;
  sourceId?: string | undefined;
  config?: DisplayableListConfig$Outbound | undefined;
};

/** @internal */
export const DisplayableList$outboundSchema: z.ZodType<
  DisplayableList$Outbound,
  z.ZodTypeDef,
  DisplayableList
> = z.object({
  source: DisplayableListSource$outboundSchema.optional(),
  id: z.number().int().optional(),
  sourceId: z.string().optional(),
  config: DisplayableListConfig$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisplayableList$ {
  /** @deprecated use `DisplayableList$inboundSchema` instead. */
  export const inboundSchema = DisplayableList$inboundSchema;
  /** @deprecated use `DisplayableList$outboundSchema` instead. */
  export const outboundSchema = DisplayableList$outboundSchema;
  /** @deprecated use `DisplayableList$Outbound` instead. */
  export type Outbound = DisplayableList$Outbound;
}

export function displayableListToJSON(
  displayableList: DisplayableList,
): string {
  return JSON.stringify(DisplayableList$outboundSchema.parse(displayableList));
}

export function displayableListFromJSON(
  jsonString: string,
): SafeParseResult<DisplayableList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisplayableList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisplayableList' from JSON`,
  );
}
