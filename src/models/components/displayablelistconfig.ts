/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DisplayableListItemUIConfig,
  DisplayableListItemUIConfig$inboundSchema,
  DisplayableListItemUIConfig$Outbound,
  DisplayableListItemUIConfig$outboundSchema,
} from "./displayablelistitemuiconfig.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";

/**
 * defines how to render this particular displayable list card
 */
export const DisplayableListConfigFormat = {
  List: "LIST",
} as const;
/**
 * defines how to render this particular displayable list card
 */
export type DisplayableListConfigFormat = ClosedEnum<
  typeof DisplayableListConfigFormat
>;

/**
 * UI specific configurations for a displayable list
 */
export type DisplayableListConfig = {
  /**
   * defines how to render this particular displayable list card
   */
  format?: DisplayableListConfigFormat | undefined;
  /**
   * Primary title for the list.
   */
  title?: string | undefined;
  /**
   * Whether the list should be shown to the user
   */
  enabled?: boolean | undefined;
  /**
   * Filters which restrict who should should see displayable list
   */
  audienceFilters?: Array<FacetFilter> | undefined;
  /**
   * UI configurations for each item of the list
   */
  itemUIConfig?: DisplayableListItemUIConfig | undefined;
};

/** @internal */
export const DisplayableListConfigFormat$inboundSchema: z.ZodNativeEnum<
  typeof DisplayableListConfigFormat
> = z.nativeEnum(DisplayableListConfigFormat);

/** @internal */
export const DisplayableListConfigFormat$outboundSchema: z.ZodNativeEnum<
  typeof DisplayableListConfigFormat
> = DisplayableListConfigFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisplayableListConfigFormat$ {
  /** @deprecated use `DisplayableListConfigFormat$inboundSchema` instead. */
  export const inboundSchema = DisplayableListConfigFormat$inboundSchema;
  /** @deprecated use `DisplayableListConfigFormat$outboundSchema` instead. */
  export const outboundSchema = DisplayableListConfigFormat$outboundSchema;
}

/** @internal */
export const DisplayableListConfig$inboundSchema: z.ZodType<
  DisplayableListConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: DisplayableListConfigFormat$inboundSchema.optional(),
  title: z.string().optional(),
  enabled: z.boolean().optional(),
  audienceFilters: z.array(FacetFilter$inboundSchema).optional(),
  itemUIConfig: DisplayableListItemUIConfig$inboundSchema.optional(),
});

/** @internal */
export type DisplayableListConfig$Outbound = {
  format?: string | undefined;
  title?: string | undefined;
  enabled?: boolean | undefined;
  audienceFilters?: Array<FacetFilter$Outbound> | undefined;
  itemUIConfig?: DisplayableListItemUIConfig$Outbound | undefined;
};

/** @internal */
export const DisplayableListConfig$outboundSchema: z.ZodType<
  DisplayableListConfig$Outbound,
  z.ZodTypeDef,
  DisplayableListConfig
> = z.object({
  format: DisplayableListConfigFormat$outboundSchema.optional(),
  title: z.string().optional(),
  enabled: z.boolean().optional(),
  audienceFilters: z.array(FacetFilter$outboundSchema).optional(),
  itemUIConfig: DisplayableListItemUIConfig$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisplayableListConfig$ {
  /** @deprecated use `DisplayableListConfig$inboundSchema` instead. */
  export const inboundSchema = DisplayableListConfig$inboundSchema;
  /** @deprecated use `DisplayableListConfig$outboundSchema` instead. */
  export const outboundSchema = DisplayableListConfig$outboundSchema;
  /** @deprecated use `DisplayableListConfig$Outbound` instead. */
  export type Outbound = DisplayableListConfig$Outbound;
}

export function displayableListConfigToJSON(
  displayableListConfig: DisplayableListConfig,
): string {
  return JSON.stringify(
    DisplayableListConfig$outboundSchema.parse(displayableListConfig),
  );
}

export function displayableListConfigFromJSON(
  jsonString: string,
): SafeParseResult<DisplayableListConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DisplayableListConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DisplayableListConfig' from JSON`,
  );
}
