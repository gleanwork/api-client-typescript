/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DlpPersonMetadata,
  DlpPersonMetadata$inboundSchema,
  DlpPersonMetadata$Outbound,
  DlpPersonMetadata$outboundSchema,
} from "./dlppersonmetadata.js";

/**
 * Details about the person who created this report/policy.
 */
export type DlpPerson = {
  /**
   * The display name.
   */
  name: string;
  /**
   * An opaque identifier that can be used to request metadata for a Person.
   */
  obfuscatedId: string;
  metadata?: DlpPersonMetadata | undefined;
};

/** @internal */
export const DlpPerson$inboundSchema: z.ZodType<
  DlpPerson,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  obfuscatedId: z.string(),
  metadata: DlpPersonMetadata$inboundSchema.optional(),
});

/** @internal */
export type DlpPerson$Outbound = {
  name: string;
  obfuscatedId: string;
  metadata?: DlpPersonMetadata$Outbound | undefined;
};

/** @internal */
export const DlpPerson$outboundSchema: z.ZodType<
  DlpPerson$Outbound,
  z.ZodTypeDef,
  DlpPerson
> = z.object({
  name: z.string(),
  obfuscatedId: z.string(),
  metadata: DlpPersonMetadata$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DlpPerson$ {
  /** @deprecated use `DlpPerson$inboundSchema` instead. */
  export const inboundSchema = DlpPerson$inboundSchema;
  /** @deprecated use `DlpPerson$outboundSchema` instead. */
  export const outboundSchema = DlpPerson$outboundSchema;
  /** @deprecated use `DlpPerson$Outbound` instead. */
  export type Outbound = DlpPerson$Outbound;
}

export function dlpPersonToJSON(dlpPerson: DlpPerson): string {
  return JSON.stringify(DlpPerson$outboundSchema.parse(dlpPerson));
}

export function dlpPersonFromJSON(
  jsonString: string,
): SafeParseResult<DlpPerson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DlpPerson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DlpPerson' from JSON`,
  );
}
