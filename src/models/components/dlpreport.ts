/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DlpConfig,
  DlpConfig$inboundSchema,
  DlpConfig$Outbound,
  DlpConfig$outboundSchema,
} from "./dlpconfig.js";
import {
  DlpFrequency,
  DlpFrequency$inboundSchema,
  DlpFrequency$outboundSchema,
} from "./dlpfrequency.js";
import {
  DlpPerson,
  DlpPerson$inboundSchema,
  DlpPerson$Outbound,
  DlpPerson$outboundSchema,
} from "./dlpperson.js";
import {
  DlpReportStatus,
  DlpReportStatus$inboundSchema,
  DlpReportStatus$outboundSchema,
} from "./dlpreportstatus.js";

export const LastScanStatus = {
  Pending: "PENDING",
  Success: "SUCCESS",
  Failure: "FAILURE",
  Cancelled: "CANCELLED",
  Cancelling: "CANCELLING",
  Active: "ACTIVE",
} as const;
export type LastScanStatus = ClosedEnum<typeof LastScanStatus>;

/**
 * Full policy information that will be used for scans.
 */
export type DlpReport = {
  id?: string | undefined;
  name?: string | undefined;
  /**
   * Detailed configuration of what documents and sensitive content will be scanned.
   */
  config?: DlpConfig | undefined;
  /**
   * Interval between scans. DAILY is deprecated.
   */
  frequency?: DlpFrequency | undefined;
  /**
   * The status of the policy/report. Only ACTIVE status will be picked for scans.
   */
  status?: DlpReportStatus | undefined;
  /**
   * Details about the person who created this report/policy.
   */
  createdBy?: DlpPerson | undefined;
  /**
   * Timestamp at which the policy was created.
   */
  createdAt?: string | undefined;
  /**
   * Timestamp at which the policy was last updated.
   */
  lastUpdatedAt?: string | undefined;
  /**
   * Auto hide documents with findings in the policy.
   */
  autoHideDocs?: boolean | undefined;
  lastScanStatus?: LastScanStatus | undefined;
  /**
   * The timestamp at which the report's last run/scan began.
   */
  lastScanStartTime?: string | undefined;
  /**
   * Details about the person who created this report/policy.
   */
  updatedBy?: DlpPerson | undefined;
};

/** @internal */
export const LastScanStatus$inboundSchema: z.ZodNativeEnum<
  typeof LastScanStatus
> = z.nativeEnum(LastScanStatus);

/** @internal */
export const LastScanStatus$outboundSchema: z.ZodNativeEnum<
  typeof LastScanStatus
> = LastScanStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LastScanStatus$ {
  /** @deprecated use `LastScanStatus$inboundSchema` instead. */
  export const inboundSchema = LastScanStatus$inboundSchema;
  /** @deprecated use `LastScanStatus$outboundSchema` instead. */
  export const outboundSchema = LastScanStatus$outboundSchema;
}

/** @internal */
export const DlpReport$inboundSchema: z.ZodType<
  DlpReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  config: DlpConfig$inboundSchema.optional(),
  frequency: DlpFrequency$inboundSchema.optional(),
  status: DlpReportStatus$inboundSchema.optional(),
  createdBy: DlpPerson$inboundSchema.optional(),
  createdAt: z.string().optional(),
  lastUpdatedAt: z.string().optional(),
  autoHideDocs: z.boolean().optional(),
  lastScanStatus: LastScanStatus$inboundSchema.optional(),
  lastScanStartTime: z.string().optional(),
  updatedBy: DlpPerson$inboundSchema.optional(),
});

/** @internal */
export type DlpReport$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  config?: DlpConfig$Outbound | undefined;
  frequency?: string | undefined;
  status?: string | undefined;
  createdBy?: DlpPerson$Outbound | undefined;
  createdAt?: string | undefined;
  lastUpdatedAt?: string | undefined;
  autoHideDocs?: boolean | undefined;
  lastScanStatus?: string | undefined;
  lastScanStartTime?: string | undefined;
  updatedBy?: DlpPerson$Outbound | undefined;
};

/** @internal */
export const DlpReport$outboundSchema: z.ZodType<
  DlpReport$Outbound,
  z.ZodTypeDef,
  DlpReport
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  config: DlpConfig$outboundSchema.optional(),
  frequency: DlpFrequency$outboundSchema.optional(),
  status: DlpReportStatus$outboundSchema.optional(),
  createdBy: DlpPerson$outboundSchema.optional(),
  createdAt: z.string().optional(),
  lastUpdatedAt: z.string().optional(),
  autoHideDocs: z.boolean().optional(),
  lastScanStatus: LastScanStatus$outboundSchema.optional(),
  lastScanStartTime: z.string().optional(),
  updatedBy: DlpPerson$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DlpReport$ {
  /** @deprecated use `DlpReport$inboundSchema` instead. */
  export const inboundSchema = DlpReport$inboundSchema;
  /** @deprecated use `DlpReport$outboundSchema` instead. */
  export const outboundSchema = DlpReport$outboundSchema;
  /** @deprecated use `DlpReport$Outbound` instead. */
  export type Outbound = DlpReport$Outbound;
}

export function dlpReportToJSON(dlpReport: DlpReport): string {
  return JSON.stringify(DlpReport$outboundSchema.parse(dlpReport));
}

export function dlpReportFromJSON(
  jsonString: string,
): SafeParseResult<DlpReport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DlpReport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DlpReport' from JSON`,
  );
}
