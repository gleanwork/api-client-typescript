/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DlpSimpleResult,
  DlpSimpleResult$inboundSchema,
  DlpSimpleResult$outboundSchema,
} from "./dlpsimpleresult.js";

/**
 * The frequency of the report
 */
export const Frequency = {
  Weekly: "WEEKLY",
  Once: "ONCE",
} as const;
/**
 * The frequency of the report
 */
export type Frequency = ClosedEnum<typeof Frequency>;

/**
 * Dlp report metadata which is used to construct report email
 */
export type DlpReportData = {
  /**
   * The frequency of the report
   */
  frequency?: Frequency | undefined;
  /**
   * The time the report was requested, applicable only for one time reports
   */
  requestTime?: Date | undefined;
  reportName?: string | undefined;
  status?: DlpSimpleResult | undefined;
};

/** @internal */
export const Frequency$inboundSchema: z.ZodNativeEnum<typeof Frequency> = z
  .nativeEnum(Frequency);

/** @internal */
export const Frequency$outboundSchema: z.ZodNativeEnum<typeof Frequency> =
  Frequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Frequency$ {
  /** @deprecated use `Frequency$inboundSchema` instead. */
  export const inboundSchema = Frequency$inboundSchema;
  /** @deprecated use `Frequency$outboundSchema` instead. */
  export const outboundSchema = Frequency$outboundSchema;
}

/** @internal */
export const DlpReportData$inboundSchema: z.ZodType<
  DlpReportData,
  z.ZodTypeDef,
  unknown
> = z.object({
  frequency: Frequency$inboundSchema.optional(),
  requestTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  reportName: z.string().optional(),
  status: DlpSimpleResult$inboundSchema.optional(),
});

/** @internal */
export type DlpReportData$Outbound = {
  frequency?: string | undefined;
  requestTime?: string | undefined;
  reportName?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const DlpReportData$outboundSchema: z.ZodType<
  DlpReportData$Outbound,
  z.ZodTypeDef,
  DlpReportData
> = z.object({
  frequency: Frequency$outboundSchema.optional(),
  requestTime: z.date().transform(v => v.toISOString()).optional(),
  reportName: z.string().optional(),
  status: DlpSimpleResult$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DlpReportData$ {
  /** @deprecated use `DlpReportData$inboundSchema` instead. */
  export const inboundSchema = DlpReportData$inboundSchema;
  /** @deprecated use `DlpReportData$outboundSchema` instead. */
  export const outboundSchema = DlpReportData$outboundSchema;
  /** @deprecated use `DlpReportData$Outbound` instead. */
  export type Outbound = DlpReportData$Outbound;
}

export function dlpReportDataToJSON(dlpReportData: DlpReportData): string {
  return JSON.stringify(DlpReportData$outboundSchema.parse(dlpReportData));
}

export function dlpReportDataFromJSON(
  jsonString: string,
): SafeParseResult<DlpReportData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DlpReportData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DlpReportData' from JSON`,
  );
}
