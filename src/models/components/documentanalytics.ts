/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CountInfo,
  CountInfo$inboundSchema,
  CountInfo$Outbound,
  CountInfo$outboundSchema,
} from "./countinfo.js";
import {
  DocumentFacetAnalytics,
  DocumentFacetAnalytics$inboundSchema,
  DocumentFacetAnalytics$Outbound,
  DocumentFacetAnalytics$outboundSchema,
} from "./documentfacetanalytics.js";
import {
  DocumentSpecUnion,
  DocumentSpecUnion$inboundSchema,
  DocumentSpecUnion$Outbound,
  DocumentSpecUnion$outboundSchema,
} from "./documentspecunion.js";

export type DocumentAnalytics = {
  documentSpec?: DocumentSpecUnion | undefined;
  visitorCount?: CountInfo | undefined;
  clickerCount?: CountInfo | undefined;
  userImpressionCount?: CountInfo | undefined;
  visitCount?: CountInfo | undefined;
  facetAnalytics?: Array<DocumentFacetAnalytics> | undefined;
};

/** @internal */
export const DocumentAnalytics$inboundSchema: z.ZodType<
  DocumentAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentSpec: DocumentSpecUnion$inboundSchema.optional(),
  visitorCount: CountInfo$inboundSchema.optional(),
  clickerCount: CountInfo$inboundSchema.optional(),
  userImpressionCount: CountInfo$inboundSchema.optional(),
  visitCount: CountInfo$inboundSchema.optional(),
  facetAnalytics: z.array(z.lazy(() => DocumentFacetAnalytics$inboundSchema))
    .optional(),
});

/** @internal */
export type DocumentAnalytics$Outbound = {
  documentSpec?: DocumentSpecUnion$Outbound | undefined;
  visitorCount?: CountInfo$Outbound | undefined;
  clickerCount?: CountInfo$Outbound | undefined;
  userImpressionCount?: CountInfo$Outbound | undefined;
  visitCount?: CountInfo$Outbound | undefined;
  facetAnalytics?: Array<DocumentFacetAnalytics$Outbound> | undefined;
};

/** @internal */
export const DocumentAnalytics$outboundSchema: z.ZodType<
  DocumentAnalytics$Outbound,
  z.ZodTypeDef,
  DocumentAnalytics
> = z.object({
  documentSpec: DocumentSpecUnion$outboundSchema.optional(),
  visitorCount: CountInfo$outboundSchema.optional(),
  clickerCount: CountInfo$outboundSchema.optional(),
  userImpressionCount: CountInfo$outboundSchema.optional(),
  visitCount: CountInfo$outboundSchema.optional(),
  facetAnalytics: z.array(z.lazy(() => DocumentFacetAnalytics$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentAnalytics$ {
  /** @deprecated use `DocumentAnalytics$inboundSchema` instead. */
  export const inboundSchema = DocumentAnalytics$inboundSchema;
  /** @deprecated use `DocumentAnalytics$outboundSchema` instead. */
  export const outboundSchema = DocumentAnalytics$outboundSchema;
  /** @deprecated use `DocumentAnalytics$Outbound` instead. */
  export type Outbound = DocumentAnalytics$Outbound;
}

export function documentAnalyticsToJSON(
  documentAnalytics: DocumentAnalytics,
): string {
  return JSON.stringify(
    DocumentAnalytics$outboundSchema.parse(documentAnalytics),
  );
}

export function documentAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentAnalytics' from JSON`,
  );
}
