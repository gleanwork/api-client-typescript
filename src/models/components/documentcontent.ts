/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DocumentContent = {
  /**
   * The plaintext content of the document.
   */
  fullTextList?: Array<string> | undefined;
};

/** @internal */
export const DocumentContent$inboundSchema: z.ZodType<
  DocumentContent,
  z.ZodTypeDef,
  unknown
> = z.object({
  fullTextList: z.array(z.string()).optional(),
});

/** @internal */
export type DocumentContent$Outbound = {
  fullTextList?: Array<string> | undefined;
};

/** @internal */
export const DocumentContent$outboundSchema: z.ZodType<
  DocumentContent$Outbound,
  z.ZodTypeDef,
  DocumentContent
> = z.object({
  fullTextList: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentContent$ {
  /** @deprecated use `DocumentContent$inboundSchema` instead. */
  export const inboundSchema = DocumentContent$inboundSchema;
  /** @deprecated use `DocumentContent$outboundSchema` instead. */
  export const outboundSchema = DocumentContent$outboundSchema;
  /** @deprecated use `DocumentContent$Outbound` instead. */
  export type Outbound = DocumentContent$Outbound;
}

export function documentContentToJSON(
  documentContent: DocumentContent,
): string {
  return JSON.stringify(DocumentContent$outboundSchema.parse(documentContent));
}

export function documentContentFromJSON(
  jsonString: string,
): SafeParseResult<DocumentContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentContent' from JSON`,
  );
}
