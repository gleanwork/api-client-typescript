/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DocumentAnalytics,
  DocumentAnalytics$inboundSchema,
  DocumentAnalytics$Outbound,
  DocumentAnalytics$outboundSchema,
} from "./documentanalytics.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";

export type DocumentFacetAnalytics = {
  facet?: FacetFilter | undefined;
  analytics?: DocumentAnalytics | undefined;
};

/** @internal */
export const DocumentFacetAnalytics$inboundSchema: z.ZodType<
  DocumentFacetAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({
  facet: FacetFilter$inboundSchema.optional(),
  analytics: z.lazy(() => DocumentAnalytics$inboundSchema).optional(),
});

/** @internal */
export type DocumentFacetAnalytics$Outbound = {
  facet?: FacetFilter$Outbound | undefined;
  analytics?: DocumentAnalytics$Outbound | undefined;
};

/** @internal */
export const DocumentFacetAnalytics$outboundSchema: z.ZodType<
  DocumentFacetAnalytics$Outbound,
  z.ZodTypeDef,
  DocumentFacetAnalytics
> = z.object({
  facet: FacetFilter$outboundSchema.optional(),
  analytics: z.lazy(() => DocumentAnalytics$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentFacetAnalytics$ {
  /** @deprecated use `DocumentFacetAnalytics$inboundSchema` instead. */
  export const inboundSchema = DocumentFacetAnalytics$inboundSchema;
  /** @deprecated use `DocumentFacetAnalytics$outboundSchema` instead. */
  export const outboundSchema = DocumentFacetAnalytics$outboundSchema;
  /** @deprecated use `DocumentFacetAnalytics$Outbound` instead. */
  export type Outbound = DocumentFacetAnalytics$Outbound;
}

export function documentFacetAnalyticsToJSON(
  documentFacetAnalytics: DocumentFacetAnalytics,
): string {
  return JSON.stringify(
    DocumentFacetAnalytics$outboundSchema.parse(documentFacetAnalytics),
  );
}

export function documentFacetAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentFacetAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentFacetAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentFacetAnalytics' from JSON`,
  );
}
