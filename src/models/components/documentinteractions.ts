/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CountInfo,
  CountInfo$inboundSchema,
  CountInfo$Outbound,
  CountInfo$outboundSchema,
} from "./countinfo.js";
import {
  Reaction,
  Reaction$inboundSchema,
  Reaction$Outbound,
  Reaction$outboundSchema,
} from "./reaction.js";
import {
  Share,
  Share$inboundSchema,
  Share$Outbound,
  Share$outboundSchema,
} from "./share.js";

export type DocumentInteractions = {
  /**
   * The count of comments (thread replies in the case of slack).
   */
  numComments?: number | undefined;
  /**
   * The count of reactions on the document.
   */
  numReactions?: number | undefined;
  /**
   * To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  reactions?: Array<string> | undefined;
  reacts?: Array<Reaction> | undefined;
  /**
   * Describes instances of someone posting a link to this document in one of our indexed datasources.
   */
  shares?: Array<Share> | undefined;
  visitorCount?: CountInfo | undefined;
};

/** @internal */
export const DocumentInteractions$inboundSchema: z.ZodType<
  DocumentInteractions,
  z.ZodTypeDef,
  unknown
> = z.object({
  numComments: z.number().int().optional(),
  numReactions: z.number().int().optional(),
  reactions: z.array(z.string()).optional(),
  reacts: z.array(z.lazy(() => Reaction$inboundSchema)).optional(),
  shares: z.array(z.lazy(() => Share$inboundSchema)).optional(),
  visitorCount: CountInfo$inboundSchema.optional(),
});

/** @internal */
export type DocumentInteractions$Outbound = {
  numComments?: number | undefined;
  numReactions?: number | undefined;
  reactions?: Array<string> | undefined;
  reacts?: Array<Reaction$Outbound> | undefined;
  shares?: Array<Share$Outbound> | undefined;
  visitorCount?: CountInfo$Outbound | undefined;
};

/** @internal */
export const DocumentInteractions$outboundSchema: z.ZodType<
  DocumentInteractions$Outbound,
  z.ZodTypeDef,
  DocumentInteractions
> = z.object({
  numComments: z.number().int().optional(),
  numReactions: z.number().int().optional(),
  reactions: z.array(z.string()).optional(),
  reacts: z.array(z.lazy(() => Reaction$outboundSchema)).optional(),
  shares: z.array(z.lazy(() => Share$outboundSchema)).optional(),
  visitorCount: CountInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentInteractions$ {
  /** @deprecated use `DocumentInteractions$inboundSchema` instead. */
  export const inboundSchema = DocumentInteractions$inboundSchema;
  /** @deprecated use `DocumentInteractions$outboundSchema` instead. */
  export const outboundSchema = DocumentInteractions$outboundSchema;
  /** @deprecated use `DocumentInteractions$Outbound` instead. */
  export type Outbound = DocumentInteractions$Outbound;
}

export function documentInteractionsToJSON(
  documentInteractions: DocumentInteractions,
): string {
  return JSON.stringify(
    DocumentInteractions$outboundSchema.parse(documentInteractions),
  );
}

export function documentInteractionsFromJSON(
  jsonString: string,
): SafeParseResult<DocumentInteractions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentInteractions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentInteractions' from JSON`,
  );
}
