/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PermissionsGroupIntersectionDefinition,
  PermissionsGroupIntersectionDefinition$inboundSchema,
  PermissionsGroupIntersectionDefinition$Outbound,
  PermissionsGroupIntersectionDefinition$outboundSchema,
} from "./permissionsgroupintersectiondefinition.js";
import {
  UserReferenceDefinition,
  UserReferenceDefinition$inboundSchema,
  UserReferenceDefinition$Outbound,
  UserReferenceDefinition$outboundSchema,
} from "./userreferencedefinition.js";

/**
 * describes the access control details of the document
 */
export type DocumentPermissionsDefinition = {
  /**
   * List of users who can view the document
   */
  allowedUsers?: Array<UserReferenceDefinition> | undefined;
  /**
   * List of groups that can view the document
   */
  allowedGroups?: Array<string> | undefined;
  /**
   * List of allowed group intersections. This describes a permissions constraint of the form ((GroupA AND GroupB AND GroupC) OR (GroupX AND GroupY) OR ...
   */
  allowedGroupIntersections?:
    | Array<PermissionsGroupIntersectionDefinition>
    | undefined;
  /**
   * If true, then any Glean user can view the document
   */
  allowAnonymousAccess?: boolean | undefined;
  /**
   * If true, then any user who has an account in the datasource can view the document.
   */
  allowAllDatasourceUsersAccess?: boolean | undefined;
};

/** @internal */
export const DocumentPermissionsDefinition$inboundSchema: z.ZodType<
  DocumentPermissionsDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowedUsers: z.array(UserReferenceDefinition$inboundSchema).optional(),
  allowedGroups: z.array(z.string()).optional(),
  allowedGroupIntersections: z.array(
    PermissionsGroupIntersectionDefinition$inboundSchema,
  ).optional(),
  allowAnonymousAccess: z.boolean().optional(),
  allowAllDatasourceUsersAccess: z.boolean().optional(),
});

/** @internal */
export type DocumentPermissionsDefinition$Outbound = {
  allowedUsers?: Array<UserReferenceDefinition$Outbound> | undefined;
  allowedGroups?: Array<string> | undefined;
  allowedGroupIntersections?:
    | Array<PermissionsGroupIntersectionDefinition$Outbound>
    | undefined;
  allowAnonymousAccess?: boolean | undefined;
  allowAllDatasourceUsersAccess?: boolean | undefined;
};

/** @internal */
export const DocumentPermissionsDefinition$outboundSchema: z.ZodType<
  DocumentPermissionsDefinition$Outbound,
  z.ZodTypeDef,
  DocumentPermissionsDefinition
> = z.object({
  allowedUsers: z.array(UserReferenceDefinition$outboundSchema).optional(),
  allowedGroups: z.array(z.string()).optional(),
  allowedGroupIntersections: z.array(
    PermissionsGroupIntersectionDefinition$outboundSchema,
  ).optional(),
  allowAnonymousAccess: z.boolean().optional(),
  allowAllDatasourceUsersAccess: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentPermissionsDefinition$ {
  /** @deprecated use `DocumentPermissionsDefinition$inboundSchema` instead. */
  export const inboundSchema = DocumentPermissionsDefinition$inboundSchema;
  /** @deprecated use `DocumentPermissionsDefinition$outboundSchema` instead. */
  export const outboundSchema = DocumentPermissionsDefinition$outboundSchema;
  /** @deprecated use `DocumentPermissionsDefinition$Outbound` instead. */
  export type Outbound = DocumentPermissionsDefinition$Outbound;
}

export function documentPermissionsDefinitionToJSON(
  documentPermissionsDefinition: DocumentPermissionsDefinition,
): string {
  return JSON.stringify(
    DocumentPermissionsDefinition$outboundSchema.parse(
      documentPermissionsDefinition,
    ),
  );
}

export function documentPermissionsDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<DocumentPermissionsDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentPermissionsDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentPermissionsDefinition' from JSON`,
  );
}
