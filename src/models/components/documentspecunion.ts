/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the user generated content (UGC datasource).
 */
export const DocumentSpecUgcType = {
  Announcements: "ANNOUNCEMENTS",
  Answers: "ANSWERS",
  Collections: "COLLECTIONS",
  Shortcuts: "SHORTCUTS",
} as const;
/**
 * The type of the user generated content (UGC datasource).
 */
export type DocumentSpecUgcType = ClosedEnum<typeof DocumentSpecUgcType>;

export type DocumentSpec3 = {
  /**
   * The type of the user generated content (UGC datasource).
   */
  ugcType?: DocumentSpecUgcType | undefined;
  /**
   * The id for user generated content.
   */
  contentId?: number | undefined;
  /**
   * The specific type of the user generated content type.
   */
  docType?: string | undefined;
};

export type DocumentSpec2 = {
  /**
   * The ID of the document.
   */
  id?: string | undefined;
};

export type DocumentSpec1 = {
  /**
   * The URL of the document.
   */
  url?: string | undefined;
};

export type DocumentSpecUnion = DocumentSpec1 | DocumentSpec2 | DocumentSpec3;

/** @internal */
export const DocumentSpecUgcType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSpecUgcType
> = z.nativeEnum(DocumentSpecUgcType);

/** @internal */
export const DocumentSpecUgcType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSpecUgcType
> = DocumentSpecUgcType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSpecUgcType$ {
  /** @deprecated use `DocumentSpecUgcType$inboundSchema` instead. */
  export const inboundSchema = DocumentSpecUgcType$inboundSchema;
  /** @deprecated use `DocumentSpecUgcType$outboundSchema` instead. */
  export const outboundSchema = DocumentSpecUgcType$outboundSchema;
}

/** @internal */
export const DocumentSpec3$inboundSchema: z.ZodType<
  DocumentSpec3,
  z.ZodTypeDef,
  unknown
> = z.object({
  ugcType: DocumentSpecUgcType$inboundSchema.optional(),
  contentId: z.number().int().optional(),
  docType: z.string().optional(),
});

/** @internal */
export type DocumentSpec3$Outbound = {
  ugcType?: string | undefined;
  contentId?: number | undefined;
  docType?: string | undefined;
};

/** @internal */
export const DocumentSpec3$outboundSchema: z.ZodType<
  DocumentSpec3$Outbound,
  z.ZodTypeDef,
  DocumentSpec3
> = z.object({
  ugcType: DocumentSpecUgcType$outboundSchema.optional(),
  contentId: z.number().int().optional(),
  docType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSpec3$ {
  /** @deprecated use `DocumentSpec3$inboundSchema` instead. */
  export const inboundSchema = DocumentSpec3$inboundSchema;
  /** @deprecated use `DocumentSpec3$outboundSchema` instead. */
  export const outboundSchema = DocumentSpec3$outboundSchema;
  /** @deprecated use `DocumentSpec3$Outbound` instead. */
  export type Outbound = DocumentSpec3$Outbound;
}

export function documentSpec3ToJSON(documentSpec3: DocumentSpec3): string {
  return JSON.stringify(DocumentSpec3$outboundSchema.parse(documentSpec3));
}

export function documentSpec3FromJSON(
  jsonString: string,
): SafeParseResult<DocumentSpec3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSpec3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSpec3' from JSON`,
  );
}

/** @internal */
export const DocumentSpec2$inboundSchema: z.ZodType<
  DocumentSpec2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type DocumentSpec2$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const DocumentSpec2$outboundSchema: z.ZodType<
  DocumentSpec2$Outbound,
  z.ZodTypeDef,
  DocumentSpec2
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSpec2$ {
  /** @deprecated use `DocumentSpec2$inboundSchema` instead. */
  export const inboundSchema = DocumentSpec2$inboundSchema;
  /** @deprecated use `DocumentSpec2$outboundSchema` instead. */
  export const outboundSchema = DocumentSpec2$outboundSchema;
  /** @deprecated use `DocumentSpec2$Outbound` instead. */
  export type Outbound = DocumentSpec2$Outbound;
}

export function documentSpec2ToJSON(documentSpec2: DocumentSpec2): string {
  return JSON.stringify(DocumentSpec2$outboundSchema.parse(documentSpec2));
}

export function documentSpec2FromJSON(
  jsonString: string,
): SafeParseResult<DocumentSpec2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSpec2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSpec2' from JSON`,
  );
}

/** @internal */
export const DocumentSpec1$inboundSchema: z.ZodType<
  DocumentSpec1,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string().optional(),
});

/** @internal */
export type DocumentSpec1$Outbound = {
  url?: string | undefined;
};

/** @internal */
export const DocumentSpec1$outboundSchema: z.ZodType<
  DocumentSpec1$Outbound,
  z.ZodTypeDef,
  DocumentSpec1
> = z.object({
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSpec1$ {
  /** @deprecated use `DocumentSpec1$inboundSchema` instead. */
  export const inboundSchema = DocumentSpec1$inboundSchema;
  /** @deprecated use `DocumentSpec1$outboundSchema` instead. */
  export const outboundSchema = DocumentSpec1$outboundSchema;
  /** @deprecated use `DocumentSpec1$Outbound` instead. */
  export type Outbound = DocumentSpec1$Outbound;
}

export function documentSpec1ToJSON(documentSpec1: DocumentSpec1): string {
  return JSON.stringify(DocumentSpec1$outboundSchema.parse(documentSpec1));
}

export function documentSpec1FromJSON(
  jsonString: string,
): SafeParseResult<DocumentSpec1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSpec1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSpec1' from JSON`,
  );
}

/** @internal */
export const DocumentSpecUnion$inboundSchema: z.ZodType<
  DocumentSpecUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DocumentSpec1$inboundSchema),
  z.lazy(() => DocumentSpec2$inboundSchema),
  z.lazy(() => DocumentSpec3$inboundSchema),
]);

/** @internal */
export type DocumentSpecUnion$Outbound =
  | DocumentSpec1$Outbound
  | DocumentSpec2$Outbound
  | DocumentSpec3$Outbound;

/** @internal */
export const DocumentSpecUnion$outboundSchema: z.ZodType<
  DocumentSpecUnion$Outbound,
  z.ZodTypeDef,
  DocumentSpecUnion
> = z.union([
  z.lazy(() => DocumentSpec1$outboundSchema),
  z.lazy(() => DocumentSpec2$outboundSchema),
  z.lazy(() => DocumentSpec3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSpecUnion$ {
  /** @deprecated use `DocumentSpecUnion$inboundSchema` instead. */
  export const inboundSchema = DocumentSpecUnion$inboundSchema;
  /** @deprecated use `DocumentSpecUnion$outboundSchema` instead. */
  export const outboundSchema = DocumentSpecUnion$outboundSchema;
  /** @deprecated use `DocumentSpecUnion$Outbound` instead. */
  export type Outbound = DocumentSpecUnion$Outbound;
}

export function documentSpecUnionToJSON(
  documentSpecUnion: DocumentSpecUnion,
): string {
  return JSON.stringify(
    DocumentSpecUnion$outboundSchema.parse(documentSpecUnion),
  );
}

export function documentSpecUnionFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSpecUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSpecUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSpecUnion' from JSON`,
  );
}
