/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the document status response body
 */
export type DocumentStatusResponse = {
  /**
   * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
   */
  uploadStatus?: string | undefined;
  /**
   * Time of last successful upload for the document, in ISO 8601 format
   */
  lastUploadedAt?: string | undefined;
  /**
   * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
   */
  indexingStatus?: string | undefined;
  /**
   * Time of last successful indexing for the document, in ISO 8601 format
   */
  lastIndexedAt?: string | undefined;
  /**
   * Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
   */
  permissionIdentityStatus?: string | undefined;
};

/** @internal */
export const DocumentStatusResponse$inboundSchema: z.ZodType<
  DocumentStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploadStatus: z.string().optional(),
  lastUploadedAt: z.string().optional(),
  indexingStatus: z.string().optional(),
  lastIndexedAt: z.string().optional(),
  permissionIdentityStatus: z.string().optional(),
});

/** @internal */
export type DocumentStatusResponse$Outbound = {
  uploadStatus?: string | undefined;
  lastUploadedAt?: string | undefined;
  indexingStatus?: string | undefined;
  lastIndexedAt?: string | undefined;
  permissionIdentityStatus?: string | undefined;
};

/** @internal */
export const DocumentStatusResponse$outboundSchema: z.ZodType<
  DocumentStatusResponse$Outbound,
  z.ZodTypeDef,
  DocumentStatusResponse
> = z.object({
  uploadStatus: z.string().optional(),
  lastUploadedAt: z.string().optional(),
  indexingStatus: z.string().optional(),
  lastIndexedAt: z.string().optional(),
  permissionIdentityStatus: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentStatusResponse$ {
  /** @deprecated use `DocumentStatusResponse$inboundSchema` instead. */
  export const inboundSchema = DocumentStatusResponse$inboundSchema;
  /** @deprecated use `DocumentStatusResponse$outboundSchema` instead. */
  export const outboundSchema = DocumentStatusResponse$outboundSchema;
  /** @deprecated use `DocumentStatusResponse$Outbound` instead. */
  export type Outbound = DocumentStatusResponse$Outbound;
}

export function documentStatusResponseToJSON(
  documentStatusResponse: DocumentStatusResponse,
): string {
  return JSON.stringify(
    DocumentStatusResponse$outboundSchema.parse(documentStatusResponse),
  );
}

export function documentStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<DocumentStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentStatusResponse' from JSON`,
  );
}
