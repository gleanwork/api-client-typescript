/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility-override state of the document.
 */
export const DocumentVisibilityOverrideOverride = {
  None: "NONE",
  HideFromAll: "HIDE_FROM_ALL",
  HideFromGroups: "HIDE_FROM_GROUPS",
  HideFromAllExceptOwner: "HIDE_FROM_ALL_EXCEPT_OWNER",
} as const;
/**
 * The visibility-override state of the document.
 */
export type DocumentVisibilityOverrideOverride = ClosedEnum<
  typeof DocumentVisibilityOverrideOverride
>;

export type DocumentVisibilityOverride = {
  docId?: string | undefined;
  /**
   * The visibility-override state of the document.
   */
  override?: DocumentVisibilityOverrideOverride | undefined;
};

/** @internal */
export const DocumentVisibilityOverrideOverride$inboundSchema: z.ZodNativeEnum<
  typeof DocumentVisibilityOverrideOverride
> = z.nativeEnum(DocumentVisibilityOverrideOverride);

/** @internal */
export const DocumentVisibilityOverrideOverride$outboundSchema: z.ZodNativeEnum<
  typeof DocumentVisibilityOverrideOverride
> = DocumentVisibilityOverrideOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentVisibilityOverrideOverride$ {
  /** @deprecated use `DocumentVisibilityOverrideOverride$inboundSchema` instead. */
  export const inboundSchema = DocumentVisibilityOverrideOverride$inboundSchema;
  /** @deprecated use `DocumentVisibilityOverrideOverride$outboundSchema` instead. */
  export const outboundSchema =
    DocumentVisibilityOverrideOverride$outboundSchema;
}

/** @internal */
export const DocumentVisibilityOverride$inboundSchema: z.ZodType<
  DocumentVisibilityOverride,
  z.ZodTypeDef,
  unknown
> = z.object({
  docId: z.string().optional(),
  override: DocumentVisibilityOverrideOverride$inboundSchema.optional(),
});

/** @internal */
export type DocumentVisibilityOverride$Outbound = {
  docId?: string | undefined;
  override?: string | undefined;
};

/** @internal */
export const DocumentVisibilityOverride$outboundSchema: z.ZodType<
  DocumentVisibilityOverride$Outbound,
  z.ZodTypeDef,
  DocumentVisibilityOverride
> = z.object({
  docId: z.string().optional(),
  override: DocumentVisibilityOverrideOverride$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentVisibilityOverride$ {
  /** @deprecated use `DocumentVisibilityOverride$inboundSchema` instead. */
  export const inboundSchema = DocumentVisibilityOverride$inboundSchema;
  /** @deprecated use `DocumentVisibilityOverride$outboundSchema` instead. */
  export const outboundSchema = DocumentVisibilityOverride$outboundSchema;
  /** @deprecated use `DocumentVisibilityOverride$Outbound` instead. */
  export type Outbound = DocumentVisibilityOverride$Outbound;
}

export function documentVisibilityOverrideToJSON(
  documentVisibilityOverride: DocumentVisibilityOverride,
): string {
  return JSON.stringify(
    DocumentVisibilityOverride$outboundSchema.parse(documentVisibilityOverride),
  );
}

export function documentVisibilityOverrideFromJSON(
  jsonString: string,
): SafeParseResult<DocumentVisibilityOverride, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentVisibilityOverride$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentVisibilityOverride' from JSON`,
  );
}
