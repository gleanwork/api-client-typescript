/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The visibility-override state of the document.
 */
export const DocumentVisibilityUpdateResultOverride = {
  None: "NONE",
  HideFromAll: "HIDE_FROM_ALL",
  HideFromGroups: "HIDE_FROM_GROUPS",
  HideFromAllExceptOwner: "HIDE_FROM_ALL_EXCEPT_OWNER",
} as const;
/**
 * The visibility-override state of the document.
 */
export type DocumentVisibilityUpdateResultOverride = ClosedEnum<
  typeof DocumentVisibilityUpdateResultOverride
>;

export type DocumentVisibilityUpdateResult = {
  docId?: string | undefined;
  /**
   * The visibility-override state of the document.
   */
  override?: DocumentVisibilityUpdateResultOverride | undefined;
  /**
   * Whether this document was successfully set to its desired visibility state.
   */
  success?: boolean | undefined;
};

/** @internal */
export const DocumentVisibilityUpdateResultOverride$inboundSchema:
  z.ZodNativeEnum<typeof DocumentVisibilityUpdateResultOverride> = z.nativeEnum(
    DocumentVisibilityUpdateResultOverride,
  );

/** @internal */
export const DocumentVisibilityUpdateResultOverride$outboundSchema:
  z.ZodNativeEnum<typeof DocumentVisibilityUpdateResultOverride> =
    DocumentVisibilityUpdateResultOverride$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentVisibilityUpdateResultOverride$ {
  /** @deprecated use `DocumentVisibilityUpdateResultOverride$inboundSchema` instead. */
  export const inboundSchema =
    DocumentVisibilityUpdateResultOverride$inboundSchema;
  /** @deprecated use `DocumentVisibilityUpdateResultOverride$outboundSchema` instead. */
  export const outboundSchema =
    DocumentVisibilityUpdateResultOverride$outboundSchema;
}

/** @internal */
export const DocumentVisibilityUpdateResult$inboundSchema: z.ZodType<
  DocumentVisibilityUpdateResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  docId: z.string().optional(),
  override: DocumentVisibilityUpdateResultOverride$inboundSchema.optional(),
  success: z.boolean().optional(),
});

/** @internal */
export type DocumentVisibilityUpdateResult$Outbound = {
  docId?: string | undefined;
  override?: string | undefined;
  success?: boolean | undefined;
};

/** @internal */
export const DocumentVisibilityUpdateResult$outboundSchema: z.ZodType<
  DocumentVisibilityUpdateResult$Outbound,
  z.ZodTypeDef,
  DocumentVisibilityUpdateResult
> = z.object({
  docId: z.string().optional(),
  override: DocumentVisibilityUpdateResultOverride$outboundSchema.optional(),
  success: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentVisibilityUpdateResult$ {
  /** @deprecated use `DocumentVisibilityUpdateResult$inboundSchema` instead. */
  export const inboundSchema = DocumentVisibilityUpdateResult$inboundSchema;
  /** @deprecated use `DocumentVisibilityUpdateResult$outboundSchema` instead. */
  export const outboundSchema = DocumentVisibilityUpdateResult$outboundSchema;
  /** @deprecated use `DocumentVisibilityUpdateResult$Outbound` instead. */
  export type Outbound = DocumentVisibilityUpdateResult$Outbound;
}

export function documentVisibilityUpdateResultToJSON(
  documentVisibilityUpdateResult: DocumentVisibilityUpdateResult,
): string {
  return JSON.stringify(
    DocumentVisibilityUpdateResult$outboundSchema.parse(
      documentVisibilityUpdateResult,
    ),
  );
}

export function documentVisibilityUpdateResultFromJSON(
  jsonString: string,
): SafeParseResult<DocumentVisibilityUpdateResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentVisibilityUpdateResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentVisibilityUpdateResult' from JSON`,
  );
}
