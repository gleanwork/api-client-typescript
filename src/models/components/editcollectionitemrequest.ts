/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EditCollectionItemRequest = {
  /**
   * The optional name of the Collection item.
   */
  name?: string | undefined;
  /**
   * A helpful description of why this CollectionItem is in the Collection that it's in.
   */
  description?: string | undefined;
  /**
   * The emoji icon for this CollectionItem. Only used for Text type items.
   */
  icon?: string | undefined;
  /**
   * The ID of the Collection to edit CollectionItems in.
   */
  collectionId: number;
  /**
   * The ID of the CollectionItem to edit.
   */
  itemId: string;
};

/** @internal */
export const EditCollectionItemRequest$inboundSchema: z.ZodType<
  EditCollectionItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  icon: z.string().optional(),
  collectionId: z.number().int(),
  itemId: z.string(),
});

/** @internal */
export type EditCollectionItemRequest$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  icon?: string | undefined;
  collectionId: number;
  itemId: string;
};

/** @internal */
export const EditCollectionItemRequest$outboundSchema: z.ZodType<
  EditCollectionItemRequest$Outbound,
  z.ZodTypeDef,
  EditCollectionItemRequest
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  icon: z.string().optional(),
  collectionId: z.number().int(),
  itemId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditCollectionItemRequest$ {
  /** @deprecated use `EditCollectionItemRequest$inboundSchema` instead. */
  export const inboundSchema = EditCollectionItemRequest$inboundSchema;
  /** @deprecated use `EditCollectionItemRequest$outboundSchema` instead. */
  export const outboundSchema = EditCollectionItemRequest$outboundSchema;
  /** @deprecated use `EditCollectionItemRequest$Outbound` instead. */
  export type Outbound = EditCollectionItemRequest$Outbound;
}

export function editCollectionItemRequestToJSON(
  editCollectionItemRequest: EditCollectionItemRequest,
): string {
  return JSON.stringify(
    EditCollectionItemRequest$outboundSchema.parse(editCollectionItemRequest),
  );
}

export function editCollectionItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<EditCollectionItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditCollectionItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditCollectionItemRequest' from JSON`,
  );
}
