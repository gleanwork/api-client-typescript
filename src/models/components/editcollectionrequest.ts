/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  Thumbnail,
  Thumbnail$inboundSchema,
  Thumbnail$Outbound,
  Thumbnail$outboundSchema,
} from "./thumbnail.js";
import {
  UserRoleSpecification,
  UserRoleSpecification$inboundSchema,
  UserRoleSpecification$Outbound,
  UserRoleSpecification$outboundSchema,
} from "./userrolespecification.js";

export type EditCollectionRequest = {
  /**
   * The unique name of the Collection.
   */
  name: string;
  /**
   * A brief summary of the Collection's contents.
   */
  description?: string | undefined;
  /**
   * A list of added user roles for the Collection.
   */
  addedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * A list of removed user roles for the Collection.
   */
  removedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
   */
  audienceFilters?: Array<FacetFilter> | undefined;
  /**
   * The emoji icon of this Collection.
   */
  icon?: string | undefined;
  /**
   * Indicates whether edits are allowed for everyone or only admins.
   */
  adminLocked?: boolean | undefined;
  /**
   * The parent of this Collection, or 0 if it's a top-level Collection.
   */
  parentId?: number | undefined;
  thumbnail?: Thumbnail | undefined;
  /**
   * The datasource type this Collection can hold.
   */
  allowedDatasource?: string | undefined;
  /**
   * The ID of the Collection to modify.
   */
  id: number;
};

/** @internal */
export const EditCollectionRequest$inboundSchema: z.ZodType<
  EditCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  addedRoles: z.array(UserRoleSpecification$inboundSchema).optional(),
  removedRoles: z.array(UserRoleSpecification$inboundSchema).optional(),
  audienceFilters: z.array(FacetFilter$inboundSchema).optional(),
  icon: z.string().optional(),
  adminLocked: z.boolean().optional(),
  parentId: z.number().int().optional(),
  thumbnail: Thumbnail$inboundSchema.optional(),
  allowedDatasource: z.string().optional(),
  id: z.number().int(),
});

/** @internal */
export type EditCollectionRequest$Outbound = {
  name: string;
  description?: string | undefined;
  addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  audienceFilters?: Array<FacetFilter$Outbound> | undefined;
  icon?: string | undefined;
  adminLocked?: boolean | undefined;
  parentId?: number | undefined;
  thumbnail?: Thumbnail$Outbound | undefined;
  allowedDatasource?: string | undefined;
  id: number;
};

/** @internal */
export const EditCollectionRequest$outboundSchema: z.ZodType<
  EditCollectionRequest$Outbound,
  z.ZodTypeDef,
  EditCollectionRequest
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  addedRoles: z.array(UserRoleSpecification$outboundSchema).optional(),
  removedRoles: z.array(UserRoleSpecification$outboundSchema).optional(),
  audienceFilters: z.array(FacetFilter$outboundSchema).optional(),
  icon: z.string().optional(),
  adminLocked: z.boolean().optional(),
  parentId: z.number().int().optional(),
  thumbnail: Thumbnail$outboundSchema.optional(),
  allowedDatasource: z.string().optional(),
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditCollectionRequest$ {
  /** @deprecated use `EditCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = EditCollectionRequest$inboundSchema;
  /** @deprecated use `EditCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = EditCollectionRequest$outboundSchema;
  /** @deprecated use `EditCollectionRequest$Outbound` instead. */
  export type Outbound = EditCollectionRequest$Outbound;
}

export function editCollectionRequestToJSON(
  editCollectionRequest: EditCollectionRequest,
): string {
  return JSON.stringify(
    EditCollectionRequest$outboundSchema.parse(editCollectionRequest),
  );
}

export function editCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<EditCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditCollectionRequest' from JSON`,
  );
}
