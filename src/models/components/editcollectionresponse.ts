/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Collection,
  Collection$inboundSchema,
  Collection$Outbound,
  Collection$outboundSchema,
} from "./collection.js";
import {
  CollectionError2,
  CollectionError2$inboundSchema,
  CollectionError2$Outbound,
  CollectionError2$outboundSchema,
} from "./collectionerror2.js";
import {
  CollectionItem,
  CollectionItem$inboundSchema,
  CollectionItem$Outbound,
  CollectionItem$outboundSchema,
} from "./collectionitem.js";
import {
  CollectionPinnedMetadata,
  CollectionPinnedMetadata$inboundSchema,
  CollectionPinnedMetadata$Outbound,
  CollectionPinnedMetadata$outboundSchema,
} from "./collectionpinnedmetadata.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  ObjectPermissions,
  ObjectPermissions$inboundSchema,
  ObjectPermissions$Outbound,
  ObjectPermissions$outboundSchema,
} from "./objectpermissions.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";
import {
  Thumbnail,
  Thumbnail$inboundSchema,
  Thumbnail$Outbound,
  Thumbnail$outboundSchema,
} from "./thumbnail.js";
import {
  UserRoleSpecification,
  UserRoleSpecification$inboundSchema,
  UserRoleSpecification$Outbound,
  UserRoleSpecification$outboundSchema,
} from "./userrolespecification.js";

export const EditCollectionResponseErrorCode = {
  NameExists: "NAME_EXISTS",
  NotFound: "NOT_FOUND",
  CollectionPinned: "COLLECTION_PINNED",
  ConcurrentHierarchyEdit: "CONCURRENT_HIERARCHY_EDIT",
  HeightViolation: "HEIGHT_VIOLATION",
  WidthViolation: "WIDTH_VIOLATION",
  NoPermissions: "NO_PERMISSIONS",
} as const;
export type EditCollectionResponseErrorCode = ClosedEnum<
  typeof EditCollectionResponseErrorCode
>;

export type EditCollectionResponse = {
  /**
   * The unique name of the Collection.
   */
  name: string;
  /**
   * A brief summary of the Collection's contents.
   */
  description: string;
  /**
   * A list of added user roles for the Collection.
   */
  addedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * A list of removed user roles for the Collection.
   */
  removedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
   */
  audienceFilters?: Array<FacetFilter> | undefined;
  /**
   * The emoji icon of this Collection.
   */
  icon?: string | undefined;
  /**
   * Indicates whether edits are allowed for everyone or only admins.
   */
  adminLocked?: boolean | undefined;
  /**
   * The parent of this Collection, or 0 if it's a top-level Collection.
   */
  parentId?: number | undefined;
  thumbnail?: Thumbnail | undefined;
  /**
   * The datasource type this Collection can hold.
   */
  allowedDatasource?: string | undefined;
  permissions?: ObjectPermissions | undefined;
  /**
   * The unique ID of the Collection.
   */
  id: number;
  createTime?: Date | undefined;
  updateTime?: Date | undefined;
  creator?: Person | undefined;
  updatedBy?: Person | undefined;
  /**
   * The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
   */
  itemCount?: number | undefined;
  /**
   * The number of children Collections. Separated from the actual children so we can grab the count without children.
   */
  childCount?: number | undefined;
  /**
   * The items in this Collection.
   */
  items?: Array<CollectionItem> | undefined;
  pinMetadata?: CollectionPinnedMetadata | undefined;
  /**
   * The names of the shortcuts (Go Links) that point to this Collection.
   */
  shortcuts?: Array<string> | undefined;
  /**
   * The children Collections of this Collection.
   */
  children?: Array<Collection> | undefined;
  /**
   * A list of user roles for the Collection.
   */
  roles?: Array<UserRoleSpecification> | undefined;
  errorCode: EditCollectionResponseErrorCode;
  collection?: Collection | undefined;
  error?: CollectionError2 | undefined;
};

/** @internal */
export const EditCollectionResponseErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof EditCollectionResponseErrorCode
> = z.nativeEnum(EditCollectionResponseErrorCode);

/** @internal */
export const EditCollectionResponseErrorCode$outboundSchema: z.ZodNativeEnum<
  typeof EditCollectionResponseErrorCode
> = EditCollectionResponseErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditCollectionResponseErrorCode$ {
  /** @deprecated use `EditCollectionResponseErrorCode$inboundSchema` instead. */
  export const inboundSchema = EditCollectionResponseErrorCode$inboundSchema;
  /** @deprecated use `EditCollectionResponseErrorCode$outboundSchema` instead. */
  export const outboundSchema = EditCollectionResponseErrorCode$outboundSchema;
}

/** @internal */
export const EditCollectionResponse$inboundSchema: z.ZodType<
  EditCollectionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string(),
  addedRoles: z.array(UserRoleSpecification$inboundSchema).optional(),
  removedRoles: z.array(UserRoleSpecification$inboundSchema).optional(),
  audienceFilters: z.array(FacetFilter$inboundSchema).optional(),
  icon: z.string().optional(),
  adminLocked: z.boolean().optional(),
  parentId: z.number().int().optional(),
  thumbnail: Thumbnail$inboundSchema.optional(),
  allowedDatasource: z.string().optional(),
  permissions: ObjectPermissions$inboundSchema.optional(),
  id: z.number().int(),
  createTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updateTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  creator: Person$inboundSchema.optional(),
  updatedBy: Person$inboundSchema.optional(),
  itemCount: z.number().int().optional(),
  childCount: z.number().int().optional(),
  items: z.array(CollectionItem$inboundSchema).optional(),
  pinMetadata: CollectionPinnedMetadata$inboundSchema.optional(),
  shortcuts: z.array(z.string()).optional(),
  children: z.array(Collection$inboundSchema).optional(),
  roles: z.array(UserRoleSpecification$inboundSchema).optional(),
  errorCode: EditCollectionResponseErrorCode$inboundSchema,
  collection: Collection$inboundSchema.optional(),
  error: CollectionError2$inboundSchema.optional(),
});

/** @internal */
export type EditCollectionResponse$Outbound = {
  name: string;
  description: string;
  addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  audienceFilters?: Array<FacetFilter$Outbound> | undefined;
  icon?: string | undefined;
  adminLocked?: boolean | undefined;
  parentId?: number | undefined;
  thumbnail?: Thumbnail$Outbound | undefined;
  allowedDatasource?: string | undefined;
  permissions?: ObjectPermissions$Outbound | undefined;
  id: number;
  createTime?: string | undefined;
  updateTime?: string | undefined;
  creator?: Person$Outbound | undefined;
  updatedBy?: Person$Outbound | undefined;
  itemCount?: number | undefined;
  childCount?: number | undefined;
  items?: Array<CollectionItem$Outbound> | undefined;
  pinMetadata?: CollectionPinnedMetadata$Outbound | undefined;
  shortcuts?: Array<string> | undefined;
  children?: Array<Collection$Outbound> | undefined;
  roles?: Array<UserRoleSpecification$Outbound> | undefined;
  errorCode: string;
  collection?: Collection$Outbound | undefined;
  error?: CollectionError2$Outbound | undefined;
};

/** @internal */
export const EditCollectionResponse$outboundSchema: z.ZodType<
  EditCollectionResponse$Outbound,
  z.ZodTypeDef,
  EditCollectionResponse
> = z.object({
  name: z.string(),
  description: z.string(),
  addedRoles: z.array(UserRoleSpecification$outboundSchema).optional(),
  removedRoles: z.array(UserRoleSpecification$outboundSchema).optional(),
  audienceFilters: z.array(FacetFilter$outboundSchema).optional(),
  icon: z.string().optional(),
  adminLocked: z.boolean().optional(),
  parentId: z.number().int().optional(),
  thumbnail: Thumbnail$outboundSchema.optional(),
  allowedDatasource: z.string().optional(),
  permissions: ObjectPermissions$outboundSchema.optional(),
  id: z.number().int(),
  createTime: z.date().transform(v => v.toISOString()).optional(),
  updateTime: z.date().transform(v => v.toISOString()).optional(),
  creator: Person$outboundSchema.optional(),
  updatedBy: Person$outboundSchema.optional(),
  itemCount: z.number().int().optional(),
  childCount: z.number().int().optional(),
  items: z.array(CollectionItem$outboundSchema).optional(),
  pinMetadata: CollectionPinnedMetadata$outboundSchema.optional(),
  shortcuts: z.array(z.string()).optional(),
  children: z.array(Collection$outboundSchema).optional(),
  roles: z.array(UserRoleSpecification$outboundSchema).optional(),
  errorCode: EditCollectionResponseErrorCode$outboundSchema,
  collection: Collection$outboundSchema.optional(),
  error: CollectionError2$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditCollectionResponse$ {
  /** @deprecated use `EditCollectionResponse$inboundSchema` instead. */
  export const inboundSchema = EditCollectionResponse$inboundSchema;
  /** @deprecated use `EditCollectionResponse$outboundSchema` instead. */
  export const outboundSchema = EditCollectionResponse$outboundSchema;
  /** @deprecated use `EditCollectionResponse$Outbound` instead. */
  export type Outbound = EditCollectionResponse$Outbound;
}

export function editCollectionResponseToJSON(
  editCollectionResponse: EditCollectionResponse,
): string {
  return JSON.stringify(
    EditCollectionResponse$outboundSchema.parse(editCollectionResponse),
  );
}

export function editCollectionResponseFromJSON(
  jsonString: string,
): SafeParseResult<EditCollectionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditCollectionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditCollectionResponse' from JSON`,
  );
}
