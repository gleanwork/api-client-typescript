/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EditDocumentCollectionsRequest = {
  /**
   * IDs of Collections to which a document is added.
   */
  addedCollections?: Array<number> | undefined;
  /**
   * IDs of Collections from which a document is removed.
   */
  removedCollections?: Array<number> | undefined;
  /**
   * The Glean Document ID of the item being added to or removed from Collections if it's an indexed document.
   */
  documentId?: string | undefined;
  /**
   * The URL of the item being added to or removed from Collections.
   */
  url?: string | undefined;
  /**
   * Custom title of the document if adding a non-indexed URL.
   */
  name?: string | undefined;
  /**
   * The description of this CollectionItem.
   */
  description?: string | undefined;
};

/** @internal */
export const EditDocumentCollectionsRequest$inboundSchema: z.ZodType<
  EditDocumentCollectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  addedCollections: z.array(z.number().int()).optional(),
  removedCollections: z.array(z.number().int()).optional(),
  documentId: z.string().optional(),
  url: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

/** @internal */
export type EditDocumentCollectionsRequest$Outbound = {
  addedCollections?: Array<number> | undefined;
  removedCollections?: Array<number> | undefined;
  documentId?: string | undefined;
  url?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const EditDocumentCollectionsRequest$outboundSchema: z.ZodType<
  EditDocumentCollectionsRequest$Outbound,
  z.ZodTypeDef,
  EditDocumentCollectionsRequest
> = z.object({
  addedCollections: z.array(z.number().int()).optional(),
  removedCollections: z.array(z.number().int()).optional(),
  documentId: z.string().optional(),
  url: z.string().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EditDocumentCollectionsRequest$ {
  /** @deprecated use `EditDocumentCollectionsRequest$inboundSchema` instead. */
  export const inboundSchema = EditDocumentCollectionsRequest$inboundSchema;
  /** @deprecated use `EditDocumentCollectionsRequest$outboundSchema` instead. */
  export const outboundSchema = EditDocumentCollectionsRequest$outboundSchema;
  /** @deprecated use `EditDocumentCollectionsRequest$Outbound` instead. */
  export type Outbound = EditDocumentCollectionsRequest$Outbound;
}

export function editDocumentCollectionsRequestToJSON(
  editDocumentCollectionsRequest: EditDocumentCollectionsRequest,
): string {
  return JSON.stringify(
    EditDocumentCollectionsRequest$outboundSchema.parse(
      editDocumentCollectionsRequest,
    ),
  );
}

export function editDocumentCollectionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<EditDocumentCollectionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EditDocumentCollectionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EditDocumentCollectionsRequest' from JSON`,
  );
}
