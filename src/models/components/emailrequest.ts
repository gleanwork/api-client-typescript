/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AlertData,
  AlertData$inboundSchema,
  AlertData$Outbound,
  AlertData$outboundSchema,
} from "./alertdata.js";
import {
  CommunicationTemplate,
  CommunicationTemplate$inboundSchema,
  CommunicationTemplate$outboundSchema,
} from "./communicationtemplate.js";
import {
  DlpReportData,
  DlpReportData$inboundSchema,
  DlpReportData$Outbound,
  DlpReportData$outboundSchema,
} from "./dlpreportdata.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  FeedbackChatExchange,
  FeedbackChatExchange$inboundSchema,
  FeedbackChatExchange$Outbound,
  FeedbackChatExchange$outboundSchema,
} from "./feedbackchatexchange.js";
import {
  OnboardingAdminInviteData,
  OnboardingAdminInviteData$inboundSchema,
  OnboardingAdminInviteData$Outbound,
  OnboardingAdminInviteData$outboundSchema,
} from "./onboardingadmininvitedata.js";
import {
  PeopleFilters,
  PeopleFilters$inboundSchema,
  PeopleFilters$Outbound,
  PeopleFilters$outboundSchema,
} from "./peoplefilters.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";

export type Block = {};

/**
 * Optional payload for feedback reporting.
 */
export type FeedbackPayload = {
  /**
   * Additional freeform comments provided by the reporter.
   */
  comments?: string | undefined;
  /**
   * Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.
   */
  customJson?: string | undefined;
  /**
   * Images uploaded by the user when submitting feedback
   */
  imageUrls?: Array<string> | undefined;
  /**
   * The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  issueType?: string | undefined;
  /**
   * The type(s) of issue being reported.
   */
  issues?: Array<string> | undefined;
  /**
   * The query the reporter tried when feedback was sent.
   */
  query?: string | undefined;
  /**
   * The tracking token of the feedback that admins can provide Glean Support to debug
   */
  trackingToken?: string | undefined;
  /**
   * The URL the reporter was on when feedback was sent.
   */
  url?: string | undefined;
  /**
   * The label of the rating that was selected when feedback was sent.
   */
  ratingKey?: string | undefined;
};

/**
 * Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
 */
export type ChatFeedbackPayload = {
  /**
   * Rating given to the conversation (currently either "upvoted" or "downvoted").
   */
  rating?: string | undefined;
  /**
   * The type(s) of issue being reported.
   */
  issues?: Array<string> | undefined;
  /**
   * Additional freeform comments provided by the reporter.
   */
  comments?: string | undefined;
  /**
   * Previous messages in this conversation.
   */
  previousMessages?: Array<string> | undefined;
  chatTranscript?: Array<FeedbackChatExchange> | undefined;
};

/**
 * A request to send email[s] to the specified users
 */
export type EmailRequest = {
  /**
   * The type of email to send
   */
  emailTemplate: CommunicationTemplate;
  /**
   * Admin alert related information that is used to construct the admin alert email
   */
  alertData?: AlertData | undefined;
  /**
   * The people to send emails to
   */
  recipients?: Array<Person> | undefined;
  /**
   * The people to CC for each email
   */
  ccRecipients?: Array<Person> | undefined;
  recipientFilters?: PeopleFilters | undefined;
  /**
   * Name of the company.
   */
  companyName?: string | undefined;
  /**
   * The instance ID of the datasource (if any)
   */
  datasourceInstance?: string | undefined;
  /**
   * The people who triggered this email
   */
  senders?: Array<Person> | undefined;
  /**
   * The URL of the client triggering the request, as received in the ClientConfig
   */
  webAppUrl?: string | undefined;
  /**
   * The URL of the QE instance the email request is processed by.
   */
  serverUrl?: string | undefined;
  /**
   * The URL to unsubscribe from emails.
   */
  unsubscribeUrl?: string | undefined;
  /**
   * The documents this email request refers to
   */
  documents?: Array<Document> | undefined;
  /**
   * Reasons this email request was sent. Will be shown directly to end user.
   */
  reasons?: Array<string> | undefined;
  /**
   * For building complex email UIs, we use a block structure that dictates what we create in the UI
   */
  blocks?: { [k: string]: Array<Block> } | undefined;
  /**
   * Mapping of recipientIds to the email subject they are to receive. Optional and only meant for templates with Sendgrid subject set to {{"{{"}}subject}}
   */
  subjects?: { [k: string]: string } | undefined;
  /**
   * Optional payload for feedback reporting.
   */
  feedbackPayload?: FeedbackPayload | undefined;
  /**
   * Payload for chat feedback reporting. Required when template is `CHAT_FEEDBACK`.
   */
  chatFeedbackPayload?: ChatFeedbackPayload | undefined;
  /**
   * Dlp report metadata which is used to construct report email
   */
  dlpReportData?: DlpReportData | undefined;
  onboardingAdminInviteData?: OnboardingAdminInviteData | undefined;
};

/** @internal */
export const Block$inboundSchema: z.ZodType<Block, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Block$Outbound = {};

/** @internal */
export const Block$outboundSchema: z.ZodType<
  Block$Outbound,
  z.ZodTypeDef,
  Block
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Block$ {
  /** @deprecated use `Block$inboundSchema` instead. */
  export const inboundSchema = Block$inboundSchema;
  /** @deprecated use `Block$outboundSchema` instead. */
  export const outboundSchema = Block$outboundSchema;
  /** @deprecated use `Block$Outbound` instead. */
  export type Outbound = Block$Outbound;
}

export function blockToJSON(block: Block): string {
  return JSON.stringify(Block$outboundSchema.parse(block));
}

export function blockFromJSON(
  jsonString: string,
): SafeParseResult<Block, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Block$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Block' from JSON`,
  );
}

/** @internal */
export const FeedbackPayload$inboundSchema: z.ZodType<
  FeedbackPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  comments: z.string().optional(),
  customJson: z.string().optional(),
  imageUrls: z.array(z.string()).optional(),
  issueType: z.string().optional(),
  issues: z.array(z.string()).optional(),
  query: z.string().optional(),
  trackingToken: z.string().optional(),
  url: z.string().optional(),
  ratingKey: z.string().optional(),
});

/** @internal */
export type FeedbackPayload$Outbound = {
  comments?: string | undefined;
  customJson?: string | undefined;
  imageUrls?: Array<string> | undefined;
  issueType?: string | undefined;
  issues?: Array<string> | undefined;
  query?: string | undefined;
  trackingToken?: string | undefined;
  url?: string | undefined;
  ratingKey?: string | undefined;
};

/** @internal */
export const FeedbackPayload$outboundSchema: z.ZodType<
  FeedbackPayload$Outbound,
  z.ZodTypeDef,
  FeedbackPayload
> = z.object({
  comments: z.string().optional(),
  customJson: z.string().optional(),
  imageUrls: z.array(z.string()).optional(),
  issueType: z.string().optional(),
  issues: z.array(z.string()).optional(),
  query: z.string().optional(),
  trackingToken: z.string().optional(),
  url: z.string().optional(),
  ratingKey: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackPayload$ {
  /** @deprecated use `FeedbackPayload$inboundSchema` instead. */
  export const inboundSchema = FeedbackPayload$inboundSchema;
  /** @deprecated use `FeedbackPayload$outboundSchema` instead. */
  export const outboundSchema = FeedbackPayload$outboundSchema;
  /** @deprecated use `FeedbackPayload$Outbound` instead. */
  export type Outbound = FeedbackPayload$Outbound;
}

export function feedbackPayloadToJSON(
  feedbackPayload: FeedbackPayload,
): string {
  return JSON.stringify(FeedbackPayload$outboundSchema.parse(feedbackPayload));
}

export function feedbackPayloadFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackPayload' from JSON`,
  );
}

/** @internal */
export const ChatFeedbackPayload$inboundSchema: z.ZodType<
  ChatFeedbackPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  rating: z.string().optional(),
  issues: z.array(z.string()).optional(),
  comments: z.string().optional(),
  previousMessages: z.array(z.string()).optional(),
  chatTranscript: z.array(FeedbackChatExchange$inboundSchema).optional(),
});

/** @internal */
export type ChatFeedbackPayload$Outbound = {
  rating?: string | undefined;
  issues?: Array<string> | undefined;
  comments?: string | undefined;
  previousMessages?: Array<string> | undefined;
  chatTranscript?: Array<FeedbackChatExchange$Outbound> | undefined;
};

/** @internal */
export const ChatFeedbackPayload$outboundSchema: z.ZodType<
  ChatFeedbackPayload$Outbound,
  z.ZodTypeDef,
  ChatFeedbackPayload
> = z.object({
  rating: z.string().optional(),
  issues: z.array(z.string()).optional(),
  comments: z.string().optional(),
  previousMessages: z.array(z.string()).optional(),
  chatTranscript: z.array(FeedbackChatExchange$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatFeedbackPayload$ {
  /** @deprecated use `ChatFeedbackPayload$inboundSchema` instead. */
  export const inboundSchema = ChatFeedbackPayload$inboundSchema;
  /** @deprecated use `ChatFeedbackPayload$outboundSchema` instead. */
  export const outboundSchema = ChatFeedbackPayload$outboundSchema;
  /** @deprecated use `ChatFeedbackPayload$Outbound` instead. */
  export type Outbound = ChatFeedbackPayload$Outbound;
}

export function chatFeedbackPayloadToJSON(
  chatFeedbackPayload: ChatFeedbackPayload,
): string {
  return JSON.stringify(
    ChatFeedbackPayload$outboundSchema.parse(chatFeedbackPayload),
  );
}

export function chatFeedbackPayloadFromJSON(
  jsonString: string,
): SafeParseResult<ChatFeedbackPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChatFeedbackPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatFeedbackPayload' from JSON`,
  );
}

/** @internal */
export const EmailRequest$inboundSchema: z.ZodType<
  EmailRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  emailTemplate: CommunicationTemplate$inboundSchema,
  alertData: AlertData$inboundSchema.optional(),
  recipients: z.array(Person$inboundSchema).optional(),
  ccRecipients: z.array(Person$inboundSchema).optional(),
  recipientFilters: PeopleFilters$inboundSchema.optional(),
  companyName: z.string().optional(),
  datasourceInstance: z.string().optional(),
  senders: z.array(Person$inboundSchema).optional(),
  webAppUrl: z.string().optional(),
  serverUrl: z.string().optional(),
  unsubscribeUrl: z.string().optional(),
  documents: z.array(Document$inboundSchema).optional(),
  reasons: z.array(z.string()).optional(),
  blocks: z.record(z.array(z.lazy(() => Block$inboundSchema))).optional(),
  subjects: z.record(z.string()).optional(),
  feedbackPayload: z.lazy(() => FeedbackPayload$inboundSchema).optional(),
  chatFeedbackPayload: z.lazy(() => ChatFeedbackPayload$inboundSchema)
    .optional(),
  dlpReportData: DlpReportData$inboundSchema.optional(),
  onboardingAdminInviteData: OnboardingAdminInviteData$inboundSchema.optional(),
});

/** @internal */
export type EmailRequest$Outbound = {
  emailTemplate: string;
  alertData?: AlertData$Outbound | undefined;
  recipients?: Array<Person$Outbound> | undefined;
  ccRecipients?: Array<Person$Outbound> | undefined;
  recipientFilters?: PeopleFilters$Outbound | undefined;
  companyName?: string | undefined;
  datasourceInstance?: string | undefined;
  senders?: Array<Person$Outbound> | undefined;
  webAppUrl?: string | undefined;
  serverUrl?: string | undefined;
  unsubscribeUrl?: string | undefined;
  documents?: Array<Document$Outbound> | undefined;
  reasons?: Array<string> | undefined;
  blocks?: { [k: string]: Array<Block$Outbound> } | undefined;
  subjects?: { [k: string]: string } | undefined;
  feedbackPayload?: FeedbackPayload$Outbound | undefined;
  chatFeedbackPayload?: ChatFeedbackPayload$Outbound | undefined;
  dlpReportData?: DlpReportData$Outbound | undefined;
  onboardingAdminInviteData?: OnboardingAdminInviteData$Outbound | undefined;
};

/** @internal */
export const EmailRequest$outboundSchema: z.ZodType<
  EmailRequest$Outbound,
  z.ZodTypeDef,
  EmailRequest
> = z.object({
  emailTemplate: CommunicationTemplate$outboundSchema,
  alertData: AlertData$outboundSchema.optional(),
  recipients: z.array(Person$outboundSchema).optional(),
  ccRecipients: z.array(Person$outboundSchema).optional(),
  recipientFilters: PeopleFilters$outboundSchema.optional(),
  companyName: z.string().optional(),
  datasourceInstance: z.string().optional(),
  senders: z.array(Person$outboundSchema).optional(),
  webAppUrl: z.string().optional(),
  serverUrl: z.string().optional(),
  unsubscribeUrl: z.string().optional(),
  documents: z.array(Document$outboundSchema).optional(),
  reasons: z.array(z.string()).optional(),
  blocks: z.record(z.array(z.lazy(() => Block$outboundSchema))).optional(),
  subjects: z.record(z.string()).optional(),
  feedbackPayload: z.lazy(() => FeedbackPayload$outboundSchema).optional(),
  chatFeedbackPayload: z.lazy(() => ChatFeedbackPayload$outboundSchema)
    .optional(),
  dlpReportData: DlpReportData$outboundSchema.optional(),
  onboardingAdminInviteData: OnboardingAdminInviteData$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmailRequest$ {
  /** @deprecated use `EmailRequest$inboundSchema` instead. */
  export const inboundSchema = EmailRequest$inboundSchema;
  /** @deprecated use `EmailRequest$outboundSchema` instead. */
  export const outboundSchema = EmailRequest$outboundSchema;
  /** @deprecated use `EmailRequest$Outbound` instead. */
  export type Outbound = EmailRequest$Outbound;
}

export function emailRequestToJSON(emailRequest: EmailRequest): string {
  return JSON.stringify(EmailRequest$outboundSchema.parse(emailRequest));
}

export function emailRequestFromJSON(
  jsonString: string,
): SafeParseResult<EmailRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmailRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmailRequest' from JSON`,
  );
}
