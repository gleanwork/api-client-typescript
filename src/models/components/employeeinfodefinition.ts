/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AdditionalFieldDefinition,
  AdditionalFieldDefinition$inboundSchema,
  AdditionalFieldDefinition$Outbound,
  AdditionalFieldDefinition$outboundSchema,
} from "./additionalfielddefinition.js";
import {
  DatasourceProfile,
  DatasourceProfile$inboundSchema,
  DatasourceProfile$Outbound,
  DatasourceProfile$outboundSchema,
} from "./datasourceprofile.js";
import {
  EmployeeTeamInfo,
  EmployeeTeamInfo$inboundSchema,
  EmployeeTeamInfo$Outbound,
  EmployeeTeamInfo$outboundSchema,
} from "./employeeteaminfo.js";
import {
  EntityRelationship,
  EntityRelationship$inboundSchema,
  EntityRelationship$Outbound,
  EntityRelationship$outboundSchema,
} from "./entityrelationship.js";
import {
  SocialNetworkDefinition,
  SocialNetworkDefinition$inboundSchema,
  SocialNetworkDefinition$Outbound,
  SocialNetworkDefinition$outboundSchema,
} from "./socialnetworkdefinition.js";
import {
  StructuredLocation,
  StructuredLocation$inboundSchema,
  StructuredLocation$Outbound,
  StructuredLocation$outboundSchema,
} from "./structuredlocation.js";

/**
 * Describes employee info
 */
export type EmployeeInfoDefinition = {
  /**
   * The employee's email
   */
  email: string;
  /**
   * The first name of the employee. **Note**: The value cannot be empty
   *
   * @remarks
   */
  firstName?: string | undefined;
  /**
   * The last name of the employee. **Note**: The value cannot be empty
   *
   * @remarks
   */
  lastName?: string | undefined;
  /**
   * The preferred name or nickname of the employee
   */
  preferredName?: string | undefined;
  /**
   * **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
   *
   * @remarks
   */
  id?: string | undefined;
  /**
   * The employee's phone number.
   */
  phoneNumber?: string | undefined;
  /**
   * The employee's location (city/office name etc).
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  location?: string | undefined;
  /**
   * Detailed location with information about country, state, city etc.
   */
  structuredLocation?: StructuredLocation | undefined;
  /**
   * The employee's role title.
   */
  title?: string | undefined;
  /**
   * The employee's profile pic
   */
  photoUrl?: string | undefined;
  /**
   * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
   */
  businessUnit?: string | undefined;
  /**
   * An organizational unit where everyone has a similar task, e.g. `Engineering`.
   */
  department: string;
  /**
   * The datasource profiles of the employee, e.g. `Slack`,`Github`.
   */
  datasourceProfiles?: Array<DatasourceProfile> | undefined;
  /**
   * Info about the employee's team(s)
   */
  teams?: Array<EmployeeTeamInfo> | undefined;
  /**
   * The date when the employee started
   */
  startDate?: RFCDate | undefined;
  /**
   * If a former employee, the last date of employment.
   */
  endDate?: RFCDate | undefined;
  /**
   * Short biography or mission statement of the employee.
   */
  bio?: string | undefined;
  /**
   * She/her, He/his or other pronoun.
   */
  pronoun?: string | undefined;
  /**
   * Other names associated with the employee.
   */
  alsoKnownAs?: Array<string> | undefined;
  /**
   * Link to internal company person profile.
   */
  profileUrl?: string | undefined;
  /**
   * List of social network profiles.
   */
  socialNetworks?: Array<SocialNetworkDefinition> | undefined;
  /**
   * The email of the employee's manager
   */
  managerEmail?: string | undefined;
  /**
   * **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
   *
   * @remarks
   */
  managerId?: string | undefined;
  /**
   * The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
   */
  type?: string | undefined;
  /**
   * List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
   */
  relationships?: Array<EntityRelationship> | undefined;
  /**
   * The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
   */
  status?: string | undefined;
  /**
   * List of additional fields with more information about the employee.
   */
  additionalFields?: Array<AdditionalFieldDefinition> | undefined;
};

/** @internal */
export const EmployeeInfoDefinition$inboundSchema: z.ZodType<
  EmployeeInfoDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  preferredName: z.string().optional(),
  id: z.string().optional(),
  phoneNumber: z.string().optional(),
  location: z.string().optional(),
  structuredLocation: StructuredLocation$inboundSchema.optional(),
  title: z.string().optional(),
  photoUrl: z.string().optional(),
  businessUnit: z.string().optional(),
  department: z.string(),
  datasourceProfiles: z.array(DatasourceProfile$inboundSchema).optional(),
  teams: z.array(EmployeeTeamInfo$inboundSchema).optional(),
  startDate: z.string().transform(v => new RFCDate(v)).optional(),
  endDate: z.string().transform(v => new RFCDate(v)).optional(),
  bio: z.string().optional(),
  pronoun: z.string().optional(),
  alsoKnownAs: z.array(z.string()).optional(),
  profileUrl: z.string().optional(),
  socialNetworks: z.array(SocialNetworkDefinition$inboundSchema).optional(),
  managerEmail: z.string().optional(),
  managerId: z.string().optional(),
  type: z.string().default("FULL_TIME"),
  relationships: z.array(EntityRelationship$inboundSchema).optional(),
  status: z.string().default("CURRENT"),
  additionalFields: z.array(AdditionalFieldDefinition$inboundSchema).optional(),
});

/** @internal */
export type EmployeeInfoDefinition$Outbound = {
  email: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  preferredName?: string | undefined;
  id?: string | undefined;
  phoneNumber?: string | undefined;
  location?: string | undefined;
  structuredLocation?: StructuredLocation$Outbound | undefined;
  title?: string | undefined;
  photoUrl?: string | undefined;
  businessUnit?: string | undefined;
  department: string;
  datasourceProfiles?: Array<DatasourceProfile$Outbound> | undefined;
  teams?: Array<EmployeeTeamInfo$Outbound> | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  bio?: string | undefined;
  pronoun?: string | undefined;
  alsoKnownAs?: Array<string> | undefined;
  profileUrl?: string | undefined;
  socialNetworks?: Array<SocialNetworkDefinition$Outbound> | undefined;
  managerEmail?: string | undefined;
  managerId?: string | undefined;
  type: string;
  relationships?: Array<EntityRelationship$Outbound> | undefined;
  status: string;
  additionalFields?: Array<AdditionalFieldDefinition$Outbound> | undefined;
};

/** @internal */
export const EmployeeInfoDefinition$outboundSchema: z.ZodType<
  EmployeeInfoDefinition$Outbound,
  z.ZodTypeDef,
  EmployeeInfoDefinition
> = z.object({
  email: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  preferredName: z.string().optional(),
  id: z.string().optional(),
  phoneNumber: z.string().optional(),
  location: z.string().optional(),
  structuredLocation: StructuredLocation$outboundSchema.optional(),
  title: z.string().optional(),
  photoUrl: z.string().optional(),
  businessUnit: z.string().optional(),
  department: z.string(),
  datasourceProfiles: z.array(DatasourceProfile$outboundSchema).optional(),
  teams: z.array(EmployeeTeamInfo$outboundSchema).optional(),
  startDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  bio: z.string().optional(),
  pronoun: z.string().optional(),
  alsoKnownAs: z.array(z.string()).optional(),
  profileUrl: z.string().optional(),
  socialNetworks: z.array(SocialNetworkDefinition$outboundSchema).optional(),
  managerEmail: z.string().optional(),
  managerId: z.string().optional(),
  type: z.string().default("FULL_TIME"),
  relationships: z.array(EntityRelationship$outboundSchema).optional(),
  status: z.string().default("CURRENT"),
  additionalFields: z.array(AdditionalFieldDefinition$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeInfoDefinition$ {
  /** @deprecated use `EmployeeInfoDefinition$inboundSchema` instead. */
  export const inboundSchema = EmployeeInfoDefinition$inboundSchema;
  /** @deprecated use `EmployeeInfoDefinition$outboundSchema` instead. */
  export const outboundSchema = EmployeeInfoDefinition$outboundSchema;
  /** @deprecated use `EmployeeInfoDefinition$Outbound` instead. */
  export type Outbound = EmployeeInfoDefinition$Outbound;
}

export function employeeInfoDefinitionToJSON(
  employeeInfoDefinition: EmployeeInfoDefinition,
): string {
  return JSON.stringify(
    EmployeeInfoDefinition$outboundSchema.parse(employeeInfoDefinition),
  );
}

export function employeeInfoDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeInfoDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeInfoDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeInfoDefinition' from JSON`,
  );
}
