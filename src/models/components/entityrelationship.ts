/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes a relationship edge between a source and destination entity
 */
export type EntityRelationship = {
  /**
   * The title or type of relationship. Currently an enum of `CHIEF_OF_STAFF`, `EXECUTIVE_ASSISTANT`
   */
  name: string;
  /**
   * Email of the person with whom the relationship exists. Per the example above, either `B` or `C`'s email depending on the relationship.
   */
  email: string;
};

/** @internal */
export const EntityRelationship$inboundSchema: z.ZodType<
  EntityRelationship,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  email: z.string(),
});

/** @internal */
export type EntityRelationship$Outbound = {
  name: string;
  email: string;
};

/** @internal */
export const EntityRelationship$outboundSchema: z.ZodType<
  EntityRelationship$Outbound,
  z.ZodTypeDef,
  EntityRelationship
> = z.object({
  name: z.string(),
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EntityRelationship$ {
  /** @deprecated use `EntityRelationship$inboundSchema` instead. */
  export const inboundSchema = EntityRelationship$inboundSchema;
  /** @deprecated use `EntityRelationship$outboundSchema` instead. */
  export const outboundSchema = EntityRelationship$outboundSchema;
  /** @deprecated use `EntityRelationship$Outbound` instead. */
  export type Outbound = EntityRelationship$Outbound;
}

export function entityRelationshipToJSON(
  entityRelationship: EntityRelationship,
): string {
  return JSON.stringify(
    EntityRelationship$outboundSchema.parse(entityRelationship),
  );
}

export function entityRelationshipFromJSON(
  jsonString: string,
): SafeParseResult<EntityRelationship, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EntityRelationship$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EntityRelationship' from JSON`,
  );
}
