/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ErrorMessage,
  ErrorMessage$inboundSchema,
  ErrorMessage$Outbound,
  ErrorMessage$outboundSchema,
} from "./errormessage.js";
import {
  InvalidOperatorValueError,
  InvalidOperatorValueError$inboundSchema,
  InvalidOperatorValueError$Outbound,
  InvalidOperatorValueError$outboundSchema,
} from "./invalidoperatorvalueerror.js";

export type ErrorInfo = {
  /**
   * Indicates the gmail results could not be fetched due to bad token.
   */
  badGmailToken?: boolean | undefined;
  /**
   * Indicates the outlook results could not be fetched due to bad token.
   */
  badOutlookToken?: boolean | undefined;
  /**
   * Indicates results could not be fetched due to invalid operators in the query.
   */
  invalidOperators?: Array<InvalidOperatorValueError> | undefined;
  errorMessages?: Array<ErrorMessage> | undefined;
};

/** @internal */
export const ErrorInfo$inboundSchema: z.ZodType<
  ErrorInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  badGmailToken: z.boolean().optional(),
  badOutlookToken: z.boolean().optional(),
  invalidOperators: z.array(InvalidOperatorValueError$inboundSchema).optional(),
  errorMessages: z.array(ErrorMessage$inboundSchema).optional(),
});

/** @internal */
export type ErrorInfo$Outbound = {
  badGmailToken?: boolean | undefined;
  badOutlookToken?: boolean | undefined;
  invalidOperators?: Array<InvalidOperatorValueError$Outbound> | undefined;
  errorMessages?: Array<ErrorMessage$Outbound> | undefined;
};

/** @internal */
export const ErrorInfo$outboundSchema: z.ZodType<
  ErrorInfo$Outbound,
  z.ZodTypeDef,
  ErrorInfo
> = z.object({
  badGmailToken: z.boolean().optional(),
  badOutlookToken: z.boolean().optional(),
  invalidOperators: z.array(InvalidOperatorValueError$outboundSchema)
    .optional(),
  errorMessages: z.array(ErrorMessage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorInfo$ {
  /** @deprecated use `ErrorInfo$inboundSchema` instead. */
  export const inboundSchema = ErrorInfo$inboundSchema;
  /** @deprecated use `ErrorInfo$outboundSchema` instead. */
  export const outboundSchema = ErrorInfo$outboundSchema;
  /** @deprecated use `ErrorInfo$Outbound` instead. */
  export type Outbound = ErrorInfo$Outbound;
}

export function errorInfoToJSON(errorInfo: ErrorInfo): string {
  return JSON.stringify(ErrorInfo$outboundSchema.parse(errorInfo));
}

export function errorInfoFromJSON(
  jsonString: string,
): SafeParseResult<ErrorInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorInfo' from JSON`,
  );
}
