/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventClassificationName,
  EventClassificationName$inboundSchema,
  EventClassificationName$outboundSchema,
} from "./eventclassificationname.js";
import {
  EventStrategyName,
  EventStrategyName$inboundSchema,
  EventStrategyName$outboundSchema,
} from "./eventstrategyname.js";

/**
 * A generated classification of a given event.
 */
export type EventClassification = {
  /**
   * The name for a generated classification of an event.
   */
  name?: EventClassificationName | undefined;
  strategies?: Array<EventStrategyName> | undefined;
};

/** @internal */
export const EventClassification$inboundSchema: z.ZodType<
  EventClassification,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: EventClassificationName$inboundSchema.optional(),
  strategies: z.array(EventStrategyName$inboundSchema).optional(),
});

/** @internal */
export type EventClassification$Outbound = {
  name?: string | undefined;
  strategies?: Array<string> | undefined;
};

/** @internal */
export const EventClassification$outboundSchema: z.ZodType<
  EventClassification$Outbound,
  z.ZodTypeDef,
  EventClassification
> = z.object({
  name: EventClassificationName$outboundSchema.optional(),
  strategies: z.array(EventStrategyName$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventClassification$ {
  /** @deprecated use `EventClassification$inboundSchema` instead. */
  export const inboundSchema = EventClassification$inboundSchema;
  /** @deprecated use `EventClassification$outboundSchema` instead. */
  export const outboundSchema = EventClassification$outboundSchema;
  /** @deprecated use `EventClassification$Outbound` instead. */
  export type Outbound = EventClassification$Outbound;
}

export function eventClassificationToJSON(
  eventClassification: EventClassification,
): string {
  return JSON.stringify(
    EventClassification$outboundSchema.parse(eventClassification),
  );
}

export function eventClassificationFromJSON(
  jsonString: string,
): SafeParseResult<EventClassification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventClassification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventClassification' from JSON`,
  );
}
