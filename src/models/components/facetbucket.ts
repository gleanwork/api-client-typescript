/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetValue,
  FacetValue$inboundSchema,
  FacetValue$Outbound,
  FacetValue$outboundSchema,
} from "./facetvalue.js";

export type FacetBucket = {
  /**
   * Estimated number of results in this facet.
   */
  count?: number | undefined;
  /**
   * The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
   */
  datasource?: string | undefined;
  /**
   * Estimated percentage of results in this facet.
   */
  percentage?: number | undefined;
  value?: FacetValue | undefined;
};

/** @internal */
export const FacetBucket$inboundSchema: z.ZodType<
  FacetBucket,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  datasource: z.string().optional(),
  percentage: z.number().int().optional(),
  value: FacetValue$inboundSchema.optional(),
});

/** @internal */
export type FacetBucket$Outbound = {
  count?: number | undefined;
  datasource?: string | undefined;
  percentage?: number | undefined;
  value?: FacetValue$Outbound | undefined;
};

/** @internal */
export const FacetBucket$outboundSchema: z.ZodType<
  FacetBucket$Outbound,
  z.ZodTypeDef,
  FacetBucket
> = z.object({
  count: z.number().int().optional(),
  datasource: z.string().optional(),
  percentage: z.number().int().optional(),
  value: FacetValue$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FacetBucket$ {
  /** @deprecated use `FacetBucket$inboundSchema` instead. */
  export const inboundSchema = FacetBucket$inboundSchema;
  /** @deprecated use `FacetBucket$outboundSchema` instead. */
  export const outboundSchema = FacetBucket$outboundSchema;
  /** @deprecated use `FacetBucket$Outbound` instead. */
  export type Outbound = FacetBucket$Outbound;
}

export function facetBucketToJSON(facetBucket: FacetBucket): string {
  return JSON.stringify(FacetBucket$outboundSchema.parse(facetBucket));
}

export function facetBucketFromJSON(
  jsonString: string,
): SafeParseResult<FacetBucket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FacetBucket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FacetBucket' from JSON`,
  );
}
