/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";

/**
 * Within a single FacetFilterSet, the filters are treated as AND. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets.
 */
export type FacetFilterSet = {
  filters?: Array<FacetFilter> | undefined;
};

/** @internal */
export const FacetFilterSet$inboundSchema: z.ZodType<
  FacetFilterSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  filters: z.array(FacetFilter$inboundSchema).optional(),
});

/** @internal */
export type FacetFilterSet$Outbound = {
  filters?: Array<FacetFilter$Outbound> | undefined;
};

/** @internal */
export const FacetFilterSet$outboundSchema: z.ZodType<
  FacetFilterSet$Outbound,
  z.ZodTypeDef,
  FacetFilterSet
> = z.object({
  filters: z.array(FacetFilter$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FacetFilterSet$ {
  /** @deprecated use `FacetFilterSet$inboundSchema` instead. */
  export const inboundSchema = FacetFilterSet$inboundSchema;
  /** @deprecated use `FacetFilterSet$outboundSchema` instead. */
  export const outboundSchema = FacetFilterSet$outboundSchema;
  /** @deprecated use `FacetFilterSet$Outbound` instead. */
  export type Outbound = FacetFilterSet$Outbound;
}

export function facetFilterSetToJSON(facetFilterSet: FacetFilterSet): string {
  return JSON.stringify(FacetFilterSet$outboundSchema.parse(facetFilterSet));
}

export function facetFilterSetFromJSON(
  jsonString: string,
): SafeParseResult<FacetFilterSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FacetFilterSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FacetFilterSet' from JSON`,
  );
}
