/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RelationType = {
  Equals: "EQUALS",
  IdEquals: "ID_EQUALS",
  Lt: "LT",
  Gt: "GT",
} as const;
export type RelationType = ClosedEnum<typeof RelationType>;

export type FacetFilterValue = {
  value?: string | undefined;
  relationType?: RelationType | undefined;
  /**
   * DEPRECATED - please use relationType instead
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  isNegated?: boolean | undefined;
};

/** @internal */
export const RelationType$inboundSchema: z.ZodNativeEnum<typeof RelationType> =
  z.nativeEnum(RelationType);

/** @internal */
export const RelationType$outboundSchema: z.ZodNativeEnum<typeof RelationType> =
  RelationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelationType$ {
  /** @deprecated use `RelationType$inboundSchema` instead. */
  export const inboundSchema = RelationType$inboundSchema;
  /** @deprecated use `RelationType$outboundSchema` instead. */
  export const outboundSchema = RelationType$outboundSchema;
}

/** @internal */
export const FacetFilterValue$inboundSchema: z.ZodType<
  FacetFilterValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  relationType: RelationType$inboundSchema.optional(),
  isNegated: z.boolean().optional(),
});

/** @internal */
export type FacetFilterValue$Outbound = {
  value?: string | undefined;
  relationType?: string | undefined;
  isNegated?: boolean | undefined;
};

/** @internal */
export const FacetFilterValue$outboundSchema: z.ZodType<
  FacetFilterValue$Outbound,
  z.ZodTypeDef,
  FacetFilterValue
> = z.object({
  value: z.string().optional(),
  relationType: RelationType$outboundSchema.optional(),
  isNegated: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FacetFilterValue$ {
  /** @deprecated use `FacetFilterValue$inboundSchema` instead. */
  export const inboundSchema = FacetFilterValue$inboundSchema;
  /** @deprecated use `FacetFilterValue$outboundSchema` instead. */
  export const outboundSchema = FacetFilterValue$outboundSchema;
  /** @deprecated use `FacetFilterValue$Outbound` instead. */
  export type Outbound = FacetFilterValue$Outbound;
}

export function facetFilterValueToJSON(
  facetFilterValue: FacetFilterValue,
): string {
  return JSON.stringify(
    FacetFilterValue$outboundSchema.parse(facetFilterValue),
  );
}

export function facetFilterValueFromJSON(
  jsonString: string,
): SafeParseResult<FacetFilterValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FacetFilterValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FacetFilterValue' from JSON`,
  );
}
