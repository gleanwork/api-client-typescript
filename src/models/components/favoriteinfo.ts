/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UgcType,
  UgcType$inboundSchema,
  UgcType$outboundSchema,
} from "./ugctype.js";

export type FavoriteInfo = {
  ugcType?: UgcType | undefined;
  /**
   * Opaque id of the UGC.
   */
  id?: string | undefined;
  /**
   * Number of users this object has been favorited by.
   */
  count?: number | undefined;
  /**
   * If the requesting user has favorited this object.
   */
  favoritedByUser?: boolean | undefined;
};

/** @internal */
export const FavoriteInfo$inboundSchema: z.ZodType<
  FavoriteInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  ugcType: UgcType$inboundSchema.optional(),
  id: z.string().optional(),
  count: z.number().int().optional(),
  favoritedByUser: z.boolean().optional(),
});

/** @internal */
export type FavoriteInfo$Outbound = {
  ugcType?: string | undefined;
  id?: string | undefined;
  count?: number | undefined;
  favoritedByUser?: boolean | undefined;
};

/** @internal */
export const FavoriteInfo$outboundSchema: z.ZodType<
  FavoriteInfo$Outbound,
  z.ZodTypeDef,
  FavoriteInfo
> = z.object({
  ugcType: UgcType$outboundSchema.optional(),
  id: z.string().optional(),
  count: z.number().int().optional(),
  favoritedByUser: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FavoriteInfo$ {
  /** @deprecated use `FavoriteInfo$inboundSchema` instead. */
  export const inboundSchema = FavoriteInfo$inboundSchema;
  /** @deprecated use `FavoriteInfo$outboundSchema` instead. */
  export const outboundSchema = FavoriteInfo$outboundSchema;
  /** @deprecated use `FavoriteInfo$Outbound` instead. */
  export type Outbound = FavoriteInfo$Outbound;
}

export function favoriteInfoToJSON(favoriteInfo: FavoriteInfo): string {
  return JSON.stringify(FavoriteInfo$outboundSchema.parse(favoriteInfo));
}

export function favoriteInfoFromJSON(
  jsonString: string,
): SafeParseResult<FavoriteInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FavoriteInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FavoriteInfo' from JSON`,
  );
}
