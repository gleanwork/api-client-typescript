/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ManualFeedbackInfo,
  ManualFeedbackInfo$inboundSchema,
  ManualFeedbackInfo$Outbound,
  ManualFeedbackInfo$outboundSchema,
} from "./manualfeedbackinfo.js";
import {
  SeenFeedbackInfo,
  SeenFeedbackInfo$inboundSchema,
  SeenFeedbackInfo$Outbound,
  SeenFeedbackInfo$outboundSchema,
} from "./seenfeedbackinfo.js";
import {
  SessionInfo,
  SessionInfo$inboundSchema,
  SessionInfo$Outbound,
  SessionInfo$outboundSchema,
} from "./sessioninfo.js";
import {
  User,
  User$inboundSchema,
  User$Outbound,
  User$outboundSchema,
} from "./user.js";
import {
  UserViewInfo,
  UserViewInfo$inboundSchema,
  UserViewInfo$Outbound,
  UserViewInfo$outboundSchema,
} from "./userviewinfo.js";
import {
  WorkflowFeedbackInfo,
  WorkflowFeedbackInfo$inboundSchema,
  WorkflowFeedbackInfo$Outbound,
  WorkflowFeedbackInfo$outboundSchema,
} from "./workflowfeedbackinfo.js";

/**
 * The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.
 */
export const FeedbackCategory = {
  Announcement: "ANNOUNCEMENT",
  Autocomplete: "AUTOCOMPLETE",
  Collections: "COLLECTIONS",
  Feed: "FEED",
  Search: "SEARCH",
  Chat: "CHAT",
  Ntp: "NTP",
  Workflows: "WORKFLOWS",
  Summary: "SUMMARY",
  General: "GENERAL",
  Prompts: "PROMPTS",
} as const;
/**
 * The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.
 */
export type FeedbackCategory = ClosedEnum<typeof FeedbackCategory>;

/**
 * The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`.
 */
export const Event = {
  Click: "CLICK",
  ContainerClick: "CONTAINER_CLICK",
  CopyLink: "COPY_LINK",
  Create: "CREATE",
  Dismiss: "DISMISS",
  Downvote: "DOWNVOTE",
  Email: "EMAIL",
  Execute: "EXECUTE",
  Filter: "FILTER",
  FirstToken: "FIRST_TOKEN",
  FocusIn: "FOCUS_IN",
  LastToken: "LAST_TOKEN",
  ManualFeedback: "MANUAL_FEEDBACK",
  MarkAsRead: "MARK_AS_READ",
  Message: "MESSAGE",
  MiddleClick: "MIDDLE_CLICK",
  PageBlur: "PAGE_BLUR",
  PageFocus: "PAGE_FOCUS",
  PageLeave: "PAGE_LEAVE",
  Preview: "PREVIEW",
  RelatedClick: "RELATED_CLICK",
  RightClick: "RIGHT_CLICK",
  SectionClick: "SECTION_CLICK",
  Seen: "SEEN",
  Share: "SHARE",
  ShowMore: "SHOW_MORE",
  Upvote: "UPVOTE",
  View: "VIEW",
  Visible: "VISIBLE",
} as const;
/**
 * The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`.
 */
export type Event = ClosedEnum<typeof Event>;

export const FeedbackChannel = {
  Company: "COMPANY",
  Glean: "GLEAN",
} as const;
export type FeedbackChannel = ClosedEnum<typeof FeedbackChannel>;

export type Feedback = {
  /**
   * Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
   */
  id?: string | undefined;
  /**
   * The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.
   */
  category?: FeedbackCategory | undefined;
  /**
   * A list of server-generated trackingTokens to which this event applies.
   */
  trackingTokens: Array<string>;
  /**
   * The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`.
   */
  event: Event;
  /**
   * Position of the element in the case that the client controls order (such as feed and autocomplete).
   */
  position?: number | undefined;
  /**
   * For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content.
   */
  payload?: string | undefined;
  sessionInfo?: SessionInfo | undefined;
  /**
   * The ISO 8601 timestamp when the event occured.
   */
  timestamp?: Date | undefined;
  user?: User | undefined;
  /**
   * The path the client was at when the feedback event triggered.
   */
  pathname?: string | undefined;
  /**
   * Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.
   */
  channels?: Array<FeedbackChannel> | undefined;
  /**
   * The URL the client was at when the feedback event triggered.
   */
  url?: string | undefined;
  /**
   * The UI element tree associated with the event, if any.
   */
  uiTree?: Array<string> | undefined;
  /**
   * The UI element associated with the event, if any.
   */
  uiElement?: string | undefined;
  manualFeedbackInfo?: ManualFeedbackInfo | undefined;
  seenFeedbackInfo?: SeenFeedbackInfo | undefined;
  userViewInfo?: UserViewInfo | undefined;
  workflowFeedbackInfo?: WorkflowFeedbackInfo | undefined;
  /**
   * The application ID of the client that sent the feedback event.
   */
  applicationId?: string | undefined;
  /**
   * The agent ID of the client that sent the feedback event.
   */
  agentId?: string | undefined;
};

/** @internal */
export const FeedbackCategory$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackCategory
> = z.nativeEnum(FeedbackCategory);

/** @internal */
export const FeedbackCategory$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackCategory
> = FeedbackCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackCategory$ {
  /** @deprecated use `FeedbackCategory$inboundSchema` instead. */
  export const inboundSchema = FeedbackCategory$inboundSchema;
  /** @deprecated use `FeedbackCategory$outboundSchema` instead. */
  export const outboundSchema = FeedbackCategory$outboundSchema;
}

/** @internal */
export const Event$inboundSchema: z.ZodNativeEnum<typeof Event> = z.nativeEnum(
  Event,
);

/** @internal */
export const Event$outboundSchema: z.ZodNativeEnum<typeof Event> =
  Event$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
}

/** @internal */
export const FeedbackChannel$inboundSchema: z.ZodNativeEnum<
  typeof FeedbackChannel
> = z.nativeEnum(FeedbackChannel);

/** @internal */
export const FeedbackChannel$outboundSchema: z.ZodNativeEnum<
  typeof FeedbackChannel
> = FeedbackChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackChannel$ {
  /** @deprecated use `FeedbackChannel$inboundSchema` instead. */
  export const inboundSchema = FeedbackChannel$inboundSchema;
  /** @deprecated use `FeedbackChannel$outboundSchema` instead. */
  export const outboundSchema = FeedbackChannel$outboundSchema;
}

/** @internal */
export const Feedback$inboundSchema: z.ZodType<
  Feedback,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  category: FeedbackCategory$inboundSchema.optional(),
  trackingTokens: z.array(z.string()),
  event: Event$inboundSchema,
  position: z.number().int().optional(),
  payload: z.string().optional(),
  sessionInfo: SessionInfo$inboundSchema.optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  user: User$inboundSchema.optional(),
  pathname: z.string().optional(),
  channels: z.array(FeedbackChannel$inboundSchema).optional(),
  url: z.string().optional(),
  uiTree: z.array(z.string()).optional(),
  uiElement: z.string().optional(),
  manualFeedbackInfo: ManualFeedbackInfo$inboundSchema.optional(),
  seenFeedbackInfo: SeenFeedbackInfo$inboundSchema.optional(),
  userViewInfo: UserViewInfo$inboundSchema.optional(),
  workflowFeedbackInfo: WorkflowFeedbackInfo$inboundSchema.optional(),
  applicationId: z.string().optional(),
  agentId: z.string().optional(),
});

/** @internal */
export type Feedback$Outbound = {
  id?: string | undefined;
  category?: string | undefined;
  trackingTokens: Array<string>;
  event: string;
  position?: number | undefined;
  payload?: string | undefined;
  sessionInfo?: SessionInfo$Outbound | undefined;
  timestamp?: string | undefined;
  user?: User$Outbound | undefined;
  pathname?: string | undefined;
  channels?: Array<string> | undefined;
  url?: string | undefined;
  uiTree?: Array<string> | undefined;
  uiElement?: string | undefined;
  manualFeedbackInfo?: ManualFeedbackInfo$Outbound | undefined;
  seenFeedbackInfo?: SeenFeedbackInfo$Outbound | undefined;
  userViewInfo?: UserViewInfo$Outbound | undefined;
  workflowFeedbackInfo?: WorkflowFeedbackInfo$Outbound | undefined;
  applicationId?: string | undefined;
  agentId?: string | undefined;
};

/** @internal */
export const Feedback$outboundSchema: z.ZodType<
  Feedback$Outbound,
  z.ZodTypeDef,
  Feedback
> = z.object({
  id: z.string().optional(),
  category: FeedbackCategory$outboundSchema.optional(),
  trackingTokens: z.array(z.string()),
  event: Event$outboundSchema,
  position: z.number().int().optional(),
  payload: z.string().optional(),
  sessionInfo: SessionInfo$outboundSchema.optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  user: User$outboundSchema.optional(),
  pathname: z.string().optional(),
  channels: z.array(FeedbackChannel$outboundSchema).optional(),
  url: z.string().optional(),
  uiTree: z.array(z.string()).optional(),
  uiElement: z.string().optional(),
  manualFeedbackInfo: ManualFeedbackInfo$outboundSchema.optional(),
  seenFeedbackInfo: SeenFeedbackInfo$outboundSchema.optional(),
  userViewInfo: UserViewInfo$outboundSchema.optional(),
  workflowFeedbackInfo: WorkflowFeedbackInfo$outboundSchema.optional(),
  applicationId: z.string().optional(),
  agentId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Feedback$ {
  /** @deprecated use `Feedback$inboundSchema` instead. */
  export const inboundSchema = Feedback$inboundSchema;
  /** @deprecated use `Feedback$outboundSchema` instead. */
  export const outboundSchema = Feedback$outboundSchema;
  /** @deprecated use `Feedback$Outbound` instead. */
  export type Outbound = Feedback$Outbound;
}

export function feedbackToJSON(feedback: Feedback): string {
  return JSON.stringify(Feedback$outboundSchema.parse(feedback));
}

export function feedbackFromJSON(
  jsonString: string,
): SafeParseResult<Feedback, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Feedback$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Feedback' from JSON`,
  );
}
