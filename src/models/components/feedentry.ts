/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Announcement,
  Announcement$inboundSchema,
  Announcement$Outbound,
  Announcement$outboundSchema,
} from "./announcement.js";
import {
  AppResult,
  AppResult$inboundSchema,
  AppResult$Outbound,
  AppResult$outboundSchema,
} from "./appresult.js";
import {
  CalendarEvent,
  CalendarEvent$inboundSchema,
  CalendarEvent$Outbound,
  CalendarEvent$outboundSchema,
} from "./calendarevent.js";
import {
  Collection,
  Collection$inboundSchema,
  Collection$Outbound,
  Collection$outboundSchema,
} from "./collection.js";
import {
  CollectionItem,
  CollectionItem$inboundSchema,
  CollectionItem$Outbound,
  CollectionItem$outboundSchema,
} from "./collectionitem.js";
import {
  CountInfo,
  CountInfo$inboundSchema,
  CountInfo$Outbound,
  CountInfo$outboundSchema,
} from "./countinfo.js";
import {
  DisplayableListItemUIConfig,
  DisplayableListItemUIConfig$inboundSchema,
  DisplayableListItemUIConfig$Outbound,
  DisplayableListItemUIConfig$outboundSchema,
} from "./displayablelistitemuiconfig.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";
import {
  PromptTemplateResult,
  PromptTemplateResult$inboundSchema,
  PromptTemplateResult$Outbound,
  PromptTemplateResult$outboundSchema,
} from "./prompttemplateresult.js";
import {
  Thumbnail,
  Thumbnail$inboundSchema,
  Thumbnail$Outbound,
  Thumbnail$outboundSchema,
} from "./thumbnail.js";
import {
  UserActivity,
  UserActivity$inboundSchema,
  UserActivity$Outbound,
  UserActivity$outboundSchema,
} from "./useractivity.js";
import {
  WorkflowResult,
  WorkflowResult$inboundSchema,
  WorkflowResult$Outbound,
  WorkflowResult$outboundSchema,
} from "./workflowresult.js";

/**
 * defines how to render this particular displayable list card
 */
export const FeedEntryFormat = {
  List: "LIST",
} as const;
/**
 * defines how to render this particular displayable list card
 */
export type FeedEntryFormat = ClosedEnum<typeof FeedEntryFormat>;

export type UiConfig = {
  /**
   * defines how to render this particular displayable list card
   */
  format?: FeedEntryFormat | undefined;
  /**
   * UI configurations for each item of the list
   */
  additionalFlags?: DisplayableListItemUIConfig | undefined;
};

/**
 * Type of the justification.
 */
export const JustificationType = {
  FrequentlyAccessed: "FREQUENTLY_ACCESSED",
  RecentlyAccessed: "RECENTLY_ACCESSED",
  TrendingDocument: "TRENDING_DOCUMENT",
  VerificationReminder: "VERIFICATION_REMINDER",
  SuggestedDocument: "SUGGESTED_DOCUMENT",
  EmptyStateSuggestion: "EMPTY_STATE_SUGGESTION",
  FrecencyScored: "FRECENCY_SCORED",
  ServerGenerated: "SERVER_GENERATED",
  UseCase: "USE_CASE",
  UpdateSinceLastView: "UPDATE_SINCE_LAST_VIEW",
  RecentlyStarted: "RECENTLY_STARTED",
  Event: "EVENT",
  UserMention: "USER_MENTION",
  Announcement: "ANNOUNCEMENT",
  ExternalAnnouncement: "EXTERNAL_ANNOUNCEMENT",
  PopularityBasedTrending: "POPULARITY_BASED_TRENDING",
  CompanyResource: "COMPANY_RESOURCE",
  EventDocumentFromContent: "EVENT_DOCUMENT_FROM_CONTENT",
  EventDocumentFromSearch: "EVENT_DOCUMENT_FROM_SEARCH",
  VisitAffinityScored: "VISIT_AFFINITY_SCORED",
  SuggestedApp: "SUGGESTED_APP",
  SuggestedPerson: "SUGGESTED_PERSON",
  ActivityHighlight: "ACTIVITY_HIGHLIGHT",
  SavedSearch: "SAVED_SEARCH",
  SuggestedChannel: "SUGGESTED_CHANNEL",
  PeopleCelebrations: "PEOPLE_CELEBRATIONS",
  SocialLink: "SOCIAL_LINK",
  ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION",
  ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION",
  ZeroStatePromptTemplateSuggestion: "ZERO_STATE_PROMPT_TEMPLATE_SUGGESTION",
  ZeroStateStaticWorkflowSuggestion: "ZERO_STATE_STATIC_WORKFLOW_SUGGESTION",
  ZeroStateAgentSuggestion: "ZERO_STATE_AGENT_SUGGESTION",
} as const;
/**
 * Type of the justification.
 */
export type JustificationType = ClosedEnum<typeof JustificationType>;

export type FeedEntry = {
  /**
   * optional ID associated with a single feed entry (displayable_list_id)
   */
  entryId?: string | undefined;
  /**
   * Title for the result. Can be document title, event title and so on.
   */
  title: string;
  thumbnail?: Thumbnail | undefined;
  createdBy?: Person | undefined;
  uiConfig?: UiConfig | undefined;
  /**
   * Type of the justification.
   */
  justificationType?: JustificationType | undefined;
  /**
   * Server side generated justification string if server provides one.
   */
  justification?: string | undefined;
  /**
   * An opaque token that represents this particular feed entry in this particular response. To be used for /feedback reporting.
   */
  trackingToken?: string | undefined;
  /**
   * View URL for the entry if based on links that are not documents in Glean.
   */
  viewUrl?: string | undefined;
  document?: Document | undefined;
  event?: CalendarEvent | undefined;
  announcement?: Announcement | undefined;
  collection?: Collection | undefined;
  collectionItem?: CollectionItem | undefined;
  person?: Person | undefined;
  app?: AppResult | undefined;
  promptTemplate?: PromptTemplateResult | undefined;
  workflow?: WorkflowResult | undefined;
  /**
   * List of activity where each activity has user, action, timestamp.
   */
  activities?: Array<UserActivity> | undefined;
  documentVisitorCount?: CountInfo | undefined;
};

/** @internal */
export const FeedEntryFormat$inboundSchema: z.ZodNativeEnum<
  typeof FeedEntryFormat
> = z.nativeEnum(FeedEntryFormat);

/** @internal */
export const FeedEntryFormat$outboundSchema: z.ZodNativeEnum<
  typeof FeedEntryFormat
> = FeedEntryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedEntryFormat$ {
  /** @deprecated use `FeedEntryFormat$inboundSchema` instead. */
  export const inboundSchema = FeedEntryFormat$inboundSchema;
  /** @deprecated use `FeedEntryFormat$outboundSchema` instead. */
  export const outboundSchema = FeedEntryFormat$outboundSchema;
}

/** @internal */
export const UiConfig$inboundSchema: z.ZodType<
  UiConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: FeedEntryFormat$inboundSchema.optional(),
  additionalFlags: DisplayableListItemUIConfig$inboundSchema.optional(),
});

/** @internal */
export type UiConfig$Outbound = {
  format?: string | undefined;
  additionalFlags?: DisplayableListItemUIConfig$Outbound | undefined;
};

/** @internal */
export const UiConfig$outboundSchema: z.ZodType<
  UiConfig$Outbound,
  z.ZodTypeDef,
  UiConfig
> = z.object({
  format: FeedEntryFormat$outboundSchema.optional(),
  additionalFlags: DisplayableListItemUIConfig$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UiConfig$ {
  /** @deprecated use `UiConfig$inboundSchema` instead. */
  export const inboundSchema = UiConfig$inboundSchema;
  /** @deprecated use `UiConfig$outboundSchema` instead. */
  export const outboundSchema = UiConfig$outboundSchema;
  /** @deprecated use `UiConfig$Outbound` instead. */
  export type Outbound = UiConfig$Outbound;
}

export function uiConfigToJSON(uiConfig: UiConfig): string {
  return JSON.stringify(UiConfig$outboundSchema.parse(uiConfig));
}

export function uiConfigFromJSON(
  jsonString: string,
): SafeParseResult<UiConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UiConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UiConfig' from JSON`,
  );
}

/** @internal */
export const JustificationType$inboundSchema: z.ZodNativeEnum<
  typeof JustificationType
> = z.nativeEnum(JustificationType);

/** @internal */
export const JustificationType$outboundSchema: z.ZodNativeEnum<
  typeof JustificationType
> = JustificationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JustificationType$ {
  /** @deprecated use `JustificationType$inboundSchema` instead. */
  export const inboundSchema = JustificationType$inboundSchema;
  /** @deprecated use `JustificationType$outboundSchema` instead. */
  export const outboundSchema = JustificationType$outboundSchema;
}

/** @internal */
export const FeedEntry$inboundSchema: z.ZodType<
  FeedEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  entryId: z.string().optional(),
  title: z.string(),
  thumbnail: Thumbnail$inboundSchema.optional(),
  createdBy: Person$inboundSchema.optional(),
  uiConfig: z.lazy(() => UiConfig$inboundSchema).optional(),
  justificationType: JustificationType$inboundSchema.optional(),
  justification: z.string().optional(),
  trackingToken: z.string().optional(),
  viewUrl: z.string().optional(),
  document: Document$inboundSchema.optional(),
  event: CalendarEvent$inboundSchema.optional(),
  announcement: Announcement$inboundSchema.optional(),
  collection: Collection$inboundSchema.optional(),
  collectionItem: CollectionItem$inboundSchema.optional(),
  person: Person$inboundSchema.optional(),
  app: AppResult$inboundSchema.optional(),
  promptTemplate: PromptTemplateResult$inboundSchema.optional(),
  workflow: WorkflowResult$inboundSchema.optional(),
  activities: z.array(UserActivity$inboundSchema).optional(),
  documentVisitorCount: CountInfo$inboundSchema.optional(),
});

/** @internal */
export type FeedEntry$Outbound = {
  entryId?: string | undefined;
  title: string;
  thumbnail?: Thumbnail$Outbound | undefined;
  createdBy?: Person$Outbound | undefined;
  uiConfig?: UiConfig$Outbound | undefined;
  justificationType?: string | undefined;
  justification?: string | undefined;
  trackingToken?: string | undefined;
  viewUrl?: string | undefined;
  document?: Document$Outbound | undefined;
  event?: CalendarEvent$Outbound | undefined;
  announcement?: Announcement$Outbound | undefined;
  collection?: Collection$Outbound | undefined;
  collectionItem?: CollectionItem$Outbound | undefined;
  person?: Person$Outbound | undefined;
  app?: AppResult$Outbound | undefined;
  promptTemplate?: PromptTemplateResult$Outbound | undefined;
  workflow?: WorkflowResult$Outbound | undefined;
  activities?: Array<UserActivity$Outbound> | undefined;
  documentVisitorCount?: CountInfo$Outbound | undefined;
};

/** @internal */
export const FeedEntry$outboundSchema: z.ZodType<
  FeedEntry$Outbound,
  z.ZodTypeDef,
  FeedEntry
> = z.object({
  entryId: z.string().optional(),
  title: z.string(),
  thumbnail: Thumbnail$outboundSchema.optional(),
  createdBy: Person$outboundSchema.optional(),
  uiConfig: z.lazy(() => UiConfig$outboundSchema).optional(),
  justificationType: JustificationType$outboundSchema.optional(),
  justification: z.string().optional(),
  trackingToken: z.string().optional(),
  viewUrl: z.string().optional(),
  document: Document$outboundSchema.optional(),
  event: CalendarEvent$outboundSchema.optional(),
  announcement: Announcement$outboundSchema.optional(),
  collection: Collection$outboundSchema.optional(),
  collectionItem: CollectionItem$outboundSchema.optional(),
  person: Person$outboundSchema.optional(),
  app: AppResult$outboundSchema.optional(),
  promptTemplate: PromptTemplateResult$outboundSchema.optional(),
  workflow: WorkflowResult$outboundSchema.optional(),
  activities: z.array(UserActivity$outboundSchema).optional(),
  documentVisitorCount: CountInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedEntry$ {
  /** @deprecated use `FeedEntry$inboundSchema` instead. */
  export const inboundSchema = FeedEntry$inboundSchema;
  /** @deprecated use `FeedEntry$outboundSchema` instead. */
  export const outboundSchema = FeedEntry$outboundSchema;
  /** @deprecated use `FeedEntry$Outbound` instead. */
  export type Outbound = FeedEntry$Outbound;
}

export function feedEntryToJSON(feedEntry: FeedEntry): string {
  return JSON.stringify(FeedEntry$outboundSchema.parse(feedEntry));
}

export function feedEntryFromJSON(
  jsonString: string,
): SafeParseResult<FeedEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedEntry' from JSON`,
  );
}
