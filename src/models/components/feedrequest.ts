/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedRequestOptions,
  FeedRequestOptions$inboundSchema,
  FeedRequestOptions$Outbound,
  FeedRequestOptions$outboundSchema,
} from "./feedrequestoptions.js";
import {
  SessionInfo,
  SessionInfo$inboundSchema,
  SessionInfo$Outbound,
  SessionInfo$outboundSchema,
} from "./sessioninfo.js";

export const FeedRequestCategory = {
  DocumentSuggestion: "DOCUMENT_SUGGESTION",
  DocumentSuggestionScenario: "DOCUMENT_SUGGESTION_SCENARIO",
  TrendingDocument: "TRENDING_DOCUMENT",
  VerificationReminder: "VERIFICATION_REMINDER",
  Event: "EVENT",
  Announcement: "ANNOUNCEMENT",
  Mention: "MENTION",
  DatasourceAffinity: "DATASOURCE_AFFINITY",
  Recent: "RECENT",
  CompanyResource: "COMPANY_RESOURCE",
  Experimental: "EXPERIMENTAL",
  PeopleCelebrations: "PEOPLE_CELEBRATIONS",
  DisplayableList: "DISPLAYABLE_LIST",
  SocialLink: "SOCIAL_LINK",
  ExternalTasks: "EXTERNAL_TASKS",
  ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION",
  ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION",
  ZeroStateWorkflowCreatedByMe: "ZERO_STATE_WORKFLOW_CREATED_BY_ME",
  ZeroStateWorkflowFavorites: "ZERO_STATE_WORKFLOW_FAVORITES",
  ZeroStateWorkflowPopular: "ZERO_STATE_WORKFLOW_POPULAR",
  ZeroStateWorkflowSuggestion: "ZERO_STATE_WORKFLOW_SUGGESTION",
} as const;
export type FeedRequestCategory = ClosedEnum<typeof FeedRequestCategory>;

export type FeedRequest = {
  /**
   * Categories of content requested. An allowlist gives flexibility to request content separately or together.
   */
  categories?: Array<FeedRequestCategory> | undefined;
  requestOptions?: FeedRequestOptions | undefined;
  /**
   * Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
   */
  timeoutMillis?: number | undefined;
  sessionInfo?: SessionInfo | undefined;
};

/** @internal */
export const FeedRequestCategory$inboundSchema: z.ZodNativeEnum<
  typeof FeedRequestCategory
> = z.nativeEnum(FeedRequestCategory);

/** @internal */
export const FeedRequestCategory$outboundSchema: z.ZodNativeEnum<
  typeof FeedRequestCategory
> = FeedRequestCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedRequestCategory$ {
  /** @deprecated use `FeedRequestCategory$inboundSchema` instead. */
  export const inboundSchema = FeedRequestCategory$inboundSchema;
  /** @deprecated use `FeedRequestCategory$outboundSchema` instead. */
  export const outboundSchema = FeedRequestCategory$outboundSchema;
}

/** @internal */
export const FeedRequest$inboundSchema: z.ZodType<
  FeedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  categories: z.array(FeedRequestCategory$inboundSchema).optional(),
  requestOptions: FeedRequestOptions$inboundSchema.optional(),
  timeoutMillis: z.number().int().optional(),
  sessionInfo: SessionInfo$inboundSchema.optional(),
});

/** @internal */
export type FeedRequest$Outbound = {
  categories?: Array<string> | undefined;
  requestOptions?: FeedRequestOptions$Outbound | undefined;
  timeoutMillis?: number | undefined;
  sessionInfo?: SessionInfo$Outbound | undefined;
};

/** @internal */
export const FeedRequest$outboundSchema: z.ZodType<
  FeedRequest$Outbound,
  z.ZodTypeDef,
  FeedRequest
> = z.object({
  categories: z.array(FeedRequestCategory$outboundSchema).optional(),
  requestOptions: FeedRequestOptions$outboundSchema.optional(),
  timeoutMillis: z.number().int().optional(),
  sessionInfo: SessionInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedRequest$ {
  /** @deprecated use `FeedRequest$inboundSchema` instead. */
  export const inboundSchema = FeedRequest$inboundSchema;
  /** @deprecated use `FeedRequest$outboundSchema` instead. */
  export const outboundSchema = FeedRequest$outboundSchema;
  /** @deprecated use `FeedRequest$Outbound` instead. */
  export type Outbound = FeedRequest$Outbound;
}

export function feedRequestToJSON(feedRequest: FeedRequest): string {
  return JSON.stringify(FeedRequest$outboundSchema.parse(feedRequest));
}

export function feedRequestFromJSON(
  jsonString: string,
): SafeParseResult<FeedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedRequest' from JSON`,
  );
}
