/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatZeroStateSuggestionOptions,
  ChatZeroStateSuggestionOptions$inboundSchema,
  ChatZeroStateSuggestionOptions$Outbound,
  ChatZeroStateSuggestionOptions$outboundSchema,
} from "./chatzerostatesuggestionoptions.js";

export type CategoryToResultSize = {
  resultSize?: number | undefined;
};

export type FeedRequestOptions = {
  /**
   * Number of results asked in response. If a result is a collection, counts as one.
   */
  resultSize: number;
  /**
   * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
   */
  timezoneOffset?: number | undefined;
  /**
   * Mapping from category to number of results asked for the category.
   */
  categoryToResultSize?: { [k: string]: CategoryToResultSize } | undefined;
  /**
   * Datasources for which content should be included. Empty is for all.
   */
  datasourceFilter?: Array<string> | undefined;
  chatZeroStateSuggestionOptions?: ChatZeroStateSuggestionOptions | undefined;
};

/** @internal */
export const CategoryToResultSize$inboundSchema: z.ZodType<
  CategoryToResultSize,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultSize: z.number().int().optional(),
});

/** @internal */
export type CategoryToResultSize$Outbound = {
  resultSize?: number | undefined;
};

/** @internal */
export const CategoryToResultSize$outboundSchema: z.ZodType<
  CategoryToResultSize$Outbound,
  z.ZodTypeDef,
  CategoryToResultSize
> = z.object({
  resultSize: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryToResultSize$ {
  /** @deprecated use `CategoryToResultSize$inboundSchema` instead. */
  export const inboundSchema = CategoryToResultSize$inboundSchema;
  /** @deprecated use `CategoryToResultSize$outboundSchema` instead. */
  export const outboundSchema = CategoryToResultSize$outboundSchema;
  /** @deprecated use `CategoryToResultSize$Outbound` instead. */
  export type Outbound = CategoryToResultSize$Outbound;
}

export function categoryToResultSizeToJSON(
  categoryToResultSize: CategoryToResultSize,
): string {
  return JSON.stringify(
    CategoryToResultSize$outboundSchema.parse(categoryToResultSize),
  );
}

export function categoryToResultSizeFromJSON(
  jsonString: string,
): SafeParseResult<CategoryToResultSize, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoryToResultSize$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoryToResultSize' from JSON`,
  );
}

/** @internal */
export const FeedRequestOptions$inboundSchema: z.ZodType<
  FeedRequestOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  resultSize: z.number().int(),
  timezoneOffset: z.number().int().optional(),
  categoryToResultSize: z.record(
    z.lazy(() => CategoryToResultSize$inboundSchema),
  ).optional(),
  datasourceFilter: z.array(z.string()).optional(),
  chatZeroStateSuggestionOptions: ChatZeroStateSuggestionOptions$inboundSchema
    .optional(),
});

/** @internal */
export type FeedRequestOptions$Outbound = {
  resultSize: number;
  timezoneOffset?: number | undefined;
  categoryToResultSize?:
    | { [k: string]: CategoryToResultSize$Outbound }
    | undefined;
  datasourceFilter?: Array<string> | undefined;
  chatZeroStateSuggestionOptions?:
    | ChatZeroStateSuggestionOptions$Outbound
    | undefined;
};

/** @internal */
export const FeedRequestOptions$outboundSchema: z.ZodType<
  FeedRequestOptions$Outbound,
  z.ZodTypeDef,
  FeedRequestOptions
> = z.object({
  resultSize: z.number().int(),
  timezoneOffset: z.number().int().optional(),
  categoryToResultSize: z.record(
    z.lazy(() => CategoryToResultSize$outboundSchema),
  ).optional(),
  datasourceFilter: z.array(z.string()).optional(),
  chatZeroStateSuggestionOptions: ChatZeroStateSuggestionOptions$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedRequestOptions$ {
  /** @deprecated use `FeedRequestOptions$inboundSchema` instead. */
  export const inboundSchema = FeedRequestOptions$inboundSchema;
  /** @deprecated use `FeedRequestOptions$outboundSchema` instead. */
  export const outboundSchema = FeedRequestOptions$outboundSchema;
  /** @deprecated use `FeedRequestOptions$Outbound` instead. */
  export type Outbound = FeedRequestOptions$Outbound;
}

export function feedRequestOptionsToJSON(
  feedRequestOptions: FeedRequestOptions,
): string {
  return JSON.stringify(
    FeedRequestOptions$outboundSchema.parse(feedRequestOptions),
  );
}

export function feedRequestOptionsFromJSON(
  jsonString: string,
): SafeParseResult<FeedRequestOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedRequestOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedRequestOptions' from JSON`,
  );
}
