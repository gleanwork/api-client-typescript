/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetResult,
  FacetResult$inboundSchema,
  FacetResult$Outbound,
  FacetResult$outboundSchema,
} from "./facetresult.js";
import {
  FeedResult,
  FeedResult$inboundSchema,
  FeedResult$Outbound,
  FeedResult$outboundSchema,
} from "./feedresult.js";

export type FeedResponse = {
  /**
   * List of experiment ids for the corresponding request.
   */
  experimentIds?: Array<number> | undefined;
  /**
   * An opaque token that represents this particular feed response.
   */
  trackingToken?: string | undefined;
  /**
   * Server unix timestamp (in seconds since epoch UTC).
   */
  serverTimestamp: number;
  results?: Array<FeedResult> | undefined;
  /**
   * Map from category to the list of facets that can be used to filter the entry's content.
   */
  facetResults?: { [k: string]: Array<FacetResult> } | undefined;
  /**
   * The time window (in hours) used for generating user mentions.
   */
  mentionsTimeWindowInHours?: number | undefined;
};

/** @internal */
export const FeedResponse$inboundSchema: z.ZodType<
  FeedResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  experimentIds: z.array(z.number().int()).optional(),
  trackingToken: z.string().optional(),
  serverTimestamp: z.number().int(),
  results: z.array(FeedResult$inboundSchema).optional(),
  facetResults: z.record(z.array(FacetResult$inboundSchema)).optional(),
  mentionsTimeWindowInHours: z.number().int().optional(),
});

/** @internal */
export type FeedResponse$Outbound = {
  experimentIds?: Array<number> | undefined;
  trackingToken?: string | undefined;
  serverTimestamp: number;
  results?: Array<FeedResult$Outbound> | undefined;
  facetResults?: { [k: string]: Array<FacetResult$Outbound> } | undefined;
  mentionsTimeWindowInHours?: number | undefined;
};

/** @internal */
export const FeedResponse$outboundSchema: z.ZodType<
  FeedResponse$Outbound,
  z.ZodTypeDef,
  FeedResponse
> = z.object({
  experimentIds: z.array(z.number().int()).optional(),
  trackingToken: z.string().optional(),
  serverTimestamp: z.number().int(),
  results: z.array(FeedResult$outboundSchema).optional(),
  facetResults: z.record(z.array(FacetResult$outboundSchema)).optional(),
  mentionsTimeWindowInHours: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedResponse$ {
  /** @deprecated use `FeedResponse$inboundSchema` instead. */
  export const inboundSchema = FeedResponse$inboundSchema;
  /** @deprecated use `FeedResponse$outboundSchema` instead. */
  export const outboundSchema = FeedResponse$outboundSchema;
  /** @deprecated use `FeedResponse$Outbound` instead. */
  export type Outbound = FeedResponse$Outbound;
}

export function feedResponseToJSON(feedResponse: FeedResponse): string {
  return JSON.stringify(FeedResponse$outboundSchema.parse(feedResponse));
}

export function feedResponseFromJSON(
  jsonString: string,
): SafeParseResult<FeedResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedResponse' from JSON`,
  );
}
