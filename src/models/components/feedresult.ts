/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedEntry,
  FeedEntry$inboundSchema,
  FeedEntry$Outbound,
  FeedEntry$outboundSchema,
} from "./feedentry.js";

/**
 * Category of the result, one of the requested categories in incoming request.
 */
export const FeedResultCategory = {
  DocumentSuggestion: "DOCUMENT_SUGGESTION",
  DocumentSuggestionScenario: "DOCUMENT_SUGGESTION_SCENARIO",
  TrendingDocument: "TRENDING_DOCUMENT",
  UseCase: "USE_CASE",
  VerificationReminder: "VERIFICATION_REMINDER",
  Event: "EVENT",
  Announcement: "ANNOUNCEMENT",
  Mention: "MENTION",
  DatasourceAffinity: "DATASOURCE_AFFINITY",
  Recent: "RECENT",
  CompanyResource: "COMPANY_RESOURCE",
  Experimental: "EXPERIMENTAL",
  PeopleCelebrations: "PEOPLE_CELEBRATIONS",
  SocialLink: "SOCIAL_LINK",
  ExternalTasks: "EXTERNAL_TASKS",
  DisplayableList: "DISPLAYABLE_LIST",
  ZeroStateChatSuggestion: "ZERO_STATE_CHAT_SUGGESTION",
  ZeroStateChatToolSuggestion: "ZERO_STATE_CHAT_TOOL_SUGGESTION",
  ZeroStateWorkflowCreatedByMe: "ZERO_STATE_WORKFLOW_CREATED_BY_ME",
  ZeroStateWorkflowFavorites: "ZERO_STATE_WORKFLOW_FAVORITES",
  ZeroStateWorkflowPopular: "ZERO_STATE_WORKFLOW_POPULAR",
  ZeroStateWorkflowSuggestion: "ZERO_STATE_WORKFLOW_SUGGESTION",
} as const;
/**
 * Category of the result, one of the requested categories in incoming request.
 */
export type FeedResultCategory = ClosedEnum<typeof FeedResultCategory>;

export type FeedResult = {
  /**
   * Category of the result, one of the requested categories in incoming request.
   */
  category: FeedResultCategory;
  primaryEntry: FeedEntry;
  /**
   * Secondary entries for the result e.g. suggested docs for the calendar, carousel.
   */
  secondaryEntries?: Array<FeedEntry> | undefined;
  /**
   * Rank of the result. Rank is suggested by server. Client side rank may differ.
   */
  rank?: number | undefined;
};

/** @internal */
export const FeedResultCategory$inboundSchema: z.ZodNativeEnum<
  typeof FeedResultCategory
> = z.nativeEnum(FeedResultCategory);

/** @internal */
export const FeedResultCategory$outboundSchema: z.ZodNativeEnum<
  typeof FeedResultCategory
> = FeedResultCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedResultCategory$ {
  /** @deprecated use `FeedResultCategory$inboundSchema` instead. */
  export const inboundSchema = FeedResultCategory$inboundSchema;
  /** @deprecated use `FeedResultCategory$outboundSchema` instead. */
  export const outboundSchema = FeedResultCategory$outboundSchema;
}

/** @internal */
export const FeedResult$inboundSchema: z.ZodType<
  FeedResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: FeedResultCategory$inboundSchema,
  primaryEntry: FeedEntry$inboundSchema,
  secondaryEntries: z.array(FeedEntry$inboundSchema).optional(),
  rank: z.number().int().optional(),
});

/** @internal */
export type FeedResult$Outbound = {
  category: string;
  primaryEntry: FeedEntry$Outbound;
  secondaryEntries?: Array<FeedEntry$Outbound> | undefined;
  rank?: number | undefined;
};

/** @internal */
export const FeedResult$outboundSchema: z.ZodType<
  FeedResult$Outbound,
  z.ZodTypeDef,
  FeedResult
> = z.object({
  category: FeedResultCategory$outboundSchema,
  primaryEntry: FeedEntry$outboundSchema,
  secondaryEntries: z.array(FeedEntry$outboundSchema).optional(),
  rank: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedResult$ {
  /** @deprecated use `FeedResult$inboundSchema` instead. */
  export const inboundSchema = FeedResult$inboundSchema;
  /** @deprecated use `FeedResult$outboundSchema` instead. */
  export const outboundSchema = FeedResult$outboundSchema;
  /** @deprecated use `FeedResult$Outbound` instead. */
  export type Outbound = FeedResult$Outbound;
}

export function feedResultToJSON(feedResult: FeedResult): string {
  return JSON.stringify(FeedResult$outboundSchema.parse(feedResult));
}

export function feedResultFromJSON(
  jsonString: string,
): SafeParseResult<FeedResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedResult' from JSON`,
  );
}
