/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Configuration settings for the chat file upload feature
 */
export type FileUploadConfig = {
  /**
   * Whether file upload for Chat is enabled for the deployment
   */
  enabled?: boolean | undefined;
  /**
   * Maximum number of files that can be uploaded in a single turn
   */
  maxFileCount?: number | undefined;
  /**
   * Maximum file size, in bytes, that is allowed for upload
   */
  maxFileSize?: number | undefined;
  /**
   * Timeout in seconds for polling the file upload status
   */
  uploadTimeoutSeconds?: number | undefined;
};

/** @internal */
export const FileUploadConfig$inboundSchema: z.ZodType<
  FileUploadConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  maxFileCount: z.number().int().optional(),
  maxFileSize: z.number().int().optional(),
  uploadTimeoutSeconds: z.number().int().optional(),
});

/** @internal */
export type FileUploadConfig$Outbound = {
  enabled?: boolean | undefined;
  maxFileCount?: number | undefined;
  maxFileSize?: number | undefined;
  uploadTimeoutSeconds?: number | undefined;
};

/** @internal */
export const FileUploadConfig$outboundSchema: z.ZodType<
  FileUploadConfig$Outbound,
  z.ZodTypeDef,
  FileUploadConfig
> = z.object({
  enabled: z.boolean().optional(),
  maxFileCount: z.number().int().optional(),
  maxFileSize: z.number().int().optional(),
  uploadTimeoutSeconds: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileUploadConfig$ {
  /** @deprecated use `FileUploadConfig$inboundSchema` instead. */
  export const inboundSchema = FileUploadConfig$inboundSchema;
  /** @deprecated use `FileUploadConfig$outboundSchema` instead. */
  export const outboundSchema = FileUploadConfig$outboundSchema;
  /** @deprecated use `FileUploadConfig$Outbound` instead. */
  export type Outbound = FileUploadConfig$Outbound;
}

export function fileUploadConfigToJSON(
  fileUploadConfig: FileUploadConfig,
): string {
  return JSON.stringify(
    FileUploadConfig$outboundSchema.parse(fileUploadConfig),
  );
}

export function fileUploadConfigFromJSON(
  jsonString: string,
): SafeParseResult<FileUploadConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileUploadConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileUploadConfig' from JSON`,
  );
}
