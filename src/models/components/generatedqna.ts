/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FollowupAction,
  FollowupAction$inboundSchema,
  FollowupAction$Outbound,
  FollowupAction$outboundSchema,
} from "./followupaction.js";
import {
  TextRange,
  TextRange$inboundSchema,
  TextRange$Outbound,
  TextRange$outboundSchema,
} from "./textrange.js";

/**
 * Status of backend generating the answer
 */
export const GeneratedQnaStatus = {
  Computing: "COMPUTING",
  Disabled: "DISABLED",
  Failed: "FAILED",
  NoAnswer: "NO_ANSWER",
  Skipped: "SKIPPED",
  Streaming: "STREAMING",
  Succeeded: "SUCCEEDED",
  Timeout: "TIMEOUT",
} as const;
/**
 * Status of backend generating the answer
 */
export type GeneratedQnaStatus = ClosedEnum<typeof GeneratedQnaStatus>;

export type GeneratedQna = {
  /**
   * Search query rephrased into a question.
   */
  question?: string | undefined;
  /**
   * Answer generated for the given query or the generated question.
   */
  answer?: string | undefined;
  /**
   * List of all follow-up prompts generated for the given query or the generated question.
   */
  followUpPrompts?: Array<string> | undefined;
  /**
   * List of follow-up actions generated for the given query or the generated question.
   */
  followupActions?: Array<FollowupAction> | undefined;
  /**
   * Answer subsections to mark with special formatting (citations, bolding etc)
   */
  ranges?: Array<TextRange> | undefined;
  /**
   * Status of backend generating the answer
   */
  status?: GeneratedQnaStatus | undefined;
  /**
   * An opaque cursor representing the search request
   */
  cursor?: string | undefined;
  /**
   * An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
   */
  trackingToken?: string | undefined;
};

/** @internal */
export const GeneratedQnaStatus$inboundSchema: z.ZodNativeEnum<
  typeof GeneratedQnaStatus
> = z.nativeEnum(GeneratedQnaStatus);

/** @internal */
export const GeneratedQnaStatus$outboundSchema: z.ZodNativeEnum<
  typeof GeneratedQnaStatus
> = GeneratedQnaStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GeneratedQnaStatus$ {
  /** @deprecated use `GeneratedQnaStatus$inboundSchema` instead. */
  export const inboundSchema = GeneratedQnaStatus$inboundSchema;
  /** @deprecated use `GeneratedQnaStatus$outboundSchema` instead. */
  export const outboundSchema = GeneratedQnaStatus$outboundSchema;
}

/** @internal */
export const GeneratedQna$inboundSchema: z.ZodType<
  GeneratedQna,
  z.ZodTypeDef,
  unknown
> = z.object({
  question: z.string().optional(),
  answer: z.string().optional(),
  followUpPrompts: z.array(z.string()).optional(),
  followupActions: z.array(FollowupAction$inboundSchema).optional(),
  ranges: z.array(TextRange$inboundSchema).optional(),
  status: GeneratedQnaStatus$inboundSchema.optional(),
  cursor: z.string().optional(),
  trackingToken: z.string().optional(),
});

/** @internal */
export type GeneratedQna$Outbound = {
  question?: string | undefined;
  answer?: string | undefined;
  followUpPrompts?: Array<string> | undefined;
  followupActions?: Array<FollowupAction$Outbound> | undefined;
  ranges?: Array<TextRange$Outbound> | undefined;
  status?: string | undefined;
  cursor?: string | undefined;
  trackingToken?: string | undefined;
};

/** @internal */
export const GeneratedQna$outboundSchema: z.ZodType<
  GeneratedQna$Outbound,
  z.ZodTypeDef,
  GeneratedQna
> = z.object({
  question: z.string().optional(),
  answer: z.string().optional(),
  followUpPrompts: z.array(z.string()).optional(),
  followupActions: z.array(FollowupAction$outboundSchema).optional(),
  ranges: z.array(TextRange$outboundSchema).optional(),
  status: GeneratedQnaStatus$outboundSchema.optional(),
  cursor: z.string().optional(),
  trackingToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GeneratedQna$ {
  /** @deprecated use `GeneratedQna$inboundSchema` instead. */
  export const inboundSchema = GeneratedQna$inboundSchema;
  /** @deprecated use `GeneratedQna$outboundSchema` instead. */
  export const outboundSchema = GeneratedQna$outboundSchema;
  /** @deprecated use `GeneratedQna$Outbound` instead. */
  export type Outbound = GeneratedQna$Outbound;
}

export function generatedQnaToJSON(generatedQna: GeneratedQna): string {
  return JSON.stringify(GeneratedQna$outboundSchema.parse(generatedQna));
}

export function generatedQnaFromJSON(
  jsonString: string,
): SafeParseResult<GeneratedQna, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GeneratedQna$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GeneratedQna' from JSON`,
  );
}
