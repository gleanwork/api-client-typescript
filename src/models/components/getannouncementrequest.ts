/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAnnouncementRequest = {
  /**
   * The id of the announcement to be retrieved.
   */
  id: number;
};

/** @internal */
export const GetAnnouncementRequest$inboundSchema: z.ZodType<
  GetAnnouncementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
});

/** @internal */
export type GetAnnouncementRequest$Outbound = {
  id: number;
};

/** @internal */
export const GetAnnouncementRequest$outboundSchema: z.ZodType<
  GetAnnouncementRequest$Outbound,
  z.ZodTypeDef,
  GetAnnouncementRequest
> = z.object({
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAnnouncementRequest$ {
  /** @deprecated use `GetAnnouncementRequest$inboundSchema` instead. */
  export const inboundSchema = GetAnnouncementRequest$inboundSchema;
  /** @deprecated use `GetAnnouncementRequest$outboundSchema` instead. */
  export const outboundSchema = GetAnnouncementRequest$outboundSchema;
  /** @deprecated use `GetAnnouncementRequest$Outbound` instead. */
  export type Outbound = GetAnnouncementRequest$Outbound;
}

export function getAnnouncementRequestToJSON(
  getAnnouncementRequest: GetAnnouncementRequest,
): string {
  return JSON.stringify(
    GetAnnouncementRequest$outboundSchema.parse(getAnnouncementRequest),
  );
}

export function getAnnouncementRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAnnouncementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAnnouncementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAnnouncementRequest' from JSON`,
  );
}
