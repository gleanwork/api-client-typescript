/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DlpReport,
  DlpReport$inboundSchema,
  DlpReport$Outbound,
  DlpReport$outboundSchema,
} from "./dlpreport.js";

export type GetDlpReportResponse = {
  /**
   * Full policy information that will be used for scans.
   */
  report?: DlpReport | undefined;
};

/** @internal */
export const GetDlpReportResponse$inboundSchema: z.ZodType<
  GetDlpReportResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  report: DlpReport$inboundSchema.optional(),
});

/** @internal */
export type GetDlpReportResponse$Outbound = {
  report?: DlpReport$Outbound | undefined;
};

/** @internal */
export const GetDlpReportResponse$outboundSchema: z.ZodType<
  GetDlpReportResponse$Outbound,
  z.ZodTypeDef,
  GetDlpReportResponse
> = z.object({
  report: DlpReport$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDlpReportResponse$ {
  /** @deprecated use `GetDlpReportResponse$inboundSchema` instead. */
  export const inboundSchema = GetDlpReportResponse$inboundSchema;
  /** @deprecated use `GetDlpReportResponse$outboundSchema` instead. */
  export const outboundSchema = GetDlpReportResponse$outboundSchema;
  /** @deprecated use `GetDlpReportResponse$Outbound` instead. */
  export type Outbound = GetDlpReportResponse$Outbound;
}

export function getDlpReportResponseToJSON(
  getDlpReportResponse: GetDlpReportResponse,
): string {
  return JSON.stringify(
    GetDlpReportResponse$outboundSchema.parse(getDlpReportResponse),
  );
}

export function getDlpReportResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDlpReportResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDlpReportResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDlpReportResponse' from JSON`,
  );
}
