/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetDocPermissionsResponse = {
  /**
   * A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
   */
  allowedUserEmails?: Array<string> | undefined;
};

/** @internal */
export const GetDocPermissionsResponse$inboundSchema: z.ZodType<
  GetDocPermissionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  allowedUserEmails: z.array(z.string()).optional(),
});

/** @internal */
export type GetDocPermissionsResponse$Outbound = {
  allowedUserEmails?: Array<string> | undefined;
};

/** @internal */
export const GetDocPermissionsResponse$outboundSchema: z.ZodType<
  GetDocPermissionsResponse$Outbound,
  z.ZodTypeDef,
  GetDocPermissionsResponse
> = z.object({
  allowedUserEmails: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocPermissionsResponse$ {
  /** @deprecated use `GetDocPermissionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetDocPermissionsResponse$inboundSchema;
  /** @deprecated use `GetDocPermissionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetDocPermissionsResponse$outboundSchema;
  /** @deprecated use `GetDocPermissionsResponse$Outbound` instead. */
  export type Outbound = GetDocPermissionsResponse$Outbound;
}

export function getDocPermissionsResponseToJSON(
  getDocPermissionsResponse: GetDocPermissionsResponse,
): string {
  return JSON.stringify(
    GetDocPermissionsResponse$outboundSchema.parse(getDocPermissionsResponse),
  );
}

export function getDocPermissionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDocPermissionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDocPermissionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocPermissionsResponse' from JSON`,
  );
}
