/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DocumentSpecUnion,
  DocumentSpecUnion$inboundSchema,
  DocumentSpecUnion$Outbound,
  DocumentSpecUnion$outboundSchema,
} from "./documentspecunion.js";
import {
  Period,
  Period$inboundSchema,
  Period$Outbound,
  Period$outboundSchema,
} from "./period.js";

export type GetDocumentAnalyticsRequest = {
  /**
   * The specification for the documents for which analytics will be retrieved.
   */
  documentSpecs: Array<DocumentSpecUnion>;
  dayRange: Period;
  /**
   * Whether response should include click information or not. Default is to not include click information.
   */
  withClickerCounts?: boolean | undefined;
  /**
   * Whether response should include impression information or not. Default is to not include impression information.
   */
  withImpressionCounts?: boolean | undefined;
  /**
   * Whether the results will include aggregate counts/info for facets like location, department, etc.
   */
  withFacetAggregations?: boolean | undefined;
  /**
   * Whether response should include visit counts or not. Default is to return only visitor counts.
   */
  withVisitCounts?: boolean | undefined;
};

/** @internal */
export const GetDocumentAnalyticsRequest$inboundSchema: z.ZodType<
  GetDocumentAnalyticsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentSpecs: z.array(DocumentSpecUnion$inboundSchema),
  dayRange: Period$inboundSchema,
  withClickerCounts: z.boolean().optional(),
  withImpressionCounts: z.boolean().optional(),
  withFacetAggregations: z.boolean().optional(),
  withVisitCounts: z.boolean().optional(),
});

/** @internal */
export type GetDocumentAnalyticsRequest$Outbound = {
  documentSpecs: Array<DocumentSpecUnion$Outbound>;
  dayRange: Period$Outbound;
  withClickerCounts?: boolean | undefined;
  withImpressionCounts?: boolean | undefined;
  withFacetAggregations?: boolean | undefined;
  withVisitCounts?: boolean | undefined;
};

/** @internal */
export const GetDocumentAnalyticsRequest$outboundSchema: z.ZodType<
  GetDocumentAnalyticsRequest$Outbound,
  z.ZodTypeDef,
  GetDocumentAnalyticsRequest
> = z.object({
  documentSpecs: z.array(DocumentSpecUnion$outboundSchema),
  dayRange: Period$outboundSchema,
  withClickerCounts: z.boolean().optional(),
  withImpressionCounts: z.boolean().optional(),
  withFacetAggregations: z.boolean().optional(),
  withVisitCounts: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentAnalyticsRequest$ {
  /** @deprecated use `GetDocumentAnalyticsRequest$inboundSchema` instead. */
  export const inboundSchema = GetDocumentAnalyticsRequest$inboundSchema;
  /** @deprecated use `GetDocumentAnalyticsRequest$outboundSchema` instead. */
  export const outboundSchema = GetDocumentAnalyticsRequest$outboundSchema;
  /** @deprecated use `GetDocumentAnalyticsRequest$Outbound` instead. */
  export type Outbound = GetDocumentAnalyticsRequest$Outbound;
}

export function getDocumentAnalyticsRequestToJSON(
  getDocumentAnalyticsRequest: GetDocumentAnalyticsRequest,
): string {
  return JSON.stringify(
    GetDocumentAnalyticsRequest$outboundSchema.parse(
      getDocumentAnalyticsRequest,
    ),
  );
}

export function getDocumentAnalyticsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDocumentAnalyticsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDocumentAnalyticsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocumentAnalyticsRequest' from JSON`,
  );
}
