/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DocumentAnalytics,
  DocumentAnalytics$inboundSchema,
  DocumentAnalytics$Outbound,
  DocumentAnalytics$outboundSchema,
} from "./documentanalytics.js";

export type GetDocumentAnalyticsResponse = {
  /**
   * Analytics for requested documents. There will be one-to-one mapping for documents included in the request.
   */
  results?: Array<DocumentAnalytics> | undefined;
};

/** @internal */
export const GetDocumentAnalyticsResponse$inboundSchema: z.ZodType<
  GetDocumentAnalyticsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(DocumentAnalytics$inboundSchema).optional(),
});

/** @internal */
export type GetDocumentAnalyticsResponse$Outbound = {
  results?: Array<DocumentAnalytics$Outbound> | undefined;
};

/** @internal */
export const GetDocumentAnalyticsResponse$outboundSchema: z.ZodType<
  GetDocumentAnalyticsResponse$Outbound,
  z.ZodTypeDef,
  GetDocumentAnalyticsResponse
> = z.object({
  results: z.array(DocumentAnalytics$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentAnalyticsResponse$ {
  /** @deprecated use `GetDocumentAnalyticsResponse$inboundSchema` instead. */
  export const inboundSchema = GetDocumentAnalyticsResponse$inboundSchema;
  /** @deprecated use `GetDocumentAnalyticsResponse$outboundSchema` instead. */
  export const outboundSchema = GetDocumentAnalyticsResponse$outboundSchema;
  /** @deprecated use `GetDocumentAnalyticsResponse$Outbound` instead. */
  export type Outbound = GetDocumentAnalyticsResponse$Outbound;
}

export function getDocumentAnalyticsResponseToJSON(
  getDocumentAnalyticsResponse: GetDocumentAnalyticsResponse,
): string {
  return JSON.stringify(
    GetDocumentAnalyticsResponse$outboundSchema.parse(
      getDocumentAnalyticsResponse,
    ),
  );
}

export function getDocumentAnalyticsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDocumentAnalyticsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDocumentAnalyticsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocumentAnalyticsResponse' from JSON`,
  );
}
