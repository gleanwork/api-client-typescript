/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetFilterSet,
  FacetFilterSet$inboundSchema,
  FacetFilterSet$Outbound,
  FacetFilterSet$outboundSchema,
} from "./facetfilterset.js";

export type GetDocumentsByFacetsRequest = {
  /**
   * Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
   */
  datasourcesFilter?: Array<string> | undefined;
  /**
   * A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set.
   */
  filterSets: Array<FacetFilterSet>;
  /**
   * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
   */
  cursor?: string | undefined;
};

/** @internal */
export const GetDocumentsByFacetsRequest$inboundSchema: z.ZodType<
  GetDocumentsByFacetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasourcesFilter: z.array(z.string()).optional(),
  filterSets: z.array(FacetFilterSet$inboundSchema),
  cursor: z.string().optional(),
});

/** @internal */
export type GetDocumentsByFacetsRequest$Outbound = {
  datasourcesFilter?: Array<string> | undefined;
  filterSets: Array<FacetFilterSet$Outbound>;
  cursor?: string | undefined;
};

/** @internal */
export const GetDocumentsByFacetsRequest$outboundSchema: z.ZodType<
  GetDocumentsByFacetsRequest$Outbound,
  z.ZodTypeDef,
  GetDocumentsByFacetsRequest
> = z.object({
  datasourcesFilter: z.array(z.string()).optional(),
  filterSets: z.array(FacetFilterSet$outboundSchema),
  cursor: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentsByFacetsRequest$ {
  /** @deprecated use `GetDocumentsByFacetsRequest$inboundSchema` instead. */
  export const inboundSchema = GetDocumentsByFacetsRequest$inboundSchema;
  /** @deprecated use `GetDocumentsByFacetsRequest$outboundSchema` instead. */
  export const outboundSchema = GetDocumentsByFacetsRequest$outboundSchema;
  /** @deprecated use `GetDocumentsByFacetsRequest$Outbound` instead. */
  export type Outbound = GetDocumentsByFacetsRequest$Outbound;
}

export function getDocumentsByFacetsRequestToJSON(
  getDocumentsByFacetsRequest: GetDocumentsByFacetsRequest,
): string {
  return JSON.stringify(
    GetDocumentsByFacetsRequest$outboundSchema.parse(
      getDocumentsByFacetsRequest,
    ),
  );
}

export function getDocumentsByFacetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDocumentsByFacetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDocumentsByFacetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocumentsByFacetsRequest' from JSON`,
  );
}
