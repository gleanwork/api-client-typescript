/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the response body of the /getdocumentstatus API call
 */
export type GetDocumentStatusResponse = {
  /**
   * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
   */
  uploadStatus?: string | undefined;
  /**
   * Time of last successful upload, in epoch seconds
   */
  lastUploadedAt?: number | undefined;
  /**
   * Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
   */
  indexingStatus?: string | undefined;
  /**
   * Time of last successful indexing, in epoch seconds
   */
  lastIndexedAt?: number | undefined;
};

/** @internal */
export const GetDocumentStatusResponse$inboundSchema: z.ZodType<
  GetDocumentStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploadStatus: z.string().optional(),
  lastUploadedAt: z.number().int().optional(),
  indexingStatus: z.string().optional(),
  lastIndexedAt: z.number().int().optional(),
});

/** @internal */
export type GetDocumentStatusResponse$Outbound = {
  uploadStatus?: string | undefined;
  lastUploadedAt?: number | undefined;
  indexingStatus?: string | undefined;
  lastIndexedAt?: number | undefined;
};

/** @internal */
export const GetDocumentStatusResponse$outboundSchema: z.ZodType<
  GetDocumentStatusResponse$Outbound,
  z.ZodTypeDef,
  GetDocumentStatusResponse
> = z.object({
  uploadStatus: z.string().optional(),
  lastUploadedAt: z.number().int().optional(),
  indexingStatus: z.string().optional(),
  lastIndexedAt: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDocumentStatusResponse$ {
  /** @deprecated use `GetDocumentStatusResponse$inboundSchema` instead. */
  export const inboundSchema = GetDocumentStatusResponse$inboundSchema;
  /** @deprecated use `GetDocumentStatusResponse$outboundSchema` instead. */
  export const outboundSchema = GetDocumentStatusResponse$outboundSchema;
  /** @deprecated use `GetDocumentStatusResponse$Outbound` instead. */
  export type Outbound = GetDocumentStatusResponse$Outbound;
}

export function getDocumentStatusResponseToJSON(
  getDocumentStatusResponse: GetDocumentStatusResponse,
): string {
  return JSON.stringify(
    GetDocumentStatusResponse$outboundSchema.parse(getDocumentStatusResponse),
  );
}

export function getDocumentStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDocumentStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDocumentStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDocumentStatusResponse' from JSON`,
  );
}
