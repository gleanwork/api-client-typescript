/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Announcement,
  Announcement$inboundSchema,
  Announcement$Outbound,
  Announcement$outboundSchema,
} from "./announcement.js";
import {
  AnnouncementError,
  AnnouncementError$inboundSchema,
  AnnouncementError$Outbound,
  AnnouncementError$outboundSchema,
} from "./announcementerror.js";

export type GetDraftAnnouncementResponse = {
  announcement?: Announcement | undefined;
  error?: AnnouncementError | undefined;
};

/** @internal */
export const GetDraftAnnouncementResponse$inboundSchema: z.ZodType<
  GetDraftAnnouncementResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  announcement: Announcement$inboundSchema.optional(),
  error: AnnouncementError$inboundSchema.optional(),
});

/** @internal */
export type GetDraftAnnouncementResponse$Outbound = {
  announcement?: Announcement$Outbound | undefined;
  error?: AnnouncementError$Outbound | undefined;
};

/** @internal */
export const GetDraftAnnouncementResponse$outboundSchema: z.ZodType<
  GetDraftAnnouncementResponse$Outbound,
  z.ZodTypeDef,
  GetDraftAnnouncementResponse
> = z.object({
  announcement: Announcement$outboundSchema.optional(),
  error: AnnouncementError$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDraftAnnouncementResponse$ {
  /** @deprecated use `GetDraftAnnouncementResponse$inboundSchema` instead. */
  export const inboundSchema = GetDraftAnnouncementResponse$inboundSchema;
  /** @deprecated use `GetDraftAnnouncementResponse$outboundSchema` instead. */
  export const outboundSchema = GetDraftAnnouncementResponse$outboundSchema;
  /** @deprecated use `GetDraftAnnouncementResponse$Outbound` instead. */
  export type Outbound = GetDraftAnnouncementResponse$Outbound;
}

export function getDraftAnnouncementResponseToJSON(
  getDraftAnnouncementResponse: GetDraftAnnouncementResponse,
): string {
  return JSON.stringify(
    GetDraftAnnouncementResponse$outboundSchema.parse(
      getDraftAnnouncementResponse,
    ),
  );
}

export function getDraftAnnouncementResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetDraftAnnouncementResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDraftAnnouncementResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDraftAnnouncementResponse' from JSON`,
  );
}
