/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuthToken,
  AuthToken$inboundSchema,
  AuthToken$Outbound,
  AuthToken$outboundSchema,
} from "./authtoken.js";

export type GetEventsRequest = {
  /**
   * The ids of the calendar events to be retrieved.
   */
  ids: Array<string>;
  /**
   * Auth tokens if client-side authentication.
   */
  authTokens?: Array<AuthToken> | undefined;
  /**
   * The app or other repository type from which the event was extracted
   */
  datasource?: string | undefined;
  /**
   * Whether relevant content and documents, via GeneratedAttachments, should be attached to the events.
   */
  annotate?: boolean | undefined;
};

/** @internal */
export const GetEventsRequest$inboundSchema: z.ZodType<
  GetEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()),
  authTokens: z.array(AuthToken$inboundSchema).optional(),
  datasource: z.string().optional(),
  annotate: z.boolean().optional(),
});

/** @internal */
export type GetEventsRequest$Outbound = {
  ids: Array<string>;
  authTokens?: Array<AuthToken$Outbound> | undefined;
  datasource?: string | undefined;
  annotate?: boolean | undefined;
};

/** @internal */
export const GetEventsRequest$outboundSchema: z.ZodType<
  GetEventsRequest$Outbound,
  z.ZodTypeDef,
  GetEventsRequest
> = z.object({
  ids: z.array(z.string()),
  authTokens: z.array(AuthToken$outboundSchema).optional(),
  datasource: z.string().optional(),
  annotate: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventsRequest$ {
  /** @deprecated use `GetEventsRequest$inboundSchema` instead. */
  export const inboundSchema = GetEventsRequest$inboundSchema;
  /** @deprecated use `GetEventsRequest$outboundSchema` instead. */
  export const outboundSchema = GetEventsRequest$outboundSchema;
  /** @deprecated use `GetEventsRequest$Outbound` instead. */
  export type Outbound = GetEventsRequest$Outbound;
}

export function getEventsRequestToJSON(
  getEventsRequest: GetEventsRequest,
): string {
  return JSON.stringify(
    GetEventsRequest$outboundSchema.parse(getEventsRequest),
  );
}

export function getEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventsRequest' from JSON`,
  );
}
