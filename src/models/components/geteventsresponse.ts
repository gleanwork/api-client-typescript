/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeedResult,
  FeedResult$inboundSchema,
  FeedResult$Outbound,
  FeedResult$outboundSchema,
} from "./feedresult.js";

export type GetEventsResponse = {
  /**
   * The requested events. Uses a FeedResult for now as a Calendar Event doesn't have all event info such as attachments.
   */
  events?: Array<FeedResult> | undefined;
};

/** @internal */
export const GetEventsResponse$inboundSchema: z.ZodType<
  GetEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  events: z.array(FeedResult$inboundSchema).optional(),
});

/** @internal */
export type GetEventsResponse$Outbound = {
  events?: Array<FeedResult$Outbound> | undefined;
};

/** @internal */
export const GetEventsResponse$outboundSchema: z.ZodType<
  GetEventsResponse$Outbound,
  z.ZodTypeDef,
  GetEventsResponse
> = z.object({
  events: z.array(FeedResult$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventsResponse$ {
  /** @deprecated use `GetEventsResponse$inboundSchema` instead. */
  export const inboundSchema = GetEventsResponse$inboundSchema;
  /** @deprecated use `GetEventsResponse$outboundSchema` instead. */
  export const outboundSchema = GetEventsResponse$outboundSchema;
  /** @deprecated use `GetEventsResponse$Outbound` instead. */
  export type Outbound = GetEventsResponse$Outbound;
}

export function getEventsResponseToJSON(
  getEventsResponse: GetEventsResponse,
): string {
  return JSON.stringify(
    GetEventsResponse$outboundSchema.parse(getEventsResponse),
  );
}

export function getEventsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetEventsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventsResponse' from JSON`,
  );
}
