/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserGeneratedContentId,
  UserGeneratedContentId$inboundSchema,
  UserGeneratedContentId$Outbound,
  UserGeneratedContentId$outboundSchema,
} from "./usergeneratedcontentid.js";

export type GetShortcutRequest = {
  /**
   * The alias for the shortcut, including any arguments for variable shortcuts.
   */
  alias: string;
};

export type GetShortcutRequestUnion =
  | UserGeneratedContentId
  | GetShortcutRequest;

/** @internal */
export const GetShortcutRequest$inboundSchema: z.ZodType<
  GetShortcutRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  alias: z.string(),
});

/** @internal */
export type GetShortcutRequest$Outbound = {
  alias: string;
};

/** @internal */
export const GetShortcutRequest$outboundSchema: z.ZodType<
  GetShortcutRequest$Outbound,
  z.ZodTypeDef,
  GetShortcutRequest
> = z.object({
  alias: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetShortcutRequest$ {
  /** @deprecated use `GetShortcutRequest$inboundSchema` instead. */
  export const inboundSchema = GetShortcutRequest$inboundSchema;
  /** @deprecated use `GetShortcutRequest$outboundSchema` instead. */
  export const outboundSchema = GetShortcutRequest$outboundSchema;
  /** @deprecated use `GetShortcutRequest$Outbound` instead. */
  export type Outbound = GetShortcutRequest$Outbound;
}

export function getShortcutRequestToJSON(
  getShortcutRequest: GetShortcutRequest,
): string {
  return JSON.stringify(
    GetShortcutRequest$outboundSchema.parse(getShortcutRequest),
  );
}

export function getShortcutRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetShortcutRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetShortcutRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetShortcutRequest' from JSON`,
  );
}

/** @internal */
export const GetShortcutRequestUnion$inboundSchema: z.ZodType<
  GetShortcutRequestUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  UserGeneratedContentId$inboundSchema,
  z.lazy(() => GetShortcutRequest$inboundSchema),
]);

/** @internal */
export type GetShortcutRequestUnion$Outbound =
  | UserGeneratedContentId$Outbound
  | GetShortcutRequest$Outbound;

/** @internal */
export const GetShortcutRequestUnion$outboundSchema: z.ZodType<
  GetShortcutRequestUnion$Outbound,
  z.ZodTypeDef,
  GetShortcutRequestUnion
> = z.union([
  UserGeneratedContentId$outboundSchema,
  z.lazy(() => GetShortcutRequest$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetShortcutRequestUnion$ {
  /** @deprecated use `GetShortcutRequestUnion$inboundSchema` instead. */
  export const inboundSchema = GetShortcutRequestUnion$inboundSchema;
  /** @deprecated use `GetShortcutRequestUnion$outboundSchema` instead. */
  export const outboundSchema = GetShortcutRequestUnion$outboundSchema;
  /** @deprecated use `GetShortcutRequestUnion$Outbound` instead. */
  export type Outbound = GetShortcutRequestUnion$Outbound;
}

export function getShortcutRequestUnionToJSON(
  getShortcutRequestUnion: GetShortcutRequestUnion,
): string {
  return JSON.stringify(
    GetShortcutRequestUnion$outboundSchema.parse(getShortcutRequestUnion),
  );
}

export function getShortcutRequestUnionFromJSON(
  jsonString: string,
): SafeParseResult<GetShortcutRequestUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetShortcutRequestUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetShortcutRequestUnion' from JSON`,
  );
}
