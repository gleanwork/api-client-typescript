/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Shortcut,
  Shortcut$inboundSchema,
  Shortcut$Outbound,
  Shortcut$outboundSchema,
} from "./shortcut.js";
import {
  ShortcutError,
  ShortcutError$inboundSchema,
  ShortcutError$Outbound,
  ShortcutError$outboundSchema,
} from "./shortcuterror.js";

export type GetShortcutResponse = {
  shortcut?: Shortcut | undefined;
  error?: ShortcutError | undefined;
};

/** @internal */
export const GetShortcutResponse$inboundSchema: z.ZodType<
  GetShortcutResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  shortcut: Shortcut$inboundSchema.optional(),
  error: ShortcutError$inboundSchema.optional(),
});

/** @internal */
export type GetShortcutResponse$Outbound = {
  shortcut?: Shortcut$Outbound | undefined;
  error?: ShortcutError$Outbound | undefined;
};

/** @internal */
export const GetShortcutResponse$outboundSchema: z.ZodType<
  GetShortcutResponse$Outbound,
  z.ZodTypeDef,
  GetShortcutResponse
> = z.object({
  shortcut: Shortcut$outboundSchema.optional(),
  error: ShortcutError$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetShortcutResponse$ {
  /** @deprecated use `GetShortcutResponse$inboundSchema` instead. */
  export const inboundSchema = GetShortcutResponse$inboundSchema;
  /** @deprecated use `GetShortcutResponse$outboundSchema` instead. */
  export const outboundSchema = GetShortcutResponse$outboundSchema;
  /** @deprecated use `GetShortcutResponse$Outbound` instead. */
  export type Outbound = GetShortcutResponse$Outbound;
}

export function getShortcutResponseToJSON(
  getShortcutResponse: GetShortcutResponse,
): string {
  return JSON.stringify(
    GetShortcutResponse$outboundSchema.parse(getShortcutResponse),
  );
}

export function getShortcutResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetShortcutResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetShortcutResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetShortcutResponse' from JSON`,
  );
}
