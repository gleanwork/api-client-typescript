/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserActivityInsight,
  UserActivityInsight$inboundSchema,
  UserActivityInsight$Outbound,
  UserActivityInsight$outboundSchema,
} from "./useractivityinsight.js";

export type GleanAssistInsightsResponse = {
  /**
   * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
   */
  lastLogTimestamp?: number | undefined;
  /**
   * Insights for all active users with respect to set of actions.
   */
  activityInsights?: Array<UserActivityInsight> | undefined;
  /**
   * Total number of active users in the requested period.
   */
  totalActiveUsers?: number | undefined;
  /**
   * List of datasource instances for which glean assist is enabled.
   */
  datasourceInstances?: Array<string> | undefined;
  /**
   * List of departments applicable for users tab.
   */
  departments?: Array<string> | undefined;
};

/** @internal */
export const GleanAssistInsightsResponse$inboundSchema: z.ZodType<
  GleanAssistInsightsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lastLogTimestamp: z.number().int().optional(),
  activityInsights: z.array(UserActivityInsight$inboundSchema).optional(),
  totalActiveUsers: z.number().int().optional(),
  datasourceInstances: z.array(z.string()).optional(),
  departments: z.array(z.string()).optional(),
});

/** @internal */
export type GleanAssistInsightsResponse$Outbound = {
  lastLogTimestamp?: number | undefined;
  activityInsights?: Array<UserActivityInsight$Outbound> | undefined;
  totalActiveUsers?: number | undefined;
  datasourceInstances?: Array<string> | undefined;
  departments?: Array<string> | undefined;
};

/** @internal */
export const GleanAssistInsightsResponse$outboundSchema: z.ZodType<
  GleanAssistInsightsResponse$Outbound,
  z.ZodTypeDef,
  GleanAssistInsightsResponse
> = z.object({
  lastLogTimestamp: z.number().int().optional(),
  activityInsights: z.array(UserActivityInsight$outboundSchema).optional(),
  totalActiveUsers: z.number().int().optional(),
  datasourceInstances: z.array(z.string()).optional(),
  departments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GleanAssistInsightsResponse$ {
  /** @deprecated use `GleanAssistInsightsResponse$inboundSchema` instead. */
  export const inboundSchema = GleanAssistInsightsResponse$inboundSchema;
  /** @deprecated use `GleanAssistInsightsResponse$outboundSchema` instead. */
  export const outboundSchema = GleanAssistInsightsResponse$outboundSchema;
  /** @deprecated use `GleanAssistInsightsResponse$Outbound` instead. */
  export type Outbound = GleanAssistInsightsResponse$Outbound;
}

export function gleanAssistInsightsResponseToJSON(
  gleanAssistInsightsResponse: GleanAssistInsightsResponse,
): string {
  return JSON.stringify(
    GleanAssistInsightsResponse$outboundSchema.parse(
      gleanAssistInsightsResponse,
    ),
  );
}

export function gleanAssistInsightsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GleanAssistInsightsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GleanAssistInsightsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GleanAssistInsightsResponse' from JSON`,
  );
}
