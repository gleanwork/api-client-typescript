/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ScopeType,
  ScopeType$inboundSchema,
  ScopeType$outboundSchema,
} from "./scopetype.js";

/**
 * Describes the grant permission level that a user has for a specific feature
 */
export type GrantPermission = {
  /**
   * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
   */
  scopeType?: ScopeType | undefined;
};

/** @internal */
export const GrantPermission$inboundSchema: z.ZodType<
  GrantPermission,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopeType: ScopeType$inboundSchema.optional(),
});

/** @internal */
export type GrantPermission$Outbound = {
  scopeType?: string | undefined;
};

/** @internal */
export const GrantPermission$outboundSchema: z.ZodType<
  GrantPermission$Outbound,
  z.ZodTypeDef,
  GrantPermission
> = z.object({
  scopeType: ScopeType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantPermission$ {
  /** @deprecated use `GrantPermission$inboundSchema` instead. */
  export const inboundSchema = GrantPermission$inboundSchema;
  /** @deprecated use `GrantPermission$outboundSchema` instead. */
  export const outboundSchema = GrantPermission$outboundSchema;
  /** @deprecated use `GrantPermission$Outbound` instead. */
  export type Outbound = GrantPermission$Outbound;
}

export function grantPermissionToJSON(
  grantPermission: GrantPermission,
): string {
  return JSON.stringify(GrantPermission$outboundSchema.parse(grantPermission));
}

export function grantPermissionFromJSON(
  jsonString: string,
): SafeParseResult<GrantPermission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrantPermission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrantPermission' from JSON`,
  );
}
