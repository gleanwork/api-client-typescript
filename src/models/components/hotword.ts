/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HotwordProximity,
  HotwordProximity$inboundSchema,
  HotwordProximity$Outbound,
  HotwordProximity$outboundSchema,
} from "./hotwordproximity.js";

export type Hotword = {
  regex?: string | undefined;
  proximity?: HotwordProximity | undefined;
};

/** @internal */
export const Hotword$inboundSchema: z.ZodType<Hotword, z.ZodTypeDef, unknown> =
  z.object({
    regex: z.string().optional(),
    proximity: HotwordProximity$inboundSchema.optional(),
  });

/** @internal */
export type Hotword$Outbound = {
  regex?: string | undefined;
  proximity?: HotwordProximity$Outbound | undefined;
};

/** @internal */
export const Hotword$outboundSchema: z.ZodType<
  Hotword$Outbound,
  z.ZodTypeDef,
  Hotword
> = z.object({
  regex: z.string().optional(),
  proximity: HotwordProximity$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Hotword$ {
  /** @deprecated use `Hotword$inboundSchema` instead. */
  export const inboundSchema = Hotword$inboundSchema;
  /** @deprecated use `Hotword$outboundSchema` instead. */
  export const outboundSchema = Hotword$outboundSchema;
  /** @deprecated use `Hotword$Outbound` instead. */
  export type Outbound = Hotword$Outbound;
}

export function hotwordToJSON(hotword: Hotword): string {
  return JSON.stringify(Hotword$outboundSchema.parse(hotword));
}

export function hotwordFromJSON(
  jsonString: string,
): SafeParseResult<Hotword, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Hotword$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Hotword' from JSON`,
  );
}
