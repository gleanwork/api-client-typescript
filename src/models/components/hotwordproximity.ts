/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type HotwordProximity = {
  windowBefore?: number | undefined;
  windowAfter?: number | undefined;
};

/** @internal */
export const HotwordProximity$inboundSchema: z.ZodType<
  HotwordProximity,
  z.ZodTypeDef,
  unknown
> = z.object({
  windowBefore: z.number().int().optional(),
  windowAfter: z.number().int().optional(),
});

/** @internal */
export type HotwordProximity$Outbound = {
  windowBefore?: number | undefined;
  windowAfter?: number | undefined;
};

/** @internal */
export const HotwordProximity$outboundSchema: z.ZodType<
  HotwordProximity$Outbound,
  z.ZodTypeDef,
  HotwordProximity
> = z.object({
  windowBefore: z.number().int().optional(),
  windowAfter: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HotwordProximity$ {
  /** @deprecated use `HotwordProximity$inboundSchema` instead. */
  export const inboundSchema = HotwordProximity$inboundSchema;
  /** @deprecated use `HotwordProximity$outboundSchema` instead. */
  export const outboundSchema = HotwordProximity$outboundSchema;
  /** @deprecated use `HotwordProximity$Outbound` instead. */
  export type Outbound = HotwordProximity$Outbound;
}

export function hotwordProximityToJSON(
  hotwordProximity: HotwordProximity,
): string {
  return JSON.stringify(
    HotwordProximity$outboundSchema.parse(hotwordProximity),
  );
}

export function hotwordProximityFromJSON(
  jsonString: string,
): SafeParseResult<HotwordProximity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HotwordProximity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HotwordProximity' from JSON`,
  );
}
