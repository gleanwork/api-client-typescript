/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DocumentDefinition,
  DocumentDefinition$inboundSchema,
  DocumentDefinition$Outbound,
  DocumentDefinition$outboundSchema,
} from "./documentdefinition.js";

/**
 * Describes the request body of the /indexdocuments API call
 */
export type IndexDocumentsRequest = {
  /**
   * Optional id parameter to identify and track a batch of documents.
   */
  uploadId?: string | undefined;
  /**
   * Datasource of the documents
   */
  datasource: string;
  /**
   * Batch of documents being added/updated
   */
  documents: Array<DocumentDefinition>;
};

/** @internal */
export const IndexDocumentsRequest$inboundSchema: z.ZodType<
  IndexDocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uploadId: z.string().optional(),
  datasource: z.string(),
  documents: z.array(DocumentDefinition$inboundSchema),
});

/** @internal */
export type IndexDocumentsRequest$Outbound = {
  uploadId?: string | undefined;
  datasource: string;
  documents: Array<DocumentDefinition$Outbound>;
};

/** @internal */
export const IndexDocumentsRequest$outboundSchema: z.ZodType<
  IndexDocumentsRequest$Outbound,
  z.ZodTypeDef,
  IndexDocumentsRequest
> = z.object({
  uploadId: z.string().optional(),
  datasource: z.string(),
  documents: z.array(DocumentDefinition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexDocumentsRequest$ {
  /** @deprecated use `IndexDocumentsRequest$inboundSchema` instead. */
  export const inboundSchema = IndexDocumentsRequest$inboundSchema;
  /** @deprecated use `IndexDocumentsRequest$outboundSchema` instead. */
  export const outboundSchema = IndexDocumentsRequest$outboundSchema;
  /** @deprecated use `IndexDocumentsRequest$Outbound` instead. */
  export type Outbound = IndexDocumentsRequest$Outbound;
}

export function indexDocumentsRequestToJSON(
  indexDocumentsRequest: IndexDocumentsRequest,
): string {
  return JSON.stringify(
    IndexDocumentsRequest$outboundSchema.parse(indexDocumentsRequest),
  );
}

export function indexDocumentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<IndexDocumentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexDocumentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexDocumentsRequest' from JSON`,
  );
}
