/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IndexStatus = {
  /**
   * When the document was last crawled
   */
  lastCrawledTime?: Date | undefined;
  /**
   * When the document was last indexed
   */
  lastIndexedTime?: Date | undefined;
};

/** @internal */
export const IndexStatus$inboundSchema: z.ZodType<
  IndexStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  lastCrawledTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  lastIndexedTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
});

/** @internal */
export type IndexStatus$Outbound = {
  lastCrawledTime?: string | undefined;
  lastIndexedTime?: string | undefined;
};

/** @internal */
export const IndexStatus$outboundSchema: z.ZodType<
  IndexStatus$Outbound,
  z.ZodTypeDef,
  IndexStatus
> = z.object({
  lastCrawledTime: z.date().transform(v => v.toISOString()).optional(),
  lastIndexedTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IndexStatus$ {
  /** @deprecated use `IndexStatus$inboundSchema` instead. */
  export const inboundSchema = IndexStatus$inboundSchema;
  /** @deprecated use `IndexStatus$outboundSchema` instead. */
  export const outboundSchema = IndexStatus$outboundSchema;
  /** @deprecated use `IndexStatus$Outbound` instead. */
  export type Outbound = IndexStatus$Outbound;
}

export function indexStatusToJSON(indexStatus: IndexStatus): string {
  return JSON.stringify(IndexStatus$outboundSchema.parse(indexStatus));
}

export function indexStatusFromJSON(
  jsonString: string,
): SafeParseResult<IndexStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IndexStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IndexStatus' from JSON`,
  );
}
