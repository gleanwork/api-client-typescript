/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TimeRange,
  TimeRange$inboundSchema,
  TimeRange$Outbound,
  TimeRange$outboundSchema,
} from "./timerange.js";

/**
 * The types of datasource for which to run the report/policy.
 */
export const DatasourcesType = {
  All: "ALL",
  Custom: "CUSTOM",
} as const;
/**
 * The types of datasource for which to run the report/policy.
 */
export type DatasourcesType = ClosedEnum<typeof DatasourcesType>;

/**
 * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
 */
export const TimePeriodType = {
  AllTime: "ALL_TIME",
  PastYear: "PAST_YEAR",
  PastDay: "PAST_DAY",
  Custom: "CUSTOM",
} as const;
/**
 * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
 */
export type TimePeriodType = ClosedEnum<typeof TimePeriodType>;

/**
 * Controls which data-sources and what time-range to include in scans.
 */
export type InputOptions = {
  /**
   * list of url regex matching documents excluded from report
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  urlGreenlist?: Array<string> | undefined;
  /**
   * The types of datasource for which to run the report/policy.
   */
  datasourcesType?: DatasourcesType | undefined;
  /**
   * List of datasources to consider for report. DEPRECATED - use datasourceInstances instead.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  datasources?: Array<string> | undefined;
  /**
   * List of datasource instances to consider for report/policy.
   */
  datasourceInstances?: Array<string> | undefined;
  /**
   * Type of time period for which to run the report/policy. PAST_DAY is deprecated.
   */
  timePeriodType?: TimePeriodType | undefined;
  customTimeRange?: TimeRange | undefined;
};

/** @internal */
export const DatasourcesType$inboundSchema: z.ZodNativeEnum<
  typeof DatasourcesType
> = z.nativeEnum(DatasourcesType);

/** @internal */
export const DatasourcesType$outboundSchema: z.ZodNativeEnum<
  typeof DatasourcesType
> = DatasourcesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatasourcesType$ {
  /** @deprecated use `DatasourcesType$inboundSchema` instead. */
  export const inboundSchema = DatasourcesType$inboundSchema;
  /** @deprecated use `DatasourcesType$outboundSchema` instead. */
  export const outboundSchema = DatasourcesType$outboundSchema;
}

/** @internal */
export const TimePeriodType$inboundSchema: z.ZodNativeEnum<
  typeof TimePeriodType
> = z.nativeEnum(TimePeriodType);

/** @internal */
export const TimePeriodType$outboundSchema: z.ZodNativeEnum<
  typeof TimePeriodType
> = TimePeriodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimePeriodType$ {
  /** @deprecated use `TimePeriodType$inboundSchema` instead. */
  export const inboundSchema = TimePeriodType$inboundSchema;
  /** @deprecated use `TimePeriodType$outboundSchema` instead. */
  export const outboundSchema = TimePeriodType$outboundSchema;
}

/** @internal */
export const InputOptions$inboundSchema: z.ZodType<
  InputOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  urlGreenlist: z.array(z.string()).optional(),
  datasourcesType: DatasourcesType$inboundSchema.optional(),
  datasources: z.array(z.string()).optional(),
  datasourceInstances: z.array(z.string()).optional(),
  timePeriodType: TimePeriodType$inboundSchema.optional(),
  customTimeRange: TimeRange$inboundSchema.optional(),
});

/** @internal */
export type InputOptions$Outbound = {
  urlGreenlist?: Array<string> | undefined;
  datasourcesType?: string | undefined;
  datasources?: Array<string> | undefined;
  datasourceInstances?: Array<string> | undefined;
  timePeriodType?: string | undefined;
  customTimeRange?: TimeRange$Outbound | undefined;
};

/** @internal */
export const InputOptions$outboundSchema: z.ZodType<
  InputOptions$Outbound,
  z.ZodTypeDef,
  InputOptions
> = z.object({
  urlGreenlist: z.array(z.string()).optional(),
  datasourcesType: DatasourcesType$outboundSchema.optional(),
  datasources: z.array(z.string()).optional(),
  datasourceInstances: z.array(z.string()).optional(),
  timePeriodType: TimePeriodType$outboundSchema.optional(),
  customTimeRange: TimeRange$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputOptions$ {
  /** @deprecated use `InputOptions$inboundSchema` instead. */
  export const inboundSchema = InputOptions$inboundSchema;
  /** @deprecated use `InputOptions$outboundSchema` instead. */
  export const outboundSchema = InputOptions$outboundSchema;
  /** @deprecated use `InputOptions$Outbound` instead. */
  export type Outbound = InputOptions$Outbound;
}

export function inputOptionsToJSON(inputOptions: InputOptions): string {
  return JSON.stringify(InputOptions$outboundSchema.parse(inputOptions));
}

export function inputOptionsFromJSON(
  jsonString: string,
): SafeParseResult<InputOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InputOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InputOptions' from JSON`,
  );
}
