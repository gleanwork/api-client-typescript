/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InsightsAiAppRequestOptions,
  InsightsAiAppRequestOptions$inboundSchema,
  InsightsAiAppRequestOptions$Outbound,
  InsightsAiAppRequestOptions$outboundSchema,
} from "./insightsaiapprequestoptions.js";
import {
  Period,
  Period$inboundSchema,
  Period$Outbound,
  Period$outboundSchema,
} from "./period.js";

export const InsightsRequestCategory = {
  Ai: "AI",
  AiApps: "AI_APPS",
  Announcements: "ANNOUNCEMENTS",
  Answers: "ANSWERS",
  Collections: "COLLECTIONS",
  Content: "CONTENT",
  GleanAssist: "GLEAN_ASSIST",
  Queries: "QUERIES",
  Shortcuts: "SHORTCUTS",
  Users: "USERS",
} as const;
export type InsightsRequestCategory = ClosedEnum<
  typeof InsightsRequestCategory
>;

export const AssistantActivityType = {
  GleanChat: "GLEAN_CHAT",
  AiSummary: "AI_SUMMARY",
  AiAnswer: "AI_ANSWER",
  GleanbotResponse: "GLEANBOT_RESPONSE",
} as const;
export type AssistantActivityType = ClosedEnum<typeof AssistantActivityType>;

export type InsightsRequest = {
  /**
   * Categories of data requested. Request can include single or multiple types.
   */
  categories: Array<InsightsRequestCategory>;
  /**
   * Departments that the data is requested for. If this is empty, corresponds to whole company.
   */
  departments?: Array<string> | undefined;
  dayRange?: Period | undefined;
  aiAppRequestOptions?: InsightsAiAppRequestOptions | undefined;
  /**
   * Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
   */
  assistantActivityTypes?: Array<AssistantActivityType> | undefined;
  /**
   * If true, suppresses the generation of per-user Insights in the response. Default is false.
   */
  disablePerUserInsights?: boolean | undefined;
};

/** @internal */
export const InsightsRequestCategory$inboundSchema: z.ZodNativeEnum<
  typeof InsightsRequestCategory
> = z.nativeEnum(InsightsRequestCategory);

/** @internal */
export const InsightsRequestCategory$outboundSchema: z.ZodNativeEnum<
  typeof InsightsRequestCategory
> = InsightsRequestCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsRequestCategory$ {
  /** @deprecated use `InsightsRequestCategory$inboundSchema` instead. */
  export const inboundSchema = InsightsRequestCategory$inboundSchema;
  /** @deprecated use `InsightsRequestCategory$outboundSchema` instead. */
  export const outboundSchema = InsightsRequestCategory$outboundSchema;
}

/** @internal */
export const AssistantActivityType$inboundSchema: z.ZodNativeEnum<
  typeof AssistantActivityType
> = z.nativeEnum(AssistantActivityType);

/** @internal */
export const AssistantActivityType$outboundSchema: z.ZodNativeEnum<
  typeof AssistantActivityType
> = AssistantActivityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantActivityType$ {
  /** @deprecated use `AssistantActivityType$inboundSchema` instead. */
  export const inboundSchema = AssistantActivityType$inboundSchema;
  /** @deprecated use `AssistantActivityType$outboundSchema` instead. */
  export const outboundSchema = AssistantActivityType$outboundSchema;
}

/** @internal */
export const InsightsRequest$inboundSchema: z.ZodType<
  InsightsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  categories: z.array(InsightsRequestCategory$inboundSchema),
  departments: z.array(z.string()).optional(),
  dayRange: Period$inboundSchema.optional(),
  aiAppRequestOptions: InsightsAiAppRequestOptions$inboundSchema.optional(),
  assistantActivityTypes: z.array(AssistantActivityType$inboundSchema)
    .optional(),
  disablePerUserInsights: z.boolean().optional(),
});

/** @internal */
export type InsightsRequest$Outbound = {
  categories: Array<string>;
  departments?: Array<string> | undefined;
  dayRange?: Period$Outbound | undefined;
  aiAppRequestOptions?: InsightsAiAppRequestOptions$Outbound | undefined;
  assistantActivityTypes?: Array<string> | undefined;
  disablePerUserInsights?: boolean | undefined;
};

/** @internal */
export const InsightsRequest$outboundSchema: z.ZodType<
  InsightsRequest$Outbound,
  z.ZodTypeDef,
  InsightsRequest
> = z.object({
  categories: z.array(InsightsRequestCategory$outboundSchema),
  departments: z.array(z.string()).optional(),
  dayRange: Period$outboundSchema.optional(),
  aiAppRequestOptions: InsightsAiAppRequestOptions$outboundSchema.optional(),
  assistantActivityTypes: z.array(AssistantActivityType$outboundSchema)
    .optional(),
  disablePerUserInsights: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsRequest$ {
  /** @deprecated use `InsightsRequest$inboundSchema` instead. */
  export const inboundSchema = InsightsRequest$inboundSchema;
  /** @deprecated use `InsightsRequest$outboundSchema` instead. */
  export const outboundSchema = InsightsRequest$outboundSchema;
  /** @deprecated use `InsightsRequest$Outbound` instead. */
  export type Outbound = InsightsRequest$Outbound;
}

export function insightsRequestToJSON(
  insightsRequest: InsightsRequest,
): string {
  return JSON.stringify(InsightsRequest$outboundSchema.parse(insightsRequest));
}

export function insightsRequestFromJSON(
  jsonString: string,
): SafeParseResult<InsightsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsRequest' from JSON`,
  );
}
