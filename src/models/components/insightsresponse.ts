/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AiAppsInsightsResponse,
  AiAppsInsightsResponse$inboundSchema,
  AiAppsInsightsResponse$Outbound,
  AiAppsInsightsResponse$outboundSchema,
} from "./aiappsinsightsresponse.js";
import {
  AiInsightsResponse,
  AiInsightsResponse$inboundSchema,
  AiInsightsResponse$Outbound,
  AiInsightsResponse$outboundSchema,
} from "./aiinsightsresponse.js";
import {
  ContentInsightsResponse,
  ContentInsightsResponse$inboundSchema,
  ContentInsightsResponse$Outbound,
  ContentInsightsResponse$outboundSchema,
} from "./contentinsightsresponse.js";
import {
  GleanAssistInsightsResponse,
  GleanAssistInsightsResponse$inboundSchema,
  GleanAssistInsightsResponse$Outbound,
  GleanAssistInsightsResponse$outboundSchema,
} from "./gleanassistinsightsresponse.js";
import {
  LabeledCountInfo,
  LabeledCountInfo$inboundSchema,
  LabeledCountInfo$Outbound,
  LabeledCountInfo$outboundSchema,
} from "./labeledcountinfo.js";
import {
  QueryInsightsResponse,
  QueryInsightsResponse$inboundSchema,
  QueryInsightsResponse$Outbound,
  QueryInsightsResponse$outboundSchema,
} from "./queryinsightsresponse.js";
import {
  ShortcutInsightsResponse,
  ShortcutInsightsResponse$inboundSchema,
  ShortcutInsightsResponse$Outbound,
  ShortcutInsightsResponse$outboundSchema,
} from "./shortcutinsightsresponse.js";
import {
  UserInsightsResponse,
  UserInsightsResponse$inboundSchema,
  UserInsightsResponse$Outbound,
  UserInsightsResponse$outboundSchema,
} from "./userinsightsresponse.js";

export type InsightsResponse = {
  /**
   * List of timeseries to make charts (if applicable).
   */
  timeseries?: Array<LabeledCountInfo> | undefined;
  users?: UserInsightsResponse | undefined;
  content?: ContentInsightsResponse | undefined;
  queries?: QueryInsightsResponse | undefined;
  collections?: ContentInsightsResponse | undefined;
  collectionsV2?: ContentInsightsResponse | undefined;
  shortcuts?: ShortcutInsightsResponse | undefined;
  announcements?: ContentInsightsResponse | undefined;
  answers?: ContentInsightsResponse | undefined;
  ai?: AiInsightsResponse | undefined;
  aiApps?: AiAppsInsightsResponse | undefined;
  gleanAssist?: GleanAssistInsightsResponse | undefined;
  /**
   * list of all departments.
   */
  departments?: Array<string> | undefined;
};

/** @internal */
export const InsightsResponse$inboundSchema: z.ZodType<
  InsightsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  timeseries: z.array(LabeledCountInfo$inboundSchema).optional(),
  users: UserInsightsResponse$inboundSchema.optional(),
  content: ContentInsightsResponse$inboundSchema.optional(),
  queries: QueryInsightsResponse$inboundSchema.optional(),
  collections: ContentInsightsResponse$inboundSchema.optional(),
  collectionsV2: ContentInsightsResponse$inboundSchema.optional(),
  shortcuts: ShortcutInsightsResponse$inboundSchema.optional(),
  announcements: ContentInsightsResponse$inboundSchema.optional(),
  answers: ContentInsightsResponse$inboundSchema.optional(),
  ai: AiInsightsResponse$inboundSchema.optional(),
  aiApps: AiAppsInsightsResponse$inboundSchema.optional(),
  gleanAssist: GleanAssistInsightsResponse$inboundSchema.optional(),
  departments: z.array(z.string()).optional(),
});

/** @internal */
export type InsightsResponse$Outbound = {
  timeseries?: Array<LabeledCountInfo$Outbound> | undefined;
  users?: UserInsightsResponse$Outbound | undefined;
  content?: ContentInsightsResponse$Outbound | undefined;
  queries?: QueryInsightsResponse$Outbound | undefined;
  collections?: ContentInsightsResponse$Outbound | undefined;
  collectionsV2?: ContentInsightsResponse$Outbound | undefined;
  shortcuts?: ShortcutInsightsResponse$Outbound | undefined;
  announcements?: ContentInsightsResponse$Outbound | undefined;
  answers?: ContentInsightsResponse$Outbound | undefined;
  ai?: AiInsightsResponse$Outbound | undefined;
  aiApps?: AiAppsInsightsResponse$Outbound | undefined;
  gleanAssist?: GleanAssistInsightsResponse$Outbound | undefined;
  departments?: Array<string> | undefined;
};

/** @internal */
export const InsightsResponse$outboundSchema: z.ZodType<
  InsightsResponse$Outbound,
  z.ZodTypeDef,
  InsightsResponse
> = z.object({
  timeseries: z.array(LabeledCountInfo$outboundSchema).optional(),
  users: UserInsightsResponse$outboundSchema.optional(),
  content: ContentInsightsResponse$outboundSchema.optional(),
  queries: QueryInsightsResponse$outboundSchema.optional(),
  collections: ContentInsightsResponse$outboundSchema.optional(),
  collectionsV2: ContentInsightsResponse$outboundSchema.optional(),
  shortcuts: ShortcutInsightsResponse$outboundSchema.optional(),
  announcements: ContentInsightsResponse$outboundSchema.optional(),
  answers: ContentInsightsResponse$outboundSchema.optional(),
  ai: AiInsightsResponse$outboundSchema.optional(),
  aiApps: AiAppsInsightsResponse$outboundSchema.optional(),
  gleanAssist: GleanAssistInsightsResponse$outboundSchema.optional(),
  departments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsightsResponse$ {
  /** @deprecated use `InsightsResponse$inboundSchema` instead. */
  export const inboundSchema = InsightsResponse$inboundSchema;
  /** @deprecated use `InsightsResponse$outboundSchema` instead. */
  export const outboundSchema = InsightsResponse$outboundSchema;
  /** @deprecated use `InsightsResponse$Outbound` instead. */
  export type Outbound = InsightsResponse$Outbound;
}

export function insightsResponseToJSON(
  insightsResponse: InsightsResponse,
): string {
  return JSON.stringify(
    InsightsResponse$outboundSchema.parse(insightsResponse),
  );
}

export function insightsResponseFromJSON(
  jsonString: string,
): SafeParseResult<InsightsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsightsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsightsResponse' from JSON`,
  );
}
