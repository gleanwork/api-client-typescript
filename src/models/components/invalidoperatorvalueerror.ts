/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InvalidOperatorValueError = {
  /**
   * The operator key that has an invalid value.
   */
  key?: string | undefined;
  /**
   * The invalid operator value.
   */
  value?: string | undefined;
};

/** @internal */
export const InvalidOperatorValueError$inboundSchema: z.ZodType<
  InvalidOperatorValueError,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/** @internal */
export type InvalidOperatorValueError$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
};

/** @internal */
export const InvalidOperatorValueError$outboundSchema: z.ZodType<
  InvalidOperatorValueError$Outbound,
  z.ZodTypeDef,
  InvalidOperatorValueError
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidOperatorValueError$ {
  /** @deprecated use `InvalidOperatorValueError$inboundSchema` instead. */
  export const inboundSchema = InvalidOperatorValueError$inboundSchema;
  /** @deprecated use `InvalidOperatorValueError$outboundSchema` instead. */
  export const outboundSchema = InvalidOperatorValueError$outboundSchema;
  /** @deprecated use `InvalidOperatorValueError$Outbound` instead. */
  export type Outbound = InvalidOperatorValueError$Outbound;
}

export function invalidOperatorValueErrorToJSON(
  invalidOperatorValueError: InvalidOperatorValueError,
): string {
  return JSON.stringify(
    InvalidOperatorValueError$outboundSchema.parse(invalidOperatorValueError),
  );
}

export function invalidOperatorValueErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidOperatorValueError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidOperatorValueError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidOperatorValueError' from JSON`,
  );
}
