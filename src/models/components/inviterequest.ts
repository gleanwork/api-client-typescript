/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CommunicationChannel,
  CommunicationChannel$inboundSchema,
  CommunicationChannel$outboundSchema,
} from "./communicationchannel.js";
import {
  CommunicationTemplate,
  CommunicationTemplate$inboundSchema,
  CommunicationTemplate$outboundSchema,
} from "./communicationtemplate.js";
import {
  PeopleFilters,
  PeopleFilters$inboundSchema,
  PeopleFilters$Outbound,
  PeopleFilters$outboundSchema,
} from "./peoplefilters.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";

/**
 * A request to send an invite to the specified user[s]
 */
export type InviteRequest = {
  channel?: CommunicationChannel | undefined;
  /**
   * The type of email to send
   */
  template?: CommunicationTemplate | undefined;
  /**
   * The people who should receive this invite
   */
  recipients?: Array<Person> | undefined;
  recipientFilters?: PeopleFilters | undefined;
};

/** @internal */
export const InviteRequest$inboundSchema: z.ZodType<
  InviteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: CommunicationChannel$inboundSchema.optional(),
  template: CommunicationTemplate$inboundSchema.optional(),
  recipients: z.array(Person$inboundSchema).optional(),
  recipientFilters: PeopleFilters$inboundSchema.optional(),
});

/** @internal */
export type InviteRequest$Outbound = {
  channel?: string | undefined;
  template?: string | undefined;
  recipients?: Array<Person$Outbound> | undefined;
  recipientFilters?: PeopleFilters$Outbound | undefined;
};

/** @internal */
export const InviteRequest$outboundSchema: z.ZodType<
  InviteRequest$Outbound,
  z.ZodTypeDef,
  InviteRequest
> = z.object({
  channel: CommunicationChannel$outboundSchema.optional(),
  template: CommunicationTemplate$outboundSchema.optional(),
  recipients: z.array(Person$outboundSchema).optional(),
  recipientFilters: PeopleFilters$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteRequest$ {
  /** @deprecated use `InviteRequest$inboundSchema` instead. */
  export const inboundSchema = InviteRequest$inboundSchema;
  /** @deprecated use `InviteRequest$outboundSchema` instead. */
  export const outboundSchema = InviteRequest$outboundSchema;
  /** @deprecated use `InviteRequest$Outbound` instead. */
  export type Outbound = InviteRequest$Outbound;
}

export function inviteRequestToJSON(inviteRequest: InviteRequest): string {
  return JSON.stringify(InviteRequest$outboundSchema.parse(inviteRequest));
}

export function inviteRequestFromJSON(
  jsonString: string,
): SafeParseResult<InviteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InviteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InviteRequest' from JSON`,
  );
}
