/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AgentResult,
  AgentResult$inboundSchema,
  AgentResult$Outbound,
  AgentResult$outboundSchema,
} from "./agentresult.js";

/**
 * List of all agents and their metadata.
 */
export type ListAgentsResponse = {
  agents?: Array<AgentResult> | undefined;
};

/** @internal */
export const ListAgentsResponse$inboundSchema: z.ZodType<
  ListAgentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  agents: z.array(AgentResult$inboundSchema).optional(),
});

/** @internal */
export type ListAgentsResponse$Outbound = {
  agents?: Array<AgentResult$Outbound> | undefined;
};

/** @internal */
export const ListAgentsResponse$outboundSchema: z.ZodType<
  ListAgentsResponse$Outbound,
  z.ZodTypeDef,
  ListAgentsResponse
> = z.object({
  agents: z.array(AgentResult$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAgentsResponse$ {
  /** @deprecated use `ListAgentsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAgentsResponse$inboundSchema;
  /** @deprecated use `ListAgentsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAgentsResponse$outboundSchema;
  /** @deprecated use `ListAgentsResponse$Outbound` instead. */
  export type Outbound = ListAgentsResponse$Outbound;
}

export function listAgentsResponseToJSON(
  listAgentsResponse: ListAgentsResponse,
): string {
  return JSON.stringify(
    ListAgentsResponse$outboundSchema.parse(listAgentsResponse),
  );
}

export function listAgentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAgentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAgentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAgentsResponse' from JSON`,
  );
}
