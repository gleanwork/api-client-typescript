/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnnouncementChannel,
  AnnouncementChannel$inboundSchema,
  AnnouncementChannel$outboundSchema,
} from "./announcementchannel.js";

export type ListAnnouncementsRequest = {
  /**
   * This determines whether this is a Social Feed post or a regular announcement.
   */
  channel?: AnnouncementChannel | undefined;
};

/** @internal */
export const ListAnnouncementsRequest$inboundSchema: z.ZodType<
  ListAnnouncementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  channel: AnnouncementChannel$inboundSchema.optional(),
});

/** @internal */
export type ListAnnouncementsRequest$Outbound = {
  channel?: string | undefined;
};

/** @internal */
export const ListAnnouncementsRequest$outboundSchema: z.ZodType<
  ListAnnouncementsRequest$Outbound,
  z.ZodTypeDef,
  ListAnnouncementsRequest
> = z.object({
  channel: AnnouncementChannel$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAnnouncementsRequest$ {
  /** @deprecated use `ListAnnouncementsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAnnouncementsRequest$inboundSchema;
  /** @deprecated use `ListAnnouncementsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAnnouncementsRequest$outboundSchema;
  /** @deprecated use `ListAnnouncementsRequest$Outbound` instead. */
  export type Outbound = ListAnnouncementsRequest$Outbound;
}

export function listAnnouncementsRequestToJSON(
  listAnnouncementsRequest: ListAnnouncementsRequest,
): string {
  return JSON.stringify(
    ListAnnouncementsRequest$outboundSchema.parse(listAnnouncementsRequest),
  );
}

export function listAnnouncementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAnnouncementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAnnouncementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAnnouncementsRequest' from JSON`,
  );
}
