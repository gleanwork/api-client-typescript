/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Announcement,
  Announcement$inboundSchema,
  Announcement$Outbound,
  Announcement$outboundSchema,
} from "./announcement.js";

export type ListAnnouncementsResponse = {
  /**
   * List of announcements.
   */
  announcements?: Array<Announcement> | undefined;
};

/** @internal */
export const ListAnnouncementsResponse$inboundSchema: z.ZodType<
  ListAnnouncementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  announcements: z.array(Announcement$inboundSchema).optional(),
});

/** @internal */
export type ListAnnouncementsResponse$Outbound = {
  announcements?: Array<Announcement$Outbound> | undefined;
};

/** @internal */
export const ListAnnouncementsResponse$outboundSchema: z.ZodType<
  ListAnnouncementsResponse$Outbound,
  z.ZodTypeDef,
  ListAnnouncementsResponse
> = z.object({
  announcements: z.array(Announcement$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAnnouncementsResponse$ {
  /** @deprecated use `ListAnnouncementsResponse$inboundSchema` instead. */
  export const inboundSchema = ListAnnouncementsResponse$inboundSchema;
  /** @deprecated use `ListAnnouncementsResponse$outboundSchema` instead. */
  export const outboundSchema = ListAnnouncementsResponse$outboundSchema;
  /** @deprecated use `ListAnnouncementsResponse$Outbound` instead. */
  export type Outbound = ListAnnouncementsResponse$Outbound;
}

export function listAnnouncementsResponseToJSON(
  listAnnouncementsResponse: ListAnnouncementsResponse,
): string {
  return JSON.stringify(
    ListAnnouncementsResponse$outboundSchema.parse(listAnnouncementsResponse),
  );
}

export function listAnnouncementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAnnouncementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAnnouncementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAnnouncementsResponse' from JSON`,
  );
}
