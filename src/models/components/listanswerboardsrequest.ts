/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAnswerBoardsRequest = {
  /**
   * Whether to include the audience filters with the listed Answer Boards.
   */
  withAudience?: boolean | undefined;
  /**
   * Whether to include the editor roles with the listed Answer Boards.
   */
  withRoles?: boolean | undefined;
};

/** @internal */
export const ListAnswerBoardsRequest$inboundSchema: z.ZodType<
  ListAnswerBoardsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  withAudience: z.boolean().optional(),
  withRoles: z.boolean().optional(),
});

/** @internal */
export type ListAnswerBoardsRequest$Outbound = {
  withAudience?: boolean | undefined;
  withRoles?: boolean | undefined;
};

/** @internal */
export const ListAnswerBoardsRequest$outboundSchema: z.ZodType<
  ListAnswerBoardsRequest$Outbound,
  z.ZodTypeDef,
  ListAnswerBoardsRequest
> = z.object({
  withAudience: z.boolean().optional(),
  withRoles: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAnswerBoardsRequest$ {
  /** @deprecated use `ListAnswerBoardsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAnswerBoardsRequest$inboundSchema;
  /** @deprecated use `ListAnswerBoardsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAnswerBoardsRequest$outboundSchema;
  /** @deprecated use `ListAnswerBoardsRequest$Outbound` instead. */
  export type Outbound = ListAnswerBoardsRequest$Outbound;
}

export function listAnswerBoardsRequestToJSON(
  listAnswerBoardsRequest: ListAnswerBoardsRequest,
): string {
  return JSON.stringify(
    ListAnswerBoardsRequest$outboundSchema.parse(listAnswerBoardsRequest),
  );
}

export function listAnswerBoardsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAnswerBoardsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAnswerBoardsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAnswerBoardsRequest' from JSON`,
  );
}
