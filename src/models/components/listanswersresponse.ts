/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnswerResult,
  AnswerResult$inboundSchema,
  AnswerResult$Outbound,
  AnswerResult$outboundSchema,
} from "./answerresult.js";

export type ListAnswersResponse = {
  /**
   * List of answers with tracking tokens.
   */
  answerResults: Array<AnswerResult>;
};

/** @internal */
export const ListAnswersResponse$inboundSchema: z.ZodType<
  ListAnswersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  answerResults: z.array(AnswerResult$inboundSchema),
});

/** @internal */
export type ListAnswersResponse$Outbound = {
  answerResults: Array<AnswerResult$Outbound>;
};

/** @internal */
export const ListAnswersResponse$outboundSchema: z.ZodType<
  ListAnswersResponse$Outbound,
  z.ZodTypeDef,
  ListAnswersResponse
> = z.object({
  answerResults: z.array(AnswerResult$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAnswersResponse$ {
  /** @deprecated use `ListAnswersResponse$inboundSchema` instead. */
  export const inboundSchema = ListAnswersResponse$inboundSchema;
  /** @deprecated use `ListAnswersResponse$outboundSchema` instead. */
  export const outboundSchema = ListAnswersResponse$outboundSchema;
  /** @deprecated use `ListAnswersResponse$Outbound` instead. */
  export type Outbound = ListAnswersResponse$Outbound;
}

export function listAnswersResponseToJSON(
  listAnswersResponse: ListAnswersResponse,
): string {
  return JSON.stringify(
    ListAnswersResponse$outboundSchema.parse(listAnswersResponse),
  );
}

export function listAnswersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListAnswersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAnswersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAnswersResponse' from JSON`,
  );
}
