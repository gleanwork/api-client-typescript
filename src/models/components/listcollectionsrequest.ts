/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCollectionsRequest = {
  /**
   * Whether to include the audience filters with the listed Collections.
   */
  includeAudience?: boolean | undefined;
  /**
   * Whether to include the editor roles with the listed Collections.
   */
  includeRoles?: boolean | undefined;
  /**
   * The datasource type this Collection can hold.
   *
   * @remarks
   * ANSWERS - for Collections representing answer boards
   */
  allowedDatasource?: string | undefined;
};

/** @internal */
export const ListCollectionsRequest$inboundSchema: z.ZodType<
  ListCollectionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  includeAudience: z.boolean().optional(),
  includeRoles: z.boolean().optional(),
  allowedDatasource: z.string().optional(),
});

/** @internal */
export type ListCollectionsRequest$Outbound = {
  includeAudience?: boolean | undefined;
  includeRoles?: boolean | undefined;
  allowedDatasource?: string | undefined;
};

/** @internal */
export const ListCollectionsRequest$outboundSchema: z.ZodType<
  ListCollectionsRequest$Outbound,
  z.ZodTypeDef,
  ListCollectionsRequest
> = z.object({
  includeAudience: z.boolean().optional(),
  includeRoles: z.boolean().optional(),
  allowedDatasource: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCollectionsRequest$ {
  /** @deprecated use `ListCollectionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListCollectionsRequest$inboundSchema;
  /** @deprecated use `ListCollectionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListCollectionsRequest$outboundSchema;
  /** @deprecated use `ListCollectionsRequest$Outbound` instead. */
  export type Outbound = ListCollectionsRequest$Outbound;
}

export function listCollectionsRequestToJSON(
  listCollectionsRequest: ListCollectionsRequest,
): string {
  return JSON.stringify(
    ListCollectionsRequest$outboundSchema.parse(listCollectionsRequest),
  );
}

export function listCollectionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCollectionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCollectionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCollectionsRequest' from JSON`,
  );
}
