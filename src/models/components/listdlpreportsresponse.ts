/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DlpReport,
  DlpReport$inboundSchema,
  DlpReport$Outbound,
  DlpReport$outboundSchema,
} from "./dlpreport.js";

export type ListDlpReportsResponse = {
  reports?: Array<DlpReport> | undefined;
};

/** @internal */
export const ListDlpReportsResponse$inboundSchema: z.ZodType<
  ListDlpReportsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  reports: z.array(DlpReport$inboundSchema).optional(),
});

/** @internal */
export type ListDlpReportsResponse$Outbound = {
  reports?: Array<DlpReport$Outbound> | undefined;
};

/** @internal */
export const ListDlpReportsResponse$outboundSchema: z.ZodType<
  ListDlpReportsResponse$Outbound,
  z.ZodTypeDef,
  ListDlpReportsResponse
> = z.object({
  reports: z.array(DlpReport$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDlpReportsResponse$ {
  /** @deprecated use `ListDlpReportsResponse$inboundSchema` instead. */
  export const inboundSchema = ListDlpReportsResponse$inboundSchema;
  /** @deprecated use `ListDlpReportsResponse$outboundSchema` instead. */
  export const outboundSchema = ListDlpReportsResponse$outboundSchema;
  /** @deprecated use `ListDlpReportsResponse$Outbound` instead. */
  export type Outbound = ListDlpReportsResponse$Outbound;
}

export function listDlpReportsResponseToJSON(
  listDlpReportsResponse: ListDlpReportsResponse,
): string {
  return JSON.stringify(
    ListDlpReportsResponse$outboundSchema.parse(listDlpReportsResponse),
  );
}

export function listDlpReportsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListDlpReportsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDlpReportsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDlpReportsResponse' from JSON`,
  );
}
