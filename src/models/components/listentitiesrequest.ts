/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  SortOptions,
  SortOptions$inboundSchema,
  SortOptions$Outbound,
  SortOptions$outboundSchema,
} from "./sortoptions.js";

export const ListEntitiesRequestEntityType = {
  People: "PEOPLE",
  Teams: "TEAMS",
  CustomEntities: "CUSTOM_ENTITIES",
} as const;
export type ListEntitiesRequestEntityType = ClosedEnum<
  typeof ListEntitiesRequestEntityType
>;

export const ListEntitiesRequestIncludeField = {
  People: "PEOPLE",
  Teams: "TEAMS",
  PeopleDistance: "PEOPLE_DISTANCE",
  Permissions: "PERMISSIONS",
  Facets: "FACETS",
  InviteInfo: "INVITE_INFO",
  LastExtensionUse: "LAST_EXTENSION_USE",
  ManagementDetails: "MANAGEMENT_DETAILS",
  UnprocessedTeams: "UNPROCESSED_TEAMS",
} as const;
export type ListEntitiesRequestIncludeField = ClosedEnum<
  typeof ListEntitiesRequestIncludeField
>;

export type ListEntitiesRequest = {
  filter?: Array<FacetFilter> | undefined;
  /**
   * Use EntitiesSortOrder enum for SortOptions.sortBy
   */
  sort?: Array<SortOptions> | undefined;
  entityType?: ListEntitiesRequestEntityType | undefined;
  /**
   * The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
   */
  datasource?: string | undefined;
  /**
   * A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
   */
  query?: string | undefined;
  /**
   * List of entity fields to return (that aren't returned by default)
   */
  includeFields?: Array<ListEntitiesRequestIncludeField> | undefined;
  /**
   * Hint to the server about how many results to send back. Server may return less.
   */
  pageSize?: number | undefined;
  /**
   * Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
   */
  cursor?: string | undefined;
  /**
   * A string denoting the search surface from which the endpoint is called.
   */
  source?: string | undefined;
};

/** @internal */
export const ListEntitiesRequestEntityType$inboundSchema: z.ZodNativeEnum<
  typeof ListEntitiesRequestEntityType
> = z.nativeEnum(ListEntitiesRequestEntityType);

/** @internal */
export const ListEntitiesRequestEntityType$outboundSchema: z.ZodNativeEnum<
  typeof ListEntitiesRequestEntityType
> = ListEntitiesRequestEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEntitiesRequestEntityType$ {
  /** @deprecated use `ListEntitiesRequestEntityType$inboundSchema` instead. */
  export const inboundSchema = ListEntitiesRequestEntityType$inboundSchema;
  /** @deprecated use `ListEntitiesRequestEntityType$outboundSchema` instead. */
  export const outboundSchema = ListEntitiesRequestEntityType$outboundSchema;
}

/** @internal */
export const ListEntitiesRequestIncludeField$inboundSchema: z.ZodNativeEnum<
  typeof ListEntitiesRequestIncludeField
> = z.nativeEnum(ListEntitiesRequestIncludeField);

/** @internal */
export const ListEntitiesRequestIncludeField$outboundSchema: z.ZodNativeEnum<
  typeof ListEntitiesRequestIncludeField
> = ListEntitiesRequestIncludeField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEntitiesRequestIncludeField$ {
  /** @deprecated use `ListEntitiesRequestIncludeField$inboundSchema` instead. */
  export const inboundSchema = ListEntitiesRequestIncludeField$inboundSchema;
  /** @deprecated use `ListEntitiesRequestIncludeField$outboundSchema` instead. */
  export const outboundSchema = ListEntitiesRequestIncludeField$outboundSchema;
}

/** @internal */
export const ListEntitiesRequest$inboundSchema: z.ZodType<
  ListEntitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.array(FacetFilter$inboundSchema).optional(),
  sort: z.array(SortOptions$inboundSchema).optional(),
  entityType: ListEntitiesRequestEntityType$inboundSchema.default("PEOPLE"),
  datasource: z.string().optional(),
  query: z.string().optional(),
  includeFields: z.array(ListEntitiesRequestIncludeField$inboundSchema)
    .optional(),
  pageSize: z.number().int().optional(),
  cursor: z.string().optional(),
  source: z.string().optional(),
});

/** @internal */
export type ListEntitiesRequest$Outbound = {
  filter?: Array<FacetFilter$Outbound> | undefined;
  sort?: Array<SortOptions$Outbound> | undefined;
  entityType: string;
  datasource?: string | undefined;
  query?: string | undefined;
  includeFields?: Array<string> | undefined;
  pageSize?: number | undefined;
  cursor?: string | undefined;
  source?: string | undefined;
};

/** @internal */
export const ListEntitiesRequest$outboundSchema: z.ZodType<
  ListEntitiesRequest$Outbound,
  z.ZodTypeDef,
  ListEntitiesRequest
> = z.object({
  filter: z.array(FacetFilter$outboundSchema).optional(),
  sort: z.array(SortOptions$outboundSchema).optional(),
  entityType: ListEntitiesRequestEntityType$outboundSchema.default("PEOPLE"),
  datasource: z.string().optional(),
  query: z.string().optional(),
  includeFields: z.array(ListEntitiesRequestIncludeField$outboundSchema)
    .optional(),
  pageSize: z.number().int().optional(),
  cursor: z.string().optional(),
  source: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEntitiesRequest$ {
  /** @deprecated use `ListEntitiesRequest$inboundSchema` instead. */
  export const inboundSchema = ListEntitiesRequest$inboundSchema;
  /** @deprecated use `ListEntitiesRequest$outboundSchema` instead. */
  export const outboundSchema = ListEntitiesRequest$outboundSchema;
  /** @deprecated use `ListEntitiesRequest$Outbound` instead. */
  export type Outbound = ListEntitiesRequest$Outbound;
}

export function listEntitiesRequestToJSON(
  listEntitiesRequest: ListEntitiesRequest,
): string {
  return JSON.stringify(
    ListEntitiesRequest$outboundSchema.parse(listEntitiesRequest),
  );
}

export function listEntitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListEntitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEntitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEntitiesRequest' from JSON`,
  );
}
