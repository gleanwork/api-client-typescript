/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  SortOptions,
  SortOptions$inboundSchema,
  SortOptions$Outbound,
  SortOptions$outboundSchema,
} from "./sortoptions.js";

export const ListShortcutsPaginatedRequestIncludeField = {
  Facets: "FACETS",
  PeopleDetails: "PEOPLE_DETAILS",
} as const;
export type ListShortcutsPaginatedRequestIncludeField = ClosedEnum<
  typeof ListShortcutsPaginatedRequestIncludeField
>;

export type ListShortcutsPaginatedRequest = {
  /**
   * Array of fields/data to be included in response that are not included by default
   */
  includeFields?: Array<ListShortcutsPaginatedRequestIncludeField> | undefined;
  pageSize: number;
  /**
   * A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
   */
  cursor?: string | undefined;
  /**
   * A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
   */
  filters?: Array<FacetFilter> | undefined;
  sort?: SortOptions | undefined;
  /**
   * Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
   */
  query?: string | undefined;
};

/** @internal */
export const ListShortcutsPaginatedRequestIncludeField$inboundSchema:
  z.ZodNativeEnum<typeof ListShortcutsPaginatedRequestIncludeField> = z
    .nativeEnum(ListShortcutsPaginatedRequestIncludeField);

/** @internal */
export const ListShortcutsPaginatedRequestIncludeField$outboundSchema:
  z.ZodNativeEnum<typeof ListShortcutsPaginatedRequestIncludeField> =
    ListShortcutsPaginatedRequestIncludeField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListShortcutsPaginatedRequestIncludeField$ {
  /** @deprecated use `ListShortcutsPaginatedRequestIncludeField$inboundSchema` instead. */
  export const inboundSchema =
    ListShortcutsPaginatedRequestIncludeField$inboundSchema;
  /** @deprecated use `ListShortcutsPaginatedRequestIncludeField$outboundSchema` instead. */
  export const outboundSchema =
    ListShortcutsPaginatedRequestIncludeField$outboundSchema;
}

/** @internal */
export const ListShortcutsPaginatedRequest$inboundSchema: z.ZodType<
  ListShortcutsPaginatedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  includeFields: z.array(
    ListShortcutsPaginatedRequestIncludeField$inboundSchema,
  ).optional(),
  pageSize: z.number().int(),
  cursor: z.string().optional(),
  filters: z.array(FacetFilter$inboundSchema).optional(),
  sort: SortOptions$inboundSchema.optional(),
  query: z.string().optional(),
});

/** @internal */
export type ListShortcutsPaginatedRequest$Outbound = {
  includeFields?: Array<string> | undefined;
  pageSize: number;
  cursor?: string | undefined;
  filters?: Array<FacetFilter$Outbound> | undefined;
  sort?: SortOptions$Outbound | undefined;
  query?: string | undefined;
};

/** @internal */
export const ListShortcutsPaginatedRequest$outboundSchema: z.ZodType<
  ListShortcutsPaginatedRequest$Outbound,
  z.ZodTypeDef,
  ListShortcutsPaginatedRequest
> = z.object({
  includeFields: z.array(
    ListShortcutsPaginatedRequestIncludeField$outboundSchema,
  ).optional(),
  pageSize: z.number().int(),
  cursor: z.string().optional(),
  filters: z.array(FacetFilter$outboundSchema).optional(),
  sort: SortOptions$outboundSchema.optional(),
  query: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListShortcutsPaginatedRequest$ {
  /** @deprecated use `ListShortcutsPaginatedRequest$inboundSchema` instead. */
  export const inboundSchema = ListShortcutsPaginatedRequest$inboundSchema;
  /** @deprecated use `ListShortcutsPaginatedRequest$outboundSchema` instead. */
  export const outboundSchema = ListShortcutsPaginatedRequest$outboundSchema;
  /** @deprecated use `ListShortcutsPaginatedRequest$Outbound` instead. */
  export type Outbound = ListShortcutsPaginatedRequest$Outbound;
}

export function listShortcutsPaginatedRequestToJSON(
  listShortcutsPaginatedRequest: ListShortcutsPaginatedRequest,
): string {
  return JSON.stringify(
    ListShortcutsPaginatedRequest$outboundSchema.parse(
      listShortcutsPaginatedRequest,
    ),
  );
}

export function listShortcutsPaginatedRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListShortcutsPaginatedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListShortcutsPaginatedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListShortcutsPaginatedRequest' from JSON`,
  );
}
