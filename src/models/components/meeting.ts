/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CalendarAttendees,
  CalendarAttendees$inboundSchema,
  CalendarAttendees$Outbound,
  CalendarAttendees$outboundSchema,
} from "./calendarattendees.js";

export type Meeting = {
  id?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  url?: string | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  attendees?: CalendarAttendees | undefined;
};

/** @internal */
export const Meeting$inboundSchema: z.ZodType<Meeting, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    url: z.string().optional(),
    startTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    endTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    attendees: z.lazy(() => CalendarAttendees$inboundSchema).optional(),
  });

/** @internal */
export type Meeting$Outbound = {
  id?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  url?: string | undefined;
  startTime?: string | undefined;
  endTime?: string | undefined;
  attendees?: CalendarAttendees$Outbound | undefined;
};

/** @internal */
export const Meeting$outboundSchema: z.ZodType<
  Meeting$Outbound,
  z.ZodTypeDef,
  Meeting
> = z.object({
  id: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  url: z.string().optional(),
  startTime: z.date().transform(v => v.toISOString()).optional(),
  endTime: z.date().transform(v => v.toISOString()).optional(),
  attendees: z.lazy(() => CalendarAttendees$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meeting$ {
  /** @deprecated use `Meeting$inboundSchema` instead. */
  export const inboundSchema = Meeting$inboundSchema;
  /** @deprecated use `Meeting$outboundSchema` instead. */
  export const outboundSchema = Meeting$outboundSchema;
  /** @deprecated use `Meeting$Outbound` instead. */
  export type Outbound = Meeting$Outbound;
}

export function meetingToJSON(meeting: Meeting): string {
  return JSON.stringify(Meeting$outboundSchema.parse(meeting));
}

export function meetingFromJSON(
  jsonString: string,
): SafeParseResult<Meeting, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meeting$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meeting' from JSON`,
  );
}
