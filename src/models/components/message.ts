/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContentType,
  ContentType$inboundSchema,
  ContentType$outboundSchema,
} from "./contenttype.js";

export type MessageTextBlock = {
  text: string;
  type: ContentType;
};

export type Message = {
  /**
   * The role of the message.
   */
  role?: string | undefined;
  /**
   * The content of the message.
   */
  content?: Array<MessageTextBlock> | undefined;
};

/** @internal */
export const MessageTextBlock$inboundSchema: z.ZodType<
  MessageTextBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
  type: ContentType$inboundSchema,
});

/** @internal */
export type MessageTextBlock$Outbound = {
  text: string;
  type: string;
};

/** @internal */
export const MessageTextBlock$outboundSchema: z.ZodType<
  MessageTextBlock$Outbound,
  z.ZodTypeDef,
  MessageTextBlock
> = z.object({
  text: z.string(),
  type: ContentType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageTextBlock$ {
  /** @deprecated use `MessageTextBlock$inboundSchema` instead. */
  export const inboundSchema = MessageTextBlock$inboundSchema;
  /** @deprecated use `MessageTextBlock$outboundSchema` instead. */
  export const outboundSchema = MessageTextBlock$outboundSchema;
  /** @deprecated use `MessageTextBlock$Outbound` instead. */
  export type Outbound = MessageTextBlock$Outbound;
}

export function messageTextBlockToJSON(
  messageTextBlock: MessageTextBlock,
): string {
  return JSON.stringify(
    MessageTextBlock$outboundSchema.parse(messageTextBlock),
  );
}

export function messageTextBlockFromJSON(
  jsonString: string,
): SafeParseResult<MessageTextBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageTextBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageTextBlock' from JSON`,
  );
}

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.object({
    role: z.string().optional(),
    content: z.array(z.lazy(() => MessageTextBlock$inboundSchema)).optional(),
  });

/** @internal */
export type Message$Outbound = {
  role?: string | undefined;
  content?: Array<MessageTextBlock$Outbound> | undefined;
};

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.object({
  role: z.string().optional(),
  content: z.array(z.lazy(() => MessageTextBlock$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}
