/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of the id in the incoming request.
 */
export const IdType = {
  ChannelName: "CHANNEL_NAME",
  ThreadId: "THREAD_ID",
  ConversationId: "CONVERSATION_ID",
} as const;
/**
 * Type of the id in the incoming request.
 */
export type IdType = ClosedEnum<typeof IdType>;

/**
 * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
 */
export const Direction = {
  Older: "OLDER",
  Newer: "NEWER",
} as const;
/**
 * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
 */
export type Direction = ClosedEnum<typeof Direction>;

/**
 * The type of the data source. Missing field defaults to SLACK.
 */
export const Datasource = {
  Slack: "SLACK",
  Microsoftteams: "MICROSOFTTEAMS",
  Facebookworkplace: "FACEBOOKWORKPLACE",
} as const;
/**
 * The type of the data source. Missing field defaults to SLACK.
 */
export type Datasource = ClosedEnum<typeof Datasource>;

export type MessagesRequest = {
  /**
   * Type of the id in the incoming request.
   */
  idType: IdType;
  /**
   * ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.
   */
  id: string;
  /**
   * Id for the for the workspace in case of multiple workspaces.
   */
  workspaceId?: string | undefined;
  /**
   * The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
   */
  direction?: Direction | undefined;
  /**
   * Timestamp in millis of the reference message. Only applicable when using a message_id.
   */
  timestampMillis?: number | undefined;
  /**
   * Whether to include root message in response.
   */
  includeRootMessage?: boolean | undefined;
  /**
   * The type of the data source. Missing field defaults to SLACK.
   */
  datasource?: Datasource | undefined;
  /**
   * The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
   */
  datasourceInstanceDisplayName?: string | undefined;
};

/** @internal */
export const IdType$inboundSchema: z.ZodNativeEnum<typeof IdType> = z
  .nativeEnum(IdType);

/** @internal */
export const IdType$outboundSchema: z.ZodNativeEnum<typeof IdType> =
  IdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdType$ {
  /** @deprecated use `IdType$inboundSchema` instead. */
  export const inboundSchema = IdType$inboundSchema;
  /** @deprecated use `IdType$outboundSchema` instead. */
  export const outboundSchema = IdType$outboundSchema;
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const Datasource$inboundSchema: z.ZodNativeEnum<typeof Datasource> = z
  .nativeEnum(Datasource);

/** @internal */
export const Datasource$outboundSchema: z.ZodNativeEnum<typeof Datasource> =
  Datasource$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Datasource$ {
  /** @deprecated use `Datasource$inboundSchema` instead. */
  export const inboundSchema = Datasource$inboundSchema;
  /** @deprecated use `Datasource$outboundSchema` instead. */
  export const outboundSchema = Datasource$outboundSchema;
}

/** @internal */
export const MessagesRequest$inboundSchema: z.ZodType<
  MessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idType: IdType$inboundSchema,
  id: z.string(),
  workspaceId: z.string().optional(),
  direction: Direction$inboundSchema.optional(),
  timestampMillis: z.number().int().optional(),
  includeRootMessage: z.boolean().optional(),
  datasource: Datasource$inboundSchema.optional(),
  datasourceInstanceDisplayName: z.string().optional(),
});

/** @internal */
export type MessagesRequest$Outbound = {
  idType: string;
  id: string;
  workspaceId?: string | undefined;
  direction?: string | undefined;
  timestampMillis?: number | undefined;
  includeRootMessage?: boolean | undefined;
  datasource?: string | undefined;
  datasourceInstanceDisplayName?: string | undefined;
};

/** @internal */
export const MessagesRequest$outboundSchema: z.ZodType<
  MessagesRequest$Outbound,
  z.ZodTypeDef,
  MessagesRequest
> = z.object({
  idType: IdType$outboundSchema,
  id: z.string(),
  workspaceId: z.string().optional(),
  direction: Direction$outboundSchema.optional(),
  timestampMillis: z.number().int().optional(),
  includeRootMessage: z.boolean().optional(),
  datasource: Datasource$outboundSchema.optional(),
  datasourceInstanceDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesRequest$ {
  /** @deprecated use `MessagesRequest$inboundSchema` instead. */
  export const inboundSchema = MessagesRequest$inboundSchema;
  /** @deprecated use `MessagesRequest$outboundSchema` instead. */
  export const outboundSchema = MessagesRequest$outboundSchema;
  /** @deprecated use `MessagesRequest$Outbound` instead. */
  export type Outbound = MessagesRequest$Outbound;
}

export function messagesRequestToJSON(
  messagesRequest: MessagesRequest,
): string {
  return JSON.stringify(MessagesRequest$outboundSchema.parse(messagesRequest));
}

export function messagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<MessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagesRequest' from JSON`,
  );
}
