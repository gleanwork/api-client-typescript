/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SearchResponse,
  SearchResponse$inboundSchema,
  SearchResponse$Outbound,
  SearchResponse$outboundSchema,
} from "./searchresponse.js";
import {
  SearchResult,
  SearchResult$inboundSchema,
  SearchResult$Outbound,
  SearchResult$outboundSchema,
} from "./searchresult.js";

export type MessagesResponse = {
  /**
   * Whether there are more results for client to continue requesting.
   */
  hasMore: boolean;
  searchResponse?: SearchResponse | undefined;
  rootMessage?: SearchResult | undefined;
};

/** @internal */
export const MessagesResponse$inboundSchema: z.ZodType<
  MessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  hasMore: z.boolean(),
  searchResponse: SearchResponse$inboundSchema.optional(),
  rootMessage: SearchResult$inboundSchema.optional(),
});

/** @internal */
export type MessagesResponse$Outbound = {
  hasMore: boolean;
  searchResponse?: SearchResponse$Outbound | undefined;
  rootMessage?: SearchResult$Outbound | undefined;
};

/** @internal */
export const MessagesResponse$outboundSchema: z.ZodType<
  MessagesResponse$Outbound,
  z.ZodTypeDef,
  MessagesResponse
> = z.object({
  hasMore: z.boolean(),
  searchResponse: SearchResponse$outboundSchema.optional(),
  rootMessage: SearchResult$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessagesResponse$ {
  /** @deprecated use `MessagesResponse$inboundSchema` instead. */
  export const inboundSchema = MessagesResponse$inboundSchema;
  /** @deprecated use `MessagesResponse$outboundSchema` instead. */
  export const outboundSchema = MessagesResponse$outboundSchema;
  /** @deprecated use `MessagesResponse$Outbound` instead. */
  export type Outbound = MessagesResponse$Outbound;
}

export function messagesResponseToJSON(
  messagesResponse: MessagesResponse,
): string {
  return JSON.stringify(
    MessagesResponse$outboundSchema.parse(messagesResponse),
  );
}

export function messagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<MessagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessagesResponse' from JSON`,
  );
}
