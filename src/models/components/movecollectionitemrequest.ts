/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MoveCollectionItemRequest = {
  /**
   * The ID of the Collection to move items in.
   */
  collectionId: number;
  /**
   * The item ID of the item being moved.
   */
  itemId: string;
  /**
   * The (optional) item ID of the item that is the new next of itemId, or empty if this is now the last item. This item does not move, it's used as a reference position to put the itemId in the right position.
   */
  newNextItemId?: string | undefined;
};

/** @internal */
export const MoveCollectionItemRequest$inboundSchema: z.ZodType<
  MoveCollectionItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  collectionId: z.number().int(),
  itemId: z.string(),
  newNextItemId: z.string().optional(),
});

/** @internal */
export type MoveCollectionItemRequest$Outbound = {
  collectionId: number;
  itemId: string;
  newNextItemId?: string | undefined;
};

/** @internal */
export const MoveCollectionItemRequest$outboundSchema: z.ZodType<
  MoveCollectionItemRequest$Outbound,
  z.ZodTypeDef,
  MoveCollectionItemRequest
> = z.object({
  collectionId: z.number().int(),
  itemId: z.string(),
  newNextItemId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MoveCollectionItemRequest$ {
  /** @deprecated use `MoveCollectionItemRequest$inboundSchema` instead. */
  export const inboundSchema = MoveCollectionItemRequest$inboundSchema;
  /** @deprecated use `MoveCollectionItemRequest$outboundSchema` instead. */
  export const outboundSchema = MoveCollectionItemRequest$outboundSchema;
  /** @deprecated use `MoveCollectionItemRequest$Outbound` instead. */
  export type Outbound = MoveCollectionItemRequest$Outbound;
}

export function moveCollectionItemRequestToJSON(
  moveCollectionItemRequest: MoveCollectionItemRequest,
): string {
  return JSON.stringify(
    MoveCollectionItemRequest$outboundSchema.parse(moveCollectionItemRequest),
  );
}

export function moveCollectionItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<MoveCollectionItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MoveCollectionItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MoveCollectionItemRequest' from JSON`,
  );
}
