/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OnboardingAdminRecipientData,
  OnboardingAdminRecipientData$inboundSchema,
  OnboardingAdminRecipientData$Outbound,
  OnboardingAdminRecipientData$outboundSchema,
} from "./onboardingadminrecipientdata.js";

export type OnboardingAdminInviteData = {
  isTrial?: boolean | undefined;
  recipientData?: Array<OnboardingAdminRecipientData> | undefined;
};

/** @internal */
export const OnboardingAdminInviteData$inboundSchema: z.ZodType<
  OnboardingAdminInviteData,
  z.ZodTypeDef,
  unknown
> = z.object({
  isTrial: z.boolean().optional(),
  recipientData: z.array(OnboardingAdminRecipientData$inboundSchema).optional(),
});

/** @internal */
export type OnboardingAdminInviteData$Outbound = {
  isTrial?: boolean | undefined;
  recipientData?: Array<OnboardingAdminRecipientData$Outbound> | undefined;
};

/** @internal */
export const OnboardingAdminInviteData$outboundSchema: z.ZodType<
  OnboardingAdminInviteData$Outbound,
  z.ZodTypeDef,
  OnboardingAdminInviteData
> = z.object({
  isTrial: z.boolean().optional(),
  recipientData: z.array(OnboardingAdminRecipientData$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingAdminInviteData$ {
  /** @deprecated use `OnboardingAdminInviteData$inboundSchema` instead. */
  export const inboundSchema = OnboardingAdminInviteData$inboundSchema;
  /** @deprecated use `OnboardingAdminInviteData$outboundSchema` instead. */
  export const outboundSchema = OnboardingAdminInviteData$outboundSchema;
  /** @deprecated use `OnboardingAdminInviteData$Outbound` instead. */
  export type Outbound = OnboardingAdminInviteData$Outbound;
}

export function onboardingAdminInviteDataToJSON(
  onboardingAdminInviteData: OnboardingAdminInviteData,
): string {
  return JSON.stringify(
    OnboardingAdminInviteData$outboundSchema.parse(onboardingAdminInviteData),
  );
}

export function onboardingAdminInviteDataFromJSON(
  jsonString: string,
): SafeParseResult<OnboardingAdminInviteData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnboardingAdminInviteData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnboardingAdminInviteData' from JSON`,
  );
}
