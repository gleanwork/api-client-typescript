/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * metadata needed to construct an onboarding invitation email for one recipient
 */
export type OnboardingAdminRecipientData = {
  /**
   * email address of the intended recipient
   */
  recipientEmail?: string | undefined;
  /**
   * display name of the role that has been assigned to the recipient
   */
  roleDisplayName?: string | undefined;
};

/** @internal */
export const OnboardingAdminRecipientData$inboundSchema: z.ZodType<
  OnboardingAdminRecipientData,
  z.ZodTypeDef,
  unknown
> = z.object({
  recipientEmail: z.string().optional(),
  roleDisplayName: z.string().optional(),
});

/** @internal */
export type OnboardingAdminRecipientData$Outbound = {
  recipientEmail?: string | undefined;
  roleDisplayName?: string | undefined;
};

/** @internal */
export const OnboardingAdminRecipientData$outboundSchema: z.ZodType<
  OnboardingAdminRecipientData$Outbound,
  z.ZodTypeDef,
  OnboardingAdminRecipientData
> = z.object({
  recipientEmail: z.string().optional(),
  roleDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingAdminRecipientData$ {
  /** @deprecated use `OnboardingAdminRecipientData$inboundSchema` instead. */
  export const inboundSchema = OnboardingAdminRecipientData$inboundSchema;
  /** @deprecated use `OnboardingAdminRecipientData$outboundSchema` instead. */
  export const outboundSchema = OnboardingAdminRecipientData$outboundSchema;
  /** @deprecated use `OnboardingAdminRecipientData$Outbound` instead. */
  export type Outbound = OnboardingAdminRecipientData$Outbound;
}

export function onboardingAdminRecipientDataToJSON(
  onboardingAdminRecipientData: OnboardingAdminRecipientData,
): string {
  return JSON.stringify(
    OnboardingAdminRecipientData$outboundSchema.parse(
      onboardingAdminRecipientData,
    ),
  );
}

export function onboardingAdminRecipientDataFromJSON(
  jsonString: string,
): SafeParseResult<OnboardingAdminRecipientData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnboardingAdminRecipientData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnboardingAdminRecipientData' from JSON`,
  );
}
