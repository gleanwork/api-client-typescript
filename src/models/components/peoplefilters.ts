/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";

export type PeopleFilters = {
  /**
   * Facets used for filtering people search
   */
  filter?: Array<FacetFilter> | undefined;
  /**
   * A query string to search for people that each person in the response must conform to. An empty query does not filter any people.
   */
  query?: string | undefined;
};

/** @internal */
export const PeopleFilters$inboundSchema: z.ZodType<
  PeopleFilters,
  z.ZodTypeDef,
  unknown
> = z.object({
  filter: z.array(FacetFilter$inboundSchema).optional(),
  query: z.string().optional(),
});

/** @internal */
export type PeopleFilters$Outbound = {
  filter?: Array<FacetFilter$Outbound> | undefined;
  query?: string | undefined;
};

/** @internal */
export const PeopleFilters$outboundSchema: z.ZodType<
  PeopleFilters$Outbound,
  z.ZodTypeDef,
  PeopleFilters
> = z.object({
  filter: z.array(FacetFilter$outboundSchema).optional(),
  query: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PeopleFilters$ {
  /** @deprecated use `PeopleFilters$inboundSchema` instead. */
  export const inboundSchema = PeopleFilters$inboundSchema;
  /** @deprecated use `PeopleFilters$outboundSchema` instead. */
  export const outboundSchema = PeopleFilters$outboundSchema;
  /** @deprecated use `PeopleFilters$Outbound` instead. */
  export type Outbound = PeopleFilters$Outbound;
}

export function peopleFiltersToJSON(peopleFilters: PeopleFilters): string {
  return JSON.stringify(PeopleFilters$outboundSchema.parse(peopleFilters));
}

export function peopleFiltersFromJSON(
  jsonString: string,
): SafeParseResult<PeopleFilters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PeopleFilters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PeopleFilters' from JSON`,
  );
}
