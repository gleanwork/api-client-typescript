/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PeopleRequestIncludeField = {
  Badges: "BADGES",
  BusyEvents: "BUSY_EVENTS",
  DocumentActivity: "DOCUMENT_ACTIVITY",
  InviteInfo: "INVITE_INFO",
  PeopleDistance: "PEOPLE_DISTANCE",
  Permissions: "PERMISSIONS",
  PeopleDetails: "PEOPLE_DETAILS",
  ManagementDetails: "MANAGEMENT_DETAILS",
  PeopleProfileSettings: "PEOPLE_PROFILE_SETTINGS",
  PeopleWithoutManager: "PEOPLE_WITHOUT_MANAGER",
} as const;
export type PeopleRequestIncludeField = ClosedEnum<
  typeof PeopleRequestIncludeField
>;

export const IncludeType = {
  PeopleWithoutManager: "PEOPLE_WITHOUT_MANAGER",
  InvalidEntities: "INVALID_ENTITIES",
} as const;
export type IncludeType = ClosedEnum<typeof IncludeType>;

export type PeopleRequest = {
  /**
   * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
   */
  timezoneOffset?: number | undefined;
  /**
   * The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
   */
  obfuscatedIds?: Array<string> | undefined;
  /**
   * The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
   */
  emailIds?: Array<string> | undefined;
  /**
   * List of PersonMetadata fields to return (that aren't returned by default)
   */
  includeFields?: Array<PeopleRequestIncludeField> | undefined;
  /**
   * The types of people entities to include in the response in addition to those returned by default.
   */
  includeTypes?: Array<IncludeType> | undefined;
  /**
   * A string denoting the search surface from which the endpoint is called.
   */
  source?: string | undefined;
};

/** @internal */
export const PeopleRequestIncludeField$inboundSchema: z.ZodNativeEnum<
  typeof PeopleRequestIncludeField
> = z.nativeEnum(PeopleRequestIncludeField);

/** @internal */
export const PeopleRequestIncludeField$outboundSchema: z.ZodNativeEnum<
  typeof PeopleRequestIncludeField
> = PeopleRequestIncludeField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PeopleRequestIncludeField$ {
  /** @deprecated use `PeopleRequestIncludeField$inboundSchema` instead. */
  export const inboundSchema = PeopleRequestIncludeField$inboundSchema;
  /** @deprecated use `PeopleRequestIncludeField$outboundSchema` instead. */
  export const outboundSchema = PeopleRequestIncludeField$outboundSchema;
}

/** @internal */
export const IncludeType$inboundSchema: z.ZodNativeEnum<typeof IncludeType> = z
  .nativeEnum(IncludeType);

/** @internal */
export const IncludeType$outboundSchema: z.ZodNativeEnum<typeof IncludeType> =
  IncludeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncludeType$ {
  /** @deprecated use `IncludeType$inboundSchema` instead. */
  export const inboundSchema = IncludeType$inboundSchema;
  /** @deprecated use `IncludeType$outboundSchema` instead. */
  export const outboundSchema = IncludeType$outboundSchema;
}

/** @internal */
export const PeopleRequest$inboundSchema: z.ZodType<
  PeopleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  timezoneOffset: z.number().int().optional(),
  obfuscatedIds: z.array(z.string()).optional(),
  emailIds: z.array(z.string()).optional(),
  includeFields: z.array(PeopleRequestIncludeField$inboundSchema).optional(),
  includeTypes: z.array(IncludeType$inboundSchema).optional(),
  source: z.string().optional(),
});

/** @internal */
export type PeopleRequest$Outbound = {
  timezoneOffset?: number | undefined;
  obfuscatedIds?: Array<string> | undefined;
  emailIds?: Array<string> | undefined;
  includeFields?: Array<string> | undefined;
  includeTypes?: Array<string> | undefined;
  source?: string | undefined;
};

/** @internal */
export const PeopleRequest$outboundSchema: z.ZodType<
  PeopleRequest$Outbound,
  z.ZodTypeDef,
  PeopleRequest
> = z.object({
  timezoneOffset: z.number().int().optional(),
  obfuscatedIds: z.array(z.string()).optional(),
  emailIds: z.array(z.string()).optional(),
  includeFields: z.array(PeopleRequestIncludeField$outboundSchema).optional(),
  includeTypes: z.array(IncludeType$outboundSchema).optional(),
  source: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PeopleRequest$ {
  /** @deprecated use `PeopleRequest$inboundSchema` instead. */
  export const inboundSchema = PeopleRequest$inboundSchema;
  /** @deprecated use `PeopleRequest$outboundSchema` instead. */
  export const outboundSchema = PeopleRequest$outboundSchema;
  /** @deprecated use `PeopleRequest$Outbound` instead. */
  export type Outbound = PeopleRequest$Outbound;
}

export function peopleRequestToJSON(peopleRequest: PeopleRequest): string {
  return JSON.stringify(PeopleRequest$outboundSchema.parse(peopleRequest));
}

export function peopleRequestFromJSON(
  jsonString: string,
): SafeParseResult<PeopleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PeopleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PeopleRequest' from JSON`,
  );
}
