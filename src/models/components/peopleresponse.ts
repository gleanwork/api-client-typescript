/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";
import {
  RelatedDocuments,
  RelatedDocuments$inboundSchema,
  RelatedDocuments$Outbound,
  RelatedDocuments$outboundSchema,
} from "./relateddocuments.js";

export type PeopleResponse = {
  /**
   * A Person for each ID in the request, each with PersonMetadata populated.
   */
  results?: Array<Person> | undefined;
  /**
   * A list of documents related to this people response. This is only included if DOCUMENT_ACTIVITY is requested and only 1 person is included in the request.
   */
  relatedDocuments?: Array<RelatedDocuments> | undefined;
  /**
   * A list of IDs that could not be found.
   */
  errors?: Array<string> | undefined;
};

/** @internal */
export const PeopleResponse$inboundSchema: z.ZodType<
  PeopleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(Person$inboundSchema).optional(),
  relatedDocuments: z.array(RelatedDocuments$inboundSchema).optional(),
  errors: z.array(z.string()).optional(),
});

/** @internal */
export type PeopleResponse$Outbound = {
  results?: Array<Person$Outbound> | undefined;
  relatedDocuments?: Array<RelatedDocuments$Outbound> | undefined;
  errors?: Array<string> | undefined;
};

/** @internal */
export const PeopleResponse$outboundSchema: z.ZodType<
  PeopleResponse$Outbound,
  z.ZodTypeDef,
  PeopleResponse
> = z.object({
  results: z.array(Person$outboundSchema).optional(),
  relatedDocuments: z.array(RelatedDocuments$outboundSchema).optional(),
  errors: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PeopleResponse$ {
  /** @deprecated use `PeopleResponse$inboundSchema` instead. */
  export const inboundSchema = PeopleResponse$inboundSchema;
  /** @deprecated use `PeopleResponse$outboundSchema` instead. */
  export const outboundSchema = PeopleResponse$outboundSchema;
  /** @deprecated use `PeopleResponse$Outbound` instead. */
  export type Outbound = PeopleResponse$Outbound;
}

export function peopleResponseToJSON(peopleResponse: PeopleResponse): string {
  return JSON.stringify(PeopleResponse$outboundSchema.parse(peopleResponse));
}

export function peopleResponseFromJSON(
  jsonString: string,
): SafeParseResult<PeopleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PeopleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PeopleResponse' from JSON`,
  );
}
