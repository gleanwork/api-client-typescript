/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PeopleSuggestionCategory,
  PeopleSuggestionCategory$inboundSchema,
  PeopleSuggestionCategory$outboundSchema,
} from "./peoplesuggestioncategory.js";

/**
 * Includes request params for type of suggestions.
 */
export type PeopleSuggestRequest = {
  /**
   * Categories of data requested. Request can include single or multiple categories.
   */
  categories: Array<PeopleSuggestionCategory>;
  /**
   * Departments that the data is requested for. If empty, corresponds to whole company.
   */
  departments?: Array<string> | undefined;
};

/** @internal */
export const PeopleSuggestRequest$inboundSchema: z.ZodType<
  PeopleSuggestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  categories: z.array(PeopleSuggestionCategory$inboundSchema),
  departments: z.array(z.string()).optional(),
});

/** @internal */
export type PeopleSuggestRequest$Outbound = {
  categories: Array<string>;
  departments?: Array<string> | undefined;
};

/** @internal */
export const PeopleSuggestRequest$outboundSchema: z.ZodType<
  PeopleSuggestRequest$Outbound,
  z.ZodTypeDef,
  PeopleSuggestRequest
> = z.object({
  categories: z.array(PeopleSuggestionCategory$outboundSchema),
  departments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PeopleSuggestRequest$ {
  /** @deprecated use `PeopleSuggestRequest$inboundSchema` instead. */
  export const inboundSchema = PeopleSuggestRequest$inboundSchema;
  /** @deprecated use `PeopleSuggestRequest$outboundSchema` instead. */
  export const outboundSchema = PeopleSuggestRequest$outboundSchema;
  /** @deprecated use `PeopleSuggestRequest$Outbound` instead. */
  export type Outbound = PeopleSuggestRequest$Outbound;
}

export function peopleSuggestRequestToJSON(
  peopleSuggestRequest: PeopleSuggestRequest,
): string {
  return JSON.stringify(
    PeopleSuggestRequest$outboundSchema.parse(peopleSuggestRequest),
  );
}

export function peopleSuggestRequestFromJSON(
  jsonString: string,
): SafeParseResult<PeopleSuggestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PeopleSuggestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PeopleSuggestRequest' from JSON`,
  );
}
