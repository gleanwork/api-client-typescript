/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PersonDistance = {
  /**
   * The display name.
   */
  name: string;
  /**
   * An opaque identifier that can be used to request metadata for a Person.
   */
  obfuscatedId: string;
  /**
   * Distance to person, refer to PeopleDistance pipeline on interpretation of the value.
   */
  distance: number;
};

/** @internal */
export const PersonDistance$inboundSchema: z.ZodType<
  PersonDistance,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  obfuscatedId: z.string(),
  distance: z.number(),
});

/** @internal */
export type PersonDistance$Outbound = {
  name: string;
  obfuscatedId: string;
  distance: number;
};

/** @internal */
export const PersonDistance$outboundSchema: z.ZodType<
  PersonDistance$Outbound,
  z.ZodTypeDef,
  PersonDistance
> = z.object({
  name: z.string(),
  obfuscatedId: z.string(),
  distance: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonDistance$ {
  /** @deprecated use `PersonDistance$inboundSchema` instead. */
  export const inboundSchema = PersonDistance$inboundSchema;
  /** @deprecated use `PersonDistance$outboundSchema` instead. */
  export const outboundSchema = PersonDistance$outboundSchema;
  /** @deprecated use `PersonDistance$Outbound` instead. */
  export type Outbound = PersonDistance$Outbound;
}

export function personDistanceToJSON(personDistance: PersonDistance): string {
  return JSON.stringify(PersonDistance$outboundSchema.parse(personDistance));
}

export function personDistanceFromJSON(
  jsonString: string,
): SafeParseResult<PersonDistance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonDistance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonDistance' from JSON`,
  );
}
