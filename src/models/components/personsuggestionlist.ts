/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PeopleSuggestionCategory,
  PeopleSuggestionCategory$inboundSchema,
  PeopleSuggestionCategory$outboundSchema,
} from "./peoplesuggestioncategory.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";

export type PersonSuggestionList = {
  category: PeopleSuggestionCategory;
  /**
   * Information about suggested users.
   */
  people?: Array<Person> | undefined;
};

/** @internal */
export const PersonSuggestionList$inboundSchema: z.ZodType<
  PersonSuggestionList,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: PeopleSuggestionCategory$inboundSchema,
  people: z.array(Person$inboundSchema).optional(),
});

/** @internal */
export type PersonSuggestionList$Outbound = {
  category: string;
  people?: Array<Person$Outbound> | undefined;
};

/** @internal */
export const PersonSuggestionList$outboundSchema: z.ZodType<
  PersonSuggestionList$Outbound,
  z.ZodTypeDef,
  PersonSuggestionList
> = z.object({
  category: PeopleSuggestionCategory$outboundSchema,
  people: z.array(Person$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonSuggestionList$ {
  /** @deprecated use `PersonSuggestionList$inboundSchema` instead. */
  export const inboundSchema = PersonSuggestionList$inboundSchema;
  /** @deprecated use `PersonSuggestionList$outboundSchema` instead. */
  export const outboundSchema = PersonSuggestionList$outboundSchema;
  /** @deprecated use `PersonSuggestionList$Outbound` instead. */
  export type Outbound = PersonSuggestionList$Outbound;
}

export function personSuggestionListToJSON(
  personSuggestionList: PersonSuggestionList,
): string {
  return JSON.stringify(
    PersonSuggestionList$outboundSchema.parse(personSuggestionList),
  );
}

export function personSuggestionListFromJSON(
  jsonString: string,
): SafeParseResult<PersonSuggestionList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonSuggestionList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonSuggestionList' from JSON`,
  );
}
