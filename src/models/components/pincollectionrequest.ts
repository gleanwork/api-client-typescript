/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CollectionPinMetadata,
  CollectionPinMetadata$inboundSchema,
  CollectionPinMetadata$Outbound,
  CollectionPinMetadata$outboundSchema,
} from "./collectionpinmetadata.js";

/**
 * Whether to pin or unpin
 */
export const PinCollectionRequestAction = {
  Pin: "PIN",
  Unpin: "UNPIN",
} as const;
/**
 * Whether to pin or unpin
 */
export type PinCollectionRequestAction = ClosedEnum<
  typeof PinCollectionRequestAction
>;

export type PinCollectionRequest = {
  /**
   * Whether to pin or unpin
   */
  action?: PinCollectionRequestAction | undefined;
  data?: CollectionPinMetadata | undefined;
};

/** @internal */
export const PinCollectionRequestAction$inboundSchema: z.ZodNativeEnum<
  typeof PinCollectionRequestAction
> = z.nativeEnum(PinCollectionRequestAction);

/** @internal */
export const PinCollectionRequestAction$outboundSchema: z.ZodNativeEnum<
  typeof PinCollectionRequestAction
> = PinCollectionRequestAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PinCollectionRequestAction$ {
  /** @deprecated use `PinCollectionRequestAction$inboundSchema` instead. */
  export const inboundSchema = PinCollectionRequestAction$inboundSchema;
  /** @deprecated use `PinCollectionRequestAction$outboundSchema` instead. */
  export const outboundSchema = PinCollectionRequestAction$outboundSchema;
}

/** @internal */
export const PinCollectionRequest$inboundSchema: z.ZodType<
  PinCollectionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: PinCollectionRequestAction$inboundSchema.default("PIN"),
  data: CollectionPinMetadata$inboundSchema.optional(),
});

/** @internal */
export type PinCollectionRequest$Outbound = {
  action: string;
  data?: CollectionPinMetadata$Outbound | undefined;
};

/** @internal */
export const PinCollectionRequest$outboundSchema: z.ZodType<
  PinCollectionRequest$Outbound,
  z.ZodTypeDef,
  PinCollectionRequest
> = z.object({
  action: PinCollectionRequestAction$outboundSchema.default("PIN"),
  data: CollectionPinMetadata$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PinCollectionRequest$ {
  /** @deprecated use `PinCollectionRequest$inboundSchema` instead. */
  export const inboundSchema = PinCollectionRequest$inboundSchema;
  /** @deprecated use `PinCollectionRequest$outboundSchema` instead. */
  export const outboundSchema = PinCollectionRequest$outboundSchema;
  /** @deprecated use `PinCollectionRequest$Outbound` instead. */
  export type Outbound = PinCollectionRequest$Outbound;
}

export function pinCollectionRequestToJSON(
  pinCollectionRequest: PinCollectionRequest,
): string {
  return JSON.stringify(
    PinCollectionRequest$outboundSchema.parse(pinCollectionRequest),
  );
}

export function pinCollectionRequestFromJSON(
  jsonString: string,
): SafeParseResult<PinCollectionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PinCollectionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PinCollectionRequest' from JSON`,
  );
}
