/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Possible value of a specific parameter
 */
export type PossibleValue = {
  /**
   * Possible value
   */
  value?: string | undefined;
  /**
   * User-friendly label associated with the value
   */
  label?: string | undefined;
};

/** @internal */
export const PossibleValue$inboundSchema: z.ZodType<
  PossibleValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  label: z.string().optional(),
});

/** @internal */
export type PossibleValue$Outbound = {
  value?: string | undefined;
  label?: string | undefined;
};

/** @internal */
export const PossibleValue$outboundSchema: z.ZodType<
  PossibleValue$Outbound,
  z.ZodTypeDef,
  PossibleValue
> = z.object({
  value: z.string().optional(),
  label: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PossibleValue$ {
  /** @deprecated use `PossibleValue$inboundSchema` instead. */
  export const inboundSchema = PossibleValue$inboundSchema;
  /** @deprecated use `PossibleValue$outboundSchema` instead. */
  export const outboundSchema = PossibleValue$outboundSchema;
  /** @deprecated use `PossibleValue$Outbound` instead. */
  export type Outbound = PossibleValue$Outbound;
}

export function possibleValueToJSON(possibleValue: PossibleValue): string {
  return JSON.stringify(PossibleValue$outboundSchema.parse(possibleValue));
}

export function possibleValueFromJSON(
  jsonString: string,
): SafeParseResult<PossibleValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PossibleValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PossibleValue' from JSON`,
  );
}
