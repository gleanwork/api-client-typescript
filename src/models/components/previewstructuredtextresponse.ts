/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StructuredText,
  StructuredText$inboundSchema,
  StructuredText$Outbound,
  StructuredText$outboundSchema,
} from "./structuredtext.js";

export type PreviewStructuredTextResponse = {
  structuredText: StructuredText;
  /**
   * A list of links the user doesn't have access to.
   */
  docsInaccessibleToUser?: Array<string> | undefined;
  combinedAnswerText: StructuredText;
};

/** @internal */
export const PreviewStructuredTextResponse$inboundSchema: z.ZodType<
  PreviewStructuredTextResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  structuredText: StructuredText$inboundSchema,
  docsInaccessibleToUser: z.array(z.string()).optional(),
  combinedAnswerText: StructuredText$inboundSchema,
});

/** @internal */
export type PreviewStructuredTextResponse$Outbound = {
  structuredText: StructuredText$Outbound;
  docsInaccessibleToUser?: Array<string> | undefined;
  combinedAnswerText: StructuredText$Outbound;
};

/** @internal */
export const PreviewStructuredTextResponse$outboundSchema: z.ZodType<
  PreviewStructuredTextResponse$Outbound,
  z.ZodTypeDef,
  PreviewStructuredTextResponse
> = z.object({
  structuredText: StructuredText$outboundSchema,
  docsInaccessibleToUser: z.array(z.string()).optional(),
  combinedAnswerText: StructuredText$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewStructuredTextResponse$ {
  /** @deprecated use `PreviewStructuredTextResponse$inboundSchema` instead. */
  export const inboundSchema = PreviewStructuredTextResponse$inboundSchema;
  /** @deprecated use `PreviewStructuredTextResponse$outboundSchema` instead. */
  export const outboundSchema = PreviewStructuredTextResponse$outboundSchema;
  /** @deprecated use `PreviewStructuredTextResponse$Outbound` instead. */
  export type Outbound = PreviewStructuredTextResponse$Outbound;
}

export function previewStructuredTextResponseToJSON(
  previewStructuredTextResponse: PreviewStructuredTextResponse,
): string {
  return JSON.stringify(
    PreviewStructuredTextResponse$outboundSchema.parse(
      previewStructuredTextResponse,
    ),
  );
}

export function previewStructuredTextResponseFromJSON(
  jsonString: string,
): SafeParseResult<PreviewStructuredTextResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewStructuredTextResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewStructuredTextResponse' from JSON`,
  );
}
