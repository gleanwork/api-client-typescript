/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Announcement,
  Announcement$inboundSchema,
  Announcement$Outbound,
  Announcement$outboundSchema,
} from "./announcement.js";
import {
  Answer,
  Answer$inboundSchema,
  Answer$Outbound,
  Answer$outboundSchema,
} from "./answer.js";

export type PreviewUgcResponse = {
  announcement?: Announcement | undefined;
  answer?: Answer | undefined;
};

/** @internal */
export const PreviewUgcResponse$inboundSchema: z.ZodType<
  PreviewUgcResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  announcement: Announcement$inboundSchema.optional(),
  answer: Answer$inboundSchema.optional(),
});

/** @internal */
export type PreviewUgcResponse$Outbound = {
  announcement?: Announcement$Outbound | undefined;
  answer?: Answer$Outbound | undefined;
};

/** @internal */
export const PreviewUgcResponse$outboundSchema: z.ZodType<
  PreviewUgcResponse$Outbound,
  z.ZodTypeDef,
  PreviewUgcResponse
> = z.object({
  announcement: Announcement$outboundSchema.optional(),
  answer: Answer$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PreviewUgcResponse$ {
  /** @deprecated use `PreviewUgcResponse$inboundSchema` instead. */
  export const inboundSchema = PreviewUgcResponse$inboundSchema;
  /** @deprecated use `PreviewUgcResponse$outboundSchema` instead. */
  export const outboundSchema = PreviewUgcResponse$outboundSchema;
  /** @deprecated use `PreviewUgcResponse$Outbound` instead. */
  export type Outbound = PreviewUgcResponse$Outbound;
}

export function previewUgcResponseToJSON(
  previewUgcResponse: PreviewUgcResponse,
): string {
  return JSON.stringify(
    PreviewUgcResponse$outboundSchema.parse(previewUgcResponse),
  );
}

export function previewUgcResponseFromJSON(
  jsonString: string,
): SafeParseResult<PreviewUgcResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PreviewUgcResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PreviewUgcResponse' from JSON`,
  );
}
