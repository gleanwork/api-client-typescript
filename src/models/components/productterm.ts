/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Localizations = {
  /**
   * The display name of the product term in the given locale.
   */
  displayName?: string | undefined;
};

export type ProductTerm = {
  displayName?: string | undefined;
  /**
   * Mapping of locale to the display name of the product term.
   */
  localizations?: { [k: string]: Localizations } | undefined;
};

/** @internal */
export const Localizations$inboundSchema: z.ZodType<
  Localizations,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string().optional(),
});

/** @internal */
export type Localizations$Outbound = {
  displayName?: string | undefined;
};

/** @internal */
export const Localizations$outboundSchema: z.ZodType<
  Localizations$Outbound,
  z.ZodTypeDef,
  Localizations
> = z.object({
  displayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Localizations$ {
  /** @deprecated use `Localizations$inboundSchema` instead. */
  export const inboundSchema = Localizations$inboundSchema;
  /** @deprecated use `Localizations$outboundSchema` instead. */
  export const outboundSchema = Localizations$outboundSchema;
  /** @deprecated use `Localizations$Outbound` instead. */
  export type Outbound = Localizations$Outbound;
}

export function localizationsToJSON(localizations: Localizations): string {
  return JSON.stringify(Localizations$outboundSchema.parse(localizations));
}

export function localizationsFromJSON(
  jsonString: string,
): SafeParseResult<Localizations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Localizations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Localizations' from JSON`,
  );
}

/** @internal */
export const ProductTerm$inboundSchema: z.ZodType<
  ProductTerm,
  z.ZodTypeDef,
  unknown
> = z.object({
  displayName: z.string().optional(),
  localizations: z.record(z.lazy(() => Localizations$inboundSchema)).optional(),
});

/** @internal */
export type ProductTerm$Outbound = {
  displayName?: string | undefined;
  localizations?: { [k: string]: Localizations$Outbound } | undefined;
};

/** @internal */
export const ProductTerm$outboundSchema: z.ZodType<
  ProductTerm$Outbound,
  z.ZodTypeDef,
  ProductTerm
> = z.object({
  displayName: z.string().optional(),
  localizations: z.record(z.lazy(() => Localizations$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductTerm$ {
  /** @deprecated use `ProductTerm$inboundSchema` instead. */
  export const inboundSchema = ProductTerm$inboundSchema;
  /** @deprecated use `ProductTerm$outboundSchema` instead. */
  export const outboundSchema = ProductTerm$outboundSchema;
  /** @deprecated use `ProductTerm$Outbound` instead. */
  export type Outbound = ProductTerm$Outbound;
}

export function productTermToJSON(productTerm: ProductTerm): string {
  return JSON.stringify(ProductTerm$outboundSchema.parse(productTerm));
}

export function productTermFromJSON(
  jsonString: string,
): SafeParseResult<ProductTerm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductTerm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductTerm' from JSON`,
  );
}
