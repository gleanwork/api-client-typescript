/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProductTerm,
  ProductTerm$inboundSchema,
  ProductTerm$Outbound,
  ProductTerm$outboundSchema,
} from "./productterm.js";

/**
 * Mapping of product terms to the term's description. These product terms should match their counterpart in productTerms.json
 */
export type ProductTerms = {
  assistant?: ProductTerm | undefined;
  gleanAssistant?: ProductTerm | undefined;
  publicKnowledge?: ProductTerm | undefined;
};

/** @internal */
export const ProductTerms$inboundSchema: z.ZodType<
  ProductTerms,
  z.ZodTypeDef,
  unknown
> = z.object({
  Assistant: ProductTerm$inboundSchema.optional(),
  GleanAssistant: ProductTerm$inboundSchema.optional(),
  PublicKnowledge: ProductTerm$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Assistant": "assistant",
    "GleanAssistant": "gleanAssistant",
    "PublicKnowledge": "publicKnowledge",
  });
});

/** @internal */
export type ProductTerms$Outbound = {
  Assistant?: ProductTerm$Outbound | undefined;
  GleanAssistant?: ProductTerm$Outbound | undefined;
  PublicKnowledge?: ProductTerm$Outbound | undefined;
};

/** @internal */
export const ProductTerms$outboundSchema: z.ZodType<
  ProductTerms$Outbound,
  z.ZodTypeDef,
  ProductTerms
> = z.object({
  assistant: ProductTerm$outboundSchema.optional(),
  gleanAssistant: ProductTerm$outboundSchema.optional(),
  publicKnowledge: ProductTerm$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    assistant: "Assistant",
    gleanAssistant: "GleanAssistant",
    publicKnowledge: "PublicKnowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductTerms$ {
  /** @deprecated use `ProductTerms$inboundSchema` instead. */
  export const inboundSchema = ProductTerms$inboundSchema;
  /** @deprecated use `ProductTerms$outboundSchema` instead. */
  export const outboundSchema = ProductTerms$outboundSchema;
  /** @deprecated use `ProductTerms$Outbound` instead. */
  export type Outbound = ProductTerms$Outbound;
}

export function productTermsToJSON(productTerms: ProductTerms): string {
  return JSON.stringify(ProductTerms$outboundSchema.parse(productTerms));
}

export function productTermsFromJSON(
  jsonString: string,
): SafeParseResult<ProductTerms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductTerms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductTerms' from JSON`,
  );
}
