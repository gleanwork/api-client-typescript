/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Will only send back publicly available config and will ignore other keys
 */
export type PublicConfigRequest = {
  /**
   * A list of theme keys to include in the response.
   */
  themeKeys?: Array<string> | undefined;
  /**
   * A list of boolean flag keys to include in the response.
   */
  boolKeys?: Array<string> | undefined;
  /**
   * A list of integer flag keys to include in the response.
   */
  integerKeys?: Array<string> | undefined;
};

/** @internal */
export const PublicConfigRequest$inboundSchema: z.ZodType<
  PublicConfigRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  themeKeys: z.array(z.string()).optional(),
  boolKeys: z.array(z.string()).optional(),
  integerKeys: z.array(z.string()).optional(),
});

/** @internal */
export type PublicConfigRequest$Outbound = {
  themeKeys?: Array<string> | undefined;
  boolKeys?: Array<string> | undefined;
  integerKeys?: Array<string> | undefined;
};

/** @internal */
export const PublicConfigRequest$outboundSchema: z.ZodType<
  PublicConfigRequest$Outbound,
  z.ZodTypeDef,
  PublicConfigRequest
> = z.object({
  themeKeys: z.array(z.string()).optional(),
  boolKeys: z.array(z.string()).optional(),
  integerKeys: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublicConfigRequest$ {
  /** @deprecated use `PublicConfigRequest$inboundSchema` instead. */
  export const inboundSchema = PublicConfigRequest$inboundSchema;
  /** @deprecated use `PublicConfigRequest$outboundSchema` instead. */
  export const outboundSchema = PublicConfigRequest$outboundSchema;
  /** @deprecated use `PublicConfigRequest$Outbound` instead. */
  export type Outbound = PublicConfigRequest$Outbound;
}

export function publicConfigRequestToJSON(
  publicConfigRequest: PublicConfigRequest,
): string {
  return JSON.stringify(
    PublicConfigRequest$outboundSchema.parse(publicConfigRequest),
  );
}

export function publicConfigRequestFromJSON(
  jsonString: string,
): SafeParseResult<PublicConfigRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublicConfigRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublicConfigRequest' from JSON`,
  );
}
