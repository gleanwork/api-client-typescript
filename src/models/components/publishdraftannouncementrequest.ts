/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PublishDraftAnnouncementRequest = {
  /**
   * The opaque id of the draft announcement to be published.
   */
  id: number;
};

/** @internal */
export const PublishDraftAnnouncementRequest$inboundSchema: z.ZodType<
  PublishDraftAnnouncementRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
});

/** @internal */
export type PublishDraftAnnouncementRequest$Outbound = {
  id: number;
};

/** @internal */
export const PublishDraftAnnouncementRequest$outboundSchema: z.ZodType<
  PublishDraftAnnouncementRequest$Outbound,
  z.ZodTypeDef,
  PublishDraftAnnouncementRequest
> = z.object({
  id: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PublishDraftAnnouncementRequest$ {
  /** @deprecated use `PublishDraftAnnouncementRequest$inboundSchema` instead. */
  export const inboundSchema = PublishDraftAnnouncementRequest$inboundSchema;
  /** @deprecated use `PublishDraftAnnouncementRequest$outboundSchema` instead. */
  export const outboundSchema = PublishDraftAnnouncementRequest$outboundSchema;
  /** @deprecated use `PublishDraftAnnouncementRequest$Outbound` instead. */
  export type Outbound = PublishDraftAnnouncementRequest$Outbound;
}

export function publishDraftAnnouncementRequestToJSON(
  publishDraftAnnouncementRequest: PublishDraftAnnouncementRequest,
): string {
  return JSON.stringify(
    PublishDraftAnnouncementRequest$outboundSchema.parse(
      publishDraftAnnouncementRequest,
    ),
  );
}

export function publishDraftAnnouncementRequestFromJSON(
  jsonString: string,
): SafeParseResult<PublishDraftAnnouncementRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PublishDraftAnnouncementRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PublishDraftAnnouncementRequest' from JSON`,
  );
}
