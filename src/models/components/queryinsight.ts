/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CountInfo,
  CountInfo$inboundSchema,
  CountInfo$Outbound,
  CountInfo$outboundSchema,
} from "./countinfo.js";

export type QueryInsight = {
  /**
   * The query string the information is about.
   */
  query: string;
  searchCount?: CountInfo | undefined;
  searchorCount?: CountInfo | undefined;
  searchWithClickCount?: CountInfo | undefined;
  clickCount?: CountInfo | undefined;
  /**
   * list of similar queries to current one.
   */
  similarQueries?: Array<QueryInsight> | undefined;
};

/** @internal */
export const QueryInsight$inboundSchema: z.ZodType<
  QueryInsight,
  z.ZodTypeDef,
  unknown
> = z.object({
  query: z.string(),
  searchCount: CountInfo$inboundSchema.optional(),
  searchorCount: CountInfo$inboundSchema.optional(),
  searchWithClickCount: CountInfo$inboundSchema.optional(),
  clickCount: CountInfo$inboundSchema.optional(),
  similarQueries: z.array(z.lazy(() => QueryInsight$inboundSchema)).optional(),
});

/** @internal */
export type QueryInsight$Outbound = {
  query: string;
  searchCount?: CountInfo$Outbound | undefined;
  searchorCount?: CountInfo$Outbound | undefined;
  searchWithClickCount?: CountInfo$Outbound | undefined;
  clickCount?: CountInfo$Outbound | undefined;
  similarQueries?: Array<QueryInsight$Outbound> | undefined;
};

/** @internal */
export const QueryInsight$outboundSchema: z.ZodType<
  QueryInsight$Outbound,
  z.ZodTypeDef,
  QueryInsight
> = z.object({
  query: z.string(),
  searchCount: CountInfo$outboundSchema.optional(),
  searchorCount: CountInfo$outboundSchema.optional(),
  searchWithClickCount: CountInfo$outboundSchema.optional(),
  clickCount: CountInfo$outboundSchema.optional(),
  similarQueries: z.array(z.lazy(() => QueryInsight$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryInsight$ {
  /** @deprecated use `QueryInsight$inboundSchema` instead. */
  export const inboundSchema = QueryInsight$inboundSchema;
  /** @deprecated use `QueryInsight$outboundSchema` instead. */
  export const outboundSchema = QueryInsight$outboundSchema;
  /** @deprecated use `QueryInsight$Outbound` instead. */
  export type Outbound = QueryInsight$Outbound;
}

export function queryInsightToJSON(queryInsight: QueryInsight): string {
  return JSON.stringify(QueryInsight$outboundSchema.parse(queryInsight));
}

export function queryInsightFromJSON(
  jsonString: string,
): SafeParseResult<QueryInsight, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryInsight$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryInsight' from JSON`,
  );
}
