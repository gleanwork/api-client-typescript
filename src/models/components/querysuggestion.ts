/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SearchProviderInfo,
  SearchProviderInfo$inboundSchema,
  SearchProviderInfo$Outbound,
  SearchProviderInfo$outboundSchema,
} from "./searchproviderinfo.js";
import {
  SearchRequestInputDetails,
  SearchRequestInputDetails$inboundSchema,
  SearchRequestInputDetails$Outbound,
  SearchRequestInputDetails$outboundSchema,
} from "./searchrequestinputdetails.js";
import {
  SearchRequestOptions,
  SearchRequestOptions$inboundSchema,
  SearchRequestOptions$Outbound,
  SearchRequestOptions$outboundSchema,
} from "./searchrequestoptions.js";
import {
  TextRange,
  TextRange$inboundSchema,
  TextRange$Outbound,
  TextRange$outboundSchema,
} from "./textrange.js";

export type QuerySuggestion = {
  /**
   * A query term missing from the original query on which this suggestion is based.
   */
  missingTerm?: string | undefined;
  /**
   * The query being suggested (e.g. enforcing the missing term from the original query).
   */
  query: string;
  searchProviderInfo?: SearchProviderInfo | undefined;
  /**
   * A user-facing description to display for the suggestion.
   */
  label?: string | undefined;
  /**
   * The datasource associated with the suggestion.
   */
  datasource?: string | undefined;
  requestOptions?: SearchRequestOptions | undefined;
  /**
   * The bolded ranges within the query of the QuerySuggestion.
   */
  ranges?: Array<TextRange> | undefined;
  inputDetails?: SearchRequestInputDetails | undefined;
};

/** @internal */
export const QuerySuggestion$inboundSchema: z.ZodType<
  QuerySuggestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  missingTerm: z.string().optional(),
  query: z.string(),
  searchProviderInfo: SearchProviderInfo$inboundSchema.optional(),
  label: z.string().optional(),
  datasource: z.string().optional(),
  requestOptions: SearchRequestOptions$inboundSchema.optional(),
  ranges: z.array(z.lazy(() => TextRange$inboundSchema)).optional(),
  inputDetails: SearchRequestInputDetails$inboundSchema.optional(),
});

/** @internal */
export type QuerySuggestion$Outbound = {
  missingTerm?: string | undefined;
  query: string;
  searchProviderInfo?: SearchProviderInfo$Outbound | undefined;
  label?: string | undefined;
  datasource?: string | undefined;
  requestOptions?: SearchRequestOptions$Outbound | undefined;
  ranges?: Array<TextRange$Outbound> | undefined;
  inputDetails?: SearchRequestInputDetails$Outbound | undefined;
};

/** @internal */
export const QuerySuggestion$outboundSchema: z.ZodType<
  QuerySuggestion$Outbound,
  z.ZodTypeDef,
  QuerySuggestion
> = z.object({
  missingTerm: z.string().optional(),
  query: z.string(),
  searchProviderInfo: SearchProviderInfo$outboundSchema.optional(),
  label: z.string().optional(),
  datasource: z.string().optional(),
  requestOptions: SearchRequestOptions$outboundSchema.optional(),
  ranges: z.array(z.lazy(() => TextRange$outboundSchema)).optional(),
  inputDetails: SearchRequestInputDetails$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuerySuggestion$ {
  /** @deprecated use `QuerySuggestion$inboundSchema` instead. */
  export const inboundSchema = QuerySuggestion$inboundSchema;
  /** @deprecated use `QuerySuggestion$outboundSchema` instead. */
  export const outboundSchema = QuerySuggestion$outboundSchema;
  /** @deprecated use `QuerySuggestion$Outbound` instead. */
  export type Outbound = QuerySuggestion$Outbound;
}

export function querySuggestionToJSON(
  querySuggestion: QuerySuggestion,
): string {
  return JSON.stringify(QuerySuggestion$outboundSchema.parse(querySuggestion));
}

export function querySuggestionFromJSON(
  jsonString: string,
): SafeParseResult<QuerySuggestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuerySuggestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuerySuggestion' from JSON`,
  );
}
