/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";
import {
  QuerySuggestion,
  QuerySuggestion$inboundSchema,
  QuerySuggestion$Outbound,
  QuerySuggestion$outboundSchema,
} from "./querysuggestion.js";

export type QuerySuggestionList = {
  suggestions?: Array<QuerySuggestion> | undefined;
  person?: Person | undefined;
};

/** @internal */
export const QuerySuggestionList$inboundSchema: z.ZodType<
  QuerySuggestionList,
  z.ZodTypeDef,
  unknown
> = z.object({
  suggestions: z.array(z.lazy(() => QuerySuggestion$inboundSchema)).optional(),
  person: z.lazy(() => Person$inboundSchema).optional(),
});

/** @internal */
export type QuerySuggestionList$Outbound = {
  suggestions?: Array<QuerySuggestion$Outbound> | undefined;
  person?: Person$Outbound | undefined;
};

/** @internal */
export const QuerySuggestionList$outboundSchema: z.ZodType<
  QuerySuggestionList$Outbound,
  z.ZodTypeDef,
  QuerySuggestionList
> = z.object({
  suggestions: z.array(z.lazy(() => QuerySuggestion$outboundSchema)).optional(),
  person: z.lazy(() => Person$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuerySuggestionList$ {
  /** @deprecated use `QuerySuggestionList$inboundSchema` instead. */
  export const inboundSchema = QuerySuggestionList$inboundSchema;
  /** @deprecated use `QuerySuggestionList$outboundSchema` instead. */
  export const outboundSchema = QuerySuggestionList$outboundSchema;
  /** @deprecated use `QuerySuggestionList$Outbound` instead. */
  export type Outbound = QuerySuggestionList$Outbound;
}

export function querySuggestionListToJSON(
  querySuggestionList: QuerySuggestionList,
): string {
  return JSON.stringify(
    QuerySuggestionList$outboundSchema.parse(querySuggestionList),
  );
}

export function querySuggestionListFromJSON(
  jsonString: string,
): SafeParseResult<QuerySuggestionList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuerySuggestionList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuerySuggestionList' from JSON`,
  );
}
