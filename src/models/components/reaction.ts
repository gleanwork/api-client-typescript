/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";

export type Reaction = {
  type?: string | undefined;
  /**
   * The count of the reaction type on the document.
   */
  count?: number | undefined;
  reactors?: Array<Person> | undefined;
  /**
   * Whether the user in context reacted with this type to the document.
   */
  reactedByViewer?: boolean | undefined;
};

/** @internal */
export const Reaction$inboundSchema: z.ZodType<
  Reaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  count: z.number().int().optional(),
  reactors: z.array(z.lazy(() => Person$inboundSchema)).optional(),
  reactedByViewer: z.boolean().optional(),
});

/** @internal */
export type Reaction$Outbound = {
  type?: string | undefined;
  count?: number | undefined;
  reactors?: Array<Person$Outbound> | undefined;
  reactedByViewer?: boolean | undefined;
};

/** @internal */
export const Reaction$outboundSchema: z.ZodType<
  Reaction$Outbound,
  z.ZodTypeDef,
  Reaction
> = z.object({
  type: z.string().optional(),
  count: z.number().int().optional(),
  reactors: z.array(z.lazy(() => Person$outboundSchema)).optional(),
  reactedByViewer: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reaction$ {
  /** @deprecated use `Reaction$inboundSchema` instead. */
  export const inboundSchema = Reaction$inboundSchema;
  /** @deprecated use `Reaction$outboundSchema` instead. */
  export const outboundSchema = Reaction$outboundSchema;
  /** @deprecated use `Reaction$Outbound` instead. */
  export type Outbound = Reaction$Outbound;
}

export function reactionToJSON(reaction: Reaction): string {
  return JSON.stringify(Reaction$outboundSchema.parse(reaction));
}

export function reactionFromJSON(
  jsonString: string,
): SafeParseResult<Reaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reaction' from JSON`,
  );
}
