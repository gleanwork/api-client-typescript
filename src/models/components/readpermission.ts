/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ScopeType,
  ScopeType$inboundSchema,
  ScopeType$outboundSchema,
} from "./scopetype.js";

/**
 * Describes the read permission level that a user has for a specific feature
 */
export type ReadPermission = {
  /**
   * Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
   */
  scopeType?: ScopeType | undefined;
};

/** @internal */
export const ReadPermission$inboundSchema: z.ZodType<
  ReadPermission,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopeType: ScopeType$inboundSchema.optional(),
});

/** @internal */
export type ReadPermission$Outbound = {
  scopeType?: string | undefined;
};

/** @internal */
export const ReadPermission$outboundSchema: z.ZodType<
  ReadPermission$Outbound,
  z.ZodTypeDef,
  ReadPermission
> = z.object({
  scopeType: ScopeType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadPermission$ {
  /** @deprecated use `ReadPermission$inboundSchema` instead. */
  export const inboundSchema = ReadPermission$inboundSchema;
  /** @deprecated use `ReadPermission$outboundSchema` instead. */
  export const outboundSchema = ReadPermission$outboundSchema;
  /** @deprecated use `ReadPermission$Outbound` instead. */
  export type Outbound = ReadPermission$Outbound;
}

export function readPermissionToJSON(readPermission: ReadPermission): string {
  return JSON.stringify(ReadPermission$outboundSchema.parse(readPermission));
}

export function readPermissionFromJSON(
  jsonString: string,
): SafeParseResult<ReadPermission, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadPermission$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadPermission' from JSON`,
  );
}
