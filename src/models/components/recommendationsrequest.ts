/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  DocumentSpecUnion,
  DocumentSpecUnion$inboundSchema,
  DocumentSpecUnion$Outbound,
  DocumentSpecUnion$outboundSchema,
} from "./documentspecunion.js";
import {
  RecommendationsRequestOptions,
  RecommendationsRequestOptions$inboundSchema,
  RecommendationsRequestOptions$Outbound,
  RecommendationsRequestOptions$outboundSchema,
} from "./recommendationsrequestoptions.js";
import {
  SessionInfo,
  SessionInfo$inboundSchema,
  SessionInfo$Outbound,
  SessionInfo$outboundSchema,
} from "./sessioninfo.js";

export type RecommendationsRequest = {
  /**
   * The ISO 8601 timestamp associated with the client request.
   */
  timestamp?: Date | undefined;
  /**
   * A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
   */
  trackingToken?: string | undefined;
  sessionInfo?: SessionInfo | undefined;
  sourceDocument?: Document | undefined;
  /**
   * Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
   */
  pageSize?: number | undefined;
  /**
   * Hint to the server about how many characters long a snippet may be. Server may return less or more.
   */
  maxSnippetSize?: number | undefined;
  recommendationDocumentSpec?: DocumentSpecUnion | undefined;
  requestOptions?: RecommendationsRequestOptions | undefined;
};

/** @internal */
export const RecommendationsRequest$inboundSchema: z.ZodType<
  RecommendationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  trackingToken: z.string().optional(),
  sessionInfo: SessionInfo$inboundSchema.optional(),
  sourceDocument: Document$inboundSchema.optional(),
  pageSize: z.number().int().optional(),
  maxSnippetSize: z.number().int().optional(),
  recommendationDocumentSpec: DocumentSpecUnion$inboundSchema.optional(),
  requestOptions: RecommendationsRequestOptions$inboundSchema.optional(),
});

/** @internal */
export type RecommendationsRequest$Outbound = {
  timestamp?: string | undefined;
  trackingToken?: string | undefined;
  sessionInfo?: SessionInfo$Outbound | undefined;
  sourceDocument?: Document$Outbound | undefined;
  pageSize?: number | undefined;
  maxSnippetSize?: number | undefined;
  recommendationDocumentSpec?: DocumentSpecUnion$Outbound | undefined;
  requestOptions?: RecommendationsRequestOptions$Outbound | undefined;
};

/** @internal */
export const RecommendationsRequest$outboundSchema: z.ZodType<
  RecommendationsRequest$Outbound,
  z.ZodTypeDef,
  RecommendationsRequest
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  trackingToken: z.string().optional(),
  sessionInfo: SessionInfo$outboundSchema.optional(),
  sourceDocument: Document$outboundSchema.optional(),
  pageSize: z.number().int().optional(),
  maxSnippetSize: z.number().int().optional(),
  recommendationDocumentSpec: DocumentSpecUnion$outboundSchema.optional(),
  requestOptions: RecommendationsRequestOptions$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecommendationsRequest$ {
  /** @deprecated use `RecommendationsRequest$inboundSchema` instead. */
  export const inboundSchema = RecommendationsRequest$inboundSchema;
  /** @deprecated use `RecommendationsRequest$outboundSchema` instead. */
  export const outboundSchema = RecommendationsRequest$outboundSchema;
  /** @deprecated use `RecommendationsRequest$Outbound` instead. */
  export type Outbound = RecommendationsRequest$Outbound;
}

export function recommendationsRequestToJSON(
  recommendationsRequest: RecommendationsRequest,
): string {
  return JSON.stringify(
    RecommendationsRequest$outboundSchema.parse(recommendationsRequest),
  );
}

export function recommendationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<RecommendationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecommendationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecommendationsRequest' from JSON`,
  );
}
