/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  FacetFilterSet,
  FacetFilterSet$inboundSchema,
  FacetFilterSet$Outbound,
  FacetFilterSet$outboundSchema,
} from "./facetfilterset.js";
import {
  SearchResultProminenceEnum,
  SearchResultProminenceEnum$inboundSchema,
  SearchResultProminenceEnum$outboundSchema,
} from "./searchresultprominenceenum.js";

export type RecommendationsRequestOptions = {
  /**
   * Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
   */
  datasourceFilter?: string | undefined;
  /**
   * Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
   */
  datasourcesFilter?: Array<string> | undefined;
  /**
   * A list of facet filter sets that will be OR'ed together.
   */
  facetFilterSets?: Array<FacetFilterSet> | undefined;
  context?: Document | undefined;
  /**
   * The types of prominence wanted in results returned. Default is any type.
   */
  resultProminence?: Array<SearchResultProminenceEnum> | undefined;
};

/** @internal */
export const RecommendationsRequestOptions$inboundSchema: z.ZodType<
  RecommendationsRequestOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasourceFilter: z.string().optional(),
  datasourcesFilter: z.array(z.string()).optional(),
  facetFilterSets: z.array(FacetFilterSet$inboundSchema).optional(),
  context: Document$inboundSchema.optional(),
  resultProminence: z.array(SearchResultProminenceEnum$inboundSchema)
    .optional(),
});

/** @internal */
export type RecommendationsRequestOptions$Outbound = {
  datasourceFilter?: string | undefined;
  datasourcesFilter?: Array<string> | undefined;
  facetFilterSets?: Array<FacetFilterSet$Outbound> | undefined;
  context?: Document$Outbound | undefined;
  resultProminence?: Array<string> | undefined;
};

/** @internal */
export const RecommendationsRequestOptions$outboundSchema: z.ZodType<
  RecommendationsRequestOptions$Outbound,
  z.ZodTypeDef,
  RecommendationsRequestOptions
> = z.object({
  datasourceFilter: z.string().optional(),
  datasourcesFilter: z.array(z.string()).optional(),
  facetFilterSets: z.array(FacetFilterSet$outboundSchema).optional(),
  context: Document$outboundSchema.optional(),
  resultProminence: z.array(SearchResultProminenceEnum$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecommendationsRequestOptions$ {
  /** @deprecated use `RecommendationsRequestOptions$inboundSchema` instead. */
  export const inboundSchema = RecommendationsRequestOptions$inboundSchema;
  /** @deprecated use `RecommendationsRequestOptions$outboundSchema` instead. */
  export const outboundSchema = RecommendationsRequestOptions$outboundSchema;
  /** @deprecated use `RecommendationsRequestOptions$Outbound` instead. */
  export type Outbound = RecommendationsRequestOptions$Outbound;
}

export function recommendationsRequestOptionsToJSON(
  recommendationsRequestOptions: RecommendationsRequestOptions,
): string {
  return JSON.stringify(
    RecommendationsRequestOptions$outboundSchema.parse(
      recommendationsRequestOptions,
    ),
  );
}

export function recommendationsRequestOptionsFromJSON(
  jsonString: string,
): SafeParseResult<RecommendationsRequestOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecommendationsRequestOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecommendationsRequestOptions' from JSON`,
  );
}
