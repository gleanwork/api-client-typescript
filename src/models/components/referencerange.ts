/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SearchResultSnippet,
  SearchResultSnippet$inboundSchema,
  SearchResultSnippet$Outbound,
  SearchResultSnippet$outboundSchema,
} from "./searchresultsnippet.js";
import {
  TextRange,
  TextRange$inboundSchema,
  TextRange$Outbound,
  TextRange$outboundSchema,
} from "./textrange.js";

/**
 * Each text range from the response can correspond to an array of snippets from the citation source.
 */
export type ReferenceRange = {
  /**
   * A subsection of a given string to which some special formatting should be applied.
   */
  textRange?: TextRange | undefined;
  snippets?: Array<SearchResultSnippet> | undefined;
};

/** @internal */
export const ReferenceRange$inboundSchema: z.ZodType<
  ReferenceRange,
  z.ZodTypeDef,
  unknown
> = z.object({
  textRange: TextRange$inboundSchema.optional(),
  snippets: z.array(SearchResultSnippet$inboundSchema).optional(),
});

/** @internal */
export type ReferenceRange$Outbound = {
  textRange?: TextRange$Outbound | undefined;
  snippets?: Array<SearchResultSnippet$Outbound> | undefined;
};

/** @internal */
export const ReferenceRange$outboundSchema: z.ZodType<
  ReferenceRange$Outbound,
  z.ZodTypeDef,
  ReferenceRange
> = z.object({
  textRange: TextRange$outboundSchema.optional(),
  snippets: z.array(SearchResultSnippet$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReferenceRange$ {
  /** @deprecated use `ReferenceRange$inboundSchema` instead. */
  export const inboundSchema = ReferenceRange$inboundSchema;
  /** @deprecated use `ReferenceRange$outboundSchema` instead. */
  export const outboundSchema = ReferenceRange$outboundSchema;
  /** @deprecated use `ReferenceRange$Outbound` instead. */
  export type Outbound = ReferenceRange$Outbound;
}

export function referenceRangeToJSON(referenceRange: ReferenceRange): string {
  return JSON.stringify(ReferenceRange$outboundSchema.parse(referenceRange));
}

export function referenceRangeFromJSON(
  jsonString: string,
): SafeParseResult<ReferenceRange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReferenceRange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReferenceRange' from JSON`,
  );
}
