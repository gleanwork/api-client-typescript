/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  QuerySuggestion,
  QuerySuggestion$inboundSchema,
  QuerySuggestion$Outbound,
  QuerySuggestion$outboundSchema,
} from "./querysuggestion.js";
import {
  SearchResult,
  SearchResult$inboundSchema,
  SearchResult$Outbound,
  SearchResult$outboundSchema,
} from "./searchresult.js";

/**
 * How this document relates to the including entity.
 */
export const Relation = {
  Attachment: "ATTACHMENT",
  Canonical: "CANONICAL",
  Case: "CASE",
  Contact: "CONTACT",
  ConversationMessages: "CONVERSATION_MESSAGES",
  Expert: "EXPERT",
  From: "FROM",
  Highlight: "HIGHLIGHT",
  Opportunity: "OPPORTUNITY",
  Recent: "RECENT",
  Source: "SOURCE",
  Ticket: "TICKET",
  Transcript: "TRANSCRIPT",
  With: "WITH",
} as const;
/**
 * How this document relates to the including entity.
 */
export type Relation = ClosedEnum<typeof Relation>;

export type RelatedDocuments = {
  /**
   * How this document relates to the including entity.
   */
  relation?: Relation | undefined;
  /**
   * Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
   */
  associatedEntityId?: string | undefined;
  querySuggestion?: QuerySuggestion | undefined;
  /**
   * A truncated list of documents with this relation. TO BE DEPRECATED.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  documents?: Array<Document> | undefined;
  /**
   * A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
   */
  results?: Array<SearchResult> | undefined;
};

/** @internal */
export const Relation$inboundSchema: z.ZodNativeEnum<typeof Relation> = z
  .nativeEnum(Relation);

/** @internal */
export const Relation$outboundSchema: z.ZodNativeEnum<typeof Relation> =
  Relation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Relation$ {
  /** @deprecated use `Relation$inboundSchema` instead. */
  export const inboundSchema = Relation$inboundSchema;
  /** @deprecated use `Relation$outboundSchema` instead. */
  export const outboundSchema = Relation$outboundSchema;
}

/** @internal */
export const RelatedDocuments$inboundSchema: z.ZodType<
  RelatedDocuments,
  z.ZodTypeDef,
  unknown
> = z.object({
  relation: Relation$inboundSchema.optional(),
  associatedEntityId: z.string().optional(),
  querySuggestion: z.lazy(() => QuerySuggestion$inboundSchema).optional(),
  documents: z.array(z.lazy(() => Document$inboundSchema)).optional(),
  results: z.array(z.lazy(() => SearchResult$inboundSchema)).optional(),
});

/** @internal */
export type RelatedDocuments$Outbound = {
  relation?: string | undefined;
  associatedEntityId?: string | undefined;
  querySuggestion?: QuerySuggestion$Outbound | undefined;
  documents?: Array<Document$Outbound> | undefined;
  results?: Array<SearchResult$Outbound> | undefined;
};

/** @internal */
export const RelatedDocuments$outboundSchema: z.ZodType<
  RelatedDocuments$Outbound,
  z.ZodTypeDef,
  RelatedDocuments
> = z.object({
  relation: Relation$outboundSchema.optional(),
  associatedEntityId: z.string().optional(),
  querySuggestion: z.lazy(() => QuerySuggestion$outboundSchema).optional(),
  documents: z.array(z.lazy(() => Document$outboundSchema)).optional(),
  results: z.array(z.lazy(() => SearchResult$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedDocuments$ {
  /** @deprecated use `RelatedDocuments$inboundSchema` instead. */
  export const inboundSchema = RelatedDocuments$inboundSchema;
  /** @deprecated use `RelatedDocuments$outboundSchema` instead. */
  export const outboundSchema = RelatedDocuments$outboundSchema;
  /** @deprecated use `RelatedDocuments$Outbound` instead. */
  export type Outbound = RelatedDocuments$Outbound;
}

export function relatedDocumentsToJSON(
  relatedDocuments: RelatedDocuments,
): string {
  return JSON.stringify(
    RelatedDocuments$outboundSchema.parse(relatedDocuments),
  );
}

export function relatedDocumentsFromJSON(
  jsonString: string,
): SafeParseResult<RelatedDocuments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedDocuments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedDocuments' from JSON`,
  );
}
