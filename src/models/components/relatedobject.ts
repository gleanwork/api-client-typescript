/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Some metadata of the object which can be displayed, while not having the actual object.
 */
export type Metadata = {
  /**
   * Placeholder name of the object, not the relationship.
   */
  name?: string | undefined;
};

export type RelatedObject = {
  /**
   * The ID of the related object
   */
  id: string;
  /**
   * Some metadata of the object which can be displayed, while not having the actual object.
   */
  metadata?: Metadata | undefined;
};

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type Metadata$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const RelatedObject$inboundSchema: z.ZodType<
  RelatedObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  metadata: z.lazy(() => Metadata$inboundSchema).optional(),
});

/** @internal */
export type RelatedObject$Outbound = {
  id: string;
  metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const RelatedObject$outboundSchema: z.ZodType<
  RelatedObject$Outbound,
  z.ZodTypeDef,
  RelatedObject
> = z.object({
  id: z.string(),
  metadata: z.lazy(() => Metadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedObject$ {
  /** @deprecated use `RelatedObject$inboundSchema` instead. */
  export const inboundSchema = RelatedObject$inboundSchema;
  /** @deprecated use `RelatedObject$outboundSchema` instead. */
  export const outboundSchema = RelatedObject$outboundSchema;
  /** @deprecated use `RelatedObject$Outbound` instead. */
  export type Outbound = RelatedObject$Outbound;
}

export function relatedObjectToJSON(relatedObject: RelatedObject): string {
  return JSON.stringify(RelatedObject$outboundSchema.parse(relatedObject));
}

export function relatedObjectFromJSON(
  jsonString: string,
): SafeParseResult<RelatedObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedObject' from JSON`,
  );
}
