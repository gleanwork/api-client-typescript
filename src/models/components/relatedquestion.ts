/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TextRange,
  TextRange$inboundSchema,
  TextRange$Outbound,
  TextRange$outboundSchema,
} from "./textrange.js";

export type RelatedQuestion = {
  /**
   * The text of the related question
   */
  question?: string | undefined;
  /**
   * The answer for the related question
   */
  answer?: string | undefined;
  /**
   * Subsections of the answer string to which some special formatting should be applied (eg. bold)
   */
  ranges?: Array<TextRange> | undefined;
};

/** @internal */
export const RelatedQuestion$inboundSchema: z.ZodType<
  RelatedQuestion,
  z.ZodTypeDef,
  unknown
> = z.object({
  question: z.string().optional(),
  answer: z.string().optional(),
  ranges: z.array(z.lazy(() => TextRange$inboundSchema)).optional(),
});

/** @internal */
export type RelatedQuestion$Outbound = {
  question?: string | undefined;
  answer?: string | undefined;
  ranges?: Array<TextRange$Outbound> | undefined;
};

/** @internal */
export const RelatedQuestion$outboundSchema: z.ZodType<
  RelatedQuestion$Outbound,
  z.ZodTypeDef,
  RelatedQuestion
> = z.object({
  question: z.string().optional(),
  answer: z.string().optional(),
  ranges: z.array(z.lazy(() => TextRange$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedQuestion$ {
  /** @deprecated use `RelatedQuestion$inboundSchema` instead. */
  export const inboundSchema = RelatedQuestion$inboundSchema;
  /** @deprecated use `RelatedQuestion$outboundSchema` instead. */
  export const outboundSchema = RelatedQuestion$outboundSchema;
  /** @deprecated use `RelatedQuestion$Outbound` instead. */
  export type Outbound = RelatedQuestion$Outbound;
}

export function relatedQuestionToJSON(
  relatedQuestion: RelatedQuestion,
): string {
  return JSON.stringify(RelatedQuestion$outboundSchema.parse(relatedQuestion));
}

export function relatedQuestionFromJSON(
  jsonString: string,
): SafeParseResult<RelatedQuestion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedQuestion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedQuestion' from JSON`,
  );
}
