/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReminderRequest = {
  /**
   * The document which the verification is for new reminders and/or update.
   */
  documentId: string;
  /**
   * The obfuscated id of the person this verification is assigned to.
   */
  assignee?: string | undefined;
  /**
   * Reminder for the next verifications in terms of days. For deletion, this will be omitted.
   */
  remindInDays?: number | undefined;
  /**
   * An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
   */
  reason?: string | undefined;
};

/** @internal */
export const ReminderRequest$inboundSchema: z.ZodType<
  ReminderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentId: z.string(),
  assignee: z.string().optional(),
  remindInDays: z.number().int().optional(),
  reason: z.string().optional(),
});

/** @internal */
export type ReminderRequest$Outbound = {
  documentId: string;
  assignee?: string | undefined;
  remindInDays?: number | undefined;
  reason?: string | undefined;
};

/** @internal */
export const ReminderRequest$outboundSchema: z.ZodType<
  ReminderRequest$Outbound,
  z.ZodTypeDef,
  ReminderRequest
> = z.object({
  documentId: z.string(),
  assignee: z.string().optional(),
  remindInDays: z.number().int().optional(),
  reason: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReminderRequest$ {
  /** @deprecated use `ReminderRequest$inboundSchema` instead. */
  export const inboundSchema = ReminderRequest$inboundSchema;
  /** @deprecated use `ReminderRequest$outboundSchema` instead. */
  export const outboundSchema = ReminderRequest$outboundSchema;
  /** @deprecated use `ReminderRequest$Outbound` instead. */
  export type Outbound = ReminderRequest$Outbound;
}

export function reminderRequestToJSON(
  reminderRequest: ReminderRequest,
): string {
  return JSON.stringify(ReminderRequest$outboundSchema.parse(reminderRequest));
}

export function reminderRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReminderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReminderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReminderRequest' from JSON`,
  );
}
