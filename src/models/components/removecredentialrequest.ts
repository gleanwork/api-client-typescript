/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveCredentialRequest = {
  /**
   * the datasource the credential applies to
   */
  datasource?: string | undefined;
  /**
   * the datasource instance the credential applies to
   */
  datasourceInstance?: string | undefined;
  /**
   * the user info (email or username for example) for the credential
   */
  user?: string | undefined;
};

/** @internal */
export const RemoveCredentialRequest$inboundSchema: z.ZodType<
  RemoveCredentialRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasource: z.string().optional(),
  datasourceInstance: z.string().optional(),
  user: z.string().optional(),
});

/** @internal */
export type RemoveCredentialRequest$Outbound = {
  datasource?: string | undefined;
  datasourceInstance?: string | undefined;
  user?: string | undefined;
};

/** @internal */
export const RemoveCredentialRequest$outboundSchema: z.ZodType<
  RemoveCredentialRequest$Outbound,
  z.ZodTypeDef,
  RemoveCredentialRequest
> = z.object({
  datasource: z.string().optional(),
  datasourceInstance: z.string().optional(),
  user: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveCredentialRequest$ {
  /** @deprecated use `RemoveCredentialRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveCredentialRequest$inboundSchema;
  /** @deprecated use `RemoveCredentialRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveCredentialRequest$outboundSchema;
  /** @deprecated use `RemoveCredentialRequest$Outbound` instead. */
  export type Outbound = RemoveCredentialRequest$Outbound;
}

export function removeCredentialRequestToJSON(
  removeCredentialRequest: RemoveCredentialRequest,
): string {
  return JSON.stringify(
    RemoveCredentialRequest$outboundSchema.parse(removeCredentialRequest),
  );
}

export function removeCredentialRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveCredentialRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveCredentialRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveCredentialRequest' from JSON`,
  );
}
