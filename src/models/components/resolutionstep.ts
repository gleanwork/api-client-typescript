/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A step to take to resolve an alert
 */
export type ResolutionStep = {
  /**
   * text for what step to take
   */
  stepText?: string | undefined;
  /**
   * optional link url for instructions
   */
  link?: string | undefined;
  /**
   * optional metadata for the step
   */
  metadata?: Array<string> | undefined;
};

/** @internal */
export const ResolutionStep$inboundSchema: z.ZodType<
  ResolutionStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  stepText: z.string().optional(),
  link: z.string().optional(),
  metadata: z.array(z.string()).optional(),
});

/** @internal */
export type ResolutionStep$Outbound = {
  stepText?: string | undefined;
  link?: string | undefined;
  metadata?: Array<string> | undefined;
};

/** @internal */
export const ResolutionStep$outboundSchema: z.ZodType<
  ResolutionStep$Outbound,
  z.ZodTypeDef,
  ResolutionStep
> = z.object({
  stepText: z.string().optional(),
  link: z.string().optional(),
  metadata: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResolutionStep$ {
  /** @deprecated use `ResolutionStep$inboundSchema` instead. */
  export const inboundSchema = ResolutionStep$inboundSchema;
  /** @deprecated use `ResolutionStep$outboundSchema` instead. */
  export const outboundSchema = ResolutionStep$outboundSchema;
  /** @deprecated use `ResolutionStep$Outbound` instead. */
  export type Outbound = ResolutionStep$Outbound;
}

export function resolutionStepToJSON(resolutionStep: ResolutionStep): string {
  return JSON.stringify(ResolutionStep$outboundSchema.parse(resolutionStep));
}

export function resolutionStepFromJSON(
  jsonString: string,
): SafeParseResult<ResolutionStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResolutionStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResolutionStep' from JSON`,
  );
}
