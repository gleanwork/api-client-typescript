/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IconConfig,
  IconConfig$inboundSchema,
  IconConfig$Outbound,
  IconConfig$outboundSchema,
} from "./iconconfig.js";

export type ResultsDescription = {
  /**
   * Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
   */
  text?: string | undefined;
  /**
   * Defines how to render an icon
   */
  iconConfig?: IconConfig | undefined;
};

/** @internal */
export const ResultsDescription$inboundSchema: z.ZodType<
  ResultsDescription,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string().optional(),
  iconConfig: IconConfig$inboundSchema.optional(),
});

/** @internal */
export type ResultsDescription$Outbound = {
  text?: string | undefined;
  iconConfig?: IconConfig$Outbound | undefined;
};

/** @internal */
export const ResultsDescription$outboundSchema: z.ZodType<
  ResultsDescription$Outbound,
  z.ZodTypeDef,
  ResultsDescription
> = z.object({
  text: z.string().optional(),
  iconConfig: IconConfig$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultsDescription$ {
  /** @deprecated use `ResultsDescription$inboundSchema` instead. */
  export const inboundSchema = ResultsDescription$inboundSchema;
  /** @deprecated use `ResultsDescription$outboundSchema` instead. */
  export const outboundSchema = ResultsDescription$outboundSchema;
  /** @deprecated use `ResultsDescription$Outbound` instead. */
  export type Outbound = ResultsDescription$Outbound;
}

export function resultsDescriptionToJSON(
  resultsDescription: ResultsDescription,
): string {
  return JSON.stringify(
    ResultsDescription$outboundSchema.parse(resultsDescription),
  );
}

export function resultsDescriptionFromJSON(
  jsonString: string,
): SafeParseResult<ResultsDescription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultsDescription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultsDescription' from JSON`,
  );
}
