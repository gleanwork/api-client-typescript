/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ResultTab = {
  /**
   * The unique ID of the tab. Can be passed in a search request to get results for that tab.
   */
  id?: string | undefined;
  /**
   * The number of results in this tab for the current query.
   */
  count?: number | undefined;
  /**
   * The datasource associated with the tab, if any.
   */
  datasource?: string | undefined;
  /**
   * The datasource instance associated with the tab, if any.
   */
  datasourceInstance?: string | undefined;
};

/** @internal */
export const ResultTab$inboundSchema: z.ZodType<
  ResultTab,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  count: z.number().int().optional(),
  datasource: z.string().optional(),
  datasourceInstance: z.string().optional(),
});

/** @internal */
export type ResultTab$Outbound = {
  id?: string | undefined;
  count?: number | undefined;
  datasource?: string | undefined;
  datasourceInstance?: string | undefined;
};

/** @internal */
export const ResultTab$outboundSchema: z.ZodType<
  ResultTab$Outbound,
  z.ZodTypeDef,
  ResultTab
> = z.object({
  id: z.string().optional(),
  count: z.number().int().optional(),
  datasource: z.string().optional(),
  datasourceInstance: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultTab$ {
  /** @deprecated use `ResultTab$inboundSchema` instead. */
  export const inboundSchema = ResultTab$inboundSchema;
  /** @deprecated use `ResultTab$outboundSchema` instead. */
  export const outboundSchema = ResultTab$outboundSchema;
  /** @deprecated use `ResultTab$Outbound` instead. */
  export type Outbound = ResultTab$Outbound;
}

export function resultTabToJSON(resultTab: ResultTab): string {
  return JSON.stringify(ResultTab$outboundSchema.parse(resultTab));
}

export function resultTabFromJSON(
  jsonString: string,
): SafeParseResult<ResultTab, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultTab$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultTab' from JSON`,
  );
}
