/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes the response body of the /rotatetoken API call
 */
export type RotateTokenResponse = {
  /**
   * New raw secret
   */
  rawSecret?: string | undefined;
  /**
   * Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
   */
  createdAt?: number | undefined;
  /**
   * Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
   */
  rotationPeriodMinutes?: number | undefined;
};

/** @internal */
export const RotateTokenResponse$inboundSchema: z.ZodType<
  RotateTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  rawSecret: z.string().optional(),
  createdAt: z.number().int().optional(),
  rotationPeriodMinutes: z.number().int().optional(),
});

/** @internal */
export type RotateTokenResponse$Outbound = {
  rawSecret?: string | undefined;
  createdAt?: number | undefined;
  rotationPeriodMinutes?: number | undefined;
};

/** @internal */
export const RotateTokenResponse$outboundSchema: z.ZodType<
  RotateTokenResponse$Outbound,
  z.ZodTypeDef,
  RotateTokenResponse
> = z.object({
  rawSecret: z.string().optional(),
  createdAt: z.number().int().optional(),
  rotationPeriodMinutes: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RotateTokenResponse$ {
  /** @deprecated use `RotateTokenResponse$inboundSchema` instead. */
  export const inboundSchema = RotateTokenResponse$inboundSchema;
  /** @deprecated use `RotateTokenResponse$outboundSchema` instead. */
  export const outboundSchema = RotateTokenResponse$outboundSchema;
  /** @deprecated use `RotateTokenResponse$Outbound` instead. */
  export type Outbound = RotateTokenResponse$Outbound;
}

export function rotateTokenResponseToJSON(
  rotateTokenResponse: RotateTokenResponse,
): string {
  return JSON.stringify(
    RotateTokenResponse$outboundSchema.parse(rotateTokenResponse),
  );
}

export function rotateTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<RotateTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RotateTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RotateTokenResponse' from JSON`,
  );
}
