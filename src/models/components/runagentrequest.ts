/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RunAgentRequest = {
  /**
   * The ID of the agent to be run.
   */
  agentId?: string | undefined;
  /**
   * Key-value mapping of string -> string where the key is the name of the field in the prompt.
   */
  fields?: { [k: string]: string } | undefined;
  /**
   * Whether to stream responses as they become available. If false, the entire response will be returned at once.
   */
  stream?: boolean | undefined;
};

/** @internal */
export const RunAgentRequest$inboundSchema: z.ZodType<
  RunAgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  agentId: z.string().optional(),
  fields: z.record(z.string()).optional(),
  stream: z.boolean().optional(),
});

/** @internal */
export type RunAgentRequest$Outbound = {
  agentId?: string | undefined;
  fields?: { [k: string]: string } | undefined;
  stream?: boolean | undefined;
};

/** @internal */
export const RunAgentRequest$outboundSchema: z.ZodType<
  RunAgentRequest$Outbound,
  z.ZodTypeDef,
  RunAgentRequest
> = z.object({
  agentId: z.string().optional(),
  fields: z.record(z.string()).optional(),
  stream: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunAgentRequest$ {
  /** @deprecated use `RunAgentRequest$inboundSchema` instead. */
  export const inboundSchema = RunAgentRequest$inboundSchema;
  /** @deprecated use `RunAgentRequest$outboundSchema` instead. */
  export const outboundSchema = RunAgentRequest$outboundSchema;
  /** @deprecated use `RunAgentRequest$Outbound` instead. */
  export type Outbound = RunAgentRequest$Outbound;
}

export function runAgentRequestToJSON(
  runAgentRequest: RunAgentRequest,
): string {
  return JSON.stringify(RunAgentRequest$outboundSchema.parse(runAgentRequest));
}

export function runAgentRequestFromJSON(
  jsonString: string,
): SafeParseResult<RunAgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunAgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunAgentRequest' from JSON`,
  );
}
