/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Configuration settings related to Search
 */
export type SearchClientConfig = {
  /**
   * Whether search is available or not.
   */
  available?: boolean | undefined;
  /**
   * Custom autocomplete box placeholder to replace rotating prompts
   */
  placeholder?: string | undefined;
};

/** @internal */
export const SearchClientConfig$inboundSchema: z.ZodType<
  SearchClientConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  available: z.boolean().optional(),
  placeholder: z.string().optional(),
});

/** @internal */
export type SearchClientConfig$Outbound = {
  available?: boolean | undefined;
  placeholder?: string | undefined;
};

/** @internal */
export const SearchClientConfig$outboundSchema: z.ZodType<
  SearchClientConfig$Outbound,
  z.ZodTypeDef,
  SearchClientConfig
> = z.object({
  available: z.boolean().optional(),
  placeholder: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchClientConfig$ {
  /** @deprecated use `SearchClientConfig$inboundSchema` instead. */
  export const inboundSchema = SearchClientConfig$inboundSchema;
  /** @deprecated use `SearchClientConfig$outboundSchema` instead. */
  export const outboundSchema = SearchClientConfig$outboundSchema;
  /** @deprecated use `SearchClientConfig$Outbound` instead. */
  export type Outbound = SearchClientConfig$Outbound;
}

export function searchClientConfigToJSON(
  searchClientConfig: SearchClientConfig,
): string {
  return JSON.stringify(
    SearchClientConfig$outboundSchema.parse(searchClientConfig),
  );
}

export function searchClientConfigFromJSON(
  jsonString: string,
): SafeParseResult<SearchClientConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchClientConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchClientConfig' from JSON`,
  );
}
