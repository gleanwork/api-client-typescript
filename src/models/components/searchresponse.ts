/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ErrorInfo,
  ErrorInfo$inboundSchema,
  ErrorInfo$Outbound,
  ErrorInfo$outboundSchema,
} from "./errorinfo.js";
import {
  FacetFilter,
  FacetFilter$inboundSchema,
  FacetFilter$Outbound,
  FacetFilter$outboundSchema,
} from "./facetfilter.js";
import {
  FacetResult,
  FacetResult$inboundSchema,
  FacetResult$Outbound,
  FacetResult$outboundSchema,
} from "./facetresult.js";
import {
  GeneratedQna,
  GeneratedQna$inboundSchema,
  GeneratedQna$Outbound,
  GeneratedQna$outboundSchema,
} from "./generatedqna.js";
import {
  ResultsDescription,
  ResultsDescription$inboundSchema,
  ResultsDescription$Outbound,
  ResultsDescription$outboundSchema,
} from "./resultsdescription.js";
import {
  ResultTab,
  ResultTab$inboundSchema,
  ResultTab$Outbound,
  ResultTab$outboundSchema,
} from "./resulttab.js";
import {
  SearchResponseMetadata,
  SearchResponseMetadata$inboundSchema,
  SearchResponseMetadata$Outbound,
  SearchResponseMetadata$outboundSchema,
} from "./searchresponsemetadata.js";
import {
  SearchResult,
  SearchResult$inboundSchema,
  SearchResult$Outbound,
  SearchResult$outboundSchema,
} from "./searchresult.js";
import {
  SessionInfo,
  SessionInfo$inboundSchema,
  SessionInfo$Outbound,
  SessionInfo$outboundSchema,
} from "./sessioninfo.js";
import {
  StructuredResult,
  StructuredResult$inboundSchema,
  StructuredResult$Outbound,
  StructuredResult$outboundSchema,
} from "./structuredresult.js";

export type SearchResponse = {
  /**
   * A token that should be passed for additional requests related to this request (such as more results requests).
   */
  trackingToken?: string | undefined;
  sessionInfo?: SessionInfo | undefined;
  results?: Array<SearchResult> | undefined;
  structuredResults?: Array<StructuredResult> | undefined;
  generatedQnaResult?: GeneratedQna | undefined;
  errorInfo?: ErrorInfo | undefined;
  /**
   * A platform-generated request ID to correlate backend logs.
   */
  requestID?: string | undefined;
  /**
   * Time in milliseconds the backend took to respond to the request.
   */
  backendTimeMillis?: number | undefined;
  /**
   * List of experiment ids for the corresponding request.
   */
  experimentIds?: Array<number> | undefined;
  metadata?: SearchResponseMetadata | undefined;
  facetResults?: Array<FacetResult> | undefined;
  /**
   * All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
   */
  resultTabs?: Array<ResultTab> | undefined;
  /**
   * The unique IDs of the result tabs to which this response belongs.
   */
  resultTabIds?: Array<string> | undefined;
  resultsDescription?: ResultsDescription | undefined;
  /**
   * The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
   */
  rewrittenFacetFilters?: Array<FacetFilter> | undefined;
  /**
   * Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
   */
  cursor?: string | undefined;
  /**
   * Whether more results are available. Use cursor to retrieve them.
   */
  hasMoreResults?: boolean | undefined;
};

/** @internal */
export const SearchResponse$inboundSchema: z.ZodType<
  SearchResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  trackingToken: z.string().optional(),
  sessionInfo: SessionInfo$inboundSchema.optional(),
  results: z.array(SearchResult$inboundSchema).optional(),
  structuredResults: z.array(StructuredResult$inboundSchema).optional(),
  generatedQnaResult: GeneratedQna$inboundSchema.optional(),
  errorInfo: ErrorInfo$inboundSchema.optional(),
  requestID: z.string().optional(),
  backendTimeMillis: z.number().int().optional(),
  experimentIds: z.array(z.number().int()).optional(),
  metadata: SearchResponseMetadata$inboundSchema.optional(),
  facetResults: z.array(FacetResult$inboundSchema).optional(),
  resultTabs: z.array(ResultTab$inboundSchema).optional(),
  resultTabIds: z.array(z.string()).optional(),
  resultsDescription: ResultsDescription$inboundSchema.optional(),
  rewrittenFacetFilters: z.array(FacetFilter$inboundSchema).optional(),
  cursor: z.string().optional(),
  hasMoreResults: z.boolean().optional(),
});

/** @internal */
export type SearchResponse$Outbound = {
  trackingToken?: string | undefined;
  sessionInfo?: SessionInfo$Outbound | undefined;
  results?: Array<SearchResult$Outbound> | undefined;
  structuredResults?: Array<StructuredResult$Outbound> | undefined;
  generatedQnaResult?: GeneratedQna$Outbound | undefined;
  errorInfo?: ErrorInfo$Outbound | undefined;
  requestID?: string | undefined;
  backendTimeMillis?: number | undefined;
  experimentIds?: Array<number> | undefined;
  metadata?: SearchResponseMetadata$Outbound | undefined;
  facetResults?: Array<FacetResult$Outbound> | undefined;
  resultTabs?: Array<ResultTab$Outbound> | undefined;
  resultTabIds?: Array<string> | undefined;
  resultsDescription?: ResultsDescription$Outbound | undefined;
  rewrittenFacetFilters?: Array<FacetFilter$Outbound> | undefined;
  cursor?: string | undefined;
  hasMoreResults?: boolean | undefined;
};

/** @internal */
export const SearchResponse$outboundSchema: z.ZodType<
  SearchResponse$Outbound,
  z.ZodTypeDef,
  SearchResponse
> = z.object({
  trackingToken: z.string().optional(),
  sessionInfo: SessionInfo$outboundSchema.optional(),
  results: z.array(SearchResult$outboundSchema).optional(),
  structuredResults: z.array(StructuredResult$outboundSchema).optional(),
  generatedQnaResult: GeneratedQna$outboundSchema.optional(),
  errorInfo: ErrorInfo$outboundSchema.optional(),
  requestID: z.string().optional(),
  backendTimeMillis: z.number().int().optional(),
  experimentIds: z.array(z.number().int()).optional(),
  metadata: SearchResponseMetadata$outboundSchema.optional(),
  facetResults: z.array(FacetResult$outboundSchema).optional(),
  resultTabs: z.array(ResultTab$outboundSchema).optional(),
  resultTabIds: z.array(z.string()).optional(),
  resultsDescription: ResultsDescription$outboundSchema.optional(),
  rewrittenFacetFilters: z.array(FacetFilter$outboundSchema).optional(),
  cursor: z.string().optional(),
  hasMoreResults: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResponse$ {
  /** @deprecated use `SearchResponse$inboundSchema` instead. */
  export const inboundSchema = SearchResponse$inboundSchema;
  /** @deprecated use `SearchResponse$outboundSchema` instead. */
  export const outboundSchema = SearchResponse$outboundSchema;
  /** @deprecated use `SearchResponse$Outbound` instead. */
  export type Outbound = SearchResponse$Outbound;
}

export function searchResponseToJSON(searchResponse: SearchResponse): string {
  return JSON.stringify(SearchResponse$outboundSchema.parse(searchResponse));
}

export function searchResponseFromJSON(
  jsonString: string,
): SafeParseResult<SearchResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResponse' from JSON`,
  );
}
