/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  QuerySuggestion,
  QuerySuggestion$inboundSchema,
  QuerySuggestion$Outbound,
  QuerySuggestion$outboundSchema,
} from "./querysuggestion.js";
import {
  QuerySuggestionList,
  QuerySuggestionList$inboundSchema,
  QuerySuggestionList$Outbound,
  QuerySuggestionList$outboundSchema,
} from "./querysuggestionlist.js";
import {
  SearchWarning,
  SearchWarning$inboundSchema,
  SearchWarning$Outbound,
  SearchWarning$outboundSchema,
} from "./searchwarning.js";
import {
  TextRange,
  TextRange$inboundSchema,
  TextRange$Outbound,
  TextRange$outboundSchema,
} from "./textrange.js";

export type SearchResponseMetadata = {
  /**
   * A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
   */
  rewrittenQuery?: string | undefined;
  /**
   * The actual query used to perform search and return results.
   */
  searchedQuery?: string | undefined;
  /**
   * The bolded ranges within the searched query.
   */
  searchedQueryRanges?: Array<TextRange> | undefined;
  /**
   * The query text sent by the client in the request.
   */
  originalQuery?: string | undefined;
  querySuggestion?: QuerySuggestion | undefined;
  additionalQuerySuggestions?: QuerySuggestionList | undefined;
  /**
   * A list of terms that were negated when processing the query.
   */
  negatedTerms?: Array<string> | undefined;
  /**
   * A different query was performed than the one requested.
   */
  modifiedQueryWasUsed?: boolean | undefined;
  /**
   * No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
   */
  originalQueryHadNoResults?: boolean | undefined;
  searchWarning?: SearchWarning | undefined;
  /**
   * Whether the query triggered expert detection results in the People tab.
   */
  triggeredExpertDetection?: boolean | undefined;
  /**
   * Whether the query was modified to remove quotes
   */
  isNoQuotesSuggestion?: boolean | undefined;
};

/** @internal */
export const SearchResponseMetadata$inboundSchema: z.ZodType<
  SearchResponseMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  rewrittenQuery: z.string().optional(),
  searchedQuery: z.string().optional(),
  searchedQueryRanges: z.array(TextRange$inboundSchema).optional(),
  originalQuery: z.string().optional(),
  querySuggestion: QuerySuggestion$inboundSchema.optional(),
  additionalQuerySuggestions: QuerySuggestionList$inboundSchema.optional(),
  negatedTerms: z.array(z.string()).optional(),
  modifiedQueryWasUsed: z.boolean().optional(),
  originalQueryHadNoResults: z.boolean().optional(),
  searchWarning: SearchWarning$inboundSchema.optional(),
  triggeredExpertDetection: z.boolean().optional(),
  isNoQuotesSuggestion: z.boolean().optional(),
});

/** @internal */
export type SearchResponseMetadata$Outbound = {
  rewrittenQuery?: string | undefined;
  searchedQuery?: string | undefined;
  searchedQueryRanges?: Array<TextRange$Outbound> | undefined;
  originalQuery?: string | undefined;
  querySuggestion?: QuerySuggestion$Outbound | undefined;
  additionalQuerySuggestions?: QuerySuggestionList$Outbound | undefined;
  negatedTerms?: Array<string> | undefined;
  modifiedQueryWasUsed?: boolean | undefined;
  originalQueryHadNoResults?: boolean | undefined;
  searchWarning?: SearchWarning$Outbound | undefined;
  triggeredExpertDetection?: boolean | undefined;
  isNoQuotesSuggestion?: boolean | undefined;
};

/** @internal */
export const SearchResponseMetadata$outboundSchema: z.ZodType<
  SearchResponseMetadata$Outbound,
  z.ZodTypeDef,
  SearchResponseMetadata
> = z.object({
  rewrittenQuery: z.string().optional(),
  searchedQuery: z.string().optional(),
  searchedQueryRanges: z.array(TextRange$outboundSchema).optional(),
  originalQuery: z.string().optional(),
  querySuggestion: QuerySuggestion$outboundSchema.optional(),
  additionalQuerySuggestions: QuerySuggestionList$outboundSchema.optional(),
  negatedTerms: z.array(z.string()).optional(),
  modifiedQueryWasUsed: z.boolean().optional(),
  originalQueryHadNoResults: z.boolean().optional(),
  searchWarning: SearchWarning$outboundSchema.optional(),
  triggeredExpertDetection: z.boolean().optional(),
  isNoQuotesSuggestion: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResponseMetadata$ {
  /** @deprecated use `SearchResponseMetadata$inboundSchema` instead. */
  export const inboundSchema = SearchResponseMetadata$inboundSchema;
  /** @deprecated use `SearchResponseMetadata$outboundSchema` instead. */
  export const outboundSchema = SearchResponseMetadata$outboundSchema;
  /** @deprecated use `SearchResponseMetadata$Outbound` instead. */
  export type Outbound = SearchResponseMetadata$Outbound;
}

export function searchResponseMetadataToJSON(
  searchResponseMetadata: SearchResponseMetadata,
): string {
  return JSON.stringify(
    SearchResponseMetadata$outboundSchema.parse(searchResponseMetadata),
  );
}

export function searchResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<SearchResponseMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResponseMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResponseMetadata' from JSON`,
  );
}
