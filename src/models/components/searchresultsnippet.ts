/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TextRange,
  TextRange$inboundSchema,
  TextRange$Outbound,
  TextRange$outboundSchema,
} from "./textrange.js";

export type SearchResultSnippet = {
  /**
   * A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
   */
  snippet: string;
  /**
   * The mime type of the snippets, currently either text/plain or text/html.
   */
  mimeType?: string | undefined;
  /**
   * A matching snippet from the document with no highlights.
   */
  text?: string | undefined;
  /**
   * Used for sorting based off the snippet's location within all_snippetable_text
   */
  snippetTextOrdering?: number | undefined;
  /**
   * The bolded ranges within text.
   */
  ranges?: Array<TextRange> | undefined;
  /**
   * A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
   */
  url?: string | undefined;
};

/** @internal */
export const SearchResultSnippet$inboundSchema: z.ZodType<
  SearchResultSnippet,
  z.ZodTypeDef,
  unknown
> = z.object({
  snippet: z.string(),
  mimeType: z.string().optional(),
  text: z.string().optional(),
  snippetTextOrdering: z.number().int().optional(),
  ranges: z.array(z.lazy(() => TextRange$inboundSchema)).optional(),
  url: z.string().optional(),
});

/** @internal */
export type SearchResultSnippet$Outbound = {
  snippet: string;
  mimeType?: string | undefined;
  text?: string | undefined;
  snippetTextOrdering?: number | undefined;
  ranges?: Array<TextRange$Outbound> | undefined;
  url?: string | undefined;
};

/** @internal */
export const SearchResultSnippet$outboundSchema: z.ZodType<
  SearchResultSnippet$Outbound,
  z.ZodTypeDef,
  SearchResultSnippet
> = z.object({
  snippet: z.string(),
  mimeType: z.string().optional(),
  text: z.string().optional(),
  snippetTextOrdering: z.number().int().optional(),
  ranges: z.array(z.lazy(() => TextRange$outboundSchema)).optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchResultSnippet$ {
  /** @deprecated use `SearchResultSnippet$inboundSchema` instead. */
  export const inboundSchema = SearchResultSnippet$inboundSchema;
  /** @deprecated use `SearchResultSnippet$outboundSchema` instead. */
  export const outboundSchema = SearchResultSnippet$outboundSchema;
  /** @deprecated use `SearchResultSnippet$Outbound` instead. */
  export type Outbound = SearchResultSnippet$Outbound;
}

export function searchResultSnippetToJSON(
  searchResultSnippet: SearchResultSnippet,
): string {
  return JSON.stringify(
    SearchResultSnippet$outboundSchema.parse(searchResultSnippet),
  );
}

export function searchResultSnippetFromJSON(
  jsonString: string,
): SafeParseResult<SearchResultSnippet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchResultSnippet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchResultSnippet' from JSON`,
  );
}
