/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the warning.
 */
export const WarningType = {
  LongQuery: "LONG_QUERY",
  QuotedPunctuation: "QUOTED_PUNCTUATION",
  PunctuationOnly: "PUNCTUATION_ONLY",
  CopypastedQuotes: "COPYPASTED_QUOTES",
  InvalidOperator: "INVALID_OPERATOR",
  MaybeInvalidFacetQuery: "MAYBE_INVALID_FACET_QUERY",
} as const;
/**
 * The type of the warning.
 */
export type WarningType = ClosedEnum<typeof WarningType>;

export type SearchWarning = {
  /**
   * The type of the warning.
   */
  warningType: WarningType;
  /**
   * The last term we considered in the user's long query.
   */
  lastUsedTerm?: string | undefined;
  /**
   * The query after ignoring/removing quotes.
   */
  quotesIgnoredQuery?: string | undefined;
  /**
   * A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
   */
  ignoredTerms?: Array<string> | undefined;
};

/** @internal */
export const WarningType$inboundSchema: z.ZodNativeEnum<typeof WarningType> = z
  .nativeEnum(WarningType);

/** @internal */
export const WarningType$outboundSchema: z.ZodNativeEnum<typeof WarningType> =
  WarningType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WarningType$ {
  /** @deprecated use `WarningType$inboundSchema` instead. */
  export const inboundSchema = WarningType$inboundSchema;
  /** @deprecated use `WarningType$outboundSchema` instead. */
  export const outboundSchema = WarningType$outboundSchema;
}

/** @internal */
export const SearchWarning$inboundSchema: z.ZodType<
  SearchWarning,
  z.ZodTypeDef,
  unknown
> = z.object({
  warningType: WarningType$inboundSchema,
  lastUsedTerm: z.string().optional(),
  quotesIgnoredQuery: z.string().optional(),
  ignoredTerms: z.array(z.string()).optional(),
});

/** @internal */
export type SearchWarning$Outbound = {
  warningType: string;
  lastUsedTerm?: string | undefined;
  quotesIgnoredQuery?: string | undefined;
  ignoredTerms?: Array<string> | undefined;
};

/** @internal */
export const SearchWarning$outboundSchema: z.ZodType<
  SearchWarning$Outbound,
  z.ZodTypeDef,
  SearchWarning
> = z.object({
  warningType: WarningType$outboundSchema,
  lastUsedTerm: z.string().optional(),
  quotesIgnoredQuery: z.string().optional(),
  ignoredTerms: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SearchWarning$ {
  /** @deprecated use `SearchWarning$inboundSchema` instead. */
  export const inboundSchema = SearchWarning$inboundSchema;
  /** @deprecated use `SearchWarning$outboundSchema` instead. */
  export const outboundSchema = SearchWarning$outboundSchema;
  /** @deprecated use `SearchWarning$Outbound` instead. */
  export type Outbound = SearchWarning$Outbound;
}

export function searchWarningToJSON(searchWarning: SearchWarning): string {
  return JSON.stringify(SearchWarning$outboundSchema.parse(searchWarning));
}

export function searchWarningFromJSON(
  jsonString: string,
): SafeParseResult<SearchWarning, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SearchWarning$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SearchWarning' from JSON`,
  );
}
