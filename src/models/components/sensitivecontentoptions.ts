/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SensitiveExpression,
  SensitiveExpression$inboundSchema,
  SensitiveExpression$Outbound,
  SensitiveExpression$outboundSchema,
} from "./sensitiveexpression.js";
import {
  SensitiveInfoType,
  SensitiveInfoType$inboundSchema,
  SensitiveInfoType$Outbound,
  SensitiveInfoType$outboundSchema,
} from "./sensitiveinfotype.js";

/**
 * Options for defining sensitive content within scanned documents.
 */
export type SensitiveContentOptions = {
  /**
   * Predefined categories of terms to consider as sensitive content. See https://cloud.google.com/dlp/docs/infotypes-reference for available types.
   */
  sensitiveInfoTypes?: Array<SensitiveInfoType> | undefined;
  /**
   * list of words and phrases to consider as sensitive content
   */
  sensitiveTerms?: Array<SensitiveExpression> | undefined;
  /**
   * list of regular expressions to consider as sensitive content
   */
  sensitiveRegexes?: Array<SensitiveExpression> | undefined;
};

/** @internal */
export const SensitiveContentOptions$inboundSchema: z.ZodType<
  SensitiveContentOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  sensitiveInfoTypes: z.array(SensitiveInfoType$inboundSchema).optional(),
  sensitiveTerms: z.array(SensitiveExpression$inboundSchema).optional(),
  sensitiveRegexes: z.array(SensitiveExpression$inboundSchema).optional(),
});

/** @internal */
export type SensitiveContentOptions$Outbound = {
  sensitiveInfoTypes?: Array<SensitiveInfoType$Outbound> | undefined;
  sensitiveTerms?: Array<SensitiveExpression$Outbound> | undefined;
  sensitiveRegexes?: Array<SensitiveExpression$Outbound> | undefined;
};

/** @internal */
export const SensitiveContentOptions$outboundSchema: z.ZodType<
  SensitiveContentOptions$Outbound,
  z.ZodTypeDef,
  SensitiveContentOptions
> = z.object({
  sensitiveInfoTypes: z.array(SensitiveInfoType$outboundSchema).optional(),
  sensitiveTerms: z.array(SensitiveExpression$outboundSchema).optional(),
  sensitiveRegexes: z.array(SensitiveExpression$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SensitiveContentOptions$ {
  /** @deprecated use `SensitiveContentOptions$inboundSchema` instead. */
  export const inboundSchema = SensitiveContentOptions$inboundSchema;
  /** @deprecated use `SensitiveContentOptions$outboundSchema` instead. */
  export const outboundSchema = SensitiveContentOptions$outboundSchema;
  /** @deprecated use `SensitiveContentOptions$Outbound` instead. */
  export type Outbound = SensitiveContentOptions$Outbound;
}

export function sensitiveContentOptionsToJSON(
  sensitiveContentOptions: SensitiveContentOptions,
): string {
  return JSON.stringify(
    SensitiveContentOptions$outboundSchema.parse(sensitiveContentOptions),
  );
}

export function sensitiveContentOptionsFromJSON(
  jsonString: string,
): SafeParseResult<SensitiveContentOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SensitiveContentOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SensitiveContentOptions' from JSON`,
  );
}
