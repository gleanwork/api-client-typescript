/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Hotword,
  Hotword$inboundSchema,
  Hotword$Outbound,
  Hotword$outboundSchema,
} from "./hotword.js";

export type SensitiveExpression = {
  /**
   * Sensitive word, phrase, or regular expression.
   */
  expression?: string | undefined;
  /**
   * Zero to three proximate regular expressions necessary to consider an expression as sensitive content.
   */
  hotwords?: Array<Hotword> | undefined;
};

/** @internal */
export const SensitiveExpression$inboundSchema: z.ZodType<
  SensitiveExpression,
  z.ZodTypeDef,
  unknown
> = z.object({
  expression: z.string().optional(),
  hotwords: z.array(Hotword$inboundSchema).optional(),
});

/** @internal */
export type SensitiveExpression$Outbound = {
  expression?: string | undefined;
  hotwords?: Array<Hotword$Outbound> | undefined;
};

/** @internal */
export const SensitiveExpression$outboundSchema: z.ZodType<
  SensitiveExpression$Outbound,
  z.ZodTypeDef,
  SensitiveExpression
> = z.object({
  expression: z.string().optional(),
  hotwords: z.array(Hotword$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SensitiveExpression$ {
  /** @deprecated use `SensitiveExpression$inboundSchema` instead. */
  export const inboundSchema = SensitiveExpression$inboundSchema;
  /** @deprecated use `SensitiveExpression$outboundSchema` instead. */
  export const outboundSchema = SensitiveExpression$outboundSchema;
  /** @deprecated use `SensitiveExpression$Outbound` instead. */
  export type Outbound = SensitiveExpression$Outbound;
}

export function sensitiveExpressionToJSON(
  sensitiveExpression: SensitiveExpression,
): string {
  return JSON.stringify(
    SensitiveExpression$outboundSchema.parse(sensitiveExpression),
  );
}

export function sensitiveExpressionFromJSON(
  jsonString: string,
): SafeParseResult<SensitiveExpression, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SensitiveExpression$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SensitiveExpression' from JSON`,
  );
}
