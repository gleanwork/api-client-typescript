/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const LikelihoodThreshold = {
  Likely: "LIKELY",
  VeryLikely: "VERY_LIKELY",
} as const;
/**
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type LikelihoodThreshold = ClosedEnum<typeof LikelihoodThreshold>;

export type SensitiveInfoType = {
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  likelihoodThreshold?: LikelihoodThreshold | undefined;
  /**
   * Text representation of an info-type to scan for.
   */
  infoType?: string | undefined;
};

/** @internal */
export const LikelihoodThreshold$inboundSchema: z.ZodNativeEnum<
  typeof LikelihoodThreshold
> = z.nativeEnum(LikelihoodThreshold);

/** @internal */
export const LikelihoodThreshold$outboundSchema: z.ZodNativeEnum<
  typeof LikelihoodThreshold
> = LikelihoodThreshold$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LikelihoodThreshold$ {
  /** @deprecated use `LikelihoodThreshold$inboundSchema` instead. */
  export const inboundSchema = LikelihoodThreshold$inboundSchema;
  /** @deprecated use `LikelihoodThreshold$outboundSchema` instead. */
  export const outboundSchema = LikelihoodThreshold$outboundSchema;
}

/** @internal */
export const SensitiveInfoType$inboundSchema: z.ZodType<
  SensitiveInfoType,
  z.ZodTypeDef,
  unknown
> = z.object({
  likelihoodThreshold: LikelihoodThreshold$inboundSchema.optional(),
  infoType: z.string().optional(),
});

/** @internal */
export type SensitiveInfoType$Outbound = {
  likelihoodThreshold?: string | undefined;
  infoType?: string | undefined;
};

/** @internal */
export const SensitiveInfoType$outboundSchema: z.ZodType<
  SensitiveInfoType$Outbound,
  z.ZodTypeDef,
  SensitiveInfoType
> = z.object({
  likelihoodThreshold: LikelihoodThreshold$outboundSchema.optional(),
  infoType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SensitiveInfoType$ {
  /** @deprecated use `SensitiveInfoType$inboundSchema` instead. */
  export const inboundSchema = SensitiveInfoType$inboundSchema;
  /** @deprecated use `SensitiveInfoType$outboundSchema` instead. */
  export const outboundSchema = SensitiveInfoType$outboundSchema;
  /** @deprecated use `SensitiveInfoType$Outbound` instead. */
  export type Outbound = SensitiveInfoType$Outbound;
}

export function sensitiveInfoTypeToJSON(
  sensitiveInfoType: SensitiveInfoType,
): string {
  return JSON.stringify(
    SensitiveInfoType$outboundSchema.parse(sensitiveInfoType),
  );
}

export function sensitiveInfoTypeFromJSON(
  jsonString: string,
): SafeParseResult<SensitiveInfoType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SensitiveInfoType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SensitiveInfoType' from JSON`,
  );
}
