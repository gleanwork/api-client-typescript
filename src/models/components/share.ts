/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Document,
  Document$inboundSchema,
  Document$Outbound,
  Document$outboundSchema,
} from "./document.js";
import {
  Person,
  Person$inboundSchema,
  Person$Outbound,
  Person$outboundSchema,
} from "./person.js";

/**
 * Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip
 */
export type Share = {
  /**
   * The number of days that has passed since the share happened
   */
  numDaysAgo: number;
  sharer?: Person | undefined;
  sharingDocument?: Document | undefined;
};

/** @internal */
export const Share$inboundSchema: z.ZodType<Share, z.ZodTypeDef, unknown> = z
  .object({
    numDaysAgo: z.number().int(),
    sharer: z.lazy(() => Person$inboundSchema).optional(),
    sharingDocument: z.lazy(() => Document$inboundSchema).optional(),
  });

/** @internal */
export type Share$Outbound = {
  numDaysAgo: number;
  sharer?: Person$Outbound | undefined;
  sharingDocument?: Document$Outbound | undefined;
};

/** @internal */
export const Share$outboundSchema: z.ZodType<
  Share$Outbound,
  z.ZodTypeDef,
  Share
> = z.object({
  numDaysAgo: z.number().int(),
  sharer: z.lazy(() => Person$outboundSchema).optional(),
  sharingDocument: z.lazy(() => Document$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Share$ {
  /** @deprecated use `Share$inboundSchema` instead. */
  export const inboundSchema = Share$inboundSchema;
  /** @deprecated use `Share$outboundSchema` instead. */
  export const outboundSchema = Share$outboundSchema;
  /** @deprecated use `Share$Outbound` instead. */
  export type Outbound = Share$Outbound;
}

export function shareToJSON(share: Share): string {
  return JSON.stringify(Share$outboundSchema.parse(share));
}

export function shareFromJSON(
  jsonString: string,
): SafeParseResult<Share, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Share$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Share' from JSON`,
  );
}
