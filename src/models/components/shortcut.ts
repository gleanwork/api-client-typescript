/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Shortcut = {
  /**
   * link text following the viewPrefix as entered by the user. For example, if the view prefix is `go/` and the shortened URL is `go/abc`, then `abc` is the inputAlias.
   */
  inputAlias: string;
  /**
   * A short, plain text blurb to help people understand the intent of the shortcut.
   */
  description?: string | undefined;
  /**
   * destination URL for the shortcut.
   */
  destinationUrl: string;
  /**
   * Email of the user who created this shortcut.
   */
  createdBy: string;
  /**
   * The time the shortcut was created in epoch seconds.
   */
  createTime?: number | undefined;
  /**
   * Email of the user who last updated this shortcut.
   */
  updatedBy?: string | undefined;
  /**
   * The time the shortcut was updated in epoch seconds.
   */
  updateTime?: number | undefined;
  /**
   * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author and admins only.
   */
  unlisted?: boolean | undefined;
  /**
   * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
   */
  urlTemplate?: string | undefined;
};

/** @internal */
export const Shortcut$inboundSchema: z.ZodType<
  Shortcut,
  z.ZodTypeDef,
  unknown
> = z.object({
  inputAlias: z.string(),
  description: z.string().optional(),
  destinationUrl: z.string(),
  createdBy: z.string(),
  createTime: z.number().int().optional(),
  updatedBy: z.string().optional(),
  updateTime: z.number().int().optional(),
  unlisted: z.boolean().optional(),
  urlTemplate: z.string().optional(),
});

/** @internal */
export type Shortcut$Outbound = {
  inputAlias: string;
  description?: string | undefined;
  destinationUrl: string;
  createdBy: string;
  createTime?: number | undefined;
  updatedBy?: string | undefined;
  updateTime?: number | undefined;
  unlisted?: boolean | undefined;
  urlTemplate?: string | undefined;
};

/** @internal */
export const Shortcut$outboundSchema: z.ZodType<
  Shortcut$Outbound,
  z.ZodTypeDef,
  Shortcut
> = z.object({
  inputAlias: z.string(),
  description: z.string().optional(),
  destinationUrl: z.string(),
  createdBy: z.string(),
  createTime: z.number().int().optional(),
  updatedBy: z.string().optional(),
  updateTime: z.number().int().optional(),
  unlisted: z.boolean().optional(),
  urlTemplate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Shortcut$ {
  /** @deprecated use `Shortcut$inboundSchema` instead. */
  export const inboundSchema = Shortcut$inboundSchema;
  /** @deprecated use `Shortcut$outboundSchema` instead. */
  export const outboundSchema = Shortcut$outboundSchema;
  /** @deprecated use `Shortcut$Outbound` instead. */
  export type Outbound = Shortcut$Outbound;
}

export function shortcutToJSON(shortcut: Shortcut): string {
  return JSON.stringify(Shortcut$outboundSchema.parse(shortcut));
}

export function shortcutFromJSON(
  jsonString: string,
): SafeParseResult<Shortcut, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Shortcut$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Shortcut' from JSON`,
  );
}
