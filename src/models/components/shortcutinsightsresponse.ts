/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ShortcutInsight,
  ShortcutInsight$inboundSchema,
  ShortcutInsight$Outbound,
  ShortcutInsight$outboundSchema,
} from "./shortcutinsight.js";

export type ShortcutInsightsResponse = {
  /**
   * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
   */
  lastLogTimestamp?: number | undefined;
  /**
   * Insights for shortcuts.
   */
  shortcutInsights?: Array<ShortcutInsight> | undefined;
  /**
   * list of departments applicable for shortcuts tab.
   */
  departments?: Array<string> | undefined;
  /**
   * Min threshold in number of visitors while populating results, otherwise 0.
   */
  minVisitorThreshold?: number | undefined;
};

/** @internal */
export const ShortcutInsightsResponse$inboundSchema: z.ZodType<
  ShortcutInsightsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lastLogTimestamp: z.number().int().optional(),
  shortcutInsights: z.array(ShortcutInsight$inboundSchema).optional(),
  departments: z.array(z.string()).optional(),
  minVisitorThreshold: z.number().int().optional(),
});

/** @internal */
export type ShortcutInsightsResponse$Outbound = {
  lastLogTimestamp?: number | undefined;
  shortcutInsights?: Array<ShortcutInsight$Outbound> | undefined;
  departments?: Array<string> | undefined;
  minVisitorThreshold?: number | undefined;
};

/** @internal */
export const ShortcutInsightsResponse$outboundSchema: z.ZodType<
  ShortcutInsightsResponse$Outbound,
  z.ZodTypeDef,
  ShortcutInsightsResponse
> = z.object({
  lastLogTimestamp: z.number().int().optional(),
  shortcutInsights: z.array(ShortcutInsight$outboundSchema).optional(),
  departments: z.array(z.string()).optional(),
  minVisitorThreshold: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShortcutInsightsResponse$ {
  /** @deprecated use `ShortcutInsightsResponse$inboundSchema` instead. */
  export const inboundSchema = ShortcutInsightsResponse$inboundSchema;
  /** @deprecated use `ShortcutInsightsResponse$outboundSchema` instead. */
  export const outboundSchema = ShortcutInsightsResponse$outboundSchema;
  /** @deprecated use `ShortcutInsightsResponse$Outbound` instead. */
  export type Outbound = ShortcutInsightsResponse$Outbound;
}

export function shortcutInsightsResponseToJSON(
  shortcutInsightsResponse: ShortcutInsightsResponse,
): string {
  return JSON.stringify(
    ShortcutInsightsResponse$outboundSchema.parse(shortcutInsightsResponse),
  );
}

export function shortcutInsightsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ShortcutInsightsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShortcutInsightsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShortcutInsightsResponse' from JSON`,
  );
}
