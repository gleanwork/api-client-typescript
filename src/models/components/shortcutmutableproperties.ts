/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserRoleSpecification,
  UserRoleSpecification$inboundSchema,
  UserRoleSpecification$Outbound,
  UserRoleSpecification$outboundSchema,
} from "./userrolespecification.js";

export type ShortcutMutableProperties = {
  /**
   * Link text following go/ prefix as entered by the user.
   */
  inputAlias?: string | undefined;
  /**
   * Destination URL for the shortcut.
   */
  destinationUrl?: string | undefined;
  /**
   * Glean Document ID for the URL, if known.
   */
  destinationDocumentId?: string | undefined;
  /**
   * A short, plain text blurb to help people understand the intent of the shortcut.
   */
  description?: string | undefined;
  /**
   * Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
   */
  unlisted?: boolean | undefined;
  /**
   * For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
   */
  urlTemplate?: string | undefined;
  /**
   * A list of user roles added for the Shortcut.
   */
  addedRoles?: Array<UserRoleSpecification> | undefined;
  /**
   * A list of user roles removed for the Shortcut.
   */
  removedRoles?: Array<UserRoleSpecification> | undefined;
};

/** @internal */
export const ShortcutMutableProperties$inboundSchema: z.ZodType<
  ShortcutMutableProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  inputAlias: z.string().optional(),
  destinationUrl: z.string().optional(),
  destinationDocumentId: z.string().optional(),
  description: z.string().optional(),
  unlisted: z.boolean().optional(),
  urlTemplate: z.string().optional(),
  addedRoles: z.array(UserRoleSpecification$inboundSchema).optional(),
  removedRoles: z.array(UserRoleSpecification$inboundSchema).optional(),
});

/** @internal */
export type ShortcutMutableProperties$Outbound = {
  inputAlias?: string | undefined;
  destinationUrl?: string | undefined;
  destinationDocumentId?: string | undefined;
  description?: string | undefined;
  unlisted?: boolean | undefined;
  urlTemplate?: string | undefined;
  addedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
  removedRoles?: Array<UserRoleSpecification$Outbound> | undefined;
};

/** @internal */
export const ShortcutMutableProperties$outboundSchema: z.ZodType<
  ShortcutMutableProperties$Outbound,
  z.ZodTypeDef,
  ShortcutMutableProperties
> = z.object({
  inputAlias: z.string().optional(),
  destinationUrl: z.string().optional(),
  destinationDocumentId: z.string().optional(),
  description: z.string().optional(),
  unlisted: z.boolean().optional(),
  urlTemplate: z.string().optional(),
  addedRoles: z.array(UserRoleSpecification$outboundSchema).optional(),
  removedRoles: z.array(UserRoleSpecification$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShortcutMutableProperties$ {
  /** @deprecated use `ShortcutMutableProperties$inboundSchema` instead. */
  export const inboundSchema = ShortcutMutableProperties$inboundSchema;
  /** @deprecated use `ShortcutMutableProperties$outboundSchema` instead. */
  export const outboundSchema = ShortcutMutableProperties$outboundSchema;
  /** @deprecated use `ShortcutMutableProperties$Outbound` instead. */
  export type Outbound = ShortcutMutableProperties$Outbound;
}

export function shortcutMutablePropertiesToJSON(
  shortcutMutableProperties: ShortcutMutableProperties,
): string {
  return JSON.stringify(
    ShortcutMutableProperties$outboundSchema.parse(shortcutMutableProperties),
  );
}

export function shortcutMutablePropertiesFromJSON(
  jsonString: string,
): SafeParseResult<ShortcutMutableProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShortcutMutableProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShortcutMutableProperties' from JSON`,
  );
}
