/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Configuration settings related to Shortcuts
 */
export type ShortcutsConfig = {
  /**
   * Deployment's prefix for shortcuts.
   */
  shortcutsPrefix?: string | undefined;
  /**
   * Whether the deployment uses external shortcuts.
   */
  useExternalShortcuts?: boolean | undefined;
};

/** @internal */
export const ShortcutsConfig$inboundSchema: z.ZodType<
  ShortcutsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  shortcutsPrefix: z.string().optional(),
  useExternalShortcuts: z.boolean().optional(),
});

/** @internal */
export type ShortcutsConfig$Outbound = {
  shortcutsPrefix?: string | undefined;
  useExternalShortcuts?: boolean | undefined;
};

/** @internal */
export const ShortcutsConfig$outboundSchema: z.ZodType<
  ShortcutsConfig$Outbound,
  z.ZodTypeDef,
  ShortcutsConfig
> = z.object({
  shortcutsPrefix: z.string().optional(),
  useExternalShortcuts: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShortcutsConfig$ {
  /** @deprecated use `ShortcutsConfig$inboundSchema` instead. */
  export const inboundSchema = ShortcutsConfig$inboundSchema;
  /** @deprecated use `ShortcutsConfig$outboundSchema` instead. */
  export const outboundSchema = ShortcutsConfig$outboundSchema;
  /** @deprecated use `ShortcutsConfig$Outbound` instead. */
  export type Outbound = ShortcutsConfig$Outbound;
}

export function shortcutsConfigToJSON(
  shortcutsConfig: ShortcutsConfig,
): string {
  return JSON.stringify(ShortcutsConfig$outboundSchema.parse(shortcutsConfig));
}

export function shortcutsConfigFromJSON(
  jsonString: string,
): SafeParseResult<ShortcutsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShortcutsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShortcutsConfig' from JSON`,
  );
}
