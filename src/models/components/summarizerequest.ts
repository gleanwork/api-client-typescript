/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DocumentSpecUnion,
  DocumentSpecUnion$inboundSchema,
  DocumentSpecUnion$Outbound,
  DocumentSpecUnion$outboundSchema,
} from "./documentspecunion.js";

/**
 * Summary of the document
 */
export type SummarizeRequest = {
  /**
   * The ISO 8601 timestamp associated with the client request.
   */
  timestamp?: Date | undefined;
  /**
   * Optional query that the summary should be about
   */
  query?: string | undefined;
  /**
   * Optional length of summary output. If not given, defaults to 500 chars.
   */
  preferredSummaryLength?: number | undefined;
  /**
   * Specifications of documents to summarize
   */
  documentSpecs: Array<DocumentSpecUnion>;
  /**
   * An opaque token that represents this particular result. To be used for /feedback reporting.
   */
  trackingToken?: string | undefined;
};

/** @internal */
export const SummarizeRequest$inboundSchema: z.ZodType<
  SummarizeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  query: z.string().optional(),
  preferredSummaryLength: z.number().int().optional(),
  documentSpecs: z.array(DocumentSpecUnion$inboundSchema),
  trackingToken: z.string().optional(),
});

/** @internal */
export type SummarizeRequest$Outbound = {
  timestamp?: string | undefined;
  query?: string | undefined;
  preferredSummaryLength?: number | undefined;
  documentSpecs: Array<DocumentSpecUnion$Outbound>;
  trackingToken?: string | undefined;
};

/** @internal */
export const SummarizeRequest$outboundSchema: z.ZodType<
  SummarizeRequest$Outbound,
  z.ZodTypeDef,
  SummarizeRequest
> = z.object({
  timestamp: z.date().transform(v => v.toISOString()).optional(),
  query: z.string().optional(),
  preferredSummaryLength: z.number().int().optional(),
  documentSpecs: z.array(DocumentSpecUnion$outboundSchema),
  trackingToken: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SummarizeRequest$ {
  /** @deprecated use `SummarizeRequest$inboundSchema` instead. */
  export const inboundSchema = SummarizeRequest$inboundSchema;
  /** @deprecated use `SummarizeRequest$outboundSchema` instead. */
  export const outboundSchema = SummarizeRequest$outboundSchema;
  /** @deprecated use `SummarizeRequest$Outbound` instead. */
  export type Outbound = SummarizeRequest$Outbound;
}

export function summarizeRequestToJSON(
  summarizeRequest: SummarizeRequest,
): string {
  return JSON.stringify(
    SummarizeRequest$outboundSchema.parse(summarizeRequest),
  );
}

export function summarizeRequestFromJSON(
  jsonString: string,
): SafeParseResult<SummarizeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SummarizeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SummarizeRequest' from JSON`,
  );
}
