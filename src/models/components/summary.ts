/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Summary = {
  text?: string | undefined;
  /**
   * Follow-up prompts based on the summarized doc
   */
  followUpPrompts?: Array<string> | undefined;
};

/** @internal */
export const Summary$inboundSchema: z.ZodType<Summary, z.ZodTypeDef, unknown> =
  z.object({
    text: z.string().optional(),
    followUpPrompts: z.array(z.string()).optional(),
  });

/** @internal */
export type Summary$Outbound = {
  text?: string | undefined;
  followUpPrompts?: Array<string> | undefined;
};

/** @internal */
export const Summary$outboundSchema: z.ZodType<
  Summary$Outbound,
  z.ZodTypeDef,
  Summary
> = z.object({
  text: z.string().optional(),
  followUpPrompts: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Summary$ {
  /** @deprecated use `Summary$inboundSchema` instead. */
  export const inboundSchema = Summary$inboundSchema;
  /** @deprecated use `Summary$outboundSchema` instead. */
  export const outboundSchema = Summary$outboundSchema;
  /** @deprecated use `Summary$Outbound` instead. */
  export type Outbound = Summary$Outbound;
}

export function summaryToJSON(summary: Summary): string {
  return JSON.stringify(Summary$outboundSchema.parse(summary));
}

export function summaryFromJSON(
  jsonString: string,
): SafeParseResult<Summary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Summary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Summary' from JSON`,
  );
}
