/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AdditionalFieldDefinition,
  AdditionalFieldDefinition$inboundSchema,
  AdditionalFieldDefinition$Outbound,
  AdditionalFieldDefinition$outboundSchema,
} from "./additionalfielddefinition.js";
import {
  DatasourceProfile,
  DatasourceProfile$inboundSchema,
  DatasourceProfile$Outbound,
  DatasourceProfile$outboundSchema,
} from "./datasourceprofile.js";
import {
  TeamEmail,
  TeamEmail$inboundSchema,
  TeamEmail$Outbound,
  TeamEmail$outboundSchema,
} from "./teamemail.js";
import {
  TeamMember,
  TeamMember$inboundSchema,
  TeamMember$Outbound,
  TeamMember$outboundSchema,
} from "./teammember.js";

/**
 * Information about an employee's team
 */
export type TeamInfoDefinition = {
  /**
   * The unique ID of the team
   */
  id: string;
  /**
   * Human-readable team name
   */
  name: string;
  /**
   * The description of this team
   */
  description?: string | undefined;
  /**
   * Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
   */
  businessUnit?: string | undefined;
  /**
   * An organizational unit where everyone has a similar task, e.g. `Engineering`.
   */
  department?: string | undefined;
  /**
   * A link to the team's photo
   */
  photoUrl?: string | undefined;
  /**
   * A link to an external team page. If set, team results will link to it.
   *
   * @remarks
   */
  externalLink?: string | undefined;
  /**
   * The emails of the team
   */
  emails?: Array<TeamEmail> | undefined;
  /**
   * The datasource profiles of the team, e.g. `Slack`,`Github`.
   */
  datasourceProfiles?: Array<DatasourceProfile> | undefined;
  /**
   * The members of the team
   */
  members: Array<TeamMember>;
  /**
   * List of additional fields with more information about the team.
   */
  additionalFields?: Array<AdditionalFieldDefinition> | undefined;
};

/** @internal */
export const TeamInfoDefinition$inboundSchema: z.ZodType<
  TeamInfoDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional(),
  businessUnit: z.string().optional(),
  department: z.string().optional(),
  photoUrl: z.string().optional(),
  externalLink: z.string().optional(),
  emails: z.array(TeamEmail$inboundSchema).optional(),
  datasourceProfiles: z.array(DatasourceProfile$inboundSchema).optional(),
  members: z.array(TeamMember$inboundSchema),
  additionalFields: z.array(AdditionalFieldDefinition$inboundSchema).optional(),
});

/** @internal */
export type TeamInfoDefinition$Outbound = {
  id: string;
  name: string;
  description?: string | undefined;
  businessUnit?: string | undefined;
  department?: string | undefined;
  photoUrl?: string | undefined;
  externalLink?: string | undefined;
  emails?: Array<TeamEmail$Outbound> | undefined;
  datasourceProfiles?: Array<DatasourceProfile$Outbound> | undefined;
  members: Array<TeamMember$Outbound>;
  additionalFields?: Array<AdditionalFieldDefinition$Outbound> | undefined;
};

/** @internal */
export const TeamInfoDefinition$outboundSchema: z.ZodType<
  TeamInfoDefinition$Outbound,
  z.ZodTypeDef,
  TeamInfoDefinition
> = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string().optional(),
  businessUnit: z.string().optional(),
  department: z.string().optional(),
  photoUrl: z.string().optional(),
  externalLink: z.string().optional(),
  emails: z.array(TeamEmail$outboundSchema).optional(),
  datasourceProfiles: z.array(DatasourceProfile$outboundSchema).optional(),
  members: z.array(TeamMember$outboundSchema),
  additionalFields: z.array(AdditionalFieldDefinition$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamInfoDefinition$ {
  /** @deprecated use `TeamInfoDefinition$inboundSchema` instead. */
  export const inboundSchema = TeamInfoDefinition$inboundSchema;
  /** @deprecated use `TeamInfoDefinition$outboundSchema` instead. */
  export const outboundSchema = TeamInfoDefinition$outboundSchema;
  /** @deprecated use `TeamInfoDefinition$Outbound` instead. */
  export type Outbound = TeamInfoDefinition$Outbound;
}

export function teamInfoDefinitionToJSON(
  teamInfoDefinition: TeamInfoDefinition,
): string {
  return JSON.stringify(
    TeamInfoDefinition$outboundSchema.parse(teamInfoDefinition),
  );
}

export function teamInfoDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<TeamInfoDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamInfoDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamInfoDefinition' from JSON`,
  );
}
