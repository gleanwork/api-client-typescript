/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Team,
  Team$inboundSchema,
  Team$Outbound,
  Team$outboundSchema,
} from "./team.js";

export type TeamsResponse = {
  /**
   * A Team and a deep copy of all its members for each ID in the request
   */
  results?: Array<Team> | undefined;
  /**
   * A list of IDs that could not be found.
   */
  errors?: Array<string> | undefined;
};

/** @internal */
export const TeamsResponse$inboundSchema: z.ZodType<
  TeamsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(Team$inboundSchema).optional(),
  errors: z.array(z.string()).optional(),
});

/** @internal */
export type TeamsResponse$Outbound = {
  results?: Array<Team$Outbound> | undefined;
  errors?: Array<string> | undefined;
};

/** @internal */
export const TeamsResponse$outboundSchema: z.ZodType<
  TeamsResponse$Outbound,
  z.ZodTypeDef,
  TeamsResponse
> = z.object({
  results: z.array(Team$outboundSchema).optional(),
  errors: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeamsResponse$ {
  /** @deprecated use `TeamsResponse$inboundSchema` instead. */
  export const inboundSchema = TeamsResponse$inboundSchema;
  /** @deprecated use `TeamsResponse$outboundSchema` instead. */
  export const outboundSchema = TeamsResponse$outboundSchema;
  /** @deprecated use `TeamsResponse$Outbound` instead. */
  export type Outbound = TeamsResponse$Outbound;
}

export function teamsResponseToJSON(teamsResponse: TeamsResponse): string {
  return JSON.stringify(TeamsResponse$outboundSchema.parse(teamsResponse));
}

export function teamsResponseFromJSON(
  jsonString: string,
): SafeParseResult<TeamsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeamsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeamsResponse' from JSON`,
  );
}
