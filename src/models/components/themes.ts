/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
 */
export type Themes = {
  /**
   * A map of {string, string} pairs where the key represents a known theme option and the value is the CSS color to apply. Supported options are documented in https://dev.glean.com/meta/browser_api/interfaces/Theme.html.
   */
  light?: { [k: string]: string } | undefined;
  /**
   * A map of {string, string} pairs where the key represents a known theme option and the value is the CSS color to apply. Supported options are documented in https://dev.glean.com/meta/browser_api/interfaces/Theme.html.
   */
  dark?: { [k: string]: string } | undefined;
};

/** @internal */
export const Themes$inboundSchema: z.ZodType<Themes, z.ZodTypeDef, unknown> = z
  .object({
    light: z.record(z.string()).optional(),
    dark: z.record(z.string()).optional(),
  });

/** @internal */
export type Themes$Outbound = {
  light?: { [k: string]: string } | undefined;
  dark?: { [k: string]: string } | undefined;
};

/** @internal */
export const Themes$outboundSchema: z.ZodType<
  Themes$Outbound,
  z.ZodTypeDef,
  Themes
> = z.object({
  light: z.record(z.string()).optional(),
  dark: z.record(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Themes$ {
  /** @deprecated use `Themes$inboundSchema` instead. */
  export const inboundSchema = Themes$inboundSchema;
  /** @deprecated use `Themes$outboundSchema` instead. */
  export const outboundSchema = Themes$outboundSchema;
  /** @deprecated use `Themes$Outbound` instead. */
  export type Outbound = Themes$Outbound;
}

export function themesToJSON(themes: Themes): string {
  return JSON.stringify(Themes$outboundSchema.parse(themes));
}

export function themesFromJSON(
  jsonString: string,
): SafeParseResult<Themes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Themes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Themes' from JSON`,
  );
}
