/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TimeInterval = {
  /**
   * The RFC3339 timestamp formatted start time of this event.
   */
  start: string;
  /**
   * The RFC3339 timestamp formatted end time of this event.
   */
  end: string;
};

/** @internal */
export const TimeInterval$inboundSchema: z.ZodType<
  TimeInterval,
  z.ZodTypeDef,
  unknown
> = z.object({
  start: z.string(),
  end: z.string(),
});

/** @internal */
export type TimeInterval$Outbound = {
  start: string;
  end: string;
};

/** @internal */
export const TimeInterval$outboundSchema: z.ZodType<
  TimeInterval$Outbound,
  z.ZodTypeDef,
  TimeInterval
> = z.object({
  start: z.string(),
  end: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeInterval$ {
  /** @deprecated use `TimeInterval$inboundSchema` instead. */
  export const inboundSchema = TimeInterval$inboundSchema;
  /** @deprecated use `TimeInterval$outboundSchema` instead. */
  export const outboundSchema = TimeInterval$outboundSchema;
  /** @deprecated use `TimeInterval$Outbound` instead. */
  export type Outbound = TimeInterval$Outbound;
}

export function timeIntervalToJSON(timeInterval: TimeInterval): string {
  return JSON.stringify(TimeInterval$outboundSchema.parse(timeInterval));
}

export function timeIntervalFromJSON(
  jsonString: string,
): SafeParseResult<TimeInterval, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeInterval$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeInterval' from JSON`,
  );
}
