/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TimePoint = {
  /**
   * Epoch seconds. Has precedence over daysFromNow.
   */
  epochSeconds?: number | undefined;
  /**
   * The number of days from now. Specification relative to current time. Can be negative.
   */
  daysFromNow?: number | undefined;
};

/** @internal */
export const TimePoint$inboundSchema: z.ZodType<
  TimePoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  epochSeconds: z.number().int().optional(),
  daysFromNow: z.number().int().optional(),
});

/** @internal */
export type TimePoint$Outbound = {
  epochSeconds?: number | undefined;
  daysFromNow?: number | undefined;
};

/** @internal */
export const TimePoint$outboundSchema: z.ZodType<
  TimePoint$Outbound,
  z.ZodTypeDef,
  TimePoint
> = z.object({
  epochSeconds: z.number().int().optional(),
  daysFromNow: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimePoint$ {
  /** @deprecated use `TimePoint$inboundSchema` instead. */
  export const inboundSchema = TimePoint$inboundSchema;
  /** @deprecated use `TimePoint$outboundSchema` instead. */
  export const outboundSchema = TimePoint$outboundSchema;
  /** @deprecated use `TimePoint$Outbound` instead. */
  export type Outbound = TimePoint$Outbound;
}

export function timePointToJSON(timePoint: TimePoint): string {
  return JSON.stringify(TimePoint$outboundSchema.parse(timePoint));
}

export function timePointFromJSON(
  jsonString: string,
): SafeParseResult<TimePoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimePoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimePoint' from JSON`,
  );
}
