/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TimeRange = {
  /**
   * start time of the time range, applicable for the CUSTOM type.
   */
  startTime?: Date | undefined;
  /**
   * end time of the time range, applicable for the CUSTOM type.
   */
  endTime?: Date | undefined;
};

/** @internal */
export const TimeRange$inboundSchema: z.ZodType<
  TimeRange,
  z.ZodTypeDef,
  unknown
> = z.object({
  startTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  endTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type TimeRange$Outbound = {
  startTime?: string | undefined;
  endTime?: string | undefined;
};

/** @internal */
export const TimeRange$outboundSchema: z.ZodType<
  TimeRange$Outbound,
  z.ZodTypeDef,
  TimeRange
> = z.object({
  startTime: z.date().transform(v => v.toISOString()).optional(),
  endTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeRange$ {
  /** @deprecated use `TimeRange$inboundSchema` instead. */
  export const inboundSchema = TimeRange$inboundSchema;
  /** @deprecated use `TimeRange$outboundSchema` instead. */
  export const outboundSchema = TimeRange$outboundSchema;
  /** @deprecated use `TimeRange$Outbound` instead. */
  export type Outbound = TimeRange$Outbound;
}

export function timeRangeToJSON(timeRange: TimeRange): string {
  return JSON.stringify(TimeRange$outboundSchema.parse(timeRange));
}

export function timeRangeFromJSON(
  jsonString: string,
): SafeParseResult<TimeRange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeRange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeRange' from JSON`,
  );
}
