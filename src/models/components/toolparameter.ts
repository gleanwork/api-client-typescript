/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Parameter type (string, number, boolean, object, array)
 */
export const ToolParameterType = {
  String: "string",
  Number: "number",
  Boolean: "boolean",
  Object: "object",
  Array: "array",
} as const;
/**
 * Parameter type (string, number, boolean, object, array)
 */
export type ToolParameterType = ClosedEnum<typeof ToolParameterType>;

export type ToolParameter = {
  /**
   * Parameter type (string, number, boolean, object, array)
   */
  type?: ToolParameterType | undefined;
  /**
   * The name of the parameter
   */
  name?: string | undefined;
  /**
   * The description of the parameter
   */
  description?: string | undefined;
  /**
   * Whether the parameter is required
   */
  isRequired?: boolean | undefined;
  /**
   * The possible values for the parameter. Can contain only primitive values or arrays of primitive values.
   */
  possibleValues?: Array<string> | undefined;
  items?: ToolParameter | undefined;
  /**
   * When type is 'object', this describes the structure of the object.
   */
  properties?: { [k: string]: ToolParameter } | undefined;
};

/** @internal */
export const ToolParameterType$inboundSchema: z.ZodNativeEnum<
  typeof ToolParameterType
> = z.nativeEnum(ToolParameterType);

/** @internal */
export const ToolParameterType$outboundSchema: z.ZodNativeEnum<
  typeof ToolParameterType
> = ToolParameterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolParameterType$ {
  /** @deprecated use `ToolParameterType$inboundSchema` instead. */
  export const inboundSchema = ToolParameterType$inboundSchema;
  /** @deprecated use `ToolParameterType$outboundSchema` instead. */
  export const outboundSchema = ToolParameterType$outboundSchema;
}

/** @internal */
export const ToolParameter$inboundSchema: z.ZodType<
  ToolParameter,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ToolParameterType$inboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  isRequired: z.boolean().optional(),
  possibleValues: z.array(z.string()).optional(),
  items: z.lazy(() => ToolParameter$inboundSchema).optional(),
  properties: z.record(z.lazy(() => ToolParameter$inboundSchema)).optional(),
});

/** @internal */
export type ToolParameter$Outbound = {
  type?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  isRequired?: boolean | undefined;
  possibleValues?: Array<string> | undefined;
  items?: ToolParameter$Outbound | undefined;
  properties?: { [k: string]: ToolParameter$Outbound } | undefined;
};

/** @internal */
export const ToolParameter$outboundSchema: z.ZodType<
  ToolParameter$Outbound,
  z.ZodTypeDef,
  ToolParameter
> = z.object({
  type: ToolParameterType$outboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  isRequired: z.boolean().optional(),
  possibleValues: z.array(z.string()).optional(),
  items: z.lazy(() => ToolParameter$outboundSchema).optional(),
  properties: z.record(z.lazy(() => ToolParameter$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolParameter$ {
  /** @deprecated use `ToolParameter$inboundSchema` instead. */
  export const inboundSchema = ToolParameter$inboundSchema;
  /** @deprecated use `ToolParameter$outboundSchema` instead. */
  export const outboundSchema = ToolParameter$outboundSchema;
  /** @deprecated use `ToolParameter$Outbound` instead. */
  export type Outbound = ToolParameter$Outbound;
}

export function toolParameterToJSON(toolParameter: ToolParameter): string {
  return JSON.stringify(ToolParameter$outboundSchema.parse(toolParameter));
}

export function toolParameterFromJSON(
  jsonString: string,
): SafeParseResult<ToolParameter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolParameter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolParameter' from JSON`,
  );
}
