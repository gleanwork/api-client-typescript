/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsCallParameter = {
  /**
   * The name of the parameter
   */
  name: string;
  /**
   * The value of the parameter (for primitive types)
   */
  value: string;
  /**
   * The value of the parameter (for array types)
   */
  items?: Array<ToolsCallParameter> | undefined;
  /**
   * The value of the parameter (for object types)
   */
  properties?: { [k: string]: ToolsCallParameter } | undefined;
};

/** @internal */
export const ToolsCallParameter$inboundSchema: z.ZodType<
  ToolsCallParameter,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
  items: z.array(z.lazy(() => ToolsCallParameter$inboundSchema)).optional(),
  properties: z.record(z.lazy(() => ToolsCallParameter$inboundSchema))
    .optional(),
});

/** @internal */
export type ToolsCallParameter$Outbound = {
  name: string;
  value: string;
  items?: Array<ToolsCallParameter$Outbound> | undefined;
  properties?: { [k: string]: ToolsCallParameter$Outbound } | undefined;
};

/** @internal */
export const ToolsCallParameter$outboundSchema: z.ZodType<
  ToolsCallParameter$Outbound,
  z.ZodTypeDef,
  ToolsCallParameter
> = z.object({
  name: z.string(),
  value: z.string(),
  items: z.array(z.lazy(() => ToolsCallParameter$outboundSchema)).optional(),
  properties: z.record(z.lazy(() => ToolsCallParameter$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsCallParameter$ {
  /** @deprecated use `ToolsCallParameter$inboundSchema` instead. */
  export const inboundSchema = ToolsCallParameter$inboundSchema;
  /** @deprecated use `ToolsCallParameter$outboundSchema` instead. */
  export const outboundSchema = ToolsCallParameter$outboundSchema;
  /** @deprecated use `ToolsCallParameter$Outbound` instead. */
  export type Outbound = ToolsCallParameter$Outbound;
}

export function toolsCallParameterToJSON(
  toolsCallParameter: ToolsCallParameter,
): string {
  return JSON.stringify(
    ToolsCallParameter$outboundSchema.parse(toolsCallParameter),
  );
}

export function toolsCallParameterFromJSON(
  jsonString: string,
): SafeParseResult<ToolsCallParameter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsCallParameter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsCallParameter' from JSON`,
  );
}
