/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolsCallResponse = {
  /**
   * The raw response from the tool
   */
  rawResponse?: { [k: string]: any } | undefined;
  /**
   * The error message if applicable
   */
  error?: string | undefined;
};

/** @internal */
export const ToolsCallResponse$inboundSchema: z.ZodType<
  ToolsCallResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  rawResponse: z.record(z.any()).optional(),
  error: z.string().optional(),
});

/** @internal */
export type ToolsCallResponse$Outbound = {
  rawResponse?: { [k: string]: any } | undefined;
  error?: string | undefined;
};

/** @internal */
export const ToolsCallResponse$outboundSchema: z.ZodType<
  ToolsCallResponse$Outbound,
  z.ZodTypeDef,
  ToolsCallResponse
> = z.object({
  rawResponse: z.record(z.any()).optional(),
  error: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsCallResponse$ {
  /** @deprecated use `ToolsCallResponse$inboundSchema` instead. */
  export const inboundSchema = ToolsCallResponse$inboundSchema;
  /** @deprecated use `ToolsCallResponse$outboundSchema` instead. */
  export const outboundSchema = ToolsCallResponse$outboundSchema;
  /** @deprecated use `ToolsCallResponse$Outbound` instead. */
  export type Outbound = ToolsCallResponse$Outbound;
}

export function toolsCallResponseToJSON(
  toolsCallResponse: ToolsCallResponse,
): string {
  return JSON.stringify(
    ToolsCallResponse$outboundSchema.parse(toolsCallResponse),
  );
}

export function toolsCallResponseFromJSON(
  jsonString: string,
): SafeParseResult<ToolsCallResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsCallResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsCallResponse' from JSON`,
  );
}
