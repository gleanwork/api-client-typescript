/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ToolMetadata,
  ToolMetadata$inboundSchema,
  ToolMetadata$Outbound,
  ToolMetadata$outboundSchema,
} from "./toolmetadata.js";

/**
 * Configuration settings related to Tools.
 *
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type ToolsConfig = {
  /**
   * List of tools available to the user.
   */
  availableTools?: Array<ToolMetadata> | undefined;
};

/** @internal */
export const ToolsConfig$inboundSchema: z.ZodType<
  ToolsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  availableTools: z.array(ToolMetadata$inboundSchema).optional(),
});

/** @internal */
export type ToolsConfig$Outbound = {
  availableTools?: Array<ToolMetadata$Outbound> | undefined;
};

/** @internal */
export const ToolsConfig$outboundSchema: z.ZodType<
  ToolsConfig$Outbound,
  z.ZodTypeDef,
  ToolsConfig
> = z.object({
  availableTools: z.array(ToolMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolsConfig$ {
  /** @deprecated use `ToolsConfig$inboundSchema` instead. */
  export const inboundSchema = ToolsConfig$inboundSchema;
  /** @deprecated use `ToolsConfig$outboundSchema` instead. */
  export const outboundSchema = ToolsConfig$outboundSchema;
  /** @deprecated use `ToolsConfig$Outbound` instead. */
  export type Outbound = ToolsConfig$Outbound;
}

export function toolsConfigToJSON(toolsConfig: ToolsConfig): string {
  return JSON.stringify(ToolsConfig$outboundSchema.parse(toolsConfig));
}

export function toolsConfigFromJSON(
  jsonString: string,
): SafeParseResult<ToolsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolsConfig' from JSON`,
  );
}
