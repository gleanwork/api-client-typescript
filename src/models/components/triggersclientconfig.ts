/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Configuration of content change trigger.
 */
export type ContentChange = {
  /**
   * List of datasources enabled for content change triggers.
   */
  enabledDatasources?: Array<string> | undefined;
};

/**
 * Configuration settings for triggers.
 */
export type TriggersClientConfig = {
  /**
   * Configuration of content change trigger.
   */
  contentChange?: ContentChange | undefined;
};

/** @internal */
export const ContentChange$inboundSchema: z.ZodType<
  ContentChange,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabledDatasources: z.array(z.string()).optional(),
});

/** @internal */
export type ContentChange$Outbound = {
  enabledDatasources?: Array<string> | undefined;
};

/** @internal */
export const ContentChange$outboundSchema: z.ZodType<
  ContentChange$Outbound,
  z.ZodTypeDef,
  ContentChange
> = z.object({
  enabledDatasources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContentChange$ {
  /** @deprecated use `ContentChange$inboundSchema` instead. */
  export const inboundSchema = ContentChange$inboundSchema;
  /** @deprecated use `ContentChange$outboundSchema` instead. */
  export const outboundSchema = ContentChange$outboundSchema;
  /** @deprecated use `ContentChange$Outbound` instead. */
  export type Outbound = ContentChange$Outbound;
}

export function contentChangeToJSON(contentChange: ContentChange): string {
  return JSON.stringify(ContentChange$outboundSchema.parse(contentChange));
}

export function contentChangeFromJSON(
  jsonString: string,
): SafeParseResult<ContentChange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContentChange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContentChange' from JSON`,
  );
}

/** @internal */
export const TriggersClientConfig$inboundSchema: z.ZodType<
  TriggersClientConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  contentChange: z.lazy(() => ContentChange$inboundSchema).optional(),
});

/** @internal */
export type TriggersClientConfig$Outbound = {
  contentChange?: ContentChange$Outbound | undefined;
};

/** @internal */
export const TriggersClientConfig$outboundSchema: z.ZodType<
  TriggersClientConfig$Outbound,
  z.ZodTypeDef,
  TriggersClientConfig
> = z.object({
  contentChange: z.lazy(() => ContentChange$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggersClientConfig$ {
  /** @deprecated use `TriggersClientConfig$inboundSchema` instead. */
  export const inboundSchema = TriggersClientConfig$inboundSchema;
  /** @deprecated use `TriggersClientConfig$outboundSchema` instead. */
  export const outboundSchema = TriggersClientConfig$outboundSchema;
  /** @deprecated use `TriggersClientConfig$Outbound` instead. */
  export type Outbound = TriggersClientConfig$Outbound;
}

export function triggersClientConfigToJSON(
  triggersClientConfig: TriggersClientConfig,
): string {
  return JSON.stringify(
    TriggersClientConfig$outboundSchema.parse(triggersClientConfig),
  );
}

export function triggersClientConfigFromJSON(
  jsonString: string,
): SafeParseResult<TriggersClientConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TriggersClientConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TriggersClientConfig' from JSON`,
  );
}
