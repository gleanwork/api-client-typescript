/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AnnouncementMutableProperties,
  AnnouncementMutableProperties$inboundSchema,
  AnnouncementMutableProperties$Outbound,
  AnnouncementMutableProperties$outboundSchema,
} from "./announcementmutableproperties.js";
import {
  AnswerMutableProperties,
  AnswerMutableProperties$inboundSchema,
  AnswerMutableProperties$Outbound,
  AnswerMutableProperties$outboundSchema,
} from "./answermutableproperties.js";

export type UgcDraft = {
  announcement?: AnnouncementMutableProperties | undefined;
  answer?: AnswerMutableProperties | undefined;
};

/** @internal */
export const UgcDraft$inboundSchema: z.ZodType<
  UgcDraft,
  z.ZodTypeDef,
  unknown
> = z.object({
  announcement: AnnouncementMutableProperties$inboundSchema.optional(),
  answer: AnswerMutableProperties$inboundSchema.optional(),
});

/** @internal */
export type UgcDraft$Outbound = {
  announcement?: AnnouncementMutableProperties$Outbound | undefined;
  answer?: AnswerMutableProperties$Outbound | undefined;
};

/** @internal */
export const UgcDraft$outboundSchema: z.ZodType<
  UgcDraft$Outbound,
  z.ZodTypeDef,
  UgcDraft
> = z.object({
  announcement: AnnouncementMutableProperties$outboundSchema.optional(),
  answer: AnswerMutableProperties$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UgcDraft$ {
  /** @deprecated use `UgcDraft$inboundSchema` instead. */
  export const inboundSchema = UgcDraft$inboundSchema;
  /** @deprecated use `UgcDraft$outboundSchema` instead. */
  export const outboundSchema = UgcDraft$outboundSchema;
  /** @deprecated use `UgcDraft$Outbound` instead. */
  export type Outbound = UgcDraft$Outbound;
}

export function ugcDraftToJSON(ugcDraft: UgcDraft): string {
  return JSON.stringify(UgcDraft$outboundSchema.parse(ugcDraft));
}

export function ugcDraftFromJSON(
  jsonString: string,
): SafeParseResult<UgcDraft, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UgcDraft$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UgcDraft' from JSON`,
  );
}
