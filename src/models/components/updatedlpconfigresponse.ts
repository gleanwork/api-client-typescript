/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DlpSimpleResult,
  DlpSimpleResult$inboundSchema,
  DlpSimpleResult$outboundSchema,
} from "./dlpsimpleresult.js";

export type UpdateDlpConfigResponse = {
  result?: DlpSimpleResult | undefined;
  /**
   * The id of the report that was just created and run.
   */
  reportId?: string | undefined;
};

/** @internal */
export const UpdateDlpConfigResponse$inboundSchema: z.ZodType<
  UpdateDlpConfigResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: DlpSimpleResult$inboundSchema.optional(),
  reportId: z.string().optional(),
});

/** @internal */
export type UpdateDlpConfigResponse$Outbound = {
  result?: string | undefined;
  reportId?: string | undefined;
};

/** @internal */
export const UpdateDlpConfigResponse$outboundSchema: z.ZodType<
  UpdateDlpConfigResponse$Outbound,
  z.ZodTypeDef,
  UpdateDlpConfigResponse
> = z.object({
  result: DlpSimpleResult$outboundSchema.optional(),
  reportId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDlpConfigResponse$ {
  /** @deprecated use `UpdateDlpConfigResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateDlpConfigResponse$inboundSchema;
  /** @deprecated use `UpdateDlpConfigResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateDlpConfigResponse$outboundSchema;
  /** @deprecated use `UpdateDlpConfigResponse$Outbound` instead. */
  export type Outbound = UpdateDlpConfigResponse$Outbound;
}

export function updateDlpConfigResponseToJSON(
  updateDlpConfigResponse: UpdateDlpConfigResponse,
): string {
  return JSON.stringify(
    UpdateDlpConfigResponse$outboundSchema.parse(updateDlpConfigResponse),
  );
}

export function updateDlpConfigResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDlpConfigResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDlpConfigResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDlpConfigResponse' from JSON`,
  );
}
