/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ImageMetadata,
  ImageMetadata$inboundSchema,
  ImageMetadata$Outbound,
  ImageMetadata$outboundSchema,
} from "./imagemetadata.js";

export type UploadImageResponse = {
  /**
   * URL of the uploaded image.
   */
  url: string;
  metadata?: ImageMetadata | undefined;
};

/** @internal */
export const UploadImageResponse$inboundSchema: z.ZodType<
  UploadImageResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
  metadata: ImageMetadata$inboundSchema.optional(),
});

/** @internal */
export type UploadImageResponse$Outbound = {
  url: string;
  metadata?: ImageMetadata$Outbound | undefined;
};

/** @internal */
export const UploadImageResponse$outboundSchema: z.ZodType<
  UploadImageResponse$Outbound,
  z.ZodTypeDef,
  UploadImageResponse
> = z.object({
  url: z.string(),
  metadata: ImageMetadata$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadImageResponse$ {
  /** @deprecated use `UploadImageResponse$inboundSchema` instead. */
  export const inboundSchema = UploadImageResponse$inboundSchema;
  /** @deprecated use `UploadImageResponse$outboundSchema` instead. */
  export const outboundSchema = UploadImageResponse$outboundSchema;
  /** @deprecated use `UploadImageResponse$Outbound` instead. */
  export type Outbound = UploadImageResponse$Outbound;
}

export function uploadImageResponseToJSON(
  uploadImageResponse: UploadImageResponse,
): string {
  return JSON.stringify(
    UploadImageResponse$outboundSchema.parse(uploadImageResponse),
  );
}

export function uploadImageResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadImageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadImageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadImageResponse' from JSON`,
  );
}
