/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserActivityInsight,
  UserActivityInsight$inboundSchema,
  UserActivityInsight$Outbound,
  UserActivityInsight$outboundSchema,
} from "./useractivityinsight.js";

export type UserInsightsResponse = {
  /**
   * Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
   */
  lastLogTimestamp?: number | undefined;
  /**
   * Insights for all active users with respect to set of actions.
   */
  activityInsights?: Array<UserActivityInsight> | undefined;
  /**
   * Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
   */
  inactiveInsights?: Array<UserActivityInsight> | undefined;
  /**
   * Total number of teammates that have logged in to the product, that are still valid teammates.
   */
  totalTeammates?: number | undefined;
  /**
   * Total number of active users in the requested period.
   */
  totalActiveUsers?: number | undefined;
  /**
   * list of departments applicable for users tab.
   */
  departments?: Array<string> | undefined;
};

/** @internal */
export const UserInsightsResponse$inboundSchema: z.ZodType<
  UserInsightsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lastLogTimestamp: z.number().int().optional(),
  activityInsights: z.array(UserActivityInsight$inboundSchema).optional(),
  inactiveInsights: z.array(UserActivityInsight$inboundSchema).optional(),
  totalTeammates: z.number().int().optional(),
  totalActiveUsers: z.number().int().optional(),
  departments: z.array(z.string()).optional(),
});

/** @internal */
export type UserInsightsResponse$Outbound = {
  lastLogTimestamp?: number | undefined;
  activityInsights?: Array<UserActivityInsight$Outbound> | undefined;
  inactiveInsights?: Array<UserActivityInsight$Outbound> | undefined;
  totalTeammates?: number | undefined;
  totalActiveUsers?: number | undefined;
  departments?: Array<string> | undefined;
};

/** @internal */
export const UserInsightsResponse$outboundSchema: z.ZodType<
  UserInsightsResponse$Outbound,
  z.ZodTypeDef,
  UserInsightsResponse
> = z.object({
  lastLogTimestamp: z.number().int().optional(),
  activityInsights: z.array(UserActivityInsight$outboundSchema).optional(),
  inactiveInsights: z.array(UserActivityInsight$outboundSchema).optional(),
  totalTeammates: z.number().int().optional(),
  totalActiveUsers: z.number().int().optional(),
  departments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserInsightsResponse$ {
  /** @deprecated use `UserInsightsResponse$inboundSchema` instead. */
  export const inboundSchema = UserInsightsResponse$inboundSchema;
  /** @deprecated use `UserInsightsResponse$outboundSchema` instead. */
  export const outboundSchema = UserInsightsResponse$outboundSchema;
  /** @deprecated use `UserInsightsResponse$Outbound` instead. */
  export type Outbound = UserInsightsResponse$Outbound;
}

export function userInsightsResponseToJSON(
  userInsightsResponse: UserInsightsResponse,
): string {
  return JSON.stringify(
    UserInsightsResponse$outboundSchema.parse(userInsightsResponse),
  );
}

export function userInsightsResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserInsightsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserInsightsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserInsightsResponse' from JSON`,
  );
}
