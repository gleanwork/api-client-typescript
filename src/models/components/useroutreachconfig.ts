/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserOutreachConfig = {
  /**
   * Whether the weekly feed email is enabled
   */
  weeklyFeedEmailEnabled?: boolean | undefined;
  /**
   * Whether the onboarding email campaign is enabled
   */
  onboardingCampaignEnabled?: boolean | undefined;
};

/** @internal */
export const UserOutreachConfig$inboundSchema: z.ZodType<
  UserOutreachConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  weeklyFeedEmailEnabled: z.boolean().optional(),
  onboardingCampaignEnabled: z.boolean().optional(),
});

/** @internal */
export type UserOutreachConfig$Outbound = {
  weeklyFeedEmailEnabled?: boolean | undefined;
  onboardingCampaignEnabled?: boolean | undefined;
};

/** @internal */
export const UserOutreachConfig$outboundSchema: z.ZodType<
  UserOutreachConfig$Outbound,
  z.ZodTypeDef,
  UserOutreachConfig
> = z.object({
  weeklyFeedEmailEnabled: z.boolean().optional(),
  onboardingCampaignEnabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserOutreachConfig$ {
  /** @deprecated use `UserOutreachConfig$inboundSchema` instead. */
  export const inboundSchema = UserOutreachConfig$inboundSchema;
  /** @deprecated use `UserOutreachConfig$outboundSchema` instead. */
  export const outboundSchema = UserOutreachConfig$outboundSchema;
  /** @deprecated use `UserOutreachConfig$Outbound` instead. */
  export type Outbound = UserOutreachConfig$Outbound;
}

export function userOutreachConfigToJSON(
  userOutreachConfig: UserOutreachConfig,
): string {
  return JSON.stringify(
    UserOutreachConfig$outboundSchema.parse(userOutreachConfig),
  );
}

export function userOutreachConfigFromJSON(
  jsonString: string,
): SafeParseResult<UserOutreachConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserOutreachConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserOutreachConfig' from JSON`,
  );
}
