/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
 */
export type UserReferenceDefinition = {
  email?: string | undefined;
  /**
   * some datasources refer to the user by the datasource user id in the document
   */
  datasourceUserId?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const UserReferenceDefinition$inboundSchema: z.ZodType<
  UserReferenceDefinition,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  datasourceUserId: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type UserReferenceDefinition$Outbound = {
  email?: string | undefined;
  datasourceUserId?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const UserReferenceDefinition$outboundSchema: z.ZodType<
  UserReferenceDefinition$Outbound,
  z.ZodTypeDef,
  UserReferenceDefinition
> = z.object({
  email: z.string().optional(),
  datasourceUserId: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserReferenceDefinition$ {
  /** @deprecated use `UserReferenceDefinition$inboundSchema` instead. */
  export const inboundSchema = UserReferenceDefinition$inboundSchema;
  /** @deprecated use `UserReferenceDefinition$outboundSchema` instead. */
  export const outboundSchema = UserReferenceDefinition$outboundSchema;
  /** @deprecated use `UserReferenceDefinition$Outbound` instead. */
  export type Outbound = UserReferenceDefinition$Outbound;
}

export function userReferenceDefinitionToJSON(
  userReferenceDefinition: UserReferenceDefinition,
): string {
  return JSON.stringify(
    UserReferenceDefinition$outboundSchema.parse(userReferenceDefinition),
  );
}

export function userReferenceDefinitionFromJSON(
  jsonString: string,
): SafeParseResult<UserReferenceDefinition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserReferenceDefinition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserReferenceDefinition' from JSON`,
  );
}
