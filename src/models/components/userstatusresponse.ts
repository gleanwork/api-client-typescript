/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UploadStatusEnum,
  UploadStatusEnum$inboundSchema,
  UploadStatusEnum$outboundSchema,
} from "./uploadstatusenum.js";

/**
 * Describes the user status response body
 */
export type UserStatusResponse = {
  /**
   * Whether the user is active or not
   */
  isActiveUser?: boolean | undefined;
  /**
   * Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
   */
  uploadStatus?: UploadStatusEnum | undefined;
  /**
   * Time of last successful upload for the user, in ISO 8601 format
   */
  lastUploadedAt?: string | undefined;
};

/** @internal */
export const UserStatusResponse$inboundSchema: z.ZodType<
  UserStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  isActiveUser: z.boolean().optional(),
  uploadStatus: UploadStatusEnum$inboundSchema.optional(),
  lastUploadedAt: z.string().optional(),
});

/** @internal */
export type UserStatusResponse$Outbound = {
  isActiveUser?: boolean | undefined;
  uploadStatus?: string | undefined;
  lastUploadedAt?: string | undefined;
};

/** @internal */
export const UserStatusResponse$outboundSchema: z.ZodType<
  UserStatusResponse$Outbound,
  z.ZodTypeDef,
  UserStatusResponse
> = z.object({
  isActiveUser: z.boolean().optional(),
  uploadStatus: UploadStatusEnum$outboundSchema.optional(),
  lastUploadedAt: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserStatusResponse$ {
  /** @deprecated use `UserStatusResponse$inboundSchema` instead. */
  export const inboundSchema = UserStatusResponse$inboundSchema;
  /** @deprecated use `UserStatusResponse$outboundSchema` instead. */
  export const outboundSchema = UserStatusResponse$outboundSchema;
  /** @deprecated use `UserStatusResponse$Outbound` instead. */
  export type Outbound = UserStatusResponse$Outbound;
}

export function userStatusResponseToJSON(
  userStatusResponse: UserStatusResponse,
): string {
  return JSON.stringify(
    UserStatusResponse$outboundSchema.parse(userStatusResponse),
  );
}

export function userStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserStatusResponse' from JSON`,
  );
}
