/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserViewInfo = {
  /**
   * Unique Glean Document ID of the associated document.
   */
  docId?: string | undefined;
  /**
   * Title of associated document.
   */
  docTitle?: string | undefined;
  /**
   * URL of associated document.
   */
  docUrl?: string | undefined;
};

/** @internal */
export const UserViewInfo$inboundSchema: z.ZodType<
  UserViewInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  docId: z.string().optional(),
  docTitle: z.string().optional(),
  docUrl: z.string().optional(),
});

/** @internal */
export type UserViewInfo$Outbound = {
  docId?: string | undefined;
  docTitle?: string | undefined;
  docUrl?: string | undefined;
};

/** @internal */
export const UserViewInfo$outboundSchema: z.ZodType<
  UserViewInfo$Outbound,
  z.ZodTypeDef,
  UserViewInfo
> = z.object({
  docId: z.string().optional(),
  docTitle: z.string().optional(),
  docUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserViewInfo$ {
  /** @deprecated use `UserViewInfo$inboundSchema` instead. */
  export const inboundSchema = UserViewInfo$inboundSchema;
  /** @deprecated use `UserViewInfo$outboundSchema` instead. */
  export const outboundSchema = UserViewInfo$outboundSchema;
  /** @deprecated use `UserViewInfo$Outbound` instead. */
  export type Outbound = UserViewInfo$Outbound;
}

export function userViewInfoToJSON(userViewInfo: UserViewInfo): string {
  return JSON.stringify(UserViewInfo$outboundSchema.parse(userViewInfo));
}

export function userViewInfoFromJSON(
  jsonString: string,
): SafeParseResult<UserViewInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserViewInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserViewInfo' from JSON`,
  );
}
