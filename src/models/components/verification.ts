/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VerificationMetadata,
  VerificationMetadata$inboundSchema,
  VerificationMetadata$Outbound,
  VerificationMetadata$outboundSchema,
} from "./verificationmetadata.js";

/**
 * The verification state for the document.
 */
export const State = {
  Unverified: "UNVERIFIED",
  Verified: "VERIFIED",
  Deprecated: "DEPRECATED",
} as const;
/**
 * The verification state for the document.
 */
export type State = ClosedEnum<typeof State>;

export type Verification = {
  /**
   * The verification state for the document.
   */
  state: State;
  metadata?: VerificationMetadata | undefined;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(
  State,
);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> =
  State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
  /** @deprecated use `State$inboundSchema` instead. */
  export const inboundSchema = State$inboundSchema;
  /** @deprecated use `State$outboundSchema` instead. */
  export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const Verification$inboundSchema: z.ZodType<
  Verification,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: State$inboundSchema,
  metadata: z.lazy(() => VerificationMetadata$inboundSchema).optional(),
});

/** @internal */
export type Verification$Outbound = {
  state: string;
  metadata?: VerificationMetadata$Outbound | undefined;
};

/** @internal */
export const Verification$outboundSchema: z.ZodType<
  Verification$Outbound,
  z.ZodTypeDef,
  Verification
> = z.object({
  state: State$outboundSchema,
  metadata: z.lazy(() => VerificationMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Verification$ {
  /** @deprecated use `Verification$inboundSchema` instead. */
  export const inboundSchema = Verification$inboundSchema;
  /** @deprecated use `Verification$outboundSchema` instead. */
  export const outboundSchema = Verification$outboundSchema;
  /** @deprecated use `Verification$Outbound` instead. */
  export type Outbound = Verification$Outbound;
}

export function verificationToJSON(verification: Verification): string {
  return JSON.stringify(Verification$outboundSchema.parse(verification));
}

export function verificationFromJSON(
  jsonString: string,
): SafeParseResult<Verification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Verification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Verification' from JSON`,
  );
}
