/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * DEPRECATED - use permissions instead. Viewer's role on the specific document.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const Role = {
  AnswerModerator: "ANSWER_MODERATOR",
  Owner: "OWNER",
  Viewer: "VIEWER",
} as const;
/**
 * DEPRECATED - use permissions instead. Viewer's role on the specific document.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type Role = ClosedEnum<typeof Role>;

export type ViewerInfo = {
  /**
   * DEPRECATED - use permissions instead. Viewer's role on the specific document.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  role?: Role | undefined;
  lastViewedTime?: Date | undefined;
};

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const ViewerInfo$inboundSchema: z.ZodType<
  ViewerInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: Role$inboundSchema.optional(),
  lastViewedTime: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
});

/** @internal */
export type ViewerInfo$Outbound = {
  role?: string | undefined;
  lastViewedTime?: string | undefined;
};

/** @internal */
export const ViewerInfo$outboundSchema: z.ZodType<
  ViewerInfo$Outbound,
  z.ZodTypeDef,
  ViewerInfo
> = z.object({
  role: Role$outboundSchema.optional(),
  lastViewedTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ViewerInfo$ {
  /** @deprecated use `ViewerInfo$inboundSchema` instead. */
  export const inboundSchema = ViewerInfo$inboundSchema;
  /** @deprecated use `ViewerInfo$outboundSchema` instead. */
  export const outboundSchema = ViewerInfo$outboundSchema;
  /** @deprecated use `ViewerInfo$Outbound` instead. */
  export type Outbound = ViewerInfo$Outbound;
}

export function viewerInfoToJSON(viewerInfo: ViewerInfo): string {
  return JSON.stringify(ViewerInfo$outboundSchema.parse(viewerInfo));
}

export function viewerInfoFromJSON(
  jsonString: string,
): SafeParseResult<ViewerInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ViewerInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ViewerInfo' from JSON`,
  );
}
