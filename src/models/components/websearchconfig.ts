/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Configuration settings related to web search
 */
export type WebSearchConfig = {
  /**
   * Whether web search is enabled for the deployment.
   */
  enabled?: boolean | undefined;
  /**
   * The action instance ID of the web search action.
   */
  actionInstanceId?: string | undefined;
};

/** @internal */
export const WebSearchConfig$inboundSchema: z.ZodType<
  WebSearchConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.boolean().optional(),
  actionInstanceId: z.string().optional(),
});

/** @internal */
export type WebSearchConfig$Outbound = {
  enabled?: boolean | undefined;
  actionInstanceId?: string | undefined;
};

/** @internal */
export const WebSearchConfig$outboundSchema: z.ZodType<
  WebSearchConfig$Outbound,
  z.ZodTypeDef,
  WebSearchConfig
> = z.object({
  enabled: z.boolean().optional(),
  actionInstanceId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebSearchConfig$ {
  /** @deprecated use `WebSearchConfig$inboundSchema` instead. */
  export const inboundSchema = WebSearchConfig$inboundSchema;
  /** @deprecated use `WebSearchConfig$outboundSchema` instead. */
  export const outboundSchema = WebSearchConfig$outboundSchema;
  /** @deprecated use `WebSearchConfig$Outbound` instead. */
  export type Outbound = WebSearchConfig$Outbound;
}

export function webSearchConfigToJSON(
  webSearchConfig: WebSearchConfig,
): string {
  return JSON.stringify(WebSearchConfig$outboundSchema.parse(webSearchConfig));
}

export function webSearchConfigFromJSON(
  jsonString: string,
): SafeParseResult<WebSearchConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebSearchConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebSearchConfig' from JSON`,
  );
}
