/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowInputField = {
  /**
   * The name of the input.
   */
  name?: string | undefined;
};

/** @internal */
export const WorkflowInputField$inboundSchema: z.ZodType<
  WorkflowInputField,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type WorkflowInputField$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const WorkflowInputField$outboundSchema: z.ZodType<
  WorkflowInputField$Outbound,
  z.ZodTypeDef,
  WorkflowInputField
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowInputField$ {
  /** @deprecated use `WorkflowInputField$inboundSchema` instead. */
  export const inboundSchema = WorkflowInputField$inboundSchema;
  /** @deprecated use `WorkflowInputField$outboundSchema` instead. */
  export const outboundSchema = WorkflowInputField$outboundSchema;
  /** @deprecated use `WorkflowInputField$Outbound` instead. */
  export type Outbound = WorkflowInputField$Outbound;
}

export function workflowInputFieldToJSON(
  workflowInputField: WorkflowInputField,
): string {
  return JSON.stringify(
    WorkflowInputField$outboundSchema.parse(workflowInputField),
  );
}

export function workflowInputFieldFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowInputField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowInputField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowInputField' from JSON`,
  );
}
