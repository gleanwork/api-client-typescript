/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PossibleValue,
  PossibleValue$inboundSchema,
  PossibleValue$Outbound,
  PossibleValue$outboundSchema,
} from "./possiblevalue.js";

/**
 * The type of the value (e.g., integer, string, boolean, etc.)
 */
export const WriteActionParameterType = {
  Unknown: "UNKNOWN",
  Integer: "INTEGER",
  String: "STRING",
  Boolean: "BOOLEAN",
} as const;
/**
 * The type of the value (e.g., integer, string, boolean, etc.)
 */
export type WriteActionParameterType = ClosedEnum<
  typeof WriteActionParameterType
>;

export type WriteActionParameter = {
  /**
   * The type of the value (e.g., integer, string, boolean, etc.)
   */
  type?: WriteActionParameterType | undefined;
  /**
   * Human readable display name for the key.
   */
  displayName?: string | undefined;
  /**
   * The value of the field.
   */
  value?: string | undefined;
  /**
   * Is the parameter a required field.
   */
  isRequired?: boolean | undefined;
  /**
   * Description of the parameter.
   */
  description?: string | undefined;
  /**
   * Possible values that the parameter can take.
   */
  possibleValues?: Array<PossibleValue> | undefined;
};

/** @internal */
export const WriteActionParameterType$inboundSchema: z.ZodNativeEnum<
  typeof WriteActionParameterType
> = z.nativeEnum(WriteActionParameterType);

/** @internal */
export const WriteActionParameterType$outboundSchema: z.ZodNativeEnum<
  typeof WriteActionParameterType
> = WriteActionParameterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteActionParameterType$ {
  /** @deprecated use `WriteActionParameterType$inboundSchema` instead. */
  export const inboundSchema = WriteActionParameterType$inboundSchema;
  /** @deprecated use `WriteActionParameterType$outboundSchema` instead. */
  export const outboundSchema = WriteActionParameterType$outboundSchema;
}

/** @internal */
export const WriteActionParameter$inboundSchema: z.ZodType<
  WriteActionParameter,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: WriteActionParameterType$inboundSchema.optional(),
  displayName: z.string().optional(),
  value: z.string().optional(),
  isRequired: z.boolean().optional(),
  description: z.string().optional(),
  possibleValues: z.array(PossibleValue$inboundSchema).optional(),
});

/** @internal */
export type WriteActionParameter$Outbound = {
  type?: string | undefined;
  displayName?: string | undefined;
  value?: string | undefined;
  isRequired?: boolean | undefined;
  description?: string | undefined;
  possibleValues?: Array<PossibleValue$Outbound> | undefined;
};

/** @internal */
export const WriteActionParameter$outboundSchema: z.ZodType<
  WriteActionParameter$Outbound,
  z.ZodTypeDef,
  WriteActionParameter
> = z.object({
  type: WriteActionParameterType$outboundSchema.optional(),
  displayName: z.string().optional(),
  value: z.string().optional(),
  isRequired: z.boolean().optional(),
  description: z.string().optional(),
  possibleValues: z.array(PossibleValue$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WriteActionParameter$ {
  /** @deprecated use `WriteActionParameter$inboundSchema` instead. */
  export const inboundSchema = WriteActionParameter$inboundSchema;
  /** @deprecated use `WriteActionParameter$outboundSchema` instead. */
  export const outboundSchema = WriteActionParameter$outboundSchema;
  /** @deprecated use `WriteActionParameter$Outbound` instead. */
  export type Outbound = WriteActionParameter$Outbound;
}

export function writeActionParameterToJSON(
  writeActionParameter: WriteActionParameter,
): string {
  return JSON.stringify(
    WriteActionParameter$outboundSchema.parse(writeActionParameter),
  );
}

export function writeActionParameterFromJSON(
  jsonString: string,
): SafeParseResult<WriteActionParameter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WriteActionParameter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WriteActionParameter' from JSON`,
  );
}
