/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as components from "../components/index.js";

export type CollectionErrorData = {
  errorCode: components.CollectionErrorErrorCode;
};

export class CollectionError extends Error {
  errorCode: components.CollectionErrorErrorCode;

  /** The original data that was passed to this error instance. */
  data$: CollectionErrorData;

  constructor(err: CollectionErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.errorCode = err.errorCode;

    this.name = "CollectionError";
  }
}

/** @internal */
export const CollectionError$inboundSchema: z.ZodType<
  CollectionError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errorCode: components.CollectionErrorErrorCode$inboundSchema,
})
  .transform((v) => {
    return new CollectionError(v);
  });

/** @internal */
export type CollectionError$Outbound = {
  errorCode: string;
};

/** @internal */
export const CollectionError$outboundSchema: z.ZodType<
  CollectionError$Outbound,
  z.ZodTypeDef,
  CollectionError
> = z.instanceof(CollectionError)
  .transform(v => v.data$)
  .pipe(z.object({
    errorCode: components.CollectionErrorErrorCode$outboundSchema,
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CollectionError$ {
  /** @deprecated use `CollectionError$inboundSchema` instead. */
  export const inboundSchema = CollectionError$inboundSchema;
  /** @deprecated use `CollectionError$outboundSchema` instead. */
  export const outboundSchema = CollectionError$outboundSchema;
  /** @deprecated use `CollectionError$Outbound` instead. */
  export type Outbound = CollectionError$Outbound;
}
