/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AutocompleteRequest = {
  /**
   * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
   */
  xScioActas?: string | undefined;
  /**
   * Auth type being used to access the endpoint (should be non-empty only for global tokens).
   */
  xGleanAuthType?: string | undefined;
  /**
   * Autocomplete request
   */
  autocompleteRequest: components.AutocompleteRequest;
};

/** @internal */
export const AutocompleteRequest$inboundSchema: z.ZodType<
  AutocompleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Scio-Actas": z.string().optional(),
  "X-Glean-Auth-Type": z.string().optional(),
  AutocompleteRequest: components.AutocompleteRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Scio-Actas": "xScioActas",
    "X-Glean-Auth-Type": "xGleanAuthType",
    "AutocompleteRequest": "autocompleteRequest",
  });
});

/** @internal */
export type AutocompleteRequest$Outbound = {
  "X-Scio-Actas"?: string | undefined;
  "X-Glean-Auth-Type"?: string | undefined;
  AutocompleteRequest: components.AutocompleteRequest$Outbound;
};

/** @internal */
export const AutocompleteRequest$outboundSchema: z.ZodType<
  AutocompleteRequest$Outbound,
  z.ZodTypeDef,
  AutocompleteRequest
> = z.object({
  xScioActas: z.string().optional(),
  xGleanAuthType: z.string().optional(),
  autocompleteRequest: components.AutocompleteRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xScioActas: "X-Scio-Actas",
    xGleanAuthType: "X-Glean-Auth-Type",
    autocompleteRequest: "AutocompleteRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutocompleteRequest$ {
  /** @deprecated use `AutocompleteRequest$inboundSchema` instead. */
  export const inboundSchema = AutocompleteRequest$inboundSchema;
  /** @deprecated use `AutocompleteRequest$outboundSchema` instead. */
  export const outboundSchema = AutocompleteRequest$outboundSchema;
  /** @deprecated use `AutocompleteRequest$Outbound` instead. */
  export type Outbound = AutocompleteRequest$Outbound;
}

export function autocompleteRequestToJSON(
  autocompleteRequest: AutocompleteRequest,
): string {
  return JSON.stringify(
    AutocompleteRequest$outboundSchema.parse(autocompleteRequest),
  );
}

export function autocompleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<AutocompleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AutocompleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AutocompleteRequest' from JSON`,
  );
}
