/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateanswerboardRequest = {
  /**
   * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
   */
  xGleanActAs?: string | undefined;
  /**
   * Auth type being used to access the endpoint (should be non-empty only for global tokens).
   */
  xGleanAuthType?: string | undefined;
  /**
   * Answer Board content plus any additional metadata for the request.
   */
  collectionBaseMutableProperties: components.CollectionBaseMutableProperties;
};

/** @internal */
export const CreateanswerboardRequest$inboundSchema: z.ZodType<
  CreateanswerboardRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Glean-ActAs": z.string().optional(),
  "X-Glean-Auth-Type": z.string().optional(),
  CollectionBaseMutableProperties:
    components.CollectionBaseMutableProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Glean-ActAs": "xGleanActAs",
    "X-Glean-Auth-Type": "xGleanAuthType",
    "CollectionBaseMutableProperties": "collectionBaseMutableProperties",
  });
});

/** @internal */
export type CreateanswerboardRequest$Outbound = {
  "X-Glean-ActAs"?: string | undefined;
  "X-Glean-Auth-Type"?: string | undefined;
  CollectionBaseMutableProperties:
    components.CollectionBaseMutableProperties$Outbound;
};

/** @internal */
export const CreateanswerboardRequest$outboundSchema: z.ZodType<
  CreateanswerboardRequest$Outbound,
  z.ZodTypeDef,
  CreateanswerboardRequest
> = z.object({
  xGleanActAs: z.string().optional(),
  xGleanAuthType: z.string().optional(),
  collectionBaseMutableProperties:
    components.CollectionBaseMutableProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xGleanActAs: "X-Glean-ActAs",
    xGleanAuthType: "X-Glean-Auth-Type",
    collectionBaseMutableProperties: "CollectionBaseMutableProperties",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateanswerboardRequest$ {
  /** @deprecated use `CreateanswerboardRequest$inboundSchema` instead. */
  export const inboundSchema = CreateanswerboardRequest$inboundSchema;
  /** @deprecated use `CreateanswerboardRequest$outboundSchema` instead. */
  export const outboundSchema = CreateanswerboardRequest$outboundSchema;
  /** @deprecated use `CreateanswerboardRequest$Outbound` instead. */
  export type Outbound = CreateanswerboardRequest$Outbound;
}

export function createanswerboardRequestToJSON(
  createanswerboardRequest: CreateanswerboardRequest,
): string {
  return JSON.stringify(
    CreateanswerboardRequest$outboundSchema.parse(createanswerboardRequest),
  );
}

export function createanswerboardRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateanswerboardRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateanswerboardRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateanswerboardRequest' from JSON`,
  );
}
