/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletechatsRequest = {
  /**
   * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
   */
  timezoneOffset?: number | undefined;
  deleteChatsRequest: components.DeleteChatsRequest;
};

/** @internal */
export const DeletechatsRequest$inboundSchema: z.ZodType<
  DeletechatsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  timezoneOffset: z.number().int().optional(),
  DeleteChatsRequest: components.DeleteChatsRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "DeleteChatsRequest": "deleteChatsRequest",
  });
});

/** @internal */
export type DeletechatsRequest$Outbound = {
  timezoneOffset?: number | undefined;
  DeleteChatsRequest: components.DeleteChatsRequest$Outbound;
};

/** @internal */
export const DeletechatsRequest$outboundSchema: z.ZodType<
  DeletechatsRequest$Outbound,
  z.ZodTypeDef,
  DeletechatsRequest
> = z.object({
  timezoneOffset: z.number().int().optional(),
  deleteChatsRequest: components.DeleteChatsRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    deleteChatsRequest: "DeleteChatsRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletechatsRequest$ {
  /** @deprecated use `DeletechatsRequest$inboundSchema` instead. */
  export const inboundSchema = DeletechatsRequest$inboundSchema;
  /** @deprecated use `DeletechatsRequest$outboundSchema` instead. */
  export const outboundSchema = DeletechatsRequest$outboundSchema;
  /** @deprecated use `DeletechatsRequest$Outbound` instead. */
  export type Outbound = DeletechatsRequest$Outbound;
}

export function deletechatsRequestToJSON(
  deletechatsRequest: DeletechatsRequest,
): string {
  return JSON.stringify(
    DeletechatsRequest$outboundSchema.parse(deletechatsRequest),
  );
}

export function deletechatsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletechatsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletechatsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletechatsRequest' from JSON`,
  );
}
