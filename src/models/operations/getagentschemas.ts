/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAgentSchemasRequest = {
  /**
   * The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
   */
  timezoneOffset?: number | undefined;
  /**
   * The ID of the agent.
   */
  agentId: string;
};

/** @internal */
export const GetAgentSchemasRequest$inboundSchema: z.ZodType<
  GetAgentSchemasRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  timezoneOffset: z.number().int().optional(),
  agent_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "agent_id": "agentId",
  });
});

/** @internal */
export type GetAgentSchemasRequest$Outbound = {
  timezoneOffset?: number | undefined;
  agent_id: string;
};

/** @internal */
export const GetAgentSchemasRequest$outboundSchema: z.ZodType<
  GetAgentSchemasRequest$Outbound,
  z.ZodTypeDef,
  GetAgentSchemasRequest
> = z.object({
  timezoneOffset: z.number().int().optional(),
  agentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    agentId: "agent_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgentSchemasRequest$ {
  /** @deprecated use `GetAgentSchemasRequest$inboundSchema` instead. */
  export const inboundSchema = GetAgentSchemasRequest$inboundSchema;
  /** @deprecated use `GetAgentSchemasRequest$outboundSchema` instead. */
  export const outboundSchema = GetAgentSchemasRequest$outboundSchema;
  /** @deprecated use `GetAgentSchemasRequest$Outbound` instead. */
  export type Outbound = GetAgentSchemasRequest$Outbound;
}

export function getAgentSchemasRequestToJSON(
  getAgentSchemasRequest: GetAgentSchemasRequest,
): string {
  return JSON.stringify(
    GetAgentSchemasRequest$outboundSchema.parse(getAgentSchemasRequest),
  );
}

export function getAgentSchemasRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAgentSchemasRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgentSchemasRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgentSchemasRequest' from JSON`,
  );
}
