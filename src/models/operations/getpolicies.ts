/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetpoliciesRequest = {
  /**
   * Filter to return reports with a given value of auto-hide.
   */
  autoHide?: boolean | undefined;
  /**
   * Filter to return reports with a given frequency.
   */
  frequency?: string | undefined;
};

/** @internal */
export const GetpoliciesRequest$inboundSchema: z.ZodType<
  GetpoliciesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoHide: z.boolean().optional(),
  frequency: z.string().optional(),
});

/** @internal */
export type GetpoliciesRequest$Outbound = {
  autoHide?: boolean | undefined;
  frequency?: string | undefined;
};

/** @internal */
export const GetpoliciesRequest$outboundSchema: z.ZodType<
  GetpoliciesRequest$Outbound,
  z.ZodTypeDef,
  GetpoliciesRequest
> = z.object({
  autoHide: z.boolean().optional(),
  frequency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetpoliciesRequest$ {
  /** @deprecated use `GetpoliciesRequest$inboundSchema` instead. */
  export const inboundSchema = GetpoliciesRequest$inboundSchema;
  /** @deprecated use `GetpoliciesRequest$outboundSchema` instead. */
  export const outboundSchema = GetpoliciesRequest$outboundSchema;
  /** @deprecated use `GetpoliciesRequest$Outbound` instead. */
  export type Outbound = GetpoliciesRequest$Outbound;
}

export function getpoliciesRequestToJSON(
  getpoliciesRequest: GetpoliciesRequest,
): string {
  return JSON.stringify(
    GetpoliciesRequest$outboundSchema.parse(getpoliciesRequest),
  );
}

export function getpoliciesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetpoliciesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetpoliciesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetpoliciesRequest' from JSON`,
  );
}
