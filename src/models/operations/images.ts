/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ImagesRequest = {
  /**
   * Email address of a user on whose behalf the request is intended to be made (should be non-empty only for global tokens).
   */
  xScioActas?: string | undefined;
  /**
   * Auth type being used to access the endpoint (should be non-empty only for global tokens).
   */
  xGleanAuthType?: string | undefined;
  /**
   * Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used.
   */
  key?: string | undefined;
  /**
   * The type of image requested. Supported values are listed in ImageMetadata.type enum.
   */
  type?: components.ImageType | undefined;
  /**
   * ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on.
   */
  id?: string | undefined;
  /**
   * A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some.
   */
  ds?: string | undefined;
  /**
   * Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
   */
  cid?: string | undefined;
};

/** @internal */
export const ImagesRequest$inboundSchema: z.ZodType<
  ImagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Scio-Actas": z.string().optional(),
  "X-Glean-Auth-Type": z.string().optional(),
  key: z.string().optional(),
  type: components.ImageType$inboundSchema.optional(),
  id: z.string().optional(),
  ds: z.string().optional(),
  cid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "X-Scio-Actas": "xScioActas",
    "X-Glean-Auth-Type": "xGleanAuthType",
  });
});

/** @internal */
export type ImagesRequest$Outbound = {
  "X-Scio-Actas"?: string | undefined;
  "X-Glean-Auth-Type"?: string | undefined;
  key?: string | undefined;
  type?: string | undefined;
  id?: string | undefined;
  ds?: string | undefined;
  cid?: string | undefined;
};

/** @internal */
export const ImagesRequest$outboundSchema: z.ZodType<
  ImagesRequest$Outbound,
  z.ZodTypeDef,
  ImagesRequest
> = z.object({
  xScioActas: z.string().optional(),
  xGleanAuthType: z.string().optional(),
  key: z.string().optional(),
  type: components.ImageType$outboundSchema.optional(),
  id: z.string().optional(),
  ds: z.string().optional(),
  cid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xScioActas: "X-Scio-Actas",
    xGleanAuthType: "X-Glean-Auth-Type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImagesRequest$ {
  /** @deprecated use `ImagesRequest$inboundSchema` instead. */
  export const inboundSchema = ImagesRequest$inboundSchema;
  /** @deprecated use `ImagesRequest$outboundSchema` instead. */
  export const outboundSchema = ImagesRequest$outboundSchema;
  /** @deprecated use `ImagesRequest$Outbound` instead. */
  export type Outbound = ImagesRequest$Outbound;
}

export function imagesRequestToJSON(imagesRequest: ImagesRequest): string {
  return JSON.stringify(ImagesRequest$outboundSchema.parse(imagesRequest));
}

export function imagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ImagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImagesRequest' from JSON`,
  );
}
