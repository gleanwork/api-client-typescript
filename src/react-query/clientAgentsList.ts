/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientAgentsList } from "../funcs/clientAgentsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientAgentsListMutationVariables = {
  requestBody?: any | undefined;
  timezoneOffset?: number | undefined;
  options?: RequestOptions;
};

export type ClientAgentsListMutationData = components.ListAgentsResponse;

/**
 * Lists all agents.
 *
 * @remarks
 * Lists all agents that are available.
 */
export function useClientAgentsListMutation(
  options?: MutationHookOptions<
    ClientAgentsListMutationData,
    Error,
    ClientAgentsListMutationVariables
  >,
): UseMutationResult<
  ClientAgentsListMutationData,
  Error,
  ClientAgentsListMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientAgentsListMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientAgentsList(): MutationKey {
  return ["@gleanwork/api-client", "agents", "list"];
}

export function buildClientAgentsListMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientAgentsListMutationVariables,
  ) => Promise<ClientAgentsListMutationData>;
} {
  return {
    mutationKey: mutationKeyClientAgentsList(),
    mutationFn: function clientAgentsListMutationFn({
      requestBody,
      timezoneOffset,
      options,
    }): Promise<ClientAgentsListMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientAgentsList(
        client$,
        requestBody,
        timezoneOffset,
        mergedOptions,
      ));
    },
  };
}
