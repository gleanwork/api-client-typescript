/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientAgentsRetrieve } from "../funcs/clientAgentsRetrieve.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ClientAgentsRetrieveQueryData = components.Agent;

/**
 * Get Agent
 *
 * @remarks
 * Get an agent by ID. This endpoint implements the LangChain Agent Protocol, specifically part of the Agents stage (https://langchain-ai.github.io/agent-protocol/api.html#tag/agents/GET/agents/{agent_id}). It adheres to the standard contract defined for agent interoperability and can be used by agent runtimes that support the Agent Protocol.
 */
export function useClientAgentsRetrieve(
  agentId: string,
  timezoneOffset?: number | undefined,
  options?: QueryHookOptions<ClientAgentsRetrieveQueryData>,
): UseQueryResult<ClientAgentsRetrieveQueryData, Error> {
  const client = useGleanContext();
  return useQuery({
    ...buildClientAgentsRetrieveQuery(
      client,
      agentId,
      timezoneOffset,
      options,
    ),
    ...options,
  });
}

/**
 * Get Agent
 *
 * @remarks
 * Get an agent by ID. This endpoint implements the LangChain Agent Protocol, specifically part of the Agents stage (https://langchain-ai.github.io/agent-protocol/api.html#tag/agents/GET/agents/{agent_id}). It adheres to the standard contract defined for agent interoperability and can be used by agent runtimes that support the Agent Protocol.
 */
export function useClientAgentsRetrieveSuspense(
  agentId: string,
  timezoneOffset?: number | undefined,
  options?: SuspenseQueryHookOptions<ClientAgentsRetrieveQueryData>,
): UseSuspenseQueryResult<ClientAgentsRetrieveQueryData, Error> {
  const client = useGleanContext();
  return useSuspenseQuery({
    ...buildClientAgentsRetrieveQuery(
      client,
      agentId,
      timezoneOffset,
      options,
    ),
    ...options,
  });
}

export function prefetchClientAgentsRetrieve(
  queryClient: QueryClient,
  client$: GleanCore,
  agentId: string,
  timezoneOffset?: number | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildClientAgentsRetrieveQuery(
      client$,
      agentId,
      timezoneOffset,
    ),
  });
}

export function setClientAgentsRetrieveData(
  client: QueryClient,
  queryKeyBase: [
    agentId: string,
    parameters: { timezoneOffset?: number | undefined },
  ],
  data: ClientAgentsRetrieveQueryData,
): ClientAgentsRetrieveQueryData | undefined {
  const key = queryKeyClientAgentsRetrieve(...queryKeyBase);

  return client.setQueryData<ClientAgentsRetrieveQueryData>(key, data);
}

export function invalidateClientAgentsRetrieve(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [agentId: string, parameters: { timezoneOffset?: number | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "agents", "retrieve", ...queryKeyBase],
  });
}

export function invalidateAllClientAgentsRetrieve(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "agents", "retrieve"],
  });
}

export function buildClientAgentsRetrieveQuery(
  client$: GleanCore,
  agentId: string,
  timezoneOffset?: number | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ClientAgentsRetrieveQueryData>;
} {
  return {
    queryKey: queryKeyClientAgentsRetrieve(agentId, { timezoneOffset }),
    queryFn: async function clientAgentsRetrieveQueryFn(
      ctx,
    ): Promise<ClientAgentsRetrieveQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(clientAgentsRetrieve(
        client$,
        agentId,
        timezoneOffset,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyClientAgentsRetrieve(
  agentId: string,
  parameters: { timezoneOffset?: number | undefined },
): QueryKey {
  return ["@gleanwork/api-client", "agents", "retrieve", agentId, parameters];
}
