/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientAgentsRun } from "../funcs/clientAgentsRun.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientAgentsRunMutationVariables = {
  request: components.AgentRunCreate;
  options?: RequestOptions;
};

export type ClientAgentsRunMutationData = components.AgentRunWaitResponse;

/**
 * Create Run, Wait for Output
 *
 * @remarks
 * Creates and triggers a run of an agent. Waits for final output and then returns it. This endpoint implements the LangChain Agent Protocol, specifically part of the Runs stage (https://langchain-ai.github.io/agent-protocol/api.html#tag/runs/POST/runs/wait). It adheres to the standard contract defined for agent interoperability and can be used by agent runtimes that support the Agent Protocol. Note that running agents that reference third party platform write actions is unsupported as it requires user confirmation.
 */
export function useClientAgentsRunMutation(
  options?: MutationHookOptions<
    ClientAgentsRunMutationData,
    Error,
    ClientAgentsRunMutationVariables
  >,
): UseMutationResult<
  ClientAgentsRunMutationData,
  Error,
  ClientAgentsRunMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientAgentsRunMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientAgentsRun(): MutationKey {
  return ["@gleanwork/api-client", "agents", "run"];
}

export function buildClientAgentsRunMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientAgentsRunMutationVariables,
  ) => Promise<ClientAgentsRunMutationData>;
} {
  return {
    mutationKey: mutationKeyClientAgentsRun(),
    mutationFn: function clientAgentsRunMutationFn({
      request,
      options,
    }): Promise<ClientAgentsRunMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientAgentsRun(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
