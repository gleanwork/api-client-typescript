/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientAgentsRunStream } from "../funcs/clientAgentsRunStream.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientAgentsRunStreamMutationVariables = {
  request: components.AgentRunCreate;
  options?: RequestOptions;
};

export type ClientAgentsRunStreamMutationData = string;

/**
 * Create Run, Stream Output
 *
 * @remarks
 * Creates and triggers a run of an agent. Streams the output in SSE format. This endpoint implements the LangChain Agent Protocol, specifically part of the Runs stage (https://langchain-ai.github.io/agent-protocol/api.html#tag/runs/POST/runs/stream). It adheres to the standard contract defined for agent interoperability and can be used by agent runtimes that support the Agent Protocol. Note that running agents that reference third party platform write actions is unsupported as it requires user confirmation.
 */
export function useClientAgentsRunStreamMutation(
  options?: MutationHookOptions<
    ClientAgentsRunStreamMutationData,
    Error,
    ClientAgentsRunStreamMutationVariables
  >,
): UseMutationResult<
  ClientAgentsRunStreamMutationData,
  Error,
  ClientAgentsRunStreamMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientAgentsRunStreamMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientAgentsRunStream(): MutationKey {
  return ["@gleanwork/api-client", "agents", "runStream"];
}

export function buildClientAgentsRunStreamMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientAgentsRunStreamMutationVariables,
  ) => Promise<ClientAgentsRunStreamMutationData>;
} {
  return {
    mutationKey: mutationKeyClientAgentsRunStream(),
    mutationFn: function clientAgentsRunStreamMutationFn({
      request,
      options,
    }): Promise<ClientAgentsRunStreamMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientAgentsRunStream(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
