/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientAnswersEdit } from "../funcs/clientAnswersEdit.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientAnswersEditMutationVariables = {
  editAnswerRequest: components.EditAnswerRequest;
  xGleanActAs?: string | undefined;
  xGleanAuthType?: string | undefined;
  options?: RequestOptions;
};

export type ClientAnswersEditMutationData = components.Answer;

/**
 * Update Answer
 *
 * @remarks
 * Update an existing user-generated Answer.
 */
export function useClientAnswersEditMutation(
  options?: MutationHookOptions<
    ClientAnswersEditMutationData,
    Error,
    ClientAnswersEditMutationVariables
  >,
): UseMutationResult<
  ClientAnswersEditMutationData,
  Error,
  ClientAnswersEditMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientAnswersEditMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientAnswersEdit(): MutationKey {
  return ["@gleanwork/api-client", "answers", "edit"];
}

export function buildClientAnswersEditMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientAnswersEditMutationVariables,
  ) => Promise<ClientAnswersEditMutationData>;
} {
  return {
    mutationKey: mutationKeyClientAnswersEdit(),
    mutationFn: function clientAnswersEditMutationFn({
      editAnswerRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    }): Promise<ClientAnswersEditMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientAnswersEdit(
        client$,
        editAnswerRequest,
        xGleanActAs,
        xGleanAuthType,
        mergedOptions,
      ));
    },
  };
}
