/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientAnswersGetBoard } from "../funcs/clientAnswersGetBoard.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientAnswersGetBoardMutationVariables = {
  request: operations.GetanswerboardRequest;
  options?: RequestOptions;
};

export type ClientAnswersGetBoardMutationData =
  components.GetAnswerBoardResponse;

/**
 * Read Answer Board
 *
 * @remarks
 * Read the details of an Answer Board given its ID. Does not fetch items in this Answer Board, use /listanswers instead.
 *
 * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export function useClientAnswersGetBoardMutation(
  options?: MutationHookOptions<
    ClientAnswersGetBoardMutationData,
    Error,
    ClientAnswersGetBoardMutationVariables
  >,
): UseMutationResult<
  ClientAnswersGetBoardMutationData,
  Error,
  ClientAnswersGetBoardMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientAnswersGetBoardMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientAnswersGetBoard(): MutationKey {
  return ["@gleanwork/api-client", "answers", "getBoard"];
}

export function buildClientAnswersGetBoardMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientAnswersGetBoardMutationVariables,
  ) => Promise<ClientAnswersGetBoardMutationData>;
} {
  return {
    mutationKey: mutationKeyClientAnswersGetBoard(),
    mutationFn: function clientAnswersGetBoardMutationFn({
      request,
      options,
    }): Promise<ClientAnswersGetBoardMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientAnswersGetBoard(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
