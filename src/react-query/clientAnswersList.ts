/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientAnswersList } from "../funcs/clientAnswersList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientAnswersListMutationVariables = {
  listAnswersRequest: components.ListAnswersRequest;
  xGleanActAs?: string | undefined;
  xGleanAuthType?: string | undefined;
  options?: RequestOptions;
};

export type ClientAnswersListMutationData = components.ListAnswersResponse;

/**
 * List Answers
 *
 * @remarks
 * List Answers created by the current user.
 */
export function useClientAnswersListMutation(
  options?: MutationHookOptions<
    ClientAnswersListMutationData,
    Error,
    ClientAnswersListMutationVariables
  >,
): UseMutationResult<
  ClientAnswersListMutationData,
  Error,
  ClientAnswersListMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientAnswersListMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientAnswersList(): MutationKey {
  return ["@gleanwork/api-client", "answers", "list"];
}

export function buildClientAnswersListMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientAnswersListMutationVariables,
  ) => Promise<ClientAnswersListMutationData>;
} {
  return {
    mutationKey: mutationKeyClientAnswersList(),
    mutationFn: function clientAnswersListMutationFn({
      listAnswersRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    }): Promise<ClientAnswersListMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientAnswersList(
        client$,
        listAnswersRequest,
        xGleanActAs,
        xGleanAuthType,
        mergedOptions,
      ));
    },
  };
}
