/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientChatFilesDelete } from "../funcs/clientChatFilesDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientChatFilesDeleteMutationVariables = {
  deleteChatFilesRequest: components.DeleteChatFilesRequest;
  timezoneOffset?: number | undefined;
  options?: RequestOptions;
};

export type ClientChatFilesDeleteMutationData = void;

/**
 * Delete files uploaded by a user for chat.
 *
 * @remarks
 * Delete files uploaded by a user for Chat.
 */
export function useClientChatFilesDeleteMutation(
  options?: MutationHookOptions<
    ClientChatFilesDeleteMutationData,
    Error,
    ClientChatFilesDeleteMutationVariables
  >,
): UseMutationResult<
  ClientChatFilesDeleteMutationData,
  Error,
  ClientChatFilesDeleteMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientChatFilesDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientChatFilesDelete(): MutationKey {
  return ["@gleanwork/api-client", "files", "delete"];
}

export function buildClientChatFilesDeleteMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientChatFilesDeleteMutationVariables,
  ) => Promise<ClientChatFilesDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeyClientChatFilesDelete(),
    mutationFn: function clientChatFilesDeleteMutationFn({
      deleteChatFilesRequest,
      timezoneOffset,
      options,
    }): Promise<ClientChatFilesDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientChatFilesDelete(
        client$,
        deleteChatFilesRequest,
        timezoneOffset,
        mergedOptions,
      ));
    },
  };
}
