/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientChatList } from "../funcs/clientChatList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientChatListMutationVariables = {
  xGleanActAs?: string | undefined;
  xGleanAuthType?: string | undefined;
  timezoneOffset?: number | undefined;
  options?: RequestOptions;
};

export type ClientChatListMutationData = components.ListChatsResponse;

/**
 * Retrieves all saved Chats
 *
 * @remarks
 * Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
 */
export function useClientChatListMutation(
  options?: MutationHookOptions<
    ClientChatListMutationData,
    Error,
    ClientChatListMutationVariables
  >,
): UseMutationResult<
  ClientChatListMutationData,
  Error,
  ClientChatListMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientChatListMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientChatList(): MutationKey {
  return ["@gleanwork/api-client", "chat", "list"];
}

export function buildClientChatListMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientChatListMutationVariables,
  ) => Promise<ClientChatListMutationData>;
} {
  return {
    mutationKey: mutationKeyClientChatList(),
    mutationFn: function clientChatListMutationFn({
      xGleanActAs,
      xGleanAuthType,
      timezoneOffset,
      options,
    }): Promise<ClientChatListMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientChatList(
        client$,
        xGleanActAs,
        xGleanAuthType,
        timezoneOffset,
        mergedOptions,
      ));
    },
  };
}
