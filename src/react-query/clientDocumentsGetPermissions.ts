/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientDocumentsGetPermissions } from "../funcs/clientDocumentsGetPermissions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientDocumentsGetPermissionsMutationVariables = {
  request: components.GetDocPermissionsRequest;
  options?: RequestOptions;
};

export type ClientDocumentsGetPermissionsMutationData =
  components.GetDocPermissionsResponse;

/**
 * Read document permissions
 *
 * @remarks
 * Read the emails of all users who have access to the given document.
 */
export function useClientDocumentsGetPermissionsMutation(
  options?: MutationHookOptions<
    ClientDocumentsGetPermissionsMutationData,
    Error,
    ClientDocumentsGetPermissionsMutationVariables
  >,
): UseMutationResult<
  ClientDocumentsGetPermissionsMutationData,
  Error,
  ClientDocumentsGetPermissionsMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientDocumentsGetPermissionsMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientDocumentsGetPermissions(): MutationKey {
  return ["@gleanwork/api-client", "documents", "getPermissions"];
}

export function buildClientDocumentsGetPermissionsMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientDocumentsGetPermissionsMutationVariables,
  ) => Promise<ClientDocumentsGetPermissionsMutationData>;
} {
  return {
    mutationKey: mutationKeyClientDocumentsGetPermissions(),
    mutationFn: function clientDocumentsGetPermissionsMutationFn({
      request,
      options,
    }): Promise<ClientDocumentsGetPermissionsMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientDocumentsGetPermissions(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
