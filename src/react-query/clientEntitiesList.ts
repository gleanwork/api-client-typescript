/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientEntitiesList } from "../funcs/clientEntitiesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientEntitiesListMutationVariables = {
  listEntitiesRequest: components.ListEntitiesRequest;
  xGleanActAs?: string | undefined;
  xGleanAuthType?: string | undefined;
  options?: RequestOptions;
};

export type ClientEntitiesListMutationData = components.ListEntitiesResponse;

/**
 * List entities
 *
 * @remarks
 * List some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS. There is a limit of 10000 entities that can be retrieved via this endpoint.
 */
export function useClientEntitiesListMutation(
  options?: MutationHookOptions<
    ClientEntitiesListMutationData,
    Error,
    ClientEntitiesListMutationVariables
  >,
): UseMutationResult<
  ClientEntitiesListMutationData,
  Error,
  ClientEntitiesListMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientEntitiesListMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientEntitiesList(): MutationKey {
  return ["@gleanwork/api-client", "entities", "list"];
}

export function buildClientEntitiesListMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientEntitiesListMutationVariables,
  ) => Promise<ClientEntitiesListMutationData>;
} {
  return {
    mutationKey: mutationKeyClientEntitiesList(),
    mutationFn: function clientEntitiesListMutationFn({
      listEntitiesRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    }): Promise<ClientEntitiesListMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientEntitiesList(
        client$,
        listEntitiesRequest,
        xGleanActAs,
        xGleanAuthType,
        mergedOptions,
      ));
    },
  };
}
