/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientGovernanceDataPoliciesDownload } from "../funcs/clientGovernanceDataPoliciesDownload.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ClientGovernanceDataPoliciesDownloadQueryData = string;

/**
 * Downloads violations CSV for policy.
 *
 * @remarks
 * Downloads CSV violations report for a specific policy id. This does not support continuous policies.
 */
export function useClientGovernanceDataPoliciesDownload(
  id: string,
  options?: QueryHookOptions<ClientGovernanceDataPoliciesDownloadQueryData>,
): UseQueryResult<ClientGovernanceDataPoliciesDownloadQueryData, Error> {
  const client = useGleanContext();
  return useQuery({
    ...buildClientGovernanceDataPoliciesDownloadQuery(
      client,
      id,
      options,
    ),
    ...options,
  });
}

/**
 * Downloads violations CSV for policy.
 *
 * @remarks
 * Downloads CSV violations report for a specific policy id. This does not support continuous policies.
 */
export function useClientGovernanceDataPoliciesDownloadSuspense(
  id: string,
  options?: SuspenseQueryHookOptions<
    ClientGovernanceDataPoliciesDownloadQueryData
  >,
): UseSuspenseQueryResult<
  ClientGovernanceDataPoliciesDownloadQueryData,
  Error
> {
  const client = useGleanContext();
  return useSuspenseQuery({
    ...buildClientGovernanceDataPoliciesDownloadQuery(
      client,
      id,
      options,
    ),
    ...options,
  });
}

export function prefetchClientGovernanceDataPoliciesDownload(
  queryClient: QueryClient,
  client$: GleanCore,
  id: string,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildClientGovernanceDataPoliciesDownloadQuery(
      client$,
      id,
    ),
  });
}

export function setClientGovernanceDataPoliciesDownloadData(
  client: QueryClient,
  queryKeyBase: [id: string],
  data: ClientGovernanceDataPoliciesDownloadQueryData,
): ClientGovernanceDataPoliciesDownloadQueryData | undefined {
  const key = queryKeyClientGovernanceDataPoliciesDownload(...queryKeyBase);

  return client.setQueryData<ClientGovernanceDataPoliciesDownloadQueryData>(
    key,
    data,
  );
}

export function invalidateClientGovernanceDataPoliciesDownload(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[id: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gleanwork/api-client",
      "policies",
      "download",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllClientGovernanceDataPoliciesDownload(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "policies", "download"],
  });
}

export function buildClientGovernanceDataPoliciesDownloadQuery(
  client$: GleanCore,
  id: string,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ClientGovernanceDataPoliciesDownloadQueryData>;
} {
  return {
    queryKey: queryKeyClientGovernanceDataPoliciesDownload(id),
    queryFn: async function clientGovernanceDataPoliciesDownloadQueryFn(
      ctx,
    ): Promise<ClientGovernanceDataPoliciesDownloadQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(clientGovernanceDataPoliciesDownload(
        client$,
        id,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyClientGovernanceDataPoliciesDownload(
  id: string,
): QueryKey {
  return ["@gleanwork/api-client", "policies", "download", id];
}
