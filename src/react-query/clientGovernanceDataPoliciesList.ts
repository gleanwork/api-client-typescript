/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientGovernanceDataPoliciesList } from "../funcs/clientGovernanceDataPoliciesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ClientGovernanceDataPoliciesListQueryData =
  components.ListDlpReportsResponse;

/**
 * Lists policies.
 *
 * @remarks
 * Lists policies with filtering.
 */
export function useClientGovernanceDataPoliciesList(
  autoHide?: boolean | undefined,
  frequency?: string | undefined,
  options?: QueryHookOptions<ClientGovernanceDataPoliciesListQueryData>,
): UseQueryResult<ClientGovernanceDataPoliciesListQueryData, Error> {
  const client = useGleanContext();
  return useQuery({
    ...buildClientGovernanceDataPoliciesListQuery(
      client,
      autoHide,
      frequency,
      options,
    ),
    ...options,
  });
}

/**
 * Lists policies.
 *
 * @remarks
 * Lists policies with filtering.
 */
export function useClientGovernanceDataPoliciesListSuspense(
  autoHide?: boolean | undefined,
  frequency?: string | undefined,
  options?: SuspenseQueryHookOptions<ClientGovernanceDataPoliciesListQueryData>,
): UseSuspenseQueryResult<ClientGovernanceDataPoliciesListQueryData, Error> {
  const client = useGleanContext();
  return useSuspenseQuery({
    ...buildClientGovernanceDataPoliciesListQuery(
      client,
      autoHide,
      frequency,
      options,
    ),
    ...options,
  });
}

export function prefetchClientGovernanceDataPoliciesList(
  queryClient: QueryClient,
  client$: GleanCore,
  autoHide?: boolean | undefined,
  frequency?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildClientGovernanceDataPoliciesListQuery(
      client$,
      autoHide,
      frequency,
    ),
  });
}

export function setClientGovernanceDataPoliciesListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      autoHide?: boolean | undefined;
      frequency?: string | undefined;
    },
  ],
  data: ClientGovernanceDataPoliciesListQueryData,
): ClientGovernanceDataPoliciesListQueryData | undefined {
  const key = queryKeyClientGovernanceDataPoliciesList(...queryKeyBase);

  return client.setQueryData<ClientGovernanceDataPoliciesListQueryData>(
    key,
    data,
  );
}

export function invalidateClientGovernanceDataPoliciesList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      autoHide?: boolean | undefined;
      frequency?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "policies", "list", ...queryKeyBase],
  });
}

export function invalidateAllClientGovernanceDataPoliciesList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "policies", "list"],
  });
}

export function buildClientGovernanceDataPoliciesListQuery(
  client$: GleanCore,
  autoHide?: boolean | undefined,
  frequency?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ClientGovernanceDataPoliciesListQueryData>;
} {
  return {
    queryKey: queryKeyClientGovernanceDataPoliciesList({ autoHide, frequency }),
    queryFn: async function clientGovernanceDataPoliciesListQueryFn(
      ctx,
    ): Promise<ClientGovernanceDataPoliciesListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(clientGovernanceDataPoliciesList(
        client$,
        autoHide,
        frequency,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyClientGovernanceDataPoliciesList(
  parameters: {
    autoHide?: boolean | undefined;
    frequency?: string | undefined;
  },
): QueryKey {
  return ["@gleanwork/api-client", "policies", "list", parameters];
}
