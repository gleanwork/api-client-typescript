/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientGovernanceDataPoliciesRetrieve } from "../funcs/clientGovernanceDataPoliciesRetrieve.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ClientGovernanceDataPoliciesRetrieveQueryData =
  components.GetDlpReportResponse;

/**
 * Gets specified Policy.
 *
 * @remarks
 * Fetches the specified policy version, or the latest if no version is provided.
 */
export function useClientGovernanceDataPoliciesRetrieve(
  id: string,
  version?: number | undefined,
  options?: QueryHookOptions<ClientGovernanceDataPoliciesRetrieveQueryData>,
): UseQueryResult<ClientGovernanceDataPoliciesRetrieveQueryData, Error> {
  const client = useGleanContext();
  return useQuery({
    ...buildClientGovernanceDataPoliciesRetrieveQuery(
      client,
      id,
      version,
      options,
    ),
    ...options,
  });
}

/**
 * Gets specified Policy.
 *
 * @remarks
 * Fetches the specified policy version, or the latest if no version is provided.
 */
export function useClientGovernanceDataPoliciesRetrieveSuspense(
  id: string,
  version?: number | undefined,
  options?: SuspenseQueryHookOptions<
    ClientGovernanceDataPoliciesRetrieveQueryData
  >,
): UseSuspenseQueryResult<
  ClientGovernanceDataPoliciesRetrieveQueryData,
  Error
> {
  const client = useGleanContext();
  return useSuspenseQuery({
    ...buildClientGovernanceDataPoliciesRetrieveQuery(
      client,
      id,
      version,
      options,
    ),
    ...options,
  });
}

export function prefetchClientGovernanceDataPoliciesRetrieve(
  queryClient: QueryClient,
  client$: GleanCore,
  id: string,
  version?: number | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildClientGovernanceDataPoliciesRetrieveQuery(
      client$,
      id,
      version,
    ),
  });
}

export function setClientGovernanceDataPoliciesRetrieveData(
  client: QueryClient,
  queryKeyBase: [id: string, parameters: { version?: number | undefined }],
  data: ClientGovernanceDataPoliciesRetrieveQueryData,
): ClientGovernanceDataPoliciesRetrieveQueryData | undefined {
  const key = queryKeyClientGovernanceDataPoliciesRetrieve(...queryKeyBase);

  return client.setQueryData<ClientGovernanceDataPoliciesRetrieveQueryData>(
    key,
    data,
  );
}

export function invalidateClientGovernanceDataPoliciesRetrieve(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [id: string, parameters: { version?: number | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gleanwork/api-client",
      "policies",
      "retrieve",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllClientGovernanceDataPoliciesRetrieve(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "policies", "retrieve"],
  });
}

export function buildClientGovernanceDataPoliciesRetrieveQuery(
  client$: GleanCore,
  id: string,
  version?: number | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ClientGovernanceDataPoliciesRetrieveQueryData>;
} {
  return {
    queryKey: queryKeyClientGovernanceDataPoliciesRetrieve(id, { version }),
    queryFn: async function clientGovernanceDataPoliciesRetrieveQueryFn(
      ctx,
    ): Promise<ClientGovernanceDataPoliciesRetrieveQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(clientGovernanceDataPoliciesRetrieve(
        client$,
        id,
        version,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyClientGovernanceDataPoliciesRetrieve(
  id: string,
  parameters: { version?: number | undefined },
): QueryKey {
  return ["@gleanwork/api-client", "policies", "retrieve", id, parameters];
}
