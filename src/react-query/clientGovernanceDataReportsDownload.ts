/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientGovernanceDataReportsDownload } from "../funcs/clientGovernanceDataReportsDownload.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ClientGovernanceDataReportsDownloadQueryData = string;

/**
 * Downloads violations CSV for report.
 *
 * @remarks
 * Downloads CSV violations report for a specific report id.
 */
export function useClientGovernanceDataReportsDownload(
  id: string,
  options?: QueryHookOptions<ClientGovernanceDataReportsDownloadQueryData>,
): UseQueryResult<ClientGovernanceDataReportsDownloadQueryData, Error> {
  const client = useGleanContext();
  return useQuery({
    ...buildClientGovernanceDataReportsDownloadQuery(
      client,
      id,
      options,
    ),
    ...options,
  });
}

/**
 * Downloads violations CSV for report.
 *
 * @remarks
 * Downloads CSV violations report for a specific report id.
 */
export function useClientGovernanceDataReportsDownloadSuspense(
  id: string,
  options?: SuspenseQueryHookOptions<
    ClientGovernanceDataReportsDownloadQueryData
  >,
): UseSuspenseQueryResult<ClientGovernanceDataReportsDownloadQueryData, Error> {
  const client = useGleanContext();
  return useSuspenseQuery({
    ...buildClientGovernanceDataReportsDownloadQuery(
      client,
      id,
      options,
    ),
    ...options,
  });
}

export function prefetchClientGovernanceDataReportsDownload(
  queryClient: QueryClient,
  client$: GleanCore,
  id: string,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildClientGovernanceDataReportsDownloadQuery(
      client$,
      id,
    ),
  });
}

export function setClientGovernanceDataReportsDownloadData(
  client: QueryClient,
  queryKeyBase: [id: string],
  data: ClientGovernanceDataReportsDownloadQueryData,
): ClientGovernanceDataReportsDownloadQueryData | undefined {
  const key = queryKeyClientGovernanceDataReportsDownload(...queryKeyBase);

  return client.setQueryData<ClientGovernanceDataReportsDownloadQueryData>(
    key,
    data,
  );
}

export function invalidateClientGovernanceDataReportsDownload(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[id: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "reports", "download", ...queryKeyBase],
  });
}

export function invalidateAllClientGovernanceDataReportsDownload(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "reports", "download"],
  });
}

export function buildClientGovernanceDataReportsDownloadQuery(
  client$: GleanCore,
  id: string,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ClientGovernanceDataReportsDownloadQueryData>;
} {
  return {
    queryKey: queryKeyClientGovernanceDataReportsDownload(id),
    queryFn: async function clientGovernanceDataReportsDownloadQueryFn(
      ctx,
    ): Promise<ClientGovernanceDataReportsDownloadQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(clientGovernanceDataReportsDownload(
        client$,
        id,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyClientGovernanceDataReportsDownload(
  id: string,
): QueryKey {
  return ["@gleanwork/api-client", "reports", "download", id];
}
