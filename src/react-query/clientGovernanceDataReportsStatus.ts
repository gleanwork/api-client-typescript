/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientGovernanceDataReportsStatus } from "../funcs/clientGovernanceDataReportsStatus.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ClientGovernanceDataReportsStatusQueryData =
  components.ReportStatusResponse;

/**
 * Fetches report run status.
 *
 * @remarks
 * Fetches the status of the run corresponding to the report-id.
 */
export function useClientGovernanceDataReportsStatus(
  id: string,
  options?: QueryHookOptions<ClientGovernanceDataReportsStatusQueryData>,
): UseQueryResult<ClientGovernanceDataReportsStatusQueryData, Error> {
  const client = useGleanContext();
  return useQuery({
    ...buildClientGovernanceDataReportsStatusQuery(
      client,
      id,
      options,
    ),
    ...options,
  });
}

/**
 * Fetches report run status.
 *
 * @remarks
 * Fetches the status of the run corresponding to the report-id.
 */
export function useClientGovernanceDataReportsStatusSuspense(
  id: string,
  options?: SuspenseQueryHookOptions<
    ClientGovernanceDataReportsStatusQueryData
  >,
): UseSuspenseQueryResult<ClientGovernanceDataReportsStatusQueryData, Error> {
  const client = useGleanContext();
  return useSuspenseQuery({
    ...buildClientGovernanceDataReportsStatusQuery(
      client,
      id,
      options,
    ),
    ...options,
  });
}

export function prefetchClientGovernanceDataReportsStatus(
  queryClient: QueryClient,
  client$: GleanCore,
  id: string,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildClientGovernanceDataReportsStatusQuery(
      client$,
      id,
    ),
  });
}

export function setClientGovernanceDataReportsStatusData(
  client: QueryClient,
  queryKeyBase: [id: string],
  data: ClientGovernanceDataReportsStatusQueryData,
): ClientGovernanceDataReportsStatusQueryData | undefined {
  const key = queryKeyClientGovernanceDataReportsStatus(...queryKeyBase);

  return client.setQueryData<ClientGovernanceDataReportsStatusQueryData>(
    key,
    data,
  );
}

export function invalidateClientGovernanceDataReportsStatus(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[id: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "reports", "status", ...queryKeyBase],
  });
}

export function invalidateAllClientGovernanceDataReportsStatus(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "reports", "status"],
  });
}

export function buildClientGovernanceDataReportsStatusQuery(
  client$: GleanCore,
  id: string,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ClientGovernanceDataReportsStatusQueryData>;
} {
  return {
    queryKey: queryKeyClientGovernanceDataReportsStatus(id),
    queryFn: async function clientGovernanceDataReportsStatusQueryFn(
      ctx,
    ): Promise<ClientGovernanceDataReportsStatusQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(clientGovernanceDataReportsStatus(
        client$,
        id,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyClientGovernanceDataReportsStatus(
  id: string,
): QueryKey {
  return ["@gleanwork/api-client", "reports", "status", id];
}
