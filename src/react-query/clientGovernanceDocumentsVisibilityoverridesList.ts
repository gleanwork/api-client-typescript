/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientGovernanceDocumentsVisibilityoverridesList } from "../funcs/clientGovernanceDocumentsVisibilityoverridesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ClientGovernanceDocumentsVisibilityoverridesListQueryData =
  components.GetDocumentVisibilityOverridesResponse;

/**
 * Fetches documents visibility.
 *
 * @remarks
 * Fetches the visibility override status of the documents passed.
 */
export function useClientGovernanceDocumentsVisibilityoverridesList(
  docIds?: Array<string> | undefined,
  options?: QueryHookOptions<
    ClientGovernanceDocumentsVisibilityoverridesListQueryData
  >,
): UseQueryResult<
  ClientGovernanceDocumentsVisibilityoverridesListQueryData,
  Error
> {
  const client = useGleanContext();
  return useQuery({
    ...buildClientGovernanceDocumentsVisibilityoverridesListQuery(
      client,
      docIds,
      options,
    ),
    ...options,
  });
}

/**
 * Fetches documents visibility.
 *
 * @remarks
 * Fetches the visibility override status of the documents passed.
 */
export function useClientGovernanceDocumentsVisibilityoverridesListSuspense(
  docIds?: Array<string> | undefined,
  options?: SuspenseQueryHookOptions<
    ClientGovernanceDocumentsVisibilityoverridesListQueryData
  >,
): UseSuspenseQueryResult<
  ClientGovernanceDocumentsVisibilityoverridesListQueryData,
  Error
> {
  const client = useGleanContext();
  return useSuspenseQuery({
    ...buildClientGovernanceDocumentsVisibilityoverridesListQuery(
      client,
      docIds,
      options,
    ),
    ...options,
  });
}

export function prefetchClientGovernanceDocumentsVisibilityoverridesList(
  queryClient: QueryClient,
  client$: GleanCore,
  docIds?: Array<string> | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildClientGovernanceDocumentsVisibilityoverridesListQuery(
      client$,
      docIds,
    ),
  });
}

export function setClientGovernanceDocumentsVisibilityoverridesListData(
  client: QueryClient,
  queryKeyBase: [parameters: { docIds?: Array<string> | undefined }],
  data: ClientGovernanceDocumentsVisibilityoverridesListQueryData,
): ClientGovernanceDocumentsVisibilityoverridesListQueryData | undefined {
  const key = queryKeyClientGovernanceDocumentsVisibilityoverridesList(
    ...queryKeyBase,
  );

  return client.setQueryData<
    ClientGovernanceDocumentsVisibilityoverridesListQueryData
  >(key, data);
}

export function invalidateClientGovernanceDocumentsVisibilityoverridesList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { docIds?: Array<string> | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gleanwork/api-client",
      "visibilityoverrides",
      "list",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllClientGovernanceDocumentsVisibilityoverridesList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "visibilityoverrides", "list"],
  });
}

export function buildClientGovernanceDocumentsVisibilityoverridesListQuery(
  client$: GleanCore,
  docIds?: Array<string> | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ClientGovernanceDocumentsVisibilityoverridesListQueryData>;
} {
  return {
    queryKey: queryKeyClientGovernanceDocumentsVisibilityoverridesList({
      docIds,
    }),
    queryFn:
      async function clientGovernanceDocumentsVisibilityoverridesListQueryFn(
        ctx,
      ): Promise<ClientGovernanceDocumentsVisibilityoverridesListQueryData> {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(clientGovernanceDocumentsVisibilityoverridesList(
          client$,
          docIds,
          mergedOptions,
        ));
      },
  };
}

export function queryKeyClientGovernanceDocumentsVisibilityoverridesList(
  parameters: { docIds?: Array<string> | undefined },
): QueryKey {
  return ["@gleanwork/api-client", "visibilityoverrides", "list", parameters];
}
