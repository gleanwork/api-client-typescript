/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientImagesGet } from "../funcs/clientImagesGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ClientImagesGetQueryData = ReadableStream<Uint8Array>;

/**
 * Get image
 *
 * @remarks
 * Serves images of various types (profile pic, background, UGC thumnail/content, etc).
 */
export function useClientImagesGet(
  request: operations.ImagesRequest,
  options?: QueryHookOptions<ClientImagesGetQueryData>,
): UseQueryResult<ClientImagesGetQueryData, Error> {
  const client = useGleanContext();
  return useQuery({
    ...buildClientImagesGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get image
 *
 * @remarks
 * Serves images of various types (profile pic, background, UGC thumnail/content, etc).
 */
export function useClientImagesGetSuspense(
  request: operations.ImagesRequest,
  options?: SuspenseQueryHookOptions<ClientImagesGetQueryData>,
): UseSuspenseQueryResult<ClientImagesGetQueryData, Error> {
  const client = useGleanContext();
  return useSuspenseQuery({
    ...buildClientImagesGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchClientImagesGet(
  queryClient: QueryClient,
  client$: GleanCore,
  request: operations.ImagesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildClientImagesGetQuery(
      client$,
      request,
    ),
  });
}

export function setClientImagesGetData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      xGleanActAs?: string | undefined;
      xGleanAuthType?: string | undefined;
      key?: string | undefined;
      type?: components.ImageType | undefined;
      id?: string | undefined;
      ds?: string | undefined;
      cid?: string | undefined;
    },
  ],
  data: ClientImagesGetQueryData,
): ClientImagesGetQueryData | undefined {
  const key = queryKeyClientImagesGet(...queryKeyBase);

  return client.setQueryData<ClientImagesGetQueryData>(key, data);
}

export function invalidateClientImagesGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      xGleanActAs?: string | undefined;
      xGleanAuthType?: string | undefined;
      key?: string | undefined;
      type?: components.ImageType | undefined;
      id?: string | undefined;
      ds?: string | undefined;
      cid?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "images", "get", ...queryKeyBase],
  });
}

export function invalidateAllClientImagesGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gleanwork/api-client", "images", "get"],
  });
}

export function buildClientImagesGetQuery(
  client$: GleanCore,
  request: operations.ImagesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ClientImagesGetQueryData>;
} {
  return {
    queryKey: queryKeyClientImagesGet({
      xGleanActAs: request.xGleanActAs,
      xGleanAuthType: request.xGleanAuthType,
      key: request.key,
      type: request.type,
      id: request.id,
      ds: request.ds,
      cid: request.cid,
    }),
    queryFn: async function clientImagesGetQueryFn(
      ctx,
    ): Promise<ClientImagesGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(clientImagesGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyClientImagesGet(
  parameters: {
    xGleanActAs?: string | undefined;
    xGleanAuthType?: string | undefined;
    key?: string | undefined;
    type?: components.ImageType | undefined;
    id?: string | undefined;
    ds?: string | undefined;
    cid?: string | undefined;
  },
): QueryKey {
  return ["@gleanwork/api-client", "images", "get", parameters];
}
