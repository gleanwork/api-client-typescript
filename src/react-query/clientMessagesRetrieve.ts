/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientMessagesRetrieve } from "../funcs/clientMessagesRetrieve.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientMessagesRetrieveMutationVariables = {
  request: components.MessagesRequest;
  options?: RequestOptions;
};

export type ClientMessagesRetrieveMutationData = components.MessagesResponse;

/**
 * Read messages
 *
 * @remarks
 * Retrieves list of messages from messaging/chat datasources (e.g. Slack, Teams).
 */
export function useClientMessagesRetrieveMutation(
  options?: MutationHookOptions<
    ClientMessagesRetrieveMutationData,
    Error,
    ClientMessagesRetrieveMutationVariables
  >,
): UseMutationResult<
  ClientMessagesRetrieveMutationData,
  Error,
  ClientMessagesRetrieveMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientMessagesRetrieveMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientMessagesRetrieve(): MutationKey {
  return ["@gleanwork/api-client", "messages", "retrieve"];
}

export function buildClientMessagesRetrieveMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientMessagesRetrieveMutationVariables,
  ) => Promise<ClientMessagesRetrieveMutationData>;
} {
  return {
    mutationKey: mutationKeyClientMessagesRetrieve(),
    mutationFn: function clientMessagesRetrieveMutationFn({
      request,
      options,
    }): Promise<ClientMessagesRetrieveMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientMessagesRetrieve(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
