/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientUserAddCredential } from "../funcs/clientUserAddCredential.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientUserAddCredentialMutationVariables = {
  request: operations.AddcredentialRequest;
  options?: RequestOptions;
};

export type ClientUserAddCredentialMutationData = void;

/**
 * Create credentials
 *
 * @remarks
 * API to save a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example
 */
export function useClientUserAddCredentialMutation(
  options?: MutationHookOptions<
    ClientUserAddCredentialMutationData,
    Error,
    ClientUserAddCredentialMutationVariables
  >,
): UseMutationResult<
  ClientUserAddCredentialMutationData,
  Error,
  ClientUserAddCredentialMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientUserAddCredentialMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientUserAddCredential(): MutationKey {
  return ["@gleanwork/api-client", "user", "addCredential"];
}

export function buildClientUserAddCredentialMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientUserAddCredentialMutationVariables,
  ) => Promise<ClientUserAddCredentialMutationData>;
} {
  return {
    mutationKey: mutationKeyClientUserAddCredential(),
    mutationFn: function clientUserAddCredentialMutationFn({
      request,
      options,
    }): Promise<ClientUserAddCredentialMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientUserAddCredential(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
