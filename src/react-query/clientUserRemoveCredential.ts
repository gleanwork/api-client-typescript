/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientUserRemoveCredential } from "../funcs/clientUserRemoveCredential.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientUserRemoveCredentialMutationVariables = {
  request: operations.RemovecredentialRequest;
  options?: RequestOptions;
};

export type ClientUserRemoveCredentialMutationData = void;

/**
 * Delete credentials
 *
 * @remarks
 * Delete a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example
 */
export function useClientUserRemoveCredentialMutation(
  options?: MutationHookOptions<
    ClientUserRemoveCredentialMutationData,
    Error,
    ClientUserRemoveCredentialMutationVariables
  >,
): UseMutationResult<
  ClientUserRemoveCredentialMutationData,
  Error,
  ClientUserRemoveCredentialMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientUserRemoveCredentialMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientUserRemoveCredential(): MutationKey {
  return ["@gleanwork/api-client", "user", "removeCredential"];
}

export function buildClientUserRemoveCredentialMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientUserRemoveCredentialMutationVariables,
  ) => Promise<ClientUserRemoveCredentialMutationData>;
} {
  return {
    mutationKey: mutationKeyClientUserRemoveCredential(),
    mutationFn: function clientUserRemoveCredentialMutationFn({
      request,
      options,
    }): Promise<ClientUserRemoveCredentialMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientUserRemoveCredential(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
