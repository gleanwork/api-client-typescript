/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { clientVerificationAddReminder } from "../funcs/clientVerificationAddReminder.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ClientVerificationAddReminderMutationVariables = {
  reminderRequest: components.ReminderRequest;
  xGleanActAs?: string | undefined;
  xGleanAuthType?: string | undefined;
  options?: RequestOptions;
};

export type ClientVerificationAddReminderMutationData = components.Verification;

/**
 * Create verification
 *
 * @remarks
 * Creates a verification reminder for the document. Users can create verification reminders from different product surfaces.
 */
export function useClientVerificationAddReminderMutation(
  options?: MutationHookOptions<
    ClientVerificationAddReminderMutationData,
    Error,
    ClientVerificationAddReminderMutationVariables
  >,
): UseMutationResult<
  ClientVerificationAddReminderMutationData,
  Error,
  ClientVerificationAddReminderMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildClientVerificationAddReminderMutation(client, options),
    ...options,
  });
}

export function mutationKeyClientVerificationAddReminder(): MutationKey {
  return ["@gleanwork/api-client", "verification", "addReminder"];
}

export function buildClientVerificationAddReminderMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ClientVerificationAddReminderMutationVariables,
  ) => Promise<ClientVerificationAddReminderMutationData>;
} {
  return {
    mutationKey: mutationKeyClientVerificationAddReminder(),
    mutationFn: function clientVerificationAddReminderMutationFn({
      reminderRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    }): Promise<ClientVerificationAddReminderMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(clientVerificationAddReminder(
        client$,
        reminderRequest,
        xGleanActAs,
        xGleanAuthType,
        mergedOptions,
      ));
    },
  };
}
