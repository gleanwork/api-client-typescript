/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingAuthenticationRotateToken } from "../funcs/indexingAuthenticationRotateToken.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingAuthenticationRotateTokenMutationVariables = {
  options?: RequestOptions;
};

export type IndexingAuthenticationRotateTokenMutationData =
  components.RotateTokenResponse;

/**
 * Rotate token
 *
 * @remarks
 * Rotates the secret value inside the Indexing API token and returns the new raw secret. All other properties of the token are unchanged. In order to rotate the secret value, include the token as the bearer token in the `/rotatetoken` request. Please refer to [Token rotation](https://developers.glean.com/docs/indexing_api_token_rotation/) documentation for more information.
 */
export function useIndexingAuthenticationRotateTokenMutation(
  options?: MutationHookOptions<
    IndexingAuthenticationRotateTokenMutationData,
    Error,
    IndexingAuthenticationRotateTokenMutationVariables
  >,
): UseMutationResult<
  IndexingAuthenticationRotateTokenMutationData,
  Error,
  IndexingAuthenticationRotateTokenMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingAuthenticationRotateTokenMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingAuthenticationRotateToken(): MutationKey {
  return ["@gleanwork/api-client", "authentication", "rotateToken"];
}

export function buildIndexingAuthenticationRotateTokenMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingAuthenticationRotateTokenMutationVariables,
  ) => Promise<IndexingAuthenticationRotateTokenMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingAuthenticationRotateToken(),
    mutationFn: function indexingAuthenticationRotateTokenMutationFn({
      options,
    }): Promise<IndexingAuthenticationRotateTokenMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingAuthenticationRotateToken(
        client$,
        mergedOptions,
      ));
    },
  };
}
