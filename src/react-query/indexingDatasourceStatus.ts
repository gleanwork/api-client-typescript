/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingDatasourceStatus } from "../funcs/indexingDatasourceStatus.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingDatasourceStatusMutationVariables = {
  datasource: string;
  options?: RequestOptions;
};

export type IndexingDatasourceStatusMutationData =
  components.DebugDatasourceStatusResponse;

/**
 * Beta: Get datasource status
 *
 * @remarks
 * Gather information about the datasource's overall status. Currently in beta, might undergo breaking changes without prior notice.
 *
 * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
 */
export function useIndexingDatasourceStatusMutation(
  options?: MutationHookOptions<
    IndexingDatasourceStatusMutationData,
    Error,
    IndexingDatasourceStatusMutationVariables
  >,
): UseMutationResult<
  IndexingDatasourceStatusMutationData,
  Error,
  IndexingDatasourceStatusMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingDatasourceStatusMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingDatasourceStatus(): MutationKey {
  return ["@gleanwork/api-client", "datasource", "status"];
}

export function buildIndexingDatasourceStatusMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingDatasourceStatusMutationVariables,
  ) => Promise<IndexingDatasourceStatusMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingDatasourceStatus(),
    mutationFn: function indexingDatasourceStatusMutationFn({
      datasource,
      options,
    }): Promise<IndexingDatasourceStatusMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingDatasourceStatus(
        client$,
        datasource,
        mergedOptions,
      ));
    },
  };
}
