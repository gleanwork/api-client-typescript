/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingDocumentsProcessAll } from "../funcs/indexingDocumentsProcessAll.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingDocumentsProcessAllMutationVariables = {
  request?: components.ProcessAllDocumentsRequest | undefined;
  options?: RequestOptions;
};

export type IndexingDocumentsProcessAllMutationData = void;

/**
 * Schedules the processing of uploaded documents
 *
 * @remarks
 * Schedules the immediate processing of documents uploaded through the indexing API. By default the uploaded documents will be processed asynchronously but this API can be used to schedule processing of all documents on demand.
 *
 * If a `datasource` parameter is specified, processing is limited to that custom datasource. Without it, processing applies to all documents across all custom datasources.
 * #### Rate Limits
 * This endpoint is rate-limited to one usage every 3 hours. Exceeding this limit results in a 429 response code. Here's how the rate limit works:
 * 1. Calling `/processalldocuments` for datasource `foo` prevents another call for `foo` for 3 hours.
 * 2. Calling `/processalldocuments` for datasource `foo` doesn't affect immediate calls for `bar`.
 * 3. Calling `/processalldocuments` for all datasources prevents any datasource calls for 3 hours.
 * 4. Calling `/processalldocuments` for datasource `foo` doesn't affect immediate calls for all datasources.
 *
 * For more frequent document processing, contact Glean support.
 */
export function useIndexingDocumentsProcessAllMutation(
  options?: MutationHookOptions<
    IndexingDocumentsProcessAllMutationData,
    Error,
    IndexingDocumentsProcessAllMutationVariables
  >,
): UseMutationResult<
  IndexingDocumentsProcessAllMutationData,
  Error,
  IndexingDocumentsProcessAllMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingDocumentsProcessAllMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingDocumentsProcessAll(): MutationKey {
  return ["@gleanwork/api-client", "documents", "processAll"];
}

export function buildIndexingDocumentsProcessAllMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingDocumentsProcessAllMutationVariables,
  ) => Promise<IndexingDocumentsProcessAllMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingDocumentsProcessAll(),
    mutationFn: function indexingDocumentsProcessAllMutationFn({
      request,
      options,
    }): Promise<IndexingDocumentsProcessAllMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingDocumentsProcessAll(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
