/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingDocumentsStatus } from "../funcs/indexingDocumentsStatus.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingDocumentsStatusMutationVariables = {
  request: components.GetDocumentStatusRequest;
  options?: RequestOptions;
};

export type IndexingDocumentsStatusMutationData =
  components.GetDocumentStatusResponse;

/**
 * Get document upload and indexing status
 *
 * @remarks
 * Intended for debugging/validation. Fetches the current upload and indexing status of documents.
 *
 * Tip: Use [/debug/{datasource}/document](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-document) for richer information.
 *
 * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export function useIndexingDocumentsStatusMutation(
  options?: MutationHookOptions<
    IndexingDocumentsStatusMutationData,
    Error,
    IndexingDocumentsStatusMutationVariables
  >,
): UseMutationResult<
  IndexingDocumentsStatusMutationData,
  Error,
  IndexingDocumentsStatusMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingDocumentsStatusMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingDocumentsStatus(): MutationKey {
  return ["@gleanwork/api-client", "documents", "status"];
}

export function buildIndexingDocumentsStatusMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingDocumentsStatusMutationVariables,
  ) => Promise<IndexingDocumentsStatusMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingDocumentsStatus(),
    mutationFn: function indexingDocumentsStatusMutationFn({
      request,
      options,
    }): Promise<IndexingDocumentsStatusMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingDocumentsStatus(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
