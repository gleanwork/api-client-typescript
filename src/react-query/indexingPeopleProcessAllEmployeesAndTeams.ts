/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingPeopleProcessAllEmployeesAndTeams } from "../funcs/indexingPeopleProcessAllEmployeesAndTeams.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingPeopleProcessAllEmployeesAndTeamsMutationVariables = {
  options?: RequestOptions;
};

export type IndexingPeopleProcessAllEmployeesAndTeamsMutationData = void;

/**
 * Schedules the processing of uploaded employees and teams
 *
 * @remarks
 * Schedules the immediate processing of employees and teams uploaded through the indexing API. By default all uploaded people data will be processed asynchronously but this API can be used to schedule its processing on demand.
 */
export function useIndexingPeopleProcessAllEmployeesAndTeamsMutation(
  options?: MutationHookOptions<
    IndexingPeopleProcessAllEmployeesAndTeamsMutationData,
    Error,
    IndexingPeopleProcessAllEmployeesAndTeamsMutationVariables
  >,
): UseMutationResult<
  IndexingPeopleProcessAllEmployeesAndTeamsMutationData,
  Error,
  IndexingPeopleProcessAllEmployeesAndTeamsMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingPeopleProcessAllEmployeesAndTeamsMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingPeopleProcessAllEmployeesAndTeams(): MutationKey {
  return ["@gleanwork/api-client", "people", "processAllEmployeesAndTeams"];
}

export function buildIndexingPeopleProcessAllEmployeesAndTeamsMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingPeopleProcessAllEmployeesAndTeamsMutationVariables,
  ) => Promise<IndexingPeopleProcessAllEmployeesAndTeamsMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingPeopleProcessAllEmployeesAndTeams(),
    mutationFn: function indexingPeopleProcessAllEmployeesAndTeamsMutationFn({
      options,
    }): Promise<IndexingPeopleProcessAllEmployeesAndTeamsMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingPeopleProcessAllEmployeesAndTeams(
        client$,
        mergedOptions,
      ));
    },
  };
}
