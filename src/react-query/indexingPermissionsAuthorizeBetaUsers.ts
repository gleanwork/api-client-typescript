/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingPermissionsAuthorizeBetaUsers } from "../funcs/indexingPermissionsAuthorizeBetaUsers.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingPermissionsAuthorizeBetaUsersMutationVariables = {
  request: components.GreenlistUsersRequest;
  options?: RequestOptions;
};

export type IndexingPermissionsAuthorizeBetaUsersMutationData = void;

/**
 * Beta users
 *
 * @remarks
 * Allow the datasource be visible to the specified beta users. The default behaviour is datasource being visible to all users if it is enabled and not visible to any user if it is not enabled.
 */
export function useIndexingPermissionsAuthorizeBetaUsersMutation(
  options?: MutationHookOptions<
    IndexingPermissionsAuthorizeBetaUsersMutationData,
    Error,
    IndexingPermissionsAuthorizeBetaUsersMutationVariables
  >,
): UseMutationResult<
  IndexingPermissionsAuthorizeBetaUsersMutationData,
  Error,
  IndexingPermissionsAuthorizeBetaUsersMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingPermissionsAuthorizeBetaUsersMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingPermissionsAuthorizeBetaUsers(): MutationKey {
  return ["@gleanwork/api-client", "permissions", "authorizeBetaUsers"];
}

export function buildIndexingPermissionsAuthorizeBetaUsersMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingPermissionsAuthorizeBetaUsersMutationVariables,
  ) => Promise<IndexingPermissionsAuthorizeBetaUsersMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingPermissionsAuthorizeBetaUsers(),
    mutationFn: function indexingPermissionsAuthorizeBetaUsersMutationFn({
      request,
      options,
    }): Promise<IndexingPermissionsAuthorizeBetaUsersMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingPermissionsAuthorizeBetaUsers(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
