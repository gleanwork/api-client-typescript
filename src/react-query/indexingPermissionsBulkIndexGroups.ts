/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingPermissionsBulkIndexGroups } from "../funcs/indexingPermissionsBulkIndexGroups.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingPermissionsBulkIndexGroupsMutationVariables = {
  request: components.BulkIndexGroupsRequest;
  options?: RequestOptions;
};

export type IndexingPermissionsBulkIndexGroupsMutationData = void;

/**
 * Bulk index groups
 *
 * @remarks
 * Replaces the groups in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
 */
export function useIndexingPermissionsBulkIndexGroupsMutation(
  options?: MutationHookOptions<
    IndexingPermissionsBulkIndexGroupsMutationData,
    Error,
    IndexingPermissionsBulkIndexGroupsMutationVariables
  >,
): UseMutationResult<
  IndexingPermissionsBulkIndexGroupsMutationData,
  Error,
  IndexingPermissionsBulkIndexGroupsMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingPermissionsBulkIndexGroupsMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingPermissionsBulkIndexGroups(): MutationKey {
  return ["@gleanwork/api-client", "permissions", "bulkIndexGroups"];
}

export function buildIndexingPermissionsBulkIndexGroupsMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingPermissionsBulkIndexGroupsMutationVariables,
  ) => Promise<IndexingPermissionsBulkIndexGroupsMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingPermissionsBulkIndexGroups(),
    mutationFn: function indexingPermissionsBulkIndexGroupsMutationFn({
      request,
      options,
    }): Promise<IndexingPermissionsBulkIndexGroupsMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingPermissionsBulkIndexGroups(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
