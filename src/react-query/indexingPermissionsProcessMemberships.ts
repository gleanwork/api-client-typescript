/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingPermissionsProcessMemberships } from "../funcs/indexingPermissionsProcessMemberships.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingPermissionsProcessMembershipsMutationVariables = {
  request?: components.ProcessAllMembershipsRequest | undefined;
  options?: RequestOptions;
};

export type IndexingPermissionsProcessMembershipsMutationData = void;

/**
 * Schedules the processing of group memberships
 *
 * @remarks
 * Schedules the immediate processing of all group memberships uploaded through the indexing API. By default the uploaded group memberships will be processed asynchronously but this API can be used to schedule processing of all memberships on demand.
 */
export function useIndexingPermissionsProcessMembershipsMutation(
  options?: MutationHookOptions<
    IndexingPermissionsProcessMembershipsMutationData,
    Error,
    IndexingPermissionsProcessMembershipsMutationVariables
  >,
): UseMutationResult<
  IndexingPermissionsProcessMembershipsMutationData,
  Error,
  IndexingPermissionsProcessMembershipsMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingPermissionsProcessMembershipsMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingPermissionsProcessMemberships(): MutationKey {
  return ["@gleanwork/api-client", "permissions", "processMemberships"];
}

export function buildIndexingPermissionsProcessMembershipsMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingPermissionsProcessMembershipsMutationVariables,
  ) => Promise<IndexingPermissionsProcessMembershipsMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingPermissionsProcessMemberships(),
    mutationFn: function indexingPermissionsProcessMembershipsMutationFn({
      request,
      options,
    }): Promise<IndexingPermissionsProcessMembershipsMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingPermissionsProcessMemberships(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
