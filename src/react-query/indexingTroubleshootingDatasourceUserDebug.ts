/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GleanCore } from "../core.js";
import { indexingTroubleshootingDatasourceUserDebug } from "../funcs/indexingTroubleshootingDatasourceUserDebug.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGleanContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IndexingTroubleshootingDatasourceUserDebugMutationVariables = {
  debugUserRequest: components.DebugUserRequest;
  datasource: string;
  options?: RequestOptions;
};

export type IndexingTroubleshootingDatasourceUserDebugMutationData =
  components.DebugUserResponse;

/**
 * Beta: Get user information
 *
 * @remarks
 * Gives various information that would help in debugging related to a particular user. Currently in beta, might undergo breaking changes without prior notice.
 *
 * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
 */
export function useIndexingTroubleshootingDatasourceUserDebugMutation(
  options?: MutationHookOptions<
    IndexingTroubleshootingDatasourceUserDebugMutationData,
    Error,
    IndexingTroubleshootingDatasourceUserDebugMutationVariables
  >,
): UseMutationResult<
  IndexingTroubleshootingDatasourceUserDebugMutationData,
  Error,
  IndexingTroubleshootingDatasourceUserDebugMutationVariables
> {
  const client = useGleanContext();
  return useMutation({
    ...buildIndexingTroubleshootingDatasourceUserDebugMutation(client, options),
    ...options,
  });
}

export function mutationKeyIndexingTroubleshootingDatasourceUserDebug(): MutationKey {
  return ["@gleanwork/api-client", "user", "debug"];
}

export function buildIndexingTroubleshootingDatasourceUserDebugMutation(
  client$: GleanCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IndexingTroubleshootingDatasourceUserDebugMutationVariables,
  ) => Promise<IndexingTroubleshootingDatasourceUserDebugMutationData>;
} {
  return {
    mutationKey: mutationKeyIndexingTroubleshootingDatasourceUserDebug(),
    mutationFn: function indexingTroubleshootingDatasourceUserDebugMutationFn({
      debugUserRequest,
      datasource,
      options,
    }): Promise<IndexingTroubleshootingDatasourceUserDebugMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(indexingTroubleshootingDatasourceUserDebug(
        client$,
        debugUserRequest,
        datasource,
        mergedOptions,
      ));
    },
  };
}
