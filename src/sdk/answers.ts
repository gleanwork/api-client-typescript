/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientAnswersCreate } from "../funcs/clientAnswersCreate.js";
import { clientAnswersDelete } from "../funcs/clientAnswersDelete.js";
import { clientAnswersList } from "../funcs/clientAnswersList.js";
import { clientAnswersRetrieve } from "../funcs/clientAnswersRetrieve.js";
import { clientAnswersUpdate } from "../funcs/clientAnswersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Answers extends ClientSDK {
  /**
   * Create Answer
   *
   * @remarks
   * Create a user-generated Answer that contains a question and answer.
   */
  async create(
    request: components.CreateAnswerRequest,
    options?: RequestOptions,
  ): Promise<components.Answer> {
    return unwrapAsync(clientAnswersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Answer
   *
   * @remarks
   * Delete an existing user-generated Answer.
   */
  async delete(
    request: components.DeleteAnswerRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientAnswersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Answer
   *
   * @remarks
   * Update an existing user-generated Answer.
   */
  async update(
    request: components.EditAnswerRequest,
    options?: RequestOptions,
  ): Promise<components.Answer> {
    return unwrapAsync(clientAnswersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Read Answer
   *
   * @remarks
   * Read the details of a particular Answer given its ID.
   */
  async retrieve(
    request: components.GetAnswerRequest,
    options?: RequestOptions,
  ): Promise<components.GetAnswerResponse> {
    return unwrapAsync(clientAnswersRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * List Answers
   *
   * @remarks
   * List Answers created by the current user.
   */
  async list(
    request: components.ListAnswersRequest,
    options?: RequestOptions,
  ): Promise<components.ListAnswersResponse> {
    return unwrapAsync(clientAnswersList(
      this,
      request,
      options,
    ));
  }
}
