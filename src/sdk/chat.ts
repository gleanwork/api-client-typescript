/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientChatCreate } from "../funcs/clientChatCreate.js";
import { clientChatCreateStream } from "../funcs/clientChatCreateStream.js";
import { clientChatDelete } from "../funcs/clientChatDelete.js";
import { clientChatDeleteAll } from "../funcs/clientChatDeleteAll.js";
import { clientChatList } from "../funcs/clientChatList.js";
import { clientChatRetrieve } from "../funcs/clientChatRetrieve.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Application } from "./application.js";
import { Files } from "./files.js";

export class Chat extends ClientSDK {
  private _application?: Application;
  get application(): Application {
    return (this._application ??= new Application(this._options));
  }

  private _files?: Files;
  get files(): Files {
    return (this._files ??= new Files(this._options));
  }

  /**
   * Chat
   *
   * @remarks
   * Have a conversation with Glean AI.
   */
  async create(
    chatRequest: components.ChatRequest,
    timezoneOffset?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.ChatResponse> {
    return unwrapAsync(clientChatCreate(
      this,
      chatRequest,
      timezoneOffset,
      options,
    ));
  }

  /**
   * Deletes all saved Chats owned by a user
   *
   * @remarks
   * Deletes all saved Chats a user has had and all their contained conversational content.
   */
  async deleteAll(
    timezoneOffset?: number | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientChatDeleteAll(
      this,
      timezoneOffset,
      options,
    ));
  }

  /**
   * Deletes saved Chats
   *
   * @remarks
   * Deletes saved Chats and all their contained conversational content.
   */
  async delete(
    deleteChatsRequest: components.DeleteChatsRequest,
    timezoneOffset?: number | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientChatDelete(
      this,
      deleteChatsRequest,
      timezoneOffset,
      options,
    ));
  }

  /**
   * Retrieves a Chat
   *
   * @remarks
   * Retrieves the chat history between Glean Assistant and the user for a given Chat.
   */
  async retrieve(
    getChatRequest: components.GetChatRequest,
    timezoneOffset?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.GetChatResponse> {
    return unwrapAsync(clientChatRetrieve(
      this,
      getChatRequest,
      timezoneOffset,
      options,
    ));
  }

  /**
   * Retrieves all saved Chats
   *
   * @remarks
   * Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
   */
  async list(
    timezoneOffset?: number | undefined,
    options?: RequestOptions,
  ): Promise<components.ListChatsResponse> {
    return unwrapAsync(clientChatList(
      this,
      timezoneOffset,
      options,
    ));
  }

  /**
   * Chat
   *
   * @remarks
   * Have a conversation with Glean AI.
   */
  async createStream(
    chatRequest: components.ChatRequest,
    timezoneOffset?: number | undefined,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(clientChatCreateStream(
      this,
      chatRequest,
      timezoneOffset,
      options,
    ));
  }
}
