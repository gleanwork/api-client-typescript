/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientChatDelete } from "../funcs/clientChatDelete.js";
import { clientChatDeleteAll } from "../funcs/clientChatDeleteAll.js";
import { clientChatDeleteFiles } from "../funcs/clientChatDeleteFiles.js";
import { clientChatGet } from "../funcs/clientChatGet.js";
import { clientChatGetApplication } from "../funcs/clientChatGetApplication.js";
import { clientChatGetFiles } from "../funcs/clientChatGetFiles.js";
import { clientChatList } from "../funcs/clientChatList.js";
import { clientChatStart } from "../funcs/clientChatStart.js";
import { clientChatUploadFiles } from "../funcs/clientChatUploadFiles.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Chat extends ClientSDK {
  /**
   * Chat
   *
   * @remarks
   * Have a conversation with Glean AI.
   */
  async start(
    request: operations.ChatRequest,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(clientChatStart(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes all saved Chats owned by a user
   *
   * @remarks
   * Deletes all saved Chats a user has had and all their contained conversational content.
   */
  async deleteAll(
    request: operations.DeleteallchatsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientChatDeleteAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes saved Chats
   *
   * @remarks
   * Deletes saved Chats and all their contained conversational content.
   */
  async delete(
    request: operations.DeletechatsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientChatDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a Chat
   *
   * @remarks
   * Retrieves the chat history between Glean Assistant and the user for a given Chat.
   */
  async get(
    request: operations.GetchatRequest,
    options?: RequestOptions,
  ): Promise<components.GetChatResponse> {
    return unwrapAsync(clientChatGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves all saved Chats
   *
   * @remarks
   * Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
   */
  async list(
    request: operations.ListchatsRequest,
    options?: RequestOptions,
  ): Promise<components.ListChatsResponse> {
    return unwrapAsync(clientChatList(
      this,
      request,
      options,
    ));
  }

  /**
   * Gets the metadata for a custom Chat application
   *
   * @remarks
   * Gets the Chat application details for the specified application ID.
   */
  async getApplication(
    request: operations.GetchatapplicationRequest,
    options?: RequestOptions,
  ): Promise<components.GetChatApplicationResponse> {
    return unwrapAsync(clientChatGetApplication(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload files for Chat.
   *
   * @remarks
   * Upload files for Chat.
   */
  async uploadFiles(
    request: operations.UploadchatfilesRequest,
    options?: RequestOptions,
  ): Promise<components.UploadChatFilesResponse> {
    return unwrapAsync(clientChatUploadFiles(
      this,
      request,
      options,
    ));
  }

  /**
   * Get files uploaded by a user for Chat.
   *
   * @remarks
   * Get files uploaded by a user for Chat.
   */
  async getFiles(
    request: operations.GetchatfilesRequest,
    options?: RequestOptions,
  ): Promise<components.GetChatFilesResponse> {
    return unwrapAsync(clientChatGetFiles(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete files uploaded by a user for chat.
   *
   * @remarks
   * Delete files uploaded by a user for Chat.
   */
  async deleteFiles(
    request: operations.DeletechatfilesRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientChatDeleteFiles(
      this,
      request,
      options,
    ));
  }
}
