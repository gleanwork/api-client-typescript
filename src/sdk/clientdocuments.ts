/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientDocumentsRetrieve } from "../funcs/clientDocumentsRetrieve.js";
import { clientDocumentsRetrieveByFacets } from "../funcs/clientDocumentsRetrieveByFacets.js";
import { clientDocumentsRetrievePermissions } from "../funcs/clientDocumentsRetrievePermissions.js";
import { clientDocumentsSummarize } from "../funcs/clientDocumentsSummarize.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ClientDocuments extends ClientSDK {
  /**
   * Read document permissions
   *
   * @remarks
   * Read the emails of all users who have access to the given document.
   */
  async retrievePermissions(
    request: components.GetDocPermissionsRequest,
    options?: RequestOptions,
  ): Promise<components.GetDocPermissionsResponse> {
    return unwrapAsync(clientDocumentsRetrievePermissions(
      this,
      request,
      options,
    ));
  }

  /**
   * Read documents
   *
   * @remarks
   * Read the documents including metadata (does not include enhanced metadata via `/documentmetadata`) for the given list of Glean Document IDs or URLs specified in the request.
   */
  async retrieve(
    request?: components.GetDocumentsRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.GetDocumentsResponse> {
    return unwrapAsync(clientDocumentsRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Read documents by facets
   *
   * @remarks
   * Read the documents including metadata (does not include enhanced metadata via `/documentmetadata`) macthing the given facet conditions.
   */
  async retrieveByFacets(
    request?: components.GetDocumentsByFacetsRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.GetDocumentsByFacetsResponse> {
    return unwrapAsync(clientDocumentsRetrieveByFacets(
      this,
      request,
      options,
    ));
  }

  /**
   * Summarize documents
   *
   * @remarks
   * Generate an AI summary of the requested documents.
   */
  async summarize(
    request: components.SummarizeRequest,
    options?: RequestOptions,
  ): Promise<components.SummarizeResponse> {
    return unwrapAsync(clientDocumentsSummarize(
      this,
      request,
      options,
    ));
  }
}
