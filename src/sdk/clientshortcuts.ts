/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientShortcutsCreate } from "../funcs/clientShortcutsCreate.js";
import { clientShortcutsDelete } from "../funcs/clientShortcutsDelete.js";
import { clientShortcutsList } from "../funcs/clientShortcutsList.js";
import { clientShortcutsRetrieve } from "../funcs/clientShortcutsRetrieve.js";
import { clientShortcutsUpdate } from "../funcs/clientShortcutsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ClientShortcuts extends ClientSDK {
  /**
   * Create shortcut
   *
   * @remarks
   * Create a user-generated shortcut that contains an alias and destination URL.
   */
  async create(
    request: components.CreateShortcutRequest,
    options?: RequestOptions,
  ): Promise<components.CreateShortcutResponse> {
    return unwrapAsync(clientShortcutsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete shortcut
   *
   * @remarks
   * Delete an existing user-generated shortcut.
   */
  async delete(
    request: components.DeleteShortcutRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientShortcutsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Read shortcut
   *
   * @remarks
   * Read a particular shortcut's details given its ID.
   */
  async retrieve(
    request: components.GetShortcutRequestUnion,
    options?: RequestOptions,
  ): Promise<components.GetShortcutResponse> {
    return unwrapAsync(clientShortcutsRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * List shortcuts
   *
   * @remarks
   * List shortcuts editable/owned by the currently authenticated user.
   */
  async list(
    request: components.ListShortcutsPaginatedRequest,
    options?: RequestOptions,
  ): Promise<components.ListShortcutsPaginatedResponse> {
    return unwrapAsync(clientShortcutsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Update shortcut
   *
   * @remarks
   * Updates the shortcut with the given ID.
   */
  async update(
    request: components.UpdateShortcutRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateShortcutResponse> {
    return unwrapAsync(clientShortcutsUpdate(
      this,
      request,
      options,
    ));
  }
}
