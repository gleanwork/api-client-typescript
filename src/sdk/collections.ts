/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientCollectionsAddItems } from "../funcs/clientCollectionsAddItems.js";
import { clientCollectionsCreate } from "../funcs/clientCollectionsCreate.js";
import { clientCollectionsDelete } from "../funcs/clientCollectionsDelete.js";
import { clientCollectionsDeleteItem } from "../funcs/clientCollectionsDeleteItem.js";
import { clientCollectionsEdit } from "../funcs/clientCollectionsEdit.js";
import { clientCollectionsEditItem } from "../funcs/clientCollectionsEditItem.js";
import { clientCollectionsGet } from "../funcs/clientCollectionsGet.js";
import { clientCollectionsList } from "../funcs/clientCollectionsList.js";
import { clientCollectionsMoveItem } from "../funcs/clientCollectionsMoveItem.js";
import { clientCollectionsPin } from "../funcs/clientCollectionsPin.js";
import { clientCollectionsUpdate } from "../funcs/clientCollectionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Collections extends ClientSDK {
  /**
   * Add Collection item
   *
   * @remarks
   * Add items to a Collection.
   */
  async addItems(
    request: operations.AddcollectionitemsRequest,
    options?: RequestOptions,
  ): Promise<components.AddCollectionItemsResponse> {
    return unwrapAsync(clientCollectionsAddItems(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Collection
   *
   * @remarks
   * Create a publicly visible (empty) Collection of documents.
   */
  async create(
    request: operations.CreatecollectionRequest,
    options?: RequestOptions,
  ): Promise<components.CreateCollectionResponse> {
    return unwrapAsync(clientCollectionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Collection
   *
   * @remarks
   * Delete a Collection given the Collection's ID.
   */
  async delete(
    request: operations.DeletecollectionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientCollectionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Collection item
   *
   * @remarks
   * Delete a single item from a Collection.
   */
  async deleteItem(
    request: operations.DeletecollectionitemRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteCollectionItemResponse> {
    return unwrapAsync(clientCollectionsDeleteItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Collection
   *
   * @remarks
   * Update the properties of an existing Collection.
   */
  async update(
    request: operations.EditcollectionRequest,
    options?: RequestOptions,
  ): Promise<components.EditCollectionResponse> {
    return unwrapAsync(clientCollectionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Collection item
   *
   * @remarks
   * Update the URL, Glean Document ID, description of an item within a Collection given its ID.
   */
  async editItem(
    request: operations.EditcollectionitemRequest,
    options?: RequestOptions,
  ): Promise<components.EditCollectionItemResponse> {
    return unwrapAsync(clientCollectionsEditItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Update document Collections
   *
   * @remarks
   * Update the Collections that a document belongs to.
   */
  async edit(
    request: operations.EditdocumentcollectionsRequest,
    options?: RequestOptions,
  ): Promise<components.EditDocumentCollectionsResponse> {
    return unwrapAsync(clientCollectionsEdit(
      this,
      request,
      options,
    ));
  }

  /**
   * Read Collection
   *
   * @remarks
   * Read the details of a Collection given its ID. Does not fetch items in this Collection.
   */
  async get(
    request: operations.GetcollectionRequest,
    options?: RequestOptions,
  ): Promise<components.GetCollectionResponse> {
    return unwrapAsync(clientCollectionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List Collections
   *
   * @remarks
   * List all existing Collections.
   */
  async list(
    request: operations.ListcollectionsRequest,
    options?: RequestOptions,
  ): Promise<components.ListCollectionsResponse> {
    return unwrapAsync(clientCollectionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Move Collection item
   *
   * @remarks
   * Reorder a Collection by moving a CollectionItem below another CollectionItem.
   */
  async moveItem(
    request: operations.MovecollectionitemRequest,
    options?: RequestOptions,
  ): Promise<components.MoveCollectionItemResponse> {
    return unwrapAsync(clientCollectionsMoveItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Pin Collection
   *
   * @remarks
   * Given the Collection id and category, pins the Collection to the home page for all company users.
   */
  async pin(
    request: operations.PincollectionRequest,
    options?: RequestOptions,
  ): Promise<components.GetCollectionResponse> {
    return unwrapAsync(clientCollectionsPin(
      this,
      request,
      options,
    ));
  }
}
