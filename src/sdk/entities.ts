/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientEntitiesList } from "../funcs/clientEntitiesList.js";
import { clientEntitiesReadPeople } from "../funcs/clientEntitiesReadPeople.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Entities extends ClientSDK {
  /**
   * List entities
   *
   * @remarks
   * List some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS. There is a limit of 10000 entities that can be retrieved via this endpoint.
   */
  async list(
    listEntitiesRequest: components.ListEntitiesRequest,
    xGleanActAs?: string | undefined,
    xGleanAuthType?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.ListEntitiesResponse> {
    return unwrapAsync(clientEntitiesList(
      this,
      listEntitiesRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    ));
  }

  /**
   * Read people
   *
   * @remarks
   * Read people details for the given IDs.
   */
  async readPeople(
    peopleRequest: components.PeopleRequest,
    xGleanActAs?: string | undefined,
    xGleanAuthType?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.PeopleResponse> {
    return unwrapAsync(clientEntitiesReadPeople(
      this,
      peopleRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    ));
  }
}
