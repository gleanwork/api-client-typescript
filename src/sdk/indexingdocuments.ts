/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { indexingDocumentsAddOrUpdate } from "../funcs/indexingDocumentsAddOrUpdate.js";
import { indexingDocumentsBulkIndex } from "../funcs/indexingDocumentsBulkIndex.js";
import { indexingDocumentsCheckAccess } from "../funcs/indexingDocumentsCheckAccess.js";
import { indexingDocumentsCount } from "../funcs/indexingDocumentsCount.js";
import { indexingDocumentsDebug } from "../funcs/indexingDocumentsDebug.js";
import { indexingDocumentsDebugMany } from "../funcs/indexingDocumentsDebugMany.js";
import { indexingDocumentsDelete } from "../funcs/indexingDocumentsDelete.js";
import { indexingDocumentsIndex } from "../funcs/indexingDocumentsIndex.js";
import { indexingDocumentsProcessAll } from "../funcs/indexingDocumentsProcessAll.js";
import { indexingDocumentsStatus } from "../funcs/indexingDocumentsStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class IndexingDocuments extends ClientSDK {
  /**
   * Index document
   *
   * @remarks
   * Adds a document to the index or updates an existing document.
   */
  async addOrUpdate(
    request: components.IndexDocumentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(indexingDocumentsAddOrUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Index documents
   *
   * @remarks
   * Adds or updates multiple documents in the index. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#choosing-indexdocuments-vs-bulkindexdocuments) documentation for an explanation of when to use this endpoint.
   */
  async index(
    request: components.IndexDocumentsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(indexingDocumentsIndex(
      this,
      request,
      options,
    ));
  }

  /**
   * Bulk index documents
   *
   * @remarks
   * Replaces the documents in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
   */
  async bulkIndex(
    request: components.BulkIndexDocumentsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(indexingDocumentsBulkIndex(
      this,
      request,
      options,
    ));
  }

  /**
   * Schedules the processing of uploaded documents
   *
   * @remarks
   * Schedules the immediate processing of documents uploaded through the indexing API. By default the uploaded documents will be processed asynchronously but this API can be used to schedule processing of all documents on demand.
   *
   * If a `datasource` parameter is specified, processing is limited to that custom datasource. Without it, processing applies to all documents across all custom datasources.
   * #### Rate Limits
   * This endpoint is rate-limited to one usage every 3 hours. Exceeding this limit results in a 429 response code. Here's how the rate limit works:
   * 1. Calling `/processalldocuments` for datasource `foo` prevents another call for `foo` for 3 hours.
   * 2. Calling `/processalldocuments` for datasource `foo` doesn't affect immediate calls for `bar`.
   * 3. Calling `/processalldocuments` for all datasources prevents any datasource calls for 3 hours.
   * 4. Calling `/processalldocuments` for datasource `foo` doesn't affect immediate calls for all datasources.
   *
   * For more frequent document processing, contact Glean support.
   */
  async processAll(
    request?: components.ProcessAllDocumentsRequest | undefined,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(indexingDocumentsProcessAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete document
   *
   * @remarks
   * Deletes the specified document from the index. Succeeds if document is not present.
   */
  async delete(
    request: components.DeleteDocumentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(indexingDocumentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Beta: Get document information
   *
   * @remarks
   * Gives various information that would help in debugging related to a particular document. Currently in beta, might undergo breaking changes without prior notice.
   *
   * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
   */
  async debug(
    debugDocumentRequest: components.DebugDocumentRequest,
    datasource: string,
    options?: RequestOptions,
  ): Promise<components.DebugDocumentResponse> {
    return unwrapAsync(indexingDocumentsDebug(
      this,
      debugDocumentRequest,
      datasource,
      options,
    ));
  }

  /**
   * Beta: Get information of a batch of documents
   *
   * @remarks
   * Gives various information that would help in debugging related to a batch of documents. Currently in beta, might undergo breaking changes without prior notice.
   *
   * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
   */
  async debugMany(
    debugDocumentsRequest: components.DebugDocumentsRequest,
    datasource: string,
    options?: RequestOptions,
  ): Promise<components.DebugDocumentsResponse> {
    return unwrapAsync(indexingDocumentsDebugMany(
      this,
      debugDocumentsRequest,
      datasource,
      options,
    ));
  }

  /**
   * Check document access
   *
   * @remarks
   * Check if a given user has access to access a document in a custom datasource
   *
   * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
   */
  async checkAccess(
    request: components.CheckDocumentAccessRequest,
    options?: RequestOptions,
  ): Promise<components.CheckDocumentAccessResponse> {
    return unwrapAsync(indexingDocumentsCheckAccess(
      this,
      request,
      options,
    ));
  }

  /**
   * Get document upload and indexing status
   *
   * @remarks
   * Intended for debugging/validation. Fetches the current upload and indexing status of documents.
   *
   * Tip: Use [/debug/{datasource}/document](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-document) for richer information.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async status(
    request: components.GetDocumentStatusRequest,
    options?: RequestOptions,
  ): Promise<components.GetDocumentStatusResponse> {
    return unwrapAsync(indexingDocumentsStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Get document count
   *
   * @remarks
   * Fetches document count for the specified custom datasource.
   *
   * Tip: Use [/debug/{datasource}/status](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-status) for richer information.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async count(
    request: components.GetDocumentCountRequest,
    options?: RequestOptions,
  ): Promise<components.GetDocumentCountResponse> {
    return unwrapAsync(indexingDocumentsCount(
      this,
      request,
      options,
    ));
  }
}
