/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientPinsCreate } from "../funcs/clientPinsCreate.js";
import { clientPinsEdit } from "../funcs/clientPinsEdit.js";
import { clientPinsGet } from "../funcs/clientPinsGet.js";
import { clientPinsList } from "../funcs/clientPinsList.js";
import { clientPinsRemove } from "../funcs/clientPinsRemove.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Pins extends ClientSDK {
  /**
   * Update pin
   *
   * @remarks
   * Update an existing user-generated pin.
   */
  async edit(
    request: components.EditPinRequest,
    options?: RequestOptions,
  ): Promise<components.PinDocument> {
    return unwrapAsync(clientPinsEdit(
      this,
      request,
      options,
    ));
  }

  /**
   * Read pin
   *
   * @remarks
   * Read pin details given its ID.
   */
  async get(
    request: components.GetPinRequest,
    options?: RequestOptions,
  ): Promise<components.GetPinResponse> {
    return unwrapAsync(clientPinsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List pins
   *
   * @remarks
   * Lists all pins.
   */
  async list(
    request: operations.ListpinsRequest,
    options?: RequestOptions,
  ): Promise<components.ListPinsResponse> {
    return unwrapAsync(clientPinsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create pin
   *
   * @remarks
   * Pin a document as a result for a given search query.Pin results that are known to be a good match.
   */
  async create(
    request: components.PinRequest,
    options?: RequestOptions,
  ): Promise<components.PinDocument> {
    return unwrapAsync(clientPinsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete pin
   *
   * @remarks
   * Unpin a previously pinned result.
   */
  async remove(
    request: components.Unpin,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(clientPinsRemove(
      this,
      request,
      options,
    ));
  }
}
