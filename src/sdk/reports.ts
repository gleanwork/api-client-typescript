/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientGovernanceDataReportsCreate } from "../funcs/clientGovernanceDataReportsCreate.js";
import { clientGovernanceDataReportsDownload } from "../funcs/clientGovernanceDataReportsDownload.js";
import { clientGovernanceDataReportsStatus } from "../funcs/clientGovernanceDataReportsStatus.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Reports extends ClientSDK {
  /**
   * Creates new one-time report.
   *
   * @remarks
   * Creates a new one-time report and executes its batch job.
   */
  async create(
    request: components.UpdateDlpConfigRequest,
    options?: RequestOptions,
  ): Promise<components.UpdateDlpConfigResponse> {
    return unwrapAsync(clientGovernanceDataReportsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Downloads violations CSV for report.
   *
   * @remarks
   * Downloads CSV violations report for a specific report id.
   */
  async download(
    id: string,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(clientGovernanceDataReportsDownload(
      this,
      id,
      options,
    ));
  }

  /**
   * Fetches report run status.
   *
   * @remarks
   * Fetches the status of the run corresponding to the report-id.
   */
  async status(
    id: string,
    options?: RequestOptions,
  ): Promise<components.ReportStatusResponse> {
    return unwrapAsync(clientGovernanceDataReportsStatus(
      this,
      id,
      options,
    ));
  }
}
