/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientSearchAdmin } from "../funcs/clientSearchAdmin.js";
import { clientSearchAutocomplete } from "../funcs/clientSearchAutocomplete.js";
import { clientSearchExecute } from "../funcs/clientSearchExecute.js";
import { clientSearchGetFeed } from "../funcs/clientSearchGetFeed.js";
import { clientSearchRecommendations } from "../funcs/clientSearchRecommendations.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Search extends ClientSDK {
  /**
   * Search the index (admin)
   *
   * @remarks
   * Retrieves results for search query without respect for permissions. This is available only to privileged users.
   */
  async admin(
    searchRequest?: components.SearchRequest | undefined,
    xGleanActAs?: string | undefined,
    xGleanAuthType?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.SearchResponse> {
    return unwrapAsync(clientSearchAdmin(
      this,
      searchRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    ));
  }

  /**
   * Autocomplete
   *
   * @remarks
   * Retrieve query suggestions, operators and documents for the given partially typed query.
   */
  async autocomplete(
    autocompleteRequest: components.AutocompleteRequest,
    xGleanActAs?: string | undefined,
    xGleanAuthType?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.AutocompleteResponse> {
    return unwrapAsync(clientSearchAutocomplete(
      this,
      autocompleteRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    ));
  }

  /**
   * Feed of documents and events
   *
   * @remarks
   * The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.
   */
  async getFeed(
    feedRequest: components.FeedRequest,
    xGleanActAs?: string | undefined,
    xGleanAuthType?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.FeedResponse> {
    return unwrapAsync(clientSearchGetFeed(
      this,
      feedRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    ));
  }

  /**
   * Recommend documents
   *
   * @remarks
   * Retrieve recommended documents for the given URL or Glean Document ID.
   */
  async recommendations(
    recommendationsRequest?: components.RecommendationsRequest | undefined,
    xGleanActAs?: string | undefined,
    xGleanAuthType?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.ResultsResponse | undefined> {
    return unwrapAsync(clientSearchRecommendations(
      this,
      recommendationsRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    ));
  }

  /**
   * Search
   *
   * @remarks
   * Retrieve results from the index for the given query and filters.
   */
  async execute(
    searchRequest?: components.SearchRequest | undefined,
    xGleanActAs?: string | undefined,
    xGleanAuthType?: string | undefined,
    options?: RequestOptions,
  ): Promise<components.SearchResponse> {
    return unwrapAsync(clientSearchExecute(
      this,
      searchRequest,
      xGleanActAs,
      xGleanAuthType,
      options,
    ));
  }
}
