/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { indexingTroubleshootingCheckAccess } from "../funcs/indexingTroubleshootingCheckAccess.js";
import { indexingTroubleshootingDebugUser } from "../funcs/indexingTroubleshootingDebugUser.js";
import { indexingTroubleshootingGetDatasourceStatus } from "../funcs/indexingTroubleshootingGetDatasourceStatus.js";
import { indexingTroubleshootingGetDocumentCount } from "../funcs/indexingTroubleshootingGetDocumentCount.js";
import { indexingTroubleshootingGetStatus } from "../funcs/indexingTroubleshootingGetStatus.js";
import { indexingTroubleshootingGetUserCount } from "../funcs/indexingTroubleshootingGetUserCount.js";
import { indexingTroubleshootingPostDocumentDebug } from "../funcs/indexingTroubleshootingPostDocumentDebug.js";
import { indexingTroubleshootingPostDocumentsDebug } from "../funcs/indexingTroubleshootingPostDocumentsDebug.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Troubleshooting extends ClientSDK {
  /**
   * Beta: Get datasource status
   *
   * @remarks
   * Gather information about the datasource's overall status. Currently in beta, might undergo breaking changes without prior notice.
   *
   * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
   */
  async getDatasourceStatus(
    request: operations.PostApiIndexV1DebugDatasourceStatusRequest,
    options?: RequestOptions,
  ): Promise<components.DebugDatasourceStatusResponse> {
    return unwrapAsync(indexingTroubleshootingGetDatasourceStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Beta: Get document information
   *
   * @remarks
   * Gives various information that would help in debugging related to a particular document. Currently in beta, might undergo breaking changes without prior notice.
   *
   * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
   */
  async postDocumentDebug(
    request: operations.PostApiIndexV1DebugDatasourceDocumentRequest,
    options?: RequestOptions,
  ): Promise<components.DebugDocumentResponse> {
    return unwrapAsync(indexingTroubleshootingPostDocumentDebug(
      this,
      request,
      options,
    ));
  }

  /**
   * Beta: Get information of a batch of documents
   *
   * @remarks
   * Gives various information that would help in debugging related to a batch of documents. Currently in beta, might undergo breaking changes without prior notice.
   *
   * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
   */
  async postDocumentsDebug(
    request: operations.PostApiIndexV1DebugDatasourceDocumentsRequest,
    options?: RequestOptions,
  ): Promise<components.DebugDocumentsResponse> {
    return unwrapAsync(indexingTroubleshootingPostDocumentsDebug(
      this,
      request,
      options,
    ));
  }

  /**
   * Beta: Get user information
   *
   * @remarks
   * Gives various information that would help in debugging related to a particular user. Currently in beta, might undergo breaking changes without prior notice.
   *
   * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
   */
  async debugUser(
    request: operations.PostApiIndexV1DebugDatasourceUserRequest,
    options?: RequestOptions,
  ): Promise<components.DebugUserResponse> {
    return unwrapAsync(indexingTroubleshootingDebugUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Check document access
   *
   * @remarks
   * Check if a given user has access to access a document in a custom datasource
   *
   * Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
   */
  async checkAccess(
    request: components.CheckDocumentAccessRequest,
    options?: RequestOptions,
  ): Promise<components.CheckDocumentAccessResponse> {
    return unwrapAsync(indexingTroubleshootingCheckAccess(
      this,
      request,
      options,
    ));
  }

  /**
   * Get document upload and indexing status
   *
   * @remarks
   * Intended for debugging/validation. Fetches the current upload and indexing status of documents.
   *
   * Tip: Use [/debug/{datasource}/document](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-document) for richer information.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getStatus(
    request: components.GetDocumentStatusRequest,
    options?: RequestOptions,
  ): Promise<components.GetDocumentStatusResponse> {
    return unwrapAsync(indexingTroubleshootingGetStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Get document count
   *
   * @remarks
   * Fetches document count for the specified custom datasource.
   *
   * Tip: Use [/debug/{datasource}/status](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-status) for richer information.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getDocumentCount(
    request: components.GetDocumentCountRequest,
    options?: RequestOptions,
  ): Promise<components.GetDocumentCountResponse> {
    return unwrapAsync(indexingTroubleshootingGetDocumentCount(
      this,
      request,
      options,
    ));
  }

  /**
   * Get user count
   *
   * @remarks
   * Fetches user count for the specified custom datasource.
   *
   * Tip: Use [/debug/{datasource}/status](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-status) for richer information.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getUserCount(
    request: components.GetUserCountRequest,
    options?: RequestOptions,
  ): Promise<components.GetUserCountResponse> {
    return unwrapAsync(indexingTroubleshootingGetUserCount(
      this,
      request,
      options,
    ));
  }
}
